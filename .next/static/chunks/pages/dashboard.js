/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["pages/dashboard"],{

/***/ "./node_modules/ag-charts-community/dist/package/main.esm.js":
/*!*******************************************************************!*\
  !*** ./node_modules/ag-charts-community/dist/package/main.esm.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AgChart: function() { return /* binding */ AgChart; },\n/* harmony export */   AgCharts: function() { return /* binding */ AgCharts; },\n/* harmony export */   AgErrorBarSupportedSeriesTypes: function() { return /* binding */ AgErrorBarSupportedSeriesTypes; },\n/* harmony export */   Marker: function() { return /* binding */ Marker; },\n/* harmony export */   VERSION: function() { return /* binding */ VERSION; },\n/* harmony export */   _ModuleSupport: function() { return /* binding */ moduleSupport; },\n/* harmony export */   _Scale: function() { return /* binding */ sparklinesScale; },\n/* harmony export */   _Scene: function() { return /* binding */ integratedChartsScene; },\n/* harmony export */   _Theme: function() { return /* binding */ integratedChartsTheme; },\n/* harmony export */   _Util: function() { return /* binding */ sparklinesUtil; },\n/* harmony export */   __FORCE_MODULE_DETECTION: function() { return /* binding */ __FORCE_MODULE_DETECTION$1; },\n/* harmony export */   time: function() { return /* binding */ index; }\n/* harmony export */ });\nconst AgErrorBarSupportedSeriesTypes = ['bar', 'line', 'scatter'];\n\n/**\r\n * Internal Use Only: Used to ensure this file is treated as a module until we can use moduleDetection flag in Ts v4.7\r\n */\r\nconst __FORCE_MODULE_DETECTION$1 = 0;\n\n/**\r\n * The interval methods don't mutate Date parameters.\r\n */\r\nclass TimeInterval {\r\n    constructor(_encode, _decode, _rangeCallback) {\r\n        this._encode = _encode;\r\n        this._decode = _decode;\r\n        this._rangeCallback = _rangeCallback;\r\n    }\r\n    /**\r\n     * Returns a new date representing the latest interval boundary date before or equal to date.\r\n     * For example, `day.floor(date)` typically returns 12:00 AM local time on the given date.\r\n     * @param date\r\n     */\r\n    floor(date) {\r\n        const d = new Date(date);\r\n        const e = this._encode(d);\r\n        return this._decode(e);\r\n    }\r\n    /**\r\n     * Returns a new date representing the earliest interval boundary date after or equal to date.\r\n     * @param date\r\n     */\r\n    ceil(date) {\r\n        const d = new Date(Number(date) - 1);\r\n        const e = this._encode(d);\r\n        return this._decode(e + 1);\r\n    }\r\n    /**\r\n     * Returns an array of dates representing every interval boundary after or equal to start (inclusive) and before stop (exclusive).\r\n     * @param start Range start.\r\n     * @param stop Range end.\r\n     * @param extend If specified, the requested range will be extended to the closest \"nice\" values.\r\n     */\r\n    range(start, stop, extend) {\r\n        var _a;\r\n        const rangeCallback = (_a = this._rangeCallback) === null || _a === void 0 ? void 0 : _a.call(this, start, stop);\r\n        const e0 = this._encode(extend ? this.floor(start) : this.ceil(start));\r\n        const e1 = this._encode(extend ? this.ceil(stop) : this.floor(stop));\r\n        if (e1 < e0) {\r\n            return [];\r\n        }\r\n        const range = [];\r\n        for (let e = e0; e <= e1; e++) {\r\n            const d = this._decode(e);\r\n            range.push(d);\r\n        }\r\n        rangeCallback === null || rangeCallback === void 0 ? void 0 : rangeCallback();\r\n        return range;\r\n    }\r\n}\r\nclass CountableTimeInterval extends TimeInterval {\r\n    getOffset(snapTo, step) {\r\n        const s = typeof snapTo === 'number' || snapTo instanceof Date ? this._encode(new Date(snapTo)) : 0;\r\n        return Math.floor(s) % step;\r\n    }\r\n    /**\r\n     * Returns a filtered view of this interval representing every step'th date.\r\n     * It can be a number of minutes, hours, days etc.\r\n     * Must be a positive integer.\r\n     * @param step\r\n     */\r\n    every(step, options) {\r\n        let offset = 0;\r\n        let rangeCallback;\r\n        const { snapTo = 'start' } = options !== null && options !== void 0 ? options : {};\r\n        if (typeof snapTo === 'string') {\r\n            const initialOffset = offset;\r\n            rangeCallback = (start, stop) => {\r\n                const s = snapTo === 'start' ? start : stop;\r\n                offset = this.getOffset(s, step);\r\n                return () => (offset = initialOffset);\r\n            };\r\n        }\r\n        else if (typeof snapTo === 'number') {\r\n            offset = this.getOffset(new Date(snapTo), step);\r\n        }\r\n        else if (snapTo instanceof Date) {\r\n            offset = this.getOffset(snapTo, step);\r\n        }\r\n        const encode = (date) => {\r\n            const e = this._encode(date);\r\n            return Math.floor((e - offset) / step);\r\n        };\r\n        const decode = (encoded) => {\r\n            return this._decode(encoded * step + offset);\r\n        };\r\n        return new TimeInterval(encode, decode, rangeCallback);\r\n    }\r\n}\n\nfunction encode$b(date) {\r\n    return date.getTime();\r\n}\r\nfunction decode$b(encoded) {\r\n    return new Date(encoded);\r\n}\r\nconst millisecond = new CountableTimeInterval(encode$b, decode$b);\n\n// Common time unit sizes in milliseconds.\r\nnew Date(0).getFullYear();\r\nconst durationSecond = 1000;\r\nconst durationMinute = durationSecond * 60;\r\nconst durationHour = durationMinute * 60;\r\nconst durationDay = durationHour * 24;\r\nconst durationWeek = durationDay * 7;\r\nconst durationMonth = durationDay * 30;\r\nconst durationYear = durationDay * 365;\n\nconst offset$2 = new Date().getTimezoneOffset() * durationMinute;\r\nfunction encode$a(date) {\r\n    return Math.floor((date.getTime() - offset$2) / durationSecond);\r\n}\r\nfunction decode$a(encoded) {\r\n    return new Date(offset$2 + encoded * durationSecond);\r\n}\r\nconst second = new CountableTimeInterval(encode$a, decode$a);\n\nconst offset$1 = new Date().getTimezoneOffset() * durationMinute;\r\nfunction encode$9(date) {\r\n    return Math.floor((date.getTime() - offset$1) / durationMinute);\r\n}\r\nfunction decode$9(encoded) {\r\n    return new Date(offset$1 + encoded * durationMinute);\r\n}\r\nconst minute = new CountableTimeInterval(encode$9, decode$9);\n\nconst offset = new Date().getTimezoneOffset() * durationMinute;\r\nfunction encode$8(date) {\r\n    return Math.floor((date.getTime() - offset) / durationHour);\r\n}\r\nfunction decode$8(encoded) {\r\n    return new Date(offset + encoded * durationHour);\r\n}\r\nconst hour = new CountableTimeInterval(encode$8, decode$8);\n\nfunction encode$7(date) {\r\n    const tzOffsetMs = date.getTimezoneOffset() * 60000;\r\n    return Math.floor((date.getTime() - tzOffsetMs) / durationDay);\r\n}\r\nfunction decode$7(encoded) {\r\n    const d = new Date(1970, 0, 1);\r\n    d.setDate(d.getDate() + encoded);\r\n    return d;\r\n}\r\nconst day = new CountableTimeInterval(encode$7, decode$7);\n\n// Set date to n-th day of the week.\r\nfunction weekday(n) {\r\n    const base = new Date(2023, 0, 1 + n).getTime();\r\n    function encode(date) {\r\n        const dateMs = date.getTime();\r\n        return Math.floor((dateMs - base) / durationWeek);\r\n    }\r\n    function decode(encoded) {\r\n        const d = new Date(base);\r\n        d.setDate(d.getDate() + encoded * 7);\r\n        return d;\r\n    }\r\n    return new CountableTimeInterval(encode, decode);\r\n}\r\nconst sunday = weekday(0);\r\nconst monday = weekday(1);\r\nconst tuesday = weekday(2);\r\nconst wednesday = weekday(3);\r\nconst thursday = weekday(4);\r\nconst friday = weekday(5);\r\nconst saturday = weekday(6);\n\nfunction encode$6(date) {\r\n    return date.getFullYear() * 12 + date.getMonth();\r\n}\r\nfunction decode$6(encoded) {\r\n    const year = Math.floor(encoded / 12);\r\n    const month = encoded - year * 12;\r\n    return new Date(year, month, 1);\r\n}\r\nconst month = new CountableTimeInterval(encode$6, decode$6);\n\nfunction encode$5(date) {\r\n    return date.getFullYear();\r\n}\r\nfunction decode$5(encoded) {\r\n    // Note: assigning years through the constructor\r\n    // will break for years 0 - 99 AD (will turn 1900's).\r\n    const d = new Date();\r\n    d.setFullYear(encoded);\r\n    d.setMonth(0, 1);\r\n    d.setHours(0, 0, 0, 0);\r\n    return d;\r\n}\r\nconst year = new CountableTimeInterval(encode$5, decode$5);\n\nfunction encode$4(date) {\r\n    return Math.floor(date.getTime() / durationMinute);\r\n}\r\nfunction decode$4(encoded) {\r\n    return new Date(encoded * durationMinute);\r\n}\r\nconst utcMinute = new CountableTimeInterval(encode$4, decode$4);\n\nfunction encode$3(date) {\r\n    return Math.floor(date.getTime() / durationHour);\r\n}\r\nfunction decode$3(encoded) {\r\n    return new Date(encoded * durationHour);\r\n}\r\nconst utcHour = new CountableTimeInterval(encode$3, decode$3);\n\nfunction encode$2(date) {\r\n    return Math.floor(date.getTime() / durationDay);\r\n}\r\nfunction decode$2(encoded) {\r\n    const d = new Date(0);\r\n    d.setUTCDate(d.getUTCDate() + encoded);\r\n    d.setUTCHours(0, 0, 0, 0);\r\n    return d;\r\n}\r\nconst utcDay = new CountableTimeInterval(encode$2, decode$2);\n\nfunction encode$1(date) {\r\n    return date.getUTCFullYear() * 12 + date.getUTCMonth();\r\n}\r\nfunction decode$1(encoded) {\r\n    const year = Math.floor(encoded / 12);\r\n    const month = encoded - year * 12;\r\n    return new Date(Date.UTC(year, month, 1));\r\n}\r\nconst utcMonth = new CountableTimeInterval(encode$1, decode$1);\n\nfunction encode(date) {\r\n    return date.getUTCFullYear();\r\n}\r\nfunction decode(encoded) {\r\n    // Note: assigning years through the constructor\r\n    // will break for years 0 - 99 AD (will turn 1900's).\r\n    const d = new Date();\r\n    d.setUTCFullYear(encoded);\r\n    d.setUTCMonth(0, 1);\r\n    d.setUTCHours(0, 0, 0, 0);\r\n    return d;\r\n}\r\nconst utcYear = new CountableTimeInterval(encode, decode);\n\nvar index = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    millisecond: millisecond,\n    second: second,\n    minute: minute,\n    hour: hour,\n    day: day,\n    sunday: sunday,\n    monday: monday,\n    tuesday: tuesday,\n    wednesday: wednesday,\n    thursday: thursday,\n    friday: friday,\n    saturday: saturday,\n    month: month,\n    year: year,\n    utcMinute: utcMinute,\n    utcHour: utcHour,\n    utcDay: utcDay,\n    utcMonth: utcMonth,\n    utcYear: utcYear\n});\n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n\r\nfunction __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nfunction __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nfunction __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nfunction __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\ntypeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\r\n    var e = new Error(message);\r\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\r\n};\n\nconst enterpriseModule = {\r\n    isEnterprise: false,\r\n};\n\nclass BaseModuleInstance {\r\n    constructor() {\r\n        this.destroyFns = [];\r\n    }\r\n    destroy() {\r\n        for (const destroyFn of this.destroyFns) {\r\n            destroyFn();\r\n        }\r\n    }\r\n}\r\nconst REGISTERED_MODULES = [];\r\nfunction registerModule(module) {\r\n    const otherModule = REGISTERED_MODULES.find((other) => {\r\n        return (module.type === other.type &&\r\n            module.optionsKey === other.optionsKey &&\r\n            module.identifier === other.identifier);\r\n    });\r\n    if (otherModule) {\r\n        if (module.packageType === 'enterprise' && otherModule.packageType === 'community') {\r\n            // Replace the community module with an enterprise version\r\n            const index = REGISTERED_MODULES.indexOf(otherModule);\r\n            REGISTERED_MODULES.splice(index, 1, module);\r\n        }\r\n    }\r\n    else {\r\n        // Simply register the module\r\n        REGISTERED_MODULES.push(module);\r\n    }\r\n}\r\nfunction hasRegisteredEnterpriseModules() {\r\n    return REGISTERED_MODULES.some((m) => m.packageType === 'enterprise');\r\n}\r\nconst MODULE_CONFLICTS = new Map();\r\nfunction registerModuleConflicts(source, targets) {\r\n    MODULE_CONFLICTS.set(source, targets);\r\n}\n\nfunction extent(values) {\r\n    const { length } = values;\r\n    if (length === 0) {\r\n        return undefined;\r\n    }\r\n    let min = Infinity;\r\n    let max = -Infinity;\r\n    for (let i = 0; i < length; i++) {\r\n        let v = values[i];\r\n        if (v instanceof Date) {\r\n            v = v.getTime();\r\n        }\r\n        if (typeof v !== 'number') {\r\n            continue;\r\n        }\r\n        if (v < min) {\r\n            min = v;\r\n        }\r\n        if (v > max) {\r\n            max = v;\r\n        }\r\n    }\r\n    const extent = [min, max];\r\n    if (extent.some((v) => !isFinite(v))) {\r\n        return undefined;\r\n    }\r\n    return extent;\r\n}\r\nfunction normalisedExtent(d, min, max) {\r\n    return normalisedExtentWithMetadata(d, min, max).extent;\r\n}\r\nfunction normalisedExtentWithMetadata(d, min, max) {\r\n    var _a;\r\n    let clipped = false;\r\n    if (d.length > 2) {\r\n        d = (_a = extent(d)) !== null && _a !== void 0 ? _a : [NaN, NaN];\r\n    }\r\n    if (!isNaN(min)) {\r\n        clipped || (clipped = min > d[0]);\r\n        d = [min, d[1]];\r\n    }\r\n    if (!isNaN(max)) {\r\n        clipped || (clipped = max < d[1]);\r\n        d = [d[0], max];\r\n    }\r\n    if (d[0] > d[1]) {\r\n        d = [];\r\n    }\r\n    return { extent: d, clipped };\r\n}\r\nfunction arraysEqual(a, b) {\r\n    if (a == null || b == null || a.length !== b.length) {\r\n        return false;\r\n    }\r\n    for (let i = 0; i < a.length; i++) {\r\n        if (Array.isArray(a[i]) && Array.isArray(b[i])) {\r\n            if (!arraysEqual(a[i], b[i])) {\r\n                return false;\r\n            }\r\n        }\r\n        else if (a[i] !== b[i]) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nfunction toArray(value) {\r\n    if (typeof value === 'undefined') {\r\n        return [];\r\n    }\r\n    return Array.isArray(value) ? value : [value];\r\n}\n\nconst doOnceFlags = {};\r\n/**\r\n * If the key was passed before, then doesn't execute the func\r\n */\r\nfunction doOnce(func, key) {\r\n    if (doOnceFlags[key]) {\r\n        return;\r\n    }\r\n    func();\r\n    doOnceFlags[key] = true;\r\n}\n\n/* eslint-disable no-console */\r\nconst Logger = {\r\n    log(...logContent) {\r\n        console.log(...logContent);\r\n    },\r\n    warn(message, ...logContent) {\r\n        console.warn(`AG Charts - ${message}`, ...logContent);\r\n    },\r\n    error(message, ...logContent) {\r\n        if (typeof message === 'object') {\r\n            console.error(`AG Charts error`, message, ...logContent);\r\n        }\r\n        else {\r\n            console.error(`AG Charts - ${message}`, ...logContent);\r\n        }\r\n    },\r\n    table(...logContent) {\r\n        console.table(...logContent);\r\n    },\r\n    warnOnce(message, ...logContent) {\r\n        doOnce(() => Logger.warn(message, ...logContent), `Logger.warn: ${message}`);\r\n    },\r\n    errorOnce(message, ...logContent) {\r\n        doOnce(() => Logger.error(message, ...logContent), `Logger.warn: ${message}`);\r\n    },\r\n};\n\nfunction windowValue(name) {\r\n    /**\r\n     * Redeclaration of window that is safe for use with Gatsby server-side (webpack) compilation.\r\n     */\r\n    const WINDOW = typeof window !== 'undefined'\r\n        ? window\r\n        : // typeof global !== 'undefined' ? (global as any) :\r\n            undefined;\r\n    return WINDOW === null || WINDOW === void 0 ? void 0 : WINDOW[name];\r\n}\n\nconst LONG_TIME_PERIOD_THRESHOLD = 2000;\r\nlet timeOfLastLog = Date.now();\r\nconst logTimeGap = () => {\r\n    const timeSinceLastLog = Date.now() - timeOfLastLog;\r\n    if (timeSinceLastLog > LONG_TIME_PERIOD_THRESHOLD) {\r\n        const prettyDuration = (Math.floor(timeSinceLastLog / 100) / 10).toFixed(1);\r\n        Logger.log(`**** ${prettyDuration}s since last log message ****`);\r\n    }\r\n    timeOfLastLog = Date.now();\r\n};\r\nconst Debug = {\r\n    create(...debugSelectors) {\r\n        return (...logContent) => {\r\n            if (Debug.check(...debugSelectors)) {\r\n                if (typeof logContent[0] === 'function') {\r\n                    logContent = toArray(logContent[0]());\r\n                }\r\n                logTimeGap();\r\n                Logger.log(...logContent);\r\n            }\r\n        };\r\n    },\r\n    check(...debugSelectors) {\r\n        if (debugSelectors.length === 0) {\r\n            debugSelectors.push(true);\r\n        }\r\n        const chartDebug = toArray(windowValue('agChartsDebug'));\r\n        return chartDebug.some((selector) => debugSelectors.includes(selector));\r\n    },\r\n};\n\nconst BREAK_TRANSFORM_CHAIN = Symbol('BREAK');\r\nconst CONFIG_KEY = '__decorator_config';\r\nfunction initialiseConfig(target, propertyKeyOrSymbol, propertyKey, valueStoreKey) {\r\n    if (Object.getOwnPropertyDescriptor(target, CONFIG_KEY) == null) {\r\n        Object.defineProperty(target, CONFIG_KEY, { value: {} });\r\n    }\r\n    const config = target[CONFIG_KEY];\r\n    if (config[propertyKey] != null) {\r\n        return config[propertyKey];\r\n    }\r\n    config[propertyKey] = { setters: [], getters: [] };\r\n    const descriptor = Object.getOwnPropertyDescriptor(target, propertyKeyOrSymbol);\r\n    const prevSet = descriptor === null || descriptor === void 0 ? void 0 : descriptor.set;\r\n    const prevGet = descriptor === null || descriptor === void 0 ? void 0 : descriptor.get;\r\n    const getter = function () {\r\n        var _a, _b;\r\n        let value = prevGet ? prevGet.call(this) : this[valueStoreKey];\r\n        for (const transformFn of (_b = (_a = config[propertyKey]) === null || _a === void 0 ? void 0 : _a.getters) !== null && _b !== void 0 ? _b : []) {\r\n            value = transformFn(this, propertyKeyOrSymbol, value);\r\n            if (value === BREAK_TRANSFORM_CHAIN) {\r\n                return undefined;\r\n            }\r\n        }\r\n        return value;\r\n    };\r\n    const setter = function (value) {\r\n        var _a, _b;\r\n        const setters = (_b = (_a = config[propertyKey]) === null || _a === void 0 ? void 0 : _a.setters) !== null && _b !== void 0 ? _b : [];\r\n        let oldValue;\r\n        if (setters.some((f) => f.length > 2)) {\r\n            // Lazily retrieve old value.\r\n            oldValue = prevGet ? prevGet.call(this) : this[valueStoreKey];\r\n        }\r\n        for (const transformFn of setters) {\r\n            value = transformFn(this, propertyKeyOrSymbol, value, oldValue);\r\n            if (value === BREAK_TRANSFORM_CHAIN) {\r\n                return;\r\n            }\r\n        }\r\n        if (prevSet) {\r\n            prevSet.call(this, value);\r\n        }\r\n        else {\r\n            this[valueStoreKey] = value;\r\n        }\r\n    };\r\n    Object.defineProperty(target, propertyKeyOrSymbol, {\r\n        set: setter,\r\n        get: getter,\r\n        enumerable: true,\r\n        configurable: false,\r\n    });\r\n    return config[propertyKey];\r\n}\r\nfunction addTransformToInstanceProperty(setTransform, getTransform) {\r\n    return (target, propertyKeyOrSymbol) => {\r\n        const propertyKey = propertyKeyOrSymbol.toString();\r\n        const valueStoreKey = `__${propertyKey}`;\r\n        const { getters, setters } = initialiseConfig(target, propertyKeyOrSymbol, propertyKey, valueStoreKey);\r\n        setters.push(setTransform);\r\n        if (getTransform) {\r\n            getters.unshift(getTransform);\r\n        }\r\n    };\r\n}\r\nfunction isDecoratedObject(target) {\r\n    return typeof target !== 'undefined' && CONFIG_KEY in target;\r\n}\r\nfunction listDecoratedProperties(target) {\r\n    const targets = new Set();\r\n    while (isDecoratedObject(target)) {\r\n        targets.add(target === null || target === void 0 ? void 0 : target[CONFIG_KEY]);\r\n        target = Object.getPrototypeOf(target);\r\n    }\r\n    return Array.from(targets).flatMap((configMap) => Object.keys(configMap));\r\n}\r\nfunction extractDecoratedProperties(target) {\r\n    return listDecoratedProperties(target).reduce((result, key) => {\r\n        var _a;\r\n        result[key] = (_a = target[key]) !== null && _a !== void 0 ? _a : null;\r\n        return result;\r\n    }, {});\r\n}\n\nfunction createDeprecationWarning() {\r\n    return (key, message) => {\r\n        const msg = [`Property [${key}] is deprecated.`, message].filter((v) => v != null).join(' ');\r\n        Logger.warnOnce(msg);\r\n    };\r\n}\n\nconst CLASS_INSTANCE_TYPE = 'class-instance';\r\n/**\r\n * Performs a JSON-diff between a source and target JSON structure.\r\n *\r\n * On a per property basis, takes the target property value where:\r\n * - types are different.\r\n * - type is primitive.\r\n * - type is array and length or content have changed.\r\n *\r\n * Recurses for object types.\r\n *\r\n * @param source starting point for diff\r\n * @param target target for diff vs. source\r\n *\r\n * @returns `null` if no differences, or an object with the subset of properties that have changed.\r\n */\r\nfunction jsonDiff(source, target) {\r\n    const sourceType = classify(source);\r\n    const targetType = classify(target);\r\n    if (targetType === 'array') {\r\n        const targetArray = target;\r\n        if (sourceType !== 'array' || source.length !== targetArray.length) {\r\n            return [...targetArray];\r\n        }\r\n        if (targetArray.some((targetElement, i) => jsonDiff(source === null || source === void 0 ? void 0 : source[i], targetElement) != null)) {\r\n            return [...targetArray];\r\n        }\r\n        return null;\r\n    }\r\n    if (targetType === 'primitive') {\r\n        if (sourceType !== 'primitive') {\r\n            return Object.assign({}, target);\r\n        }\r\n        if (source !== target) {\r\n            return target;\r\n        }\r\n        return null;\r\n    }\r\n    const lhs = source || {};\r\n    const rhs = target || {};\r\n    const allProps = new Set([...Object.keys(lhs), ...Object.keys(rhs)]);\r\n    let propsChangedCount = 0;\r\n    const result = {};\r\n    for (const prop of allProps) {\r\n        // Cheap-and-easy equality check.\r\n        if (lhs[prop] === rhs[prop]) {\r\n            continue;\r\n        }\r\n        const take = (v) => {\r\n            result[prop] = v;\r\n            propsChangedCount++;\r\n        };\r\n        const lhsType = classify(lhs[prop]);\r\n        const rhsType = classify(rhs[prop]);\r\n        if (lhsType !== rhsType) {\r\n            // Types changed, just take RHS.\r\n            take(rhs[prop]);\r\n            continue;\r\n        }\r\n        if (rhsType === 'primitive' || rhsType === null) {\r\n            take(rhs[prop]);\r\n            continue;\r\n        }\r\n        if (rhsType === 'array' && lhs[prop].length !== rhs[prop].length) {\r\n            // Arrays are different sizes, so just take target array.\r\n            take(rhs[prop]);\r\n            continue;\r\n        }\r\n        if (rhsType === CLASS_INSTANCE_TYPE) {\r\n            // Don't try to do anything tricky with array diffs!\r\n            take(rhs[prop]);\r\n            continue;\r\n        }\r\n        if (rhsType === 'function' && lhs[prop] !== rhs[prop]) {\r\n            take(rhs[prop]);\r\n            continue;\r\n        }\r\n        const diff = jsonDiff(lhs[prop], rhs[prop]);\r\n        if (diff !== null) {\r\n            take(diff);\r\n        }\r\n    }\r\n    return propsChangedCount === 0 ? null : result;\r\n}\r\n/**\r\n * Special value used by `jsonMerge` to signal that a property should be removed from the merged\r\n * output.\r\n */\r\nconst DELETE = Symbol('<delete-property>');\r\nconst NOT_SPECIFIED = Symbol('<unspecified-property>');\r\n/**\r\n * Merge together the provide JSON object structures, with the precedence of application running\r\n * from higher indexes to lower indexes.\r\n *\r\n * Deep-clones all objects to avoid mutation of the inputs changing the output object. For arrays,\r\n * just performs a deep-clone of the entire array, no merging of elements attempted.\r\n *\r\n * @param json all json objects to merge\r\n * @param opts merge options\r\n * @param opts.avoidDeepClone contains a list of properties where deep clones should be avoided\r\n *\r\n * @returns the combination of all the json inputs\r\n */\r\nfunction jsonMerge(json, opts) {\r\n    var _a;\r\n    const avoidDeepClone = (_a = opts === null || opts === void 0 ? void 0 : opts.avoidDeepClone) !== null && _a !== void 0 ? _a : [];\r\n    const jsonTypes = json.map((v) => classify(v));\r\n    if (jsonTypes.some((v) => v === 'array')) {\r\n        // Clone final array.\r\n        const finalValue = json[json.length - 1];\r\n        if (Array.isArray(finalValue)) {\r\n            return finalValue.map((v) => {\r\n                const type = classify(v);\r\n                if (type === 'array')\r\n                    return jsonMerge([[], v], opts);\r\n                if (type === 'object')\r\n                    return jsonMerge([{}, v], opts);\r\n                return v;\r\n            });\r\n        }\r\n        return finalValue;\r\n    }\r\n    const result = {};\r\n    const props = new Set(json.map((v) => (v != null ? Object.keys(v) : [])).reduce((r, n) => r.concat(n), []));\r\n    for (const nextProp of props) {\r\n        const values = json\r\n            .map((j) => {\r\n            if (j != null && typeof j === 'object' && nextProp in j) {\r\n                return j[nextProp];\r\n            }\r\n            return NOT_SPECIFIED;\r\n        })\r\n            .filter((v) => v !== NOT_SPECIFIED);\r\n        if (values.length === 0) {\r\n            continue;\r\n        }\r\n        const lastValue = values[values.length - 1];\r\n        if (lastValue === DELETE) {\r\n            continue;\r\n        }\r\n        const types = values.map((v) => classify(v));\r\n        const type = types[0];\r\n        if (types.some((t) => t !== type)) {\r\n            // Short-circuit if mismatching types.\r\n            result[nextProp] = lastValue;\r\n            continue;\r\n        }\r\n        if ((type === 'array' || type === 'object') && !avoidDeepClone.includes(nextProp)) {\r\n            result[nextProp] = jsonMerge(values, opts);\r\n        }\r\n        else if (type === 'array') {\r\n            // Arrays need to be shallow copied to avoid external mutation and allow jsonDiff to\r\n            // detect changes.\r\n            result[nextProp] = [...lastValue];\r\n        }\r\n        else {\r\n            // Just directly assign/overwrite.\r\n            result[nextProp] = lastValue;\r\n        }\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * Recursively apply a JSON object into a class-hierarchy, optionally instantiating certain classes\r\n * by property name.\r\n *\r\n * @param target to apply source JSON properties into\r\n * @param source to be applied\r\n * @param params\r\n * @param params.path path for logging/error purposes, to aid with pinpointing problems\r\n * @param params.matcherPath path for pattern matching, to lookup allowedTypes override.\r\n * @param params.skip property names to skip from the source\r\n * @param params.constructors dictionary of property name to class constructors for properties that\r\n *                            require object construction\r\n * @param params.constructedArrays map stores arrays which items should be initialised\r\n *                                 using a class constructor\r\n * @param params.allowedTypes overrides by path for allowed property types\r\n */\r\nfunction jsonApply(target, source, params = {}) {\r\n    var _a, _b, _c;\r\n    const { path = undefined, matcherPath = path ? path.replace(/(\\[[0-9+]+])/i, '[]') : undefined, skip = [], constructors = {}, constructedArrays = new WeakMap(), allowedTypes = {}, idx, } = params;\r\n    if (target == null) {\r\n        throw new Error(`AG Charts - target is uninitialised: ${path !== null && path !== void 0 ? path : '<root>'}`);\r\n    }\r\n    if (source == null) {\r\n        return target;\r\n    }\r\n    const targetAny = target;\r\n    if (idx != null && '_declarationOrder' in targetAny) {\r\n        targetAny['_declarationOrder'] = idx;\r\n    }\r\n    const targetType = classify(target);\r\n    for (const property in source) {\r\n        const propertyMatcherPath = `${matcherPath ? matcherPath + '.' : ''}${property}`;\r\n        if (skip.indexOf(propertyMatcherPath) >= 0) {\r\n            continue;\r\n        }\r\n        const newValue = source[property];\r\n        const propertyPath = `${path ? path + '.' : ''}${property}`;\r\n        const targetClass = targetAny.constructor;\r\n        const currentValue = targetAny[property];\r\n        let ctr = (_a = constructors[propertyMatcherPath]) !== null && _a !== void 0 ? _a : constructors[property];\r\n        try {\r\n            const currentValueType = classify(currentValue);\r\n            const newValueType = classify(newValue);\r\n            if (targetType === CLASS_INSTANCE_TYPE &&\r\n                !(property in target || Object.prototype.hasOwnProperty.call(targetAny, property))) {\r\n                Logger.warn(`unable to set [${propertyPath}] in ${targetClass === null || targetClass === void 0 ? void 0 : targetClass.name} - property is unknown`);\r\n                continue;\r\n            }\r\n            const allowableTypes = (_b = allowedTypes[propertyMatcherPath]) !== null && _b !== void 0 ? _b : [currentValueType];\r\n            if (currentValueType === CLASS_INSTANCE_TYPE && newValueType === 'object') {\r\n                // Allowed, this is the common case! - do not error.\r\n            }\r\n            else if (currentValueType != null && newValueType != null && !allowableTypes.includes(newValueType)) {\r\n                Logger.warn(`unable to set [${propertyPath}] in ${targetClass === null || targetClass === void 0 ? void 0 : targetClass.name} - can't apply type of [${newValueType}], allowed types are: [${allowableTypes}]`);\r\n                continue;\r\n            }\r\n            if (newValueType === 'array') {\r\n                ctr = (_c = ctr !== null && ctr !== void 0 ? ctr : constructedArrays.get(currentValue)) !== null && _c !== void 0 ? _c : constructors[`${propertyMatcherPath}[]`];\r\n                if (ctr != null) {\r\n                    const newValueArray = newValue;\r\n                    targetAny[property] = newValueArray.map((v, idx) => jsonApply(new ctr(), v, Object.assign(Object.assign({}, params), { path: propertyPath, matcherPath: propertyMatcherPath + '[]', idx })));\r\n                }\r\n                else {\r\n                    targetAny[property] = newValue;\r\n                }\r\n            }\r\n            else if (newValueType === CLASS_INSTANCE_TYPE) {\r\n                targetAny[property] = newValue;\r\n            }\r\n            else if (newValueType === 'object') {\r\n                if (currentValue != null) {\r\n                    jsonApply(currentValue, newValue, Object.assign(Object.assign({}, params), { path: propertyPath, matcherPath: propertyMatcherPath, idx: undefined }));\r\n                }\r\n                else if (ctr != null) {\r\n                    targetAny[property] = jsonApply(new ctr(), newValue, Object.assign(Object.assign({}, params), { path: propertyPath, matcherPath: propertyMatcherPath, idx: undefined }));\r\n                }\r\n                else {\r\n                    targetAny[property] = newValue;\r\n                }\r\n            }\r\n            else {\r\n                targetAny[property] = newValue;\r\n            }\r\n        }\r\n        catch (error) {\r\n            Logger.warn(`unable to set [${propertyPath}] in [${targetClass === null || targetClass === void 0 ? void 0 : targetClass.name}]; nested error is: ${error.message}`);\r\n        }\r\n    }\r\n    return target;\r\n}\r\n/**\r\n * Walk the given JSON object graphs, invoking the visit() callback for every object encountered.\r\n * Arrays are descended into without a callback, however their elements will have the visit()\r\n * callback invoked if they are objects.\r\n *\r\n * @param json to traverse\r\n * @param visit callback for each non-primitive and non-array object found\r\n * @param opts\r\n * @param opts.skip property names to skip when walking\r\n * @param jsons to traverse in parallel\r\n */\r\nfunction jsonWalk(json, visit, opts, ...jsons) {\r\n    const jsonType = classify(json);\r\n    const { skip = [] } = opts !== null && opts !== void 0 ? opts : {};\r\n    if (jsonType === 'array') {\r\n        visit(jsonType, json, ...jsons);\r\n        json.forEach((element, index) => {\r\n            jsonWalk(element, visit, opts, ...(jsons !== null && jsons !== void 0 ? jsons : []).map((o) => o === null || o === void 0 ? void 0 : o[index]));\r\n        });\r\n        return;\r\n    }\r\n    if (jsonType !== 'object') {\r\n        return;\r\n    }\r\n    visit(jsonType, json, ...jsons);\r\n    for (const property in json) {\r\n        if (skip.includes(property)) {\r\n            continue;\r\n        }\r\n        const value = json[property];\r\n        const otherValues = jsons === null || jsons === void 0 ? void 0 : jsons.map((o) => o === null || o === void 0 ? void 0 : o[property]);\r\n        const valueType = classify(value);\r\n        if (valueType === 'object' || valueType === 'array') {\r\n            jsonWalk(value, visit, opts, ...otherValues);\r\n        }\r\n    }\r\n}\r\nconst isBrowser = typeof window !== 'undefined';\r\n/**\r\n * Classify the type of value to assist with handling for merge purposes.\r\n */\r\nfunction classify(value) {\r\n    if (value == null) {\r\n        return null;\r\n    }\r\n    if (isBrowser && value instanceof HTMLElement) {\r\n        return 'primitive';\r\n    }\r\n    if (Array.isArray(value)) {\r\n        return 'array';\r\n    }\r\n    if (value instanceof Date) {\r\n        return 'primitive';\r\n    }\r\n    if (typeof value === 'object' && value.constructor === Object) {\r\n        return 'object';\r\n    }\r\n    if (typeof value === 'function') {\r\n        return 'function';\r\n    }\r\n    if (typeof value === 'object' && value.constructor != null) {\r\n        return CLASS_INSTANCE_TYPE;\r\n    }\r\n    return 'primitive';\r\n}\n\nconst twoPi = Math.PI * 2;\r\n/**\r\n * Normalize the given angle to be in the [0, 2π) interval.\r\n * @param radians Angle in radians.\r\n */\r\nfunction normalizeAngle360(radians) {\r\n    radians %= twoPi;\r\n    radians += twoPi;\r\n    radians %= twoPi;\r\n    return radians;\r\n}\r\nfunction normalizeAngle360Inclusive(radians) {\r\n    radians %= twoPi;\r\n    radians += twoPi;\r\n    if (radians !== twoPi) {\r\n        radians %= twoPi;\r\n    }\r\n    return radians;\r\n}\r\n/**\r\n * Normalize the given angle to be in the [-π, π) interval.\r\n * @param radians Angle in radians.\r\n */\r\nfunction normalizeAngle180(radians) {\r\n    radians %= twoPi;\r\n    if (radians < -Math.PI) {\r\n        radians += twoPi;\r\n    }\r\n    else if (radians >= Math.PI) {\r\n        radians -= twoPi;\r\n    }\r\n    return radians;\r\n}\r\nfunction toRadians(degrees) {\r\n    return (degrees / 180) * Math.PI;\r\n}\r\nfunction toDegrees(radians) {\r\n    return (radians / Math.PI) * 180;\r\n}\r\n/**\r\n * Returns a rotation angle between two other angles.\r\n * @param angle0 Angle in radians.\r\n * @param angle1 Angle in radians.\r\n * @returns Angle in radians.\r\n */\r\nfunction angleBetween(angle0, angle1) {\r\n    angle0 = normalizeAngle360(angle0);\r\n    angle1 = normalizeAngle360(angle1);\r\n    return angle1 - angle0 + (angle0 > angle1 ? 2 * Math.PI : 0);\r\n}\n\nfunction clamp$1(x, min, max) {\r\n    return Math.max(min, Math.min(max, x));\r\n}\r\n/**\r\n * Maps a discrete domain to a continuous numeric range.\r\n */\r\nclass BandScale {\r\n    constructor() {\r\n        this.type = 'band';\r\n        this.cache = null;\r\n        this.cacheProps = ['_domain', 'range', '_paddingInner', '_paddingOuter', 'round', 'interval'];\r\n        /**\r\n         * Maps datum to its index in the {@link domain} array.\r\n         * Used to check for duplicate datums (not allowed).\r\n         */\r\n        this.index = new Map();\r\n        /**\r\n         * The output range values for datum at each index.\r\n         */\r\n        this.ordinalRange = [];\r\n        /**\r\n         * Contains unique datums only. Since `{}` is used in place of `Map`\r\n         * for IE11 compatibility, the datums are converted `toString` before\r\n         * the uniqueness check.\r\n         */\r\n        this._domain = [];\r\n        this.range = [0, 1];\r\n        this._bandwidth = 1;\r\n        this._rawBandwidth = 1;\r\n        /**\r\n         * The ratio of the range that is reserved for space between bands.\r\n         */\r\n        this._paddingInner = 0;\r\n        /**\r\n         * The ratio of the range that is reserved for space before the first\r\n         * and after the last band.\r\n         */\r\n        this._paddingOuter = 0;\r\n        this.round = false;\r\n    }\r\n    didChange() {\r\n        const { cache } = this;\r\n        const didChange = !cache || this.cacheProps.some((p) => this[p] !== cache[p]);\r\n        if (didChange) {\r\n            this.cache = {};\r\n            this.cacheProps.forEach((p) => (this.cache[p] = this[p]));\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    refresh() {\r\n        if (this.didChange()) {\r\n            this.update();\r\n        }\r\n    }\r\n    set domain(values) {\r\n        const domain = [];\r\n        this.index = new Map();\r\n        const index = this.index;\r\n        // In case one wants to have duplicate domain values, for example, two 'Italy' categories,\r\n        // one should use objects rather than strings for domain values like so:\r\n        // { toString: () => 'Italy' }\r\n        // { toString: () => 'Italy' }\r\n        values.forEach((value) => {\r\n            if (index.get(value) === undefined) {\r\n                index.set(value, domain.push(value) - 1);\r\n            }\r\n        });\r\n        this._domain = domain;\r\n    }\r\n    get domain() {\r\n        return this._domain;\r\n    }\r\n    ticks() {\r\n        this.refresh();\r\n        const { interval = 1 } = this;\r\n        const step = Math.abs(Math.round(interval));\r\n        return this._domain.filter((_, i) => i % step === 0);\r\n    }\r\n    convert(d) {\r\n        this.refresh();\r\n        const i = this.index.get(d);\r\n        if (i === undefined) {\r\n            return NaN;\r\n        }\r\n        const r = this.ordinalRange[i];\r\n        if (r === undefined) {\r\n            return NaN;\r\n        }\r\n        return r;\r\n    }\r\n    invert(position) {\r\n        this.refresh();\r\n        const index = this.ordinalRange.findIndex((p) => p === position);\r\n        return this.domain[index];\r\n    }\r\n    get bandwidth() {\r\n        this.refresh();\r\n        return this._bandwidth;\r\n    }\r\n    get rawBandwidth() {\r\n        this.refresh();\r\n        return this._rawBandwidth;\r\n    }\r\n    set padding(value) {\r\n        value = clamp$1(value, 0, 1);\r\n        this._paddingInner = value;\r\n        this._paddingOuter = value;\r\n    }\r\n    get padding() {\r\n        return this._paddingInner;\r\n    }\r\n    set paddingInner(value) {\r\n        this._paddingInner = clamp$1(value, 0, 1);\r\n    }\r\n    get paddingInner() {\r\n        return this._paddingInner;\r\n    }\r\n    set paddingOuter(value) {\r\n        this._paddingOuter = clamp$1(value, 0, 1);\r\n    }\r\n    get paddingOuter() {\r\n        return this._paddingOuter;\r\n    }\r\n    update() {\r\n        const count = this._domain.length;\r\n        if (count === 0) {\r\n            return;\r\n        }\r\n        const round = this.round;\r\n        const paddingInner = this._paddingInner;\r\n        const paddingOuter = this._paddingOuter;\r\n        const [r0, r1] = this.range;\r\n        const width = r1 - r0;\r\n        const rawStep = width / Math.max(1, count + 2 * paddingOuter - paddingInner);\r\n        const step = round ? Math.floor(rawStep) : rawStep;\r\n        const fullBandWidth = step * (count - paddingInner);\r\n        const x0 = r0 + (width - fullBandWidth) / 2;\r\n        const start = round ? Math.round(x0) : x0;\r\n        const bw = step * (1 - paddingInner);\r\n        const bandwidth = round ? Math.round(bw) : bw;\r\n        const rawBandwidth = rawStep * (1 - paddingInner);\r\n        const values = [];\r\n        for (let i = 0; i < count; i++) {\r\n            values.push(start + step * i);\r\n        }\r\n        this._bandwidth = bandwidth;\r\n        this._rawBandwidth = rawBandwidth;\r\n        this.ordinalRange = values;\r\n    }\r\n}\n\nfunction clamp(min, value, max) {\r\n    return Math.min(max, Math.max(min, value));\r\n}\r\nfunction isEqual(a, b, epsilon = 1e-10) {\r\n    return Math.abs(a - b) < epsilon;\r\n}\r\nfunction isNegative(a) {\r\n    return Math.sign(a) < 0 || Object.is(a, -0);\r\n}\r\nfunction round$1(value, decimals = 2) {\r\n    const pow = Math.pow(10, decimals);\r\n    return Math.round(value * pow) / pow;\r\n}\r\n/**\r\n * `Number.toFixed(n)` always formats a number so that it has `n` digits after the decimal point.\r\n * For example, `Number(0.00003427).toFixed(2)` returns `0.00`.\r\n * That's not very helpful, because all the meaningful information is lost.\r\n * In this case we would want the formatted value to have at least two significant digits: `0.000034`,\r\n * not two fraction digits.\r\n * @param value\r\n * @param fractionOrSignificantDigits\r\n */\r\nfunction toFixed(value, fractionOrSignificantDigits = 2) {\r\n    const power = Math.floor(Math.log(Math.abs(value)) / Math.LN10);\r\n    if (power >= 0 || !isFinite(power)) {\r\n        return value.toFixed(fractionOrSignificantDigits); // fraction digits\r\n    }\r\n    return value.toFixed(Math.abs(power) - 1 + fractionOrSignificantDigits); // significant digits\r\n}\r\n/**\r\n * Returns the mathematically correct n modulus of m. For context, the JS % operator is remainder\r\n * NOT modulus, which is why this is needed.\r\n */\r\nfunction mod(n, m) {\r\n    if (n >= 0) {\r\n        return Math.floor(n % m);\r\n    }\r\n    return Math.floor((n % m) + m);\r\n}\n\nclass Color {\r\n    /**\r\n     * Every color component should be in the [0, 1] range.\r\n     * Some easing functions (such as elastic easing) can overshoot the target value by some amount.\r\n     * So, when animating colors, if the source or target color components are already near\r\n     * or at the edge of the allowed [0, 1] range, it is possible for the intermediate color\r\n     * component value to end up outside of that range mid-animation. For this reason the constructor\r\n     * performs range checking/constraining.\r\n     * @param r Red component.\r\n     * @param g Green component.\r\n     * @param b Blue component.\r\n     * @param a Alpha (opacity) component.\r\n     */\r\n    constructor(r, g, b, a = 1) {\r\n        // NaN is treated as 0\r\n        this.r = clamp(0, r || 0, 1);\r\n        this.g = clamp(0, g || 0, 1);\r\n        this.b = clamp(0, b || 0, 1);\r\n        this.a = clamp(0, a || 0, 1);\r\n    }\r\n    /**\r\n     * A color string can be in one of the following formats to be valid:\r\n     * - #rgb\r\n     * - #rrggbb\r\n     * - rgb(r, g, b)\r\n     * - rgba(r, g, b, a)\r\n     * - CSS color name such as 'white', 'orange', 'cyan', etc.\r\n     */\r\n    static validColorString(str) {\r\n        if (str.indexOf('#') >= 0) {\r\n            return !!Color.parseHex(str);\r\n        }\r\n        if (str.indexOf('rgb') >= 0) {\r\n            return !!Color.stringToRgba(str);\r\n        }\r\n        return !!Color.nameToHex[str.toLowerCase()];\r\n    }\r\n    /**\r\n     * The given string can be in one of the following formats:\r\n     * - #rgb\r\n     * - #rrggbb\r\n     * - rgb(r, g, b)\r\n     * - rgba(r, g, b, a)\r\n     * - CSS color name such as 'white', 'orange', 'cyan', etc.\r\n     * @param str\r\n     */\r\n    static fromString(str) {\r\n        // hexadecimal notation\r\n        if (str.indexOf('#') >= 0) {\r\n            // there can be some leading whitespace\r\n            return Color.fromHexString(str);\r\n        }\r\n        // color name\r\n        const hex = Color.nameToHex[str.toLowerCase()];\r\n        if (hex) {\r\n            return Color.fromHexString(hex);\r\n        }\r\n        // rgb(a) notation\r\n        if (str.indexOf('rgb') >= 0) {\r\n            return Color.fromRgbaString(str);\r\n        }\r\n        throw new Error(`Invalid color string: '${str}'`);\r\n    }\r\n    static tryParseFromString(str) {\r\n        try {\r\n            return Color.fromString(str);\r\n        }\r\n        catch (e) {\r\n            Logger.warnOnce(`invalid color string: '${str}'.`);\r\n            return Color.fromArray([0, 0, 0]);\r\n        }\r\n    }\r\n    // See https://drafts.csswg.org/css-color/#hex-notation\r\n    static parseHex(input) {\r\n        input = input.replace(/ /g, '').slice(1);\r\n        let parts;\r\n        switch (input.length) {\r\n            case 6:\r\n            case 8:\r\n                parts = [];\r\n                for (let i = 0; i < input.length; i += 2) {\r\n                    parts.push(parseInt(`${input[i]}${input[i + 1]}`, 16));\r\n                }\r\n                break;\r\n            case 3:\r\n            case 4:\r\n                parts = input\r\n                    .split('')\r\n                    .map((p) => parseInt(p, 16))\r\n                    .map((p) => p + p * 16);\r\n                break;\r\n        }\r\n        if ((parts === null || parts === void 0 ? void 0 : parts.length) >= 3 && parts.every((p) => p >= 0)) {\r\n            if (parts.length === 3) {\r\n                parts.push(255);\r\n            }\r\n            return parts;\r\n        }\r\n    }\r\n    static fromHexString(str) {\r\n        const values = Color.parseHex(str);\r\n        if (values) {\r\n            const [r, g, b, a] = values;\r\n            return new Color(r / 255, g / 255, b / 255, a / 255);\r\n        }\r\n        throw new Error(`Malformed hexadecimal color string: '${str}'`);\r\n    }\r\n    static stringToRgba(str) {\r\n        // Find positions of opening and closing parentheses.\r\n        let [po, pc] = [NaN, NaN];\r\n        for (let i = 0; i < str.length; i++) {\r\n            const c = str[i];\r\n            if (!po && c === '(') {\r\n                po = i;\r\n            }\r\n            else if (c === ')') {\r\n                pc = i;\r\n                break;\r\n            }\r\n        }\r\n        const contents = po && pc && str.substring(po + 1, pc);\r\n        if (!contents) {\r\n            return;\r\n        }\r\n        const parts = contents.split(',');\r\n        const rgba = [];\r\n        for (let i = 0; i < parts.length; i++) {\r\n            const part = parts[i];\r\n            let value = parseFloat(part);\r\n            if (isNaN(value)) {\r\n                return;\r\n            }\r\n            if (part.indexOf('%') >= 0) {\r\n                // percentage r, g, or b value\r\n                value = Math.max(0, Math.min(100, value));\r\n                value /= 100;\r\n            }\r\n            else {\r\n                if (i === 3) {\r\n                    // alpha component\r\n                    value = Math.max(0, Math.min(1, value));\r\n                }\r\n                else {\r\n                    // absolute r, g, or b value\r\n                    value = Math.max(0, Math.min(255, value));\r\n                    value /= 255;\r\n                }\r\n            }\r\n            rgba.push(value);\r\n        }\r\n        return rgba;\r\n    }\r\n    static fromRgbaString(str) {\r\n        const rgba = Color.stringToRgba(str);\r\n        if (rgba) {\r\n            if (rgba.length === 3) {\r\n                return new Color(rgba[0], rgba[1], rgba[2]);\r\n            }\r\n            else if (rgba.length === 4) {\r\n                return new Color(rgba[0], rgba[1], rgba[2], rgba[3]);\r\n            }\r\n        }\r\n        throw new Error(`Malformed rgb/rgba color string: '${str}'`);\r\n    }\r\n    static fromArray(arr) {\r\n        if (arr.length === 4) {\r\n            return new Color(arr[0], arr[1], arr[2], arr[3]);\r\n        }\r\n        if (arr.length === 3) {\r\n            return new Color(arr[0], arr[1], arr[2]);\r\n        }\r\n        throw new Error('The given array should contain 3 or 4 color components (numbers).');\r\n    }\r\n    static fromHSB(h, s, b, alpha = 1) {\r\n        const rgb = Color.HSBtoRGB(h, s, b);\r\n        return new Color(rgb[0], rgb[1], rgb[2], alpha);\r\n    }\r\n    static fromHSL(h, s, l, alpha = 1) {\r\n        const rgb = Color.HSLtoRGB(h, s, l);\r\n        return new Color(rgb[0], rgb[1], rgb[2], alpha);\r\n    }\r\n    static padHex(str) {\r\n        // Can't use `padStart(2, '0')` here because of IE.\r\n        return str.length === 1 ? '0' + str : str;\r\n    }\r\n    toHexString() {\r\n        let hex = '#' +\r\n            Color.padHex(Math.round(this.r * 255).toString(16)) +\r\n            Color.padHex(Math.round(this.g * 255).toString(16)) +\r\n            Color.padHex(Math.round(this.b * 255).toString(16));\r\n        if (this.a < 1) {\r\n            hex += Color.padHex(Math.round(this.a * 255).toString(16));\r\n        }\r\n        return hex;\r\n    }\r\n    toRgbaString(fractionDigits = 3) {\r\n        const components = [Math.round(this.r * 255), Math.round(this.g * 255), Math.round(this.b * 255)];\r\n        const k = Math.pow(10, fractionDigits);\r\n        if (this.a !== 1) {\r\n            components.push(Math.round(this.a * k) / k);\r\n            return `rgba(${components.join(', ')})`;\r\n        }\r\n        return `rgb(${components.join(', ')})`;\r\n    }\r\n    toString() {\r\n        if (this.a === 1) {\r\n            return this.toHexString();\r\n        }\r\n        return this.toRgbaString();\r\n    }\r\n    toHSB() {\r\n        return Color.RGBtoHSB(this.r, this.g, this.b);\r\n    }\r\n    static RGBtoHSL(r, g, b) {\r\n        const min = Math.min(r, g, b);\r\n        const max = Math.max(r, g, b);\r\n        const l = (max + min) / 2;\r\n        let h;\r\n        let s;\r\n        if (max === min) {\r\n            // Achromatic\r\n            h = NaN;\r\n            s = 0;\r\n        }\r\n        else {\r\n            const delta = max - min;\r\n            s = l > 0.5 ? delta / (2 - max - min) : delta / (max + min);\r\n            if (max === r) {\r\n                h = (g - b) / delta + (g < b ? 6 : 0);\r\n            }\r\n            else if (max === g) {\r\n                h = (b - r) / delta + 2;\r\n            }\r\n            else {\r\n                h = (r - g) / delta + 4;\r\n            }\r\n            h *= 360 / 6;\r\n        }\r\n        return [h, s, l];\r\n    }\r\n    static HSLtoRGB(h, s, l) {\r\n        if (s === 0) {\r\n            // Achromatic\r\n            return [l, l, l];\r\n        }\r\n        const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\r\n        const p = 2 * l - q;\r\n        function hueToRgb(t) {\r\n            if (t < 0)\r\n                t += 1;\r\n            if (t > 1)\r\n                t -= 1;\r\n            if (t < 1 / 6)\r\n                return p + (q - p) * 6 * t;\r\n            if (t < 1 / 2)\r\n                return q;\r\n            if (t < 2 / 3)\r\n                return p + (q - p) * (2 / 3 - t) * 6;\r\n            return p;\r\n        }\r\n        const r = hueToRgb(h / 360 + 1 / 3);\r\n        const g = hueToRgb(h / 360);\r\n        const b = hueToRgb(h / 360 - 1 / 3);\r\n        return [r, g, b];\r\n    }\r\n    /**\r\n     * Converts the given RGB triple to an array of HSB (HSV) components.\r\n     * The hue component will be `NaN` for achromatic colors.\r\n     */\r\n    static RGBtoHSB(r, g, b) {\r\n        const min = Math.min(r, g, b);\r\n        const max = Math.max(r, g, b);\r\n        const S = max !== 0 ? (max - min) / max : 0;\r\n        let H = NaN;\r\n        // min == max, means all components are the same\r\n        // and the color is a shade of gray with no hue (H is NaN)\r\n        if (min !== max) {\r\n            const delta = max - min;\r\n            const rc = (max - r) / delta;\r\n            const gc = (max - g) / delta;\r\n            const bc = (max - b) / delta;\r\n            if (r === max) {\r\n                H = bc - gc;\r\n            }\r\n            else if (g === max) {\r\n                H = 2.0 + rc - bc;\r\n            }\r\n            else {\r\n                H = 4.0 + gc - rc;\r\n            }\r\n            H /= 6.0;\r\n            if (H < 0) {\r\n                H = H + 1.0;\r\n            }\r\n        }\r\n        return [H * 360, S, max];\r\n    }\r\n    /**\r\n     * Converts the given HSB (HSV) triple to an array of RGB components.\r\n     */\r\n    static HSBtoRGB(H, S, B) {\r\n        if (isNaN(H)) {\r\n            H = 0;\r\n        }\r\n        H = (((H % 360) + 360) % 360) / 360; // normalize hue to [0, 360] interval, then scale to [0, 1]\r\n        let r = 0;\r\n        let g = 0;\r\n        let b = 0;\r\n        if (S === 0) {\r\n            r = g = b = B;\r\n        }\r\n        else {\r\n            const h = (H - Math.floor(H)) * 6;\r\n            const f = h - Math.floor(h);\r\n            const p = B * (1 - S);\r\n            const q = B * (1 - S * f);\r\n            const t = B * (1 - S * (1 - f));\r\n            switch (h >> 0 // discard the floating point part of the number\r\n            ) {\r\n                case 0:\r\n                    r = B;\r\n                    g = t;\r\n                    b = p;\r\n                    break;\r\n                case 1:\r\n                    r = q;\r\n                    g = B;\r\n                    b = p;\r\n                    break;\r\n                case 2:\r\n                    r = p;\r\n                    g = B;\r\n                    b = t;\r\n                    break;\r\n                case 3:\r\n                    r = p;\r\n                    g = q;\r\n                    b = B;\r\n                    break;\r\n                case 4:\r\n                    r = t;\r\n                    g = p;\r\n                    b = B;\r\n                    break;\r\n                case 5:\r\n                    r = B;\r\n                    g = p;\r\n                    b = q;\r\n                    break;\r\n            }\r\n        }\r\n        return [r, g, b];\r\n    }\r\n    derive(hueShift, saturationFactor, brightnessFactor, opacityFactor) {\r\n        const hsb = Color.RGBtoHSB(this.r, this.g, this.b);\r\n        let b = hsb[2];\r\n        if (b == 0 && brightnessFactor > 1.0) {\r\n            b = 0.05;\r\n        }\r\n        const h = (((hsb[0] + hueShift) % 360) + 360) % 360;\r\n        const s = Math.max(Math.min(hsb[1] * saturationFactor, 1.0), 0.0);\r\n        b = Math.max(Math.min(b * brightnessFactor, 1.0), 0.0);\r\n        const a = Math.max(Math.min(this.a * opacityFactor, 1.0), 0.0);\r\n        const rgba = Color.HSBtoRGB(h, s, b);\r\n        rgba.push(a);\r\n        return Color.fromArray(rgba);\r\n    }\r\n    brighter() {\r\n        return this.derive(0, 1.0, 1.0 / 0.7, 1.0);\r\n    }\r\n    darker() {\r\n        return this.derive(0, 1.0, 0.7, 1.0);\r\n    }\r\n    static interpolate(color, other) {\r\n        const c0 = Color.tryParseFromString(color);\r\n        const c1 = Color.tryParseFromString(other);\r\n        return (t) => {\r\n            const i = (x, y) => x * (1 - t) + y * t;\r\n            const c = new Color(i(c0.r, c1.r), i(c0.g, c1.g), i(c0.b, c1.b), i(c0.a, c1.a));\r\n            return c.toString();\r\n        };\r\n    }\r\n}\r\n/**\r\n * CSS Color Module Level 4:\r\n * https://drafts.csswg.org/css-color/#named-colors\r\n */\r\nColor.nameToHex = Object.freeze({\r\n    aliceblue: '#F0F8FF',\r\n    antiquewhite: '#FAEBD7',\r\n    aqua: '#00FFFF',\r\n    aquamarine: '#7FFFD4',\r\n    azure: '#F0FFFF',\r\n    beige: '#F5F5DC',\r\n    bisque: '#FFE4C4',\r\n    black: '#000000',\r\n    blanchedalmond: '#FFEBCD',\r\n    blue: '#0000FF',\r\n    blueviolet: '#8A2BE2',\r\n    brown: '#A52A2A',\r\n    burlywood: '#DEB887',\r\n    cadetblue: '#5F9EA0',\r\n    chartreuse: '#7FFF00',\r\n    chocolate: '#D2691E',\r\n    coral: '#FF7F50',\r\n    cornflowerblue: '#6495ED',\r\n    cornsilk: '#FFF8DC',\r\n    crimson: '#DC143C',\r\n    cyan: '#00FFFF',\r\n    darkblue: '#00008B',\r\n    darkcyan: '#008B8B',\r\n    darkgoldenrod: '#B8860B',\r\n    darkgray: '#A9A9A9',\r\n    darkgreen: '#006400',\r\n    darkgrey: '#A9A9A9',\r\n    darkkhaki: '#BDB76B',\r\n    darkmagenta: '#8B008B',\r\n    darkolivegreen: '#556B2F',\r\n    darkorange: '#FF8C00',\r\n    darkorchid: '#9932CC',\r\n    darkred: '#8B0000',\r\n    darksalmon: '#E9967A',\r\n    darkseagreen: '#8FBC8F',\r\n    darkslateblue: '#483D8B',\r\n    darkslategray: '#2F4F4F',\r\n    darkslategrey: '#2F4F4F',\r\n    darkturquoise: '#00CED1',\r\n    darkviolet: '#9400D3',\r\n    deeppink: '#FF1493',\r\n    deepskyblue: '#00BFFF',\r\n    dimgray: '#696969',\r\n    dimgrey: '#696969',\r\n    dodgerblue: '#1E90FF',\r\n    firebrick: '#B22222',\r\n    floralwhite: '#FFFAF0',\r\n    forestgreen: '#228B22',\r\n    fuchsia: '#FF00FF',\r\n    gainsboro: '#DCDCDC',\r\n    ghostwhite: '#F8F8FF',\r\n    gold: '#FFD700',\r\n    goldenrod: '#DAA520',\r\n    gray: '#808080',\r\n    green: '#008000',\r\n    greenyellow: '#ADFF2F',\r\n    grey: '#808080',\r\n    honeydew: '#F0FFF0',\r\n    hotpink: '#FF69B4',\r\n    indianred: '#CD5C5C',\r\n    indigo: '#4B0082',\r\n    ivory: '#FFFFF0',\r\n    khaki: '#F0E68C',\r\n    lavender: '#E6E6FA',\r\n    lavenderblush: '#FFF0F5',\r\n    lawngreen: '#7CFC00',\r\n    lemonchiffon: '#FFFACD',\r\n    lightblue: '#ADD8E6',\r\n    lightcoral: '#F08080',\r\n    lightcyan: '#E0FFFF',\r\n    lightgoldenrodyellow: '#FAFAD2',\r\n    lightgray: '#D3D3D3',\r\n    lightgreen: '#90EE90',\r\n    lightgrey: '#D3D3D3',\r\n    lightpink: '#FFB6C1',\r\n    lightsalmon: '#FFA07A',\r\n    lightseagreen: '#20B2AA',\r\n    lightskyblue: '#87CEFA',\r\n    lightslategray: '#778899',\r\n    lightslategrey: '#778899',\r\n    lightsteelblue: '#B0C4DE',\r\n    lightyellow: '#FFFFE0',\r\n    lime: '#00FF00',\r\n    limegreen: '#32CD32',\r\n    linen: '#FAF0E6',\r\n    magenta: '#FF00FF',\r\n    maroon: '#800000',\r\n    mediumaquamarine: '#66CDAA',\r\n    mediumblue: '#0000CD',\r\n    mediumorchid: '#BA55D3',\r\n    mediumpurple: '#9370DB',\r\n    mediumseagreen: '#3CB371',\r\n    mediumslateblue: '#7B68EE',\r\n    mediumspringgreen: '#00FA9A',\r\n    mediumturquoise: '#48D1CC',\r\n    mediumvioletred: '#C71585',\r\n    midnightblue: '#191970',\r\n    mintcream: '#F5FFFA',\r\n    mistyrose: '#FFE4E1',\r\n    moccasin: '#FFE4B5',\r\n    navajowhite: '#FFDEAD',\r\n    navy: '#000080',\r\n    oldlace: '#FDF5E6',\r\n    olive: '#808000',\r\n    olivedrab: '#6B8E23',\r\n    orange: '#FFA500',\r\n    orangered: '#FF4500',\r\n    orchid: '#DA70D6',\r\n    palegoldenrod: '#EEE8AA',\r\n    palegreen: '#98FB98',\r\n    paleturquoise: '#AFEEEE',\r\n    palevioletred: '#DB7093',\r\n    papayawhip: '#FFEFD5',\r\n    peachpuff: '#FFDAB9',\r\n    peru: '#CD853F',\r\n    pink: '#FFC0CB',\r\n    plum: '#DDA0DD',\r\n    powderblue: '#B0E0E6',\r\n    purple: '#800080',\r\n    rebeccapurple: '#663399',\r\n    red: '#FF0000',\r\n    rosybrown: '#BC8F8F',\r\n    royalblue: '#4169E1',\r\n    saddlebrown: '#8B4513',\r\n    salmon: '#FA8072',\r\n    sandybrown: '#F4A460',\r\n    seagreen: '#2E8B57',\r\n    seashell: '#FFF5EE',\r\n    sienna: '#A0522D',\r\n    silver: '#C0C0C0',\r\n    skyblue: '#87CEEB',\r\n    slateblue: '#6A5ACD',\r\n    slategray: '#708090',\r\n    slategrey: '#708090',\r\n    snow: '#FFFAFA',\r\n    springgreen: '#00FF7F',\r\n    steelblue: '#4682B4',\r\n    tan: '#D2B48C',\r\n    teal: '#008080',\r\n    thistle: '#D8BFD8',\r\n    tomato: '#FF6347',\r\n    transparent: '#00000000',\r\n    turquoise: '#40E0D0',\r\n    violet: '#EE82EE',\r\n    wheat: '#F5DEB3',\r\n    white: '#FFFFFF',\r\n    whitesmoke: '#F5F5F5',\r\n    yellow: '#FFFF00',\r\n    yellowgreen: '#9ACD32',\r\n});\n\n/* eslint-disable sonarjs/no-duplicate-string */\r\nfunction Validate(predicate) {\r\n    return addTransformToInstanceProperty((target, prop, v) => {\r\n        var _a, _b, _c;\r\n        if (predicate(v, { target })) {\r\n            return v;\r\n        }\r\n        const cleanKey = prop.toString().replace(/^_*/, '');\r\n        let targetClass = (_b = (_a = target.constructor) === null || _a === void 0 ? void 0 : _a.className) !== null && _b !== void 0 ? _b : (_c = target.constructor) === null || _c === void 0 ? void 0 : _c.name;\r\n        if ((targetClass === null || targetClass === void 0 ? void 0 : targetClass.length) < 3) {\r\n            targetClass = null;\r\n        }\r\n        const targetClassName = targetClass ? `of [${targetClass}] ` : '';\r\n        if (predicate.message) {\r\n            Logger.warn(`Property [${cleanKey}] ${targetClassName}cannot be set to [${stringify(v)}]; ${predicate.message}, ignoring.`);\r\n        }\r\n        else {\r\n            Logger.warn(`Property [${cleanKey}] ${targetClassName}cannot be set to [${stringify(v)}], ignoring.`);\r\n        }\r\n        return BREAK_TRANSFORM_CHAIN;\r\n    });\r\n}\r\nfunction stringify(value) {\r\n    if (typeof value === 'number' && isNaN(value))\r\n        return 'NaN';\r\n    if (value === Infinity)\r\n        return 'Infinity';\r\n    if (value === -Infinity)\r\n        return '-Infinity';\r\n    return JSON.stringify(value);\r\n}\r\nfunction predicateWithMessage(predicate, message) {\r\n    predicate.message = message;\r\n    return predicate;\r\n}\r\nconst OPTIONAL = (v, ctx, predicate) => v === undefined || predicate(v, ctx);\r\nconst ARRAY = (length, predicate) => {\r\n    return predicateWithMessage((v, ctx) => Array.isArray(v) &&\r\n        (length ? v.length === length : true) &&\r\n        (predicate ? v.every((e) => predicate(e, ctx)) : true), `expecting an Array`);\r\n};\r\nconst OPT_ARRAY = (length) => {\r\n    return predicateWithMessage((v, ctx) => OPTIONAL(v, ctx, ARRAY(length)), 'expecting an optional Array');\r\n};\r\nconst NON_EMPTY_ARRAY = predicateWithMessage((v) => Array.isArray(v) && v.length > 0, `expecting a non-empty Array`);\r\nconst OPT_NON_EMPTY_ARRAY = () => {\r\n    return predicateWithMessage((v, ctx) => OPTIONAL(v, ctx, NON_EMPTY_ARRAY), 'expecting an optional non-empty Array');\r\n};\r\nconst AND = (...predicates) => {\r\n    return predicateWithMessage((v, ctx) => predicates.every((p) => p(v, ctx)), predicates\r\n        .map((p) => p.message)\r\n        .filter((m) => m != null)\r\n        .join(' AND '));\r\n};\r\nconst OR = (...predicates) => {\r\n    return predicateWithMessage((v, ctx) => predicates.some((p) => p(v, ctx)), predicates\r\n        .map((p) => p.message)\r\n        .filter((m) => m != null)\r\n        .join(' OR '));\r\n};\r\nconst isComparable = (v) => {\r\n    return v != null && !isNaN(v);\r\n};\r\nconst LESS_THAN = (otherField) => predicateWithMessage((v, ctx) => !isComparable(v) || !isComparable(ctx.target[otherField]) || v < ctx.target[otherField], `expected to be less than ${otherField}`);\r\nconst GREATER_THAN = (otherField) => predicateWithMessage((v, ctx) => !isComparable(v) || !isComparable(ctx.target[otherField]) || v > ctx.target[otherField], `expected to be greater than ${otherField}`);\r\nconst FUNCTION = predicateWithMessage((v) => typeof v === 'function', 'expecting a Function');\r\nconst OPT_FUNCTION = predicateWithMessage((v, ctx) => OPTIONAL(v, ctx, FUNCTION), `expecting an optional Function`);\r\nconst BOOLEAN = predicateWithMessage((v) => v === true || v === false, 'expecting a Boolean');\r\nconst OPT_BOOLEAN = predicateWithMessage((v, ctx) => OPTIONAL(v, ctx, BOOLEAN), 'expecting an optional Boolean');\r\nconst STRING = predicateWithMessage((v) => typeof v === 'string', 'expecting a String');\r\nconst OPT_STRING = predicateWithMessage((v, ctx) => OPTIONAL(v, ctx, STRING), 'expecting an optional String');\r\nconst DATE = predicateWithMessage((v) => v instanceof Date && !isNaN(+v), 'expecting a Date object');\r\nconst OPT_DATE = predicateWithMessage((v, ctx) => OPTIONAL(v, ctx, DATE), 'expecting an optional Date');\r\nconst DATE_ARRAY = predicateWithMessage(ARRAY(undefined, DATE), 'expecting an Array of Date objects');\r\nconst DATETIME_MS = NUMBER$1(0);\r\nconst OPT_DATETIME_MS = predicateWithMessage((v, ctx) => OPTIONAL(v, ctx, DATETIME_MS), 'expecting an optional number');\r\nconst OPT_DATE_OR_DATETIME_MS = OR(OPT_DATE, OPT_DATETIME_MS);\r\nconst colorMessage = `A color string can be in one of the following formats to be valid: #rgb, #rrggbb, rgb(r, g, b), rgba(r, g, b, a) or a CSS color name such as 'white', 'orange', 'cyan', etc`;\r\nconst COLOR_STRING = predicateWithMessage((v) => {\r\n    if (typeof v !== 'string') {\r\n        return false;\r\n    }\r\n    return Color.validColorString(v);\r\n}, `expecting a color String. ${colorMessage}`);\r\nconst OPT_COLOR_STRING = predicateWithMessage((v, ctx) => OPTIONAL(v, ctx, COLOR_STRING), `expecting an optional color String. ${colorMessage}`);\r\nconst COLOR_STRING_ARRAY = predicateWithMessage(ARRAY(undefined, COLOR_STRING), `expecting an Array of color strings. ${colorMessage}`);\r\nconst OPT_COLOR_STRING_ARRAY = predicateWithMessage((v, ctx) => OPTIONAL(v, ctx, COLOR_STRING_ARRAY), `expecting an optional Array of color strings. ${colorMessage}`);\r\nfunction numberMessage(prefix = `expecting a finite Number`, min, max) {\r\n    let message = prefix;\r\n    if (min !== undefined && max !== undefined) {\r\n        message += ` between ${min} and ${max} inclusive`;\r\n    }\r\n    else if (min !== undefined) {\r\n        message += ` greater than or equal to ${min}`;\r\n    }\r\n    else if (max !== undefined) {\r\n        message += ` less than or equal to ${max}`;\r\n    }\r\n    return message;\r\n}\r\nfunction NUMBER$1(min, max) {\r\n    const message = numberMessage(undefined, min, max);\r\n    return predicateWithMessage((v) => typeof v === 'number' &&\r\n        Number.isFinite(v) &&\r\n        (min !== undefined ? v >= min : true) &&\r\n        (max !== undefined ? v <= max : true), message);\r\n}\r\nfunction OPT_NUMBER(min, max) {\r\n    const message = numberMessage('expecting an optional finite Number', min, max);\r\n    return predicateWithMessage((v, ctx) => OPTIONAL(v, ctx, NUMBER$1(min, max)), message);\r\n}\r\nfunction NUMBER_OR_NAN(min, max) {\r\n    // Can be NaN or finite number\r\n    const message = numberMessage(undefined, min, max);\r\n    return predicateWithMessage((v) => typeof v === 'number' &&\r\n        (isNaN(v) ||\r\n            (Number.isFinite(v) && (min !== undefined ? v >= min : true) && (max !== undefined ? v <= max : true))), message);\r\n}\r\nconst NUMBER_ARRAY = predicateWithMessage(ARRAY(undefined, NUMBER$1()), 'expecting an Array of numbers');\r\nconst OPT_NUMBER_ARRAY = predicateWithMessage((v, ctx) => OPTIONAL(v, ctx, NUMBER_ARRAY), 'expecting an optional Array of numbers');\r\nconst STRING_ARRAY = predicateWithMessage(ARRAY(undefined, STRING), 'expecting an Array of strings');\r\nconst OPT_STRING_ARRAY = predicateWithMessage((v, ctx) => OPTIONAL(v, ctx, STRING_ARRAY), 'expecting an optional Array of strings');\r\nfunction STRING_UNION(...values) {\r\n    const message = `expecting one of: ${values.join(', ')}`;\r\n    return predicateWithMessage((v) => typeof v === 'string' && values.indexOf(v) >= 0, message);\r\n}\r\nconst BOOLEAN_ARRAY = predicateWithMessage(ARRAY(undefined, BOOLEAN), 'expecting an Array of boolean values');\r\nconst OPT_BOOLEAN_ARRAY = predicateWithMessage((v, ctx) => OPTIONAL(v, ctx, BOOLEAN_ARRAY), 'expecting an optional Array of boolean values');\r\nconst FONT_WEIGHTS = ['normal', 'bold', 'bolder', 'lighter'];\r\nconst FONT_STYLE = predicateWithMessage((v) => v === 'normal' || v === 'italic' || v === 'oblique', `expecting a font style keyword such as 'normal', 'italic' or 'oblique'`);\r\nconst OPT_FONT_STYLE = predicateWithMessage((v, ctx) => OPTIONAL(v, ctx, FONT_STYLE), `expecting an optional font style keyword such as 'normal', 'italic' or 'oblique'`);\r\nconst FONT_WEIGHT = predicateWithMessage((v) => FONT_WEIGHTS.includes(v) || (typeof v === 'number' && isFinite(v)), `expecting a font weight keyword such as 'normal', 'bold' or 'bolder' or a numeric value such as 100, 300 or 600`);\r\nconst OPT_FONT_WEIGHT = predicateWithMessage((v, ctx) => OPTIONAL(v, ctx, FONT_WEIGHT), `expecting an optional font weight keyword such as 'normal', 'bold' or 'bolder' or a numeric value such as 100, 300 or 600`);\r\nconst LINE_DASH = predicateWithMessage(ARRAY(undefined, NUMBER$1(0)), 'expecting an Array of numbers specifying the length in pixels of alternating dashes and gaps, for example, [6, 3] means dashes with a length of 6 pixels with gaps between of 3 pixels.');\r\nconst OPT_LINE_DASH = predicateWithMessage((v, ctx) => OPTIONAL(v, ctx, LINE_DASH), 'expecting an optional Array of numbers specifying the length in pixels of alternating dashes and gaps, for example, [6, 3] means dashes with a length of 6 pixels with gaps between of 3 pixels.');\r\nconst LINE_CAPS = ['butt', 'round', 'square'];\r\nconst LINE_CAP = predicateWithMessage((v) => LINE_CAPS.includes(v), `expecting a line cap keyword such as 'butt', 'round' or 'square'`);\r\nconst OPT_LINE_CAP = predicateWithMessage((v, ctx) => OPTIONAL(v, ctx, LINE_CAP), `expecting an optional line cap keyword such as 'butt', 'round' or 'square'`);\r\nconst LINE_JOINS = ['round', 'bevel', 'miter'];\r\nconst LINE_JOIN = predicateWithMessage((v) => LINE_JOINS.includes(v), `expecting a line join keyword such as 'round', 'bevel' or 'miter'`);\r\nconst OPT_LINE_JOIN = predicateWithMessage((v, ctx) => OPTIONAL(v, ctx, LINE_JOIN), `expecting an optional line join keyword such as 'round', 'bevel' or 'miter'`);\r\nconst POSITIONS = ['top', 'right', 'bottom', 'left'];\r\nconst POSITION = predicateWithMessage((v) => POSITIONS.includes(v), `expecting a position keyword such as 'top', 'right', 'bottom' or 'left`);\r\nconst INTERACTION_RANGES = ['exact', 'nearest'];\r\nconst INTERACTION_RANGE = predicateWithMessage((v) => (typeof v === 'number' && Number.isFinite(v)) || INTERACTION_RANGES.includes(v), `expecting an interaction range of 'exact', 'nearest' or a number`);\r\nconst TEXT_WRAPS = ['never', 'always', 'hyphenate', 'on-space'];\r\nconst TEXT_WRAP = predicateWithMessage((v) => TEXT_WRAPS.includes(v), `expecting a text wrap strategy keyword such as 'never', 'always', 'hyphenate', or 'on-space'`);\r\nconst OVERFLOW_STRAGEGIES = ['ellipsis', 'hide'];\r\nconst OVERFLOW_STRATEGY = predicateWithMessage((v) => OVERFLOW_STRAGEGIES.includes(v), `expecting an overflow strategy keyword such as 'ellipsis', or 'hide'`);\r\nconst TEXT_ALIGNS = ['left', 'center', 'right'];\r\nconst TEXT_ALIGN = predicateWithMessage((v) => TEXT_ALIGNS.includes(v), `expecting a text align keyword such as 'left', 'center', or 'right'`);\r\nconst VERTICAL_ALIGNS = ['top', 'middle', 'bottom'];\r\nconst VERTICAL_ALIGN = predicateWithMessage((v) => VERTICAL_ALIGNS.includes(v), `expecting a text align keyword such as 'top', 'middle', or 'bottom'`);\r\nconst DIRECTIONS = ['horizontal', 'vertical'];\r\nconst DIRECTION = predicateWithMessage((v) => DIRECTIONS.includes(v), `expecting a direction keyword such as 'horizontal' or 'vertical'`);\r\nconst OPT_DIRECTION = predicateWithMessage((v, ctx) => OPTIONAL(v, ctx, DIRECTION), `expecting an optional direction keyword such as 'horizontal' or 'vertical'`);\n\nvar ChartAxisDirection;\r\n(function (ChartAxisDirection) {\r\n    ChartAxisDirection[\"X\"] = \"x\";\r\n    ChartAxisDirection[\"Y\"] = \"y\";\r\n})(ChartAxisDirection || (ChartAxisDirection = {}));\n\nvar RedrawType;\r\n(function (RedrawType) {\r\n    RedrawType[RedrawType[\"NONE\"] = 0] = \"NONE\";\r\n    // Canvas doesn't need clearing, an incremental re-rerender is sufficient.\r\n    RedrawType[RedrawType[\"TRIVIAL\"] = 1] = \"TRIVIAL\";\r\n    // Group needs clearing, a semi-incremental re-render is sufficient.\r\n    RedrawType[RedrawType[\"MINOR\"] = 2] = \"MINOR\";\r\n    // Canvas needs to be cleared for these redraw types.\r\n    RedrawType[RedrawType[\"MAJOR\"] = 3] = \"MAJOR\";\r\n})(RedrawType || (RedrawType = {}));\r\n/** @returns true if new Function() is disabled in the current execution context. */\r\nfunction functionConstructorAvailable() {\r\n    try {\r\n        new Function('return true');\r\n        return true;\r\n    }\r\n    catch (e) {\r\n        return false;\r\n    }\r\n}\r\nconst STRING_FUNCTION_USEABLE = functionConstructorAvailable();\r\nfunction SceneChangeDetection(opts) {\r\n    const { changeCb, convertor } = opts !== null && opts !== void 0 ? opts : {};\r\n    return function (target, key) {\r\n        // `target` is either a constructor (static member) or prototype (instance member)\r\n        const privateKey = `__${key}`;\r\n        if (target[key]) {\r\n            return;\r\n        }\r\n        if (STRING_FUNCTION_USEABLE && changeCb == null && convertor == null) {\r\n            prepareFastGetSet(target, key, privateKey, opts);\r\n        }\r\n        else {\r\n            prepareSlowGetSet(target, key, privateKey, opts);\r\n        }\r\n    };\r\n}\r\nfunction prepareFastGetSet(target, key, privateKey, opts) {\r\n    const { redraw = RedrawType.TRIVIAL, type = 'normal', checkDirtyOnAssignment = false } = opts !== null && opts !== void 0 ? opts : {};\r\n    // Optimised code-path.\r\n    // Remove all conditional logic from runtime - generate a setter with the exact necessary\r\n    // steps, as these setters are called a LOT during update cycles.\r\n    const setterJs = new Function('value', `\n        const oldValue = this.${privateKey};\n        if (value !== oldValue) {\n            this.${privateKey} = value;\n            ${type === 'normal' ? `this.markDirty(this, ${redraw});` : ''}\n            ${type === 'transform' ? `this.markDirtyTransform(${redraw});` : ''}\n            ${type === 'path'\r\n        ? `if (!this._dirtyPath) { this._dirtyPath = true; this.markDirty(this, ${redraw}); }`\r\n        : ''}\n            ${type === 'font'\r\n        ? `if (!this._dirtyFont) { this._dirtyFont = true; this.markDirty(this, ${redraw}); }`\r\n        : ''}\n        }\n        ${checkDirtyOnAssignment\r\n        ? `if (value != null && value._dirty > ${RedrawType.NONE}) { this.markDirty(value, value._dirty); }`\r\n        : ''}\n`);\r\n    const getterJs = new Function(`return this.${privateKey};`);\r\n    Object.defineProperty(target, key, {\r\n        set: setterJs,\r\n        get: getterJs,\r\n        enumerable: true,\r\n        configurable: true,\r\n    });\r\n}\r\nfunction prepareSlowGetSet(target, key, privateKey, opts) {\r\n    const { redraw = RedrawType.TRIVIAL, type = 'normal', changeCb, convertor, checkDirtyOnAssignment = false, } = opts !== null && opts !== void 0 ? opts : {};\r\n    // Unoptimised but 'safe' code-path, for environments with CSP headers and no 'unsafe-eval'.\r\n    // We deliberately do not support debug branches found in the optimised path above, since\r\n    // for large data-set series performance deteriorates with every extra branch here.\r\n    const setter = function (value) {\r\n        const oldValue = this[privateKey];\r\n        value = convertor ? convertor(value) : value;\r\n        if (value !== oldValue) {\r\n            this[privateKey] = value;\r\n            if (type === 'normal')\r\n                this.markDirty(this, redraw);\r\n            if (type === 'transform')\r\n                this.markDirtyTransform(redraw);\r\n            if (type === 'path' && !this._dirtyPath) {\r\n                this._dirtyPath = true;\r\n                this.markDirty(this, redraw);\r\n            }\r\n            if (type === 'font' && !this._dirtyFont) {\r\n                this._dirtyFont = true;\r\n                this.markDirty(this, redraw);\r\n            }\r\n            if (changeCb)\r\n                changeCb(this);\r\n        }\r\n        if (checkDirtyOnAssignment && value != null && value._dirty > RedrawType.NONE)\r\n            this.markDirty(value, value._dirty);\r\n    };\r\n    const getter = function () {\r\n        return this[privateKey];\r\n    };\r\n    Object.defineProperty(target, key, {\r\n        set: setter,\r\n        get: getter,\r\n        enumerable: true,\r\n        configurable: true,\r\n    });\r\n}\r\nclass ChangeDetectable {\r\n    constructor() {\r\n        this._dirty = RedrawType.MAJOR;\r\n    }\r\n    markDirty(_source, type = RedrawType.TRIVIAL) {\r\n        if (this._dirty > type) {\r\n            return;\r\n        }\r\n        this._dirty = type;\r\n    }\r\n    markClean(_opts) {\r\n        this._dirty = RedrawType.NONE;\r\n    }\r\n    isDirty() {\r\n        return this._dirty > RedrawType.NONE;\r\n    }\r\n}\n\nconst ID_MAP = {};\r\nfunction resetIds() {\r\n    for (const key in ID_MAP) {\r\n        delete ID_MAP[key];\r\n    }\r\n}\r\nfunction createId(instance) {\r\n    var _a;\r\n    const constructor = instance.constructor;\r\n    const className = Object.prototype.hasOwnProperty.call(constructor, 'className')\r\n        ? constructor.className\r\n        : constructor.name;\r\n    if (!className) {\r\n        throw new Error(`The ${constructor} is missing the 'className' property.`);\r\n    }\r\n    const nextId = ((_a = ID_MAP[className]) !== null && _a !== void 0 ? _a : 0) + 1;\r\n    ID_MAP[className] = nextId;\r\n    return className + '-' + nextId;\r\n}\n\nfunction nearestSquared(point, objects, maxDistanceSquared = Infinity) {\r\n    const result = { nearest: undefined, distanceSquared: maxDistanceSquared };\r\n    for (const obj of objects) {\r\n        const thisDistance = obj.distanceSquared(point);\r\n        if (thisDistance === 0) {\r\n            return { nearest: obj, distanceSquared: 0 };\r\n        }\r\n        else if (thisDistance < result.distanceSquared) {\r\n            result.nearest = obj;\r\n            result.distanceSquared = thisDistance;\r\n        }\r\n    }\r\n    return result;\r\n}\r\nfunction nearestSquaredInContainer(point, container, maxDistanceSquared = Infinity) {\r\n    const tpoint = container.transformPoint(point.x, point.y);\r\n    const result = { nearest: undefined, distanceSquared: maxDistanceSquared };\r\n    for (const child of container.children) {\r\n        const { nearest, distanceSquared } = child.nearestSquared(tpoint, result.distanceSquared);\r\n        if (distanceSquared === 0) {\r\n            return { nearest, distanceSquared };\r\n        }\r\n        else if (distanceSquared < result.distanceSquared) {\r\n            result.nearest = nearest;\r\n            result.distanceSquared = distanceSquared;\r\n        }\r\n    }\r\n    return result;\r\n}\n\nclass BBox {\r\n    constructor(x, y, width, height) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = width;\r\n        this.height = height;\r\n    }\r\n    clone() {\r\n        const { x, y, width, height } = this;\r\n        return new BBox(x, y, width, height);\r\n    }\r\n    equals(other) {\r\n        return this.x === other.x && this.y === other.y && this.width === other.width && this.height === other.height;\r\n    }\r\n    containsPoint(x, y) {\r\n        return x >= this.x && x <= this.x + this.width && y >= this.y && y <= this.y + this.height;\r\n    }\r\n    collidesBBox(other) {\r\n        return (this.x < other.x + other.width &&\r\n            this.x + this.width > other.x &&\r\n            this.y < other.y + other.height &&\r\n            this.y + this.height > other.y);\r\n    }\r\n    isInfinite() {\r\n        return (Math.abs(this.x) === Infinity ||\r\n            Math.abs(this.y) === Infinity ||\r\n            Math.abs(this.width) === Infinity ||\r\n            Math.abs(this.height) === Infinity);\r\n    }\r\n    distanceSquared(point) {\r\n        if (this.containsPoint(point.x, point.y)) {\r\n            return 0;\r\n        }\r\n        const dx = point.x - Math.max(this.x, Math.min(point.x, this.x + this.width));\r\n        const dy = point.y - Math.max(this.y, Math.min(point.y, this.y + this.height));\r\n        return dx * dx + dy * dy;\r\n    }\r\n    static nearestBox(point, boxes) {\r\n        return nearestSquared(point, boxes);\r\n    }\r\n    shrink(amount, position) {\r\n        const apply = (pos, amt) => {\r\n            switch (pos) {\r\n                case 'top':\r\n                    this.y += amt;\r\n                // eslint-disable-next-line no-fallthrough\r\n                case 'bottom':\r\n                    this.height -= amt;\r\n                    break;\r\n                case 'left':\r\n                    this.x += amt;\r\n                // eslint-disable-next-line no-fallthrough\r\n                case 'right':\r\n                    this.width -= amt;\r\n                    break;\r\n                case 'vertical':\r\n                    this.y += amt;\r\n                    this.height -= amt * 2;\r\n                    break;\r\n                case 'horizontal':\r\n                    this.x += amt;\r\n                    this.width -= amt * 2;\r\n                    break;\r\n                case undefined:\r\n                    this.x += amt;\r\n                    this.width -= amt * 2;\r\n                    this.y += amt;\r\n                    this.height -= amt * 2;\r\n                    break;\r\n                // Unknown position - do nothing.\r\n            }\r\n        };\r\n        if (typeof amount === 'number') {\r\n            apply(position, amount);\r\n        }\r\n        else {\r\n            Object.entries(amount).forEach(([pos, amt]) => apply(pos, amt));\r\n        }\r\n        return this;\r\n    }\r\n    grow(amount, position) {\r\n        if (typeof amount === 'number') {\r\n            this.shrink(-amount, position);\r\n        }\r\n        else {\r\n            const paddingCopy = Object.assign({}, amount);\r\n            for (const key in paddingCopy) {\r\n                paddingCopy[key] *= -1;\r\n            }\r\n            this.shrink(paddingCopy);\r\n        }\r\n        return this;\r\n    }\r\n    static merge(boxes) {\r\n        let left = Infinity;\r\n        let top = Infinity;\r\n        let right = -Infinity;\r\n        let bottom = -Infinity;\r\n        boxes.forEach((box) => {\r\n            if (box.x < left) {\r\n                left = box.x;\r\n            }\r\n            if (box.y < top) {\r\n                top = box.y;\r\n            }\r\n            if (box.x + box.width > right) {\r\n                right = box.x + box.width;\r\n            }\r\n            if (box.y + box.height > bottom) {\r\n                bottom = box.y + box.height;\r\n            }\r\n        });\r\n        return new BBox(left, top, right - left, bottom - top);\r\n    }\r\n}\r\nBBox.zero = new BBox(0, 0, 0, 0);\n\n/**\r\n * As of Jan 8, 2019, Firefox still doesn't implement\r\n * `getTransform(): DOMMatrix;`\r\n * `setTransform(transform?: DOMMatrix2DInit)`\r\n * in the `CanvasRenderingContext2D`.\r\n * Bug: https://bugzilla.mozilla.org/show_bug.cgi?id=928150\r\n * IE11 and Edge 44 also don't have the support.\r\n * Thus this class, to keep track of the current transform and\r\n * combine transformations.\r\n * Standards:\r\n * https://html.spec.whatwg.org/dev/canvas.html\r\n * https://www.w3.org/TR/geometry-1/\r\n */\r\nclass Matrix {\r\n    get e() {\r\n        return [...this.elements];\r\n    }\r\n    constructor(elements = [1, 0, 0, 1, 0, 0]) {\r\n        this.elements = elements;\r\n    }\r\n    setElements(elements) {\r\n        const e = this.elements;\r\n        // `this.elements = elements.slice()` is 4-5 times slower\r\n        // (in Chrome 71 and FF 64) than manually copying elements,\r\n        // since slicing allocates new memory.\r\n        // The performance of passing parameters individually\r\n        // vs as an array is about the same in both browsers, so we\r\n        // go with a single (array of elements) parameter, because\r\n        // `setElements(elements)` and `setElements([a, b, c, d, e, f])`\r\n        // calls give us roughly the same performance, versus\r\n        // `setElements(...elements)` and `setElements(a, b, c, d, e, f)`,\r\n        // where the spread operator causes a 20-30x performance drop\r\n        // (30x when compiled to ES5's `.apply(this, elements)`\r\n        //  20x when used natively).\r\n        e[0] = elements[0];\r\n        e[1] = elements[1];\r\n        e[2] = elements[2];\r\n        e[3] = elements[3];\r\n        e[4] = elements[4];\r\n        e[5] = elements[5];\r\n        return this;\r\n    }\r\n    get identity() {\r\n        const e = this.elements;\r\n        return e[0] === 1 && e[1] === 0 && e[2] === 0 && e[3] === 1 && e[4] === 0 && e[5] === 0;\r\n    }\r\n    /**\r\n     * Performs the AxB matrix multiplication and saves the result\r\n     * to `C`, if given, or to `A` otherwise.\r\n     */\r\n    AxB(A, B, C) {\r\n        const a = A[0] * B[0] + A[2] * B[1], b = A[1] * B[0] + A[3] * B[1], c = A[0] * B[2] + A[2] * B[3], d = A[1] * B[2] + A[3] * B[3], e = A[0] * B[4] + A[2] * B[5] + A[4], f = A[1] * B[4] + A[3] * B[5] + A[5];\r\n        C = C !== null && C !== void 0 ? C : A;\r\n        C[0] = a;\r\n        C[1] = b;\r\n        C[2] = c;\r\n        C[3] = d;\r\n        C[4] = e;\r\n        C[5] = f;\r\n    }\r\n    /**\r\n     * The `other` matrix gets post-multiplied to the current matrix.\r\n     * Returns the current matrix.\r\n     * @param other\r\n     */\r\n    multiplySelf(other) {\r\n        this.AxB(this.elements, other.elements);\r\n        return this;\r\n    }\r\n    /**\r\n     * The `other` matrix gets post-multiplied to the current matrix.\r\n     * Returns a new matrix.\r\n     * @param other\r\n     */\r\n    multiply(other) {\r\n        const elements = new Array(6);\r\n        this.AxB(this.elements, other.elements, elements);\r\n        return new Matrix(elements);\r\n    }\r\n    preMultiplySelf(other) {\r\n        this.AxB(other.elements, this.elements, this.elements);\r\n        return this;\r\n    }\r\n    /**\r\n     * Returns the inverse of this matrix as a new matrix.\r\n     */\r\n    inverse() {\r\n        const el = this.elements;\r\n        let a = el[0], b = el[1], c = el[2], d = el[3];\r\n        const e = el[4], f = el[5];\r\n        const rD = 1 / (a * d - b * c); // reciprocal of determinant\r\n        a *= rD;\r\n        b *= rD;\r\n        c *= rD;\r\n        d *= rD;\r\n        return new Matrix([d, -b, -c, a, c * f - d * e, b * e - a * f]);\r\n    }\r\n    /**\r\n     * Save the inverse of this matrix to the given matrix.\r\n     */\r\n    inverseTo(other) {\r\n        const el = this.elements;\r\n        let a = el[0], b = el[1], c = el[2], d = el[3];\r\n        const e = el[4], f = el[5];\r\n        const rD = 1 / (a * d - b * c); // reciprocal of determinant\r\n        a *= rD;\r\n        b *= rD;\r\n        c *= rD;\r\n        d *= rD;\r\n        other.setElements([d, -b, -c, a, c * f - d * e, b * e - a * f]);\r\n        return this;\r\n    }\r\n    invertSelf() {\r\n        const el = this.elements;\r\n        let a = el[0], b = el[1], c = el[2], d = el[3];\r\n        const e = el[4], f = el[5];\r\n        const rD = 1 / (a * d - b * c); // reciprocal of determinant\r\n        a *= rD;\r\n        b *= rD;\r\n        c *= rD;\r\n        d *= rD;\r\n        el[0] = d;\r\n        el[1] = -b;\r\n        el[2] = -c;\r\n        el[3] = a;\r\n        el[4] = c * f - d * e;\r\n        el[5] = b * e - a * f;\r\n        return this;\r\n    }\r\n    transformPoint(x, y) {\r\n        const e = this.elements;\r\n        return {\r\n            x: x * e[0] + y * e[2] + e[4],\r\n            y: x * e[1] + y * e[3] + e[5],\r\n        };\r\n    }\r\n    transformBBox(bbox, target) {\r\n        const elements = this.elements;\r\n        const xx = elements[0];\r\n        const xy = elements[1];\r\n        const yx = elements[2];\r\n        const yy = elements[3];\r\n        const h_w = bbox.width * 0.5;\r\n        const h_h = bbox.height * 0.5;\r\n        const cx = bbox.x + h_w;\r\n        const cy = bbox.y + h_h;\r\n        const w = Math.abs(h_w * xx) + Math.abs(h_h * yx);\r\n        const h = Math.abs(h_w * xy) + Math.abs(h_h * yy);\r\n        if (!target) {\r\n            target = new BBox(0, 0, 0, 0);\r\n        }\r\n        target.x = cx * xx + cy * yx + elements[4] - w;\r\n        target.y = cx * xy + cy * yy + elements[5] - h;\r\n        target.width = w + w;\r\n        target.height = h + h;\r\n        return target;\r\n    }\r\n    toContext(ctx) {\r\n        // It's fair to say that matrix multiplications are not cheap.\r\n        // However, updating path definitions on every frame isn't either, so\r\n        // it may be cheaper to just translate paths. It's also fair to\r\n        // say, that most paths will have to be re-rendered anyway, say\r\n        // rectangle paths in a bar chart, where an animation would happen when\r\n        // the data set changes and existing bars are morphed into new ones.\r\n        // Or a pie chart, where old sectors are also morphed into new ones.\r\n        // Same for the line chart. The only plausible case where translating\r\n        // existing paths would be enough, is the scatter chart, where marker\r\n        // icons, typically circles, stay the same size. But if circle radii\r\n        // are bound to some data points, even circle paths would have to be\r\n        // updated. And thus it makes sense to optimize for fewer matrix\r\n        // transforms, where transform matrices of paths are mostly identity\r\n        // matrices and `x`/`y`, `centerX`/`centerY` and similar properties\r\n        // are used to define a path at specific coordinates. And only groups\r\n        // are used to collectively apply a transform to a set of nodes.\r\n        // If the matrix is mostly identity (95% of the time),\r\n        // the `if (this.isIdentity)` check can make this call 3-4 times\r\n        // faster on average: https://jsperf.com/matrix-check-first-vs-always-set\r\n        if (this.identity) {\r\n            return;\r\n        }\r\n        const e = this.elements;\r\n        ctx.transform(e[0], e[1], e[2], e[3], e[4], e[5]);\r\n    }\r\n    static flyweight(sourceMatrix) {\r\n        return Matrix.instance.setElements(sourceMatrix.elements);\r\n    }\r\n    static updateTransformMatrix(matrix, scalingX, scalingY, rotation, translationX, translationY, opts) {\r\n        // Assume that centers of scaling and rotation are at the origin.\r\n        const [bbcx, bbcy] = [0, 0];\r\n        const sx = scalingX;\r\n        const sy = scalingY;\r\n        let scx;\r\n        let scy;\r\n        if (sx === 1 && sy === 1) {\r\n            scx = 0;\r\n            scy = 0;\r\n        }\r\n        else {\r\n            scx = (opts === null || opts === void 0 ? void 0 : opts.scalingCenterX) == null ? bbcx : opts === null || opts === void 0 ? void 0 : opts.scalingCenterX;\r\n            scy = (opts === null || opts === void 0 ? void 0 : opts.scalingCenterY) == null ? bbcy : opts === null || opts === void 0 ? void 0 : opts.scalingCenterY;\r\n        }\r\n        const r = rotation;\r\n        const cos = Math.cos(r);\r\n        const sin = Math.sin(r);\r\n        let rcx;\r\n        let rcy;\r\n        if (r === 0) {\r\n            rcx = 0;\r\n            rcy = 0;\r\n        }\r\n        else {\r\n            rcx = (opts === null || opts === void 0 ? void 0 : opts.rotationCenterX) == null ? bbcx : opts === null || opts === void 0 ? void 0 : opts.rotationCenterX;\r\n            rcy = (opts === null || opts === void 0 ? void 0 : opts.rotationCenterY) == null ? bbcy : opts === null || opts === void 0 ? void 0 : opts.rotationCenterY;\r\n        }\r\n        const tx = translationX;\r\n        const ty = translationY;\r\n        // The transform matrix `M` is a result of the following transformations:\r\n        // 1) translate the center of scaling to the origin\r\n        // 2) scale\r\n        // 3) translate back\r\n        // 4) translate the center of rotation to the origin\r\n        // 5) rotate\r\n        // 6) translate back\r\n        // 7) translate\r\n        //         (7)          (6)             (5)             (4)           (3)           (2)           (1)\r\n        //     | 1 0 tx |   | 1 0 rcx |   | cos -sin 0 |   | 1 0 -rcx |   | 1 0 scx |   | sx 0 0 |   | 1 0 -scx |\r\n        // M = | 0 1 ty | * | 0 1 rcy | * | sin  cos 0 | * | 0 1 -rcy | * | 0 1 scy | * | 0 sy 0 | * | 0 1 -scy |\r\n        //     | 0 0  1 |   | 0 0  1  |   |  0    0  1 |   | 0 0  1   |   | 0 0  1  |   | 0  0 0 |   | 0 0  1   |\r\n        // Translation after steps 1-4 above:\r\n        const tx4 = scx * (1 - sx) - rcx;\r\n        const ty4 = scy * (1 - sy) - rcy;\r\n        matrix.setElements([\r\n            cos * sx,\r\n            sin * sx,\r\n            -sin * sy,\r\n            cos * sy,\r\n            cos * tx4 - sin * ty4 + rcx + tx,\r\n            sin * tx4 + cos * ty4 + rcy + ty,\r\n        ]);\r\n        return matrix;\r\n    }\r\n    static fromContext(ctx) {\r\n        const domMatrix = ctx.getTransform();\r\n        return new Matrix([domMatrix.a, domMatrix.b, domMatrix.c, domMatrix.d, domMatrix.e, domMatrix.f]);\r\n    }\r\n}\r\nMatrix.instance = new Matrix();\n\nvar PointerEvents;\r\n(function (PointerEvents) {\r\n    PointerEvents[PointerEvents[\"All\"] = 0] = \"All\";\r\n    PointerEvents[PointerEvents[\"None\"] = 1] = \"None\";\r\n})(PointerEvents || (PointerEvents = {}));\r\nconst zIndexChangedCallback = (o) => {\r\n    if (o.parent) {\r\n        o.parent.dirtyZIndex = true;\r\n    }\r\n    o.zIndexChanged();\r\n};\r\n/**\r\n * Abstract scene graph node.\r\n * Each node can have zero or one parent and belong to zero or one scene.\r\n */\r\nclass Node extends ChangeDetectable {\r\n    /**\r\n     * Some arbitrary data bound to the node.\r\n     */\r\n    get datum() {\r\n        var _a, _b;\r\n        return (_a = this._datum) !== null && _a !== void 0 ? _a : (_b = this._parent) === null || _b === void 0 ? void 0 : _b.datum;\r\n    }\r\n    get previousDatum() {\r\n        return this._previousDatum;\r\n    }\r\n    set datum(datum) {\r\n        if (this._datum !== datum)\r\n            this._previousDatum = this._datum;\r\n        this._datum = datum;\r\n    }\r\n    _setLayerManager(value) {\r\n        this._layerManager = value;\r\n        this._debug = value === null || value === void 0 ? void 0 : value.debug;\r\n        for (const child of this._children) {\r\n            child._setLayerManager(value);\r\n        }\r\n        for (const child of this._virtualChildren) {\r\n            child._setLayerManager(value);\r\n        }\r\n    }\r\n    get layerManager() {\r\n        return this._layerManager;\r\n    }\r\n    get parent() {\r\n        return this._parent;\r\n    }\r\n    get children() {\r\n        if (this._virtualChildren.length === 0)\r\n            return this._children;\r\n        const result = [...this._children];\r\n        for (const next of this._virtualChildren) {\r\n            result.push(...next.children);\r\n        }\r\n        return result;\r\n    }\r\n    get virtualChildren() {\r\n        return this._virtualChildren;\r\n    }\r\n    hasVirtualChildren() {\r\n        return this._virtualChildren.length > 0;\r\n    }\r\n    setProperties(styles, pickKeys) {\r\n        const keys = pickKeys !== null && pickKeys !== void 0 ? pickKeys : Object.keys(styles);\r\n        for (const key of keys) {\r\n            this[key] = styles[key];\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * Appends one or more new node instances to this parent.\r\n     * If one needs to:\r\n     * - move a child to the end of the list of children\r\n     * - move a child from one parent to another (including parents in other scenes)\r\n     * one should use the {@link insertBefore} method instead.\r\n     * @param nodes A node or nodes to append.\r\n     */\r\n    append(nodes) {\r\n        // Passing a single parameter to an open-ended version of `append`\r\n        // would be 30-35% slower than this.\r\n        if (!Array.isArray(nodes)) {\r\n            nodes = [nodes];\r\n        }\r\n        for (const node of nodes) {\r\n            if (node.parent) {\r\n                throw new Error(`${node} already belongs to another parent: ${node.parent}.`);\r\n            }\r\n            if (node.layerManager) {\r\n                throw new Error(`${node} already belongs to a scene: ${node.layerManager}.`);\r\n            }\r\n            if (this.childSet[node.id]) {\r\n                // Cast to `any` to avoid `Property 'name' does not exist on type 'Function'`.\r\n                throw new Error(`Duplicate ${node.constructor.name} node: ${node}`);\r\n            }\r\n            if (node.isVirtual) {\r\n                this._virtualChildren.push(node);\r\n            }\r\n            else {\r\n                this._children.push(node);\r\n            }\r\n            this.childSet[node.id] = true;\r\n            node._parent = this;\r\n            node._setLayerManager(this.layerManager);\r\n        }\r\n        this.dirtyZIndex = true;\r\n        this.markDirty(this, RedrawType.MAJOR);\r\n    }\r\n    appendChild(node) {\r\n        this.append(node);\r\n        return node;\r\n    }\r\n    removeChild(node) {\r\n        const error = () => {\r\n            throw new Error(`The node to be removed is not a child of this node.`);\r\n        };\r\n        if (node.parent !== this) {\r\n            error();\r\n        }\r\n        if (node.isVirtual) {\r\n            const i = this._virtualChildren.indexOf(node);\r\n            if (i < 0)\r\n                error();\r\n            this._virtualChildren.splice(i, 1);\r\n        }\r\n        else {\r\n            const i = this._children.indexOf(node);\r\n            if (i < 0)\r\n                error();\r\n            this._children.splice(i, 1);\r\n        }\r\n        delete this.childSet[node.id];\r\n        node._parent = undefined;\r\n        node._setLayerManager();\r\n        this.dirtyZIndex = true;\r\n        this.markDirty(node, RedrawType.MAJOR);\r\n        return node;\r\n    }\r\n    calculateCumulativeMatrix() {\r\n        this.computeTransformMatrix();\r\n        const matrix = Matrix.flyweight(this.matrix);\r\n        let parent = this.parent;\r\n        while (parent) {\r\n            parent.computeTransformMatrix();\r\n            matrix.preMultiplySelf(parent.matrix);\r\n            parent = parent.parent;\r\n        }\r\n        return matrix;\r\n    }\r\n    transformPoint(x, y) {\r\n        const matrix = this.calculateCumulativeMatrix();\r\n        return matrix.invertSelf().transformPoint(x, y);\r\n    }\r\n    inverseTransformPoint(x, y) {\r\n        const matrix = this.calculateCumulativeMatrix();\r\n        return matrix.transformPoint(x, y);\r\n    }\r\n    transformBBox(bbox) {\r\n        const matrix = this.calculateCumulativeMatrix();\r\n        return matrix.invertSelf().transformBBox(bbox);\r\n    }\r\n    inverseTransformBBox(bbox) {\r\n        const matrix = this.calculateCumulativeMatrix();\r\n        return matrix.transformBBox(bbox);\r\n    }\r\n    markDirtyTransform() {\r\n        this.dirtyTransform = true;\r\n        this.markDirty(this, RedrawType.MAJOR);\r\n    }\r\n    constructor({ isVirtual, tag } = {}) {\r\n        super();\r\n        /** Unique number to allow creation order to be easily determined. */\r\n        this.serialNumber = Node._nextSerialNumber++;\r\n        /**\r\n         * Unique node ID in the form `ClassName-NaturalNumber`.\r\n         */\r\n        this.id = createId(this);\r\n        /**\r\n         * To simplify the type system (especially in Selections) we don't have the `Parent` node\r\n         * (one that has children). Instead, we mimic HTML DOM, where any node can have children.\r\n         * But we still need to distinguish regular leaf nodes from container leafs somehow.\r\n         */\r\n        this.isContainerNode = false;\r\n        this._virtualChildren = [];\r\n        this._children = [];\r\n        // Used to check for duplicate nodes.\r\n        this.childSet = {}; // new Set<Node>()\r\n        // These matrices may need to have package level visibility\r\n        // for performance optimization purposes.\r\n        this.matrix = new Matrix();\r\n        this.inverseMatrix = new Matrix();\r\n        this.dirtyTransform = false;\r\n        this.scalingX = 1;\r\n        this.scalingY = 1;\r\n        /**\r\n         * The center of scaling.\r\n         * The default value of `null` means the scaling center will be\r\n         * determined automatically, as the center of the bounding box\r\n         * of a node.\r\n         */\r\n        this.scalingCenterX = null;\r\n        this.scalingCenterY = null;\r\n        this.rotationCenterX = null;\r\n        this.rotationCenterY = null;\r\n        /**\r\n         * Rotation angle in radians.\r\n         * The value is set as is. No normalization to the [-180, 180) or [0, 360)\r\n         * interval is performed.\r\n         */\r\n        this.rotation = 0;\r\n        this.translationX = 0;\r\n        this.translationY = 0;\r\n        this.visible = true;\r\n        this.dirtyZIndex = false;\r\n        this.zIndex = 0;\r\n        /** Discriminators for render order within a zIndex. */\r\n        this.zIndexSubOrder = undefined;\r\n        this.pointerEvents = PointerEvents.All;\r\n        this.isVirtual = isVirtual !== null && isVirtual !== void 0 ? isVirtual : false;\r\n        this.tag = tag !== null && tag !== void 0 ? tag : NaN;\r\n    }\r\n    containsPoint(_x, _y) {\r\n        return false;\r\n    }\r\n    /**\r\n     * Hit testing method.\r\n     * Recursively checks if the given point is inside this node or any of its children.\r\n     * Returns the first matching node or `undefined`.\r\n     * Nodes that render later (show on top) are hit tested first.\r\n     */\r\n    pickNode(x, y) {\r\n        var _a;\r\n        if (!this.visible || this.pointerEvents === PointerEvents.None || !this.containsPoint(x, y)) {\r\n            return;\r\n        }\r\n        const children = this.children;\r\n        if (children.length > 1000) {\r\n            // Try to optimise which children to interrogate; BBox calculation is an approximation\r\n            // for more complex shapes, so discarding items based on this will save a lot of\r\n            // processing when the point is nowhere near the child.\r\n            for (let i = children.length - 1; i >= 0; i--) {\r\n                const child = children[i];\r\n                const containsPoint = (_a = child.computeTransformedBBox()) === null || _a === void 0 ? void 0 : _a.containsPoint(x, y);\r\n                const hit = containsPoint ? child.pickNode(x, y) : undefined;\r\n                if (hit) {\r\n                    return hit;\r\n                }\r\n            }\r\n        }\r\n        else if (children.length) {\r\n            // Nodes added later should be hit-tested first,\r\n            // as they are rendered on top of the previously added nodes.\r\n            for (let i = children.length - 1; i >= 0; i--) {\r\n                const hit = children[i].pickNode(x, y);\r\n                if (hit) {\r\n                    return hit;\r\n                }\r\n            }\r\n        }\r\n        else if (!this.isContainerNode) {\r\n            // a leaf node, but not a container leaf\r\n            return this;\r\n        }\r\n    }\r\n    findNodes(predicate) {\r\n        const result = predicate(this) ? [this] : [];\r\n        for (const child of this.children) {\r\n            const childResult = child.findNodes(predicate);\r\n            if (childResult) {\r\n                result.push(...childResult);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    computeBBox() {\r\n        return;\r\n    }\r\n    computeTransformedBBox() {\r\n        const bbox = this.computeBBox();\r\n        if (!bbox) {\r\n            return undefined;\r\n        }\r\n        this.computeTransformMatrix();\r\n        const matrix = Matrix.flyweight(this.matrix);\r\n        let parent = this.parent;\r\n        while (parent) {\r\n            parent.computeTransformMatrix();\r\n            matrix.preMultiplySelf(parent.matrix);\r\n            parent = parent.parent;\r\n        }\r\n        matrix.transformBBox(bbox, bbox);\r\n        return bbox;\r\n    }\r\n    computeTransformMatrix() {\r\n        if (!this.dirtyTransform) {\r\n            return;\r\n        }\r\n        const { matrix, scalingX, scalingY, rotation, translationX, translationY, scalingCenterX, scalingCenterY, rotationCenterX, rotationCenterY, } = this;\r\n        Matrix.updateTransformMatrix(matrix, scalingX, scalingY, rotation, translationX, translationY, {\r\n            scalingCenterX,\r\n            scalingCenterY,\r\n            rotationCenterX,\r\n            rotationCenterY,\r\n        });\r\n        matrix.inverseTo(this.inverseMatrix);\r\n        this.dirtyTransform = false;\r\n    }\r\n    render(renderCtx) {\r\n        const { stats } = renderCtx;\r\n        this._dirty = RedrawType.NONE;\r\n        if (stats)\r\n            stats.nodesRendered++;\r\n    }\r\n    clearBBox(ctx) {\r\n        const bbox = this.computeBBox();\r\n        if (bbox == null) {\r\n            return;\r\n        }\r\n        const { x, y, width, height } = bbox;\r\n        const topLeft = this.transformPoint(x, y);\r\n        const bottomRight = this.transformPoint(x + width, y + height);\r\n        ctx.clearRect(topLeft.x, topLeft.y, bottomRight.x - topLeft.x, bottomRight.y - topLeft.y);\r\n    }\r\n    markDirty(_source, type = RedrawType.TRIVIAL, parentType = type) {\r\n        if (this._dirty > type) {\r\n            return;\r\n        }\r\n        if (this._dirty === type && type === parentType) {\r\n            return;\r\n        }\r\n        this._dirty = type;\r\n        if (this.parent) {\r\n            this.parent.markDirty(this, parentType);\r\n        }\r\n        else if (this.layerManager) {\r\n            this.layerManager.markDirty();\r\n        }\r\n    }\r\n    get dirty() {\r\n        return this._dirty;\r\n    }\r\n    markClean(opts) {\r\n        const { force = false, recursive = true } = opts !== null && opts !== void 0 ? opts : {};\r\n        if (this._dirty === RedrawType.NONE && !force) {\r\n            return;\r\n        }\r\n        this._dirty = RedrawType.NONE;\r\n        if (recursive !== false) {\r\n            for (const child of this._virtualChildren) {\r\n                child.markClean({ force });\r\n            }\r\n        }\r\n        if (recursive === true) {\r\n            for (const child of this._children) {\r\n                child.markClean({ force });\r\n            }\r\n        }\r\n    }\r\n    visibilityChanged() {\r\n        // Override point for sub-classes to react to visibility changes.\r\n    }\r\n    get nodeCount() {\r\n        let count = 1;\r\n        let dirtyCount = this._dirty >= RedrawType.NONE || this.dirtyTransform ? 1 : 0;\r\n        let visibleCount = this.visible ? 1 : 0;\r\n        const countChild = (child) => {\r\n            const { count: childCount, visibleCount: childVisibleCount, dirtyCount: childDirtyCount } = child.nodeCount;\r\n            count += childCount;\r\n            visibleCount += childVisibleCount;\r\n            dirtyCount += childDirtyCount;\r\n        };\r\n        for (const child of this._children) {\r\n            countChild(child);\r\n        }\r\n        for (const child of this._virtualChildren) {\r\n            countChild(child);\r\n        }\r\n        return { count, visibleCount, dirtyCount };\r\n    }\r\n    zIndexChanged() {\r\n        // Override point for sub-classes.\r\n    }\r\n}\r\nNode._nextSerialNumber = 0;\r\n__decorate([\r\n    SceneChangeDetection({ type: 'transform' }),\r\n    __metadata(\"design:type\", Number)\r\n], Node.prototype, \"scalingX\", void 0);\r\n__decorate([\r\n    SceneChangeDetection({ type: 'transform' }),\r\n    __metadata(\"design:type\", Number)\r\n], Node.prototype, \"scalingY\", void 0);\r\n__decorate([\r\n    SceneChangeDetection({ type: 'transform' }),\r\n    __metadata(\"design:type\", Object)\r\n], Node.prototype, \"scalingCenterX\", void 0);\r\n__decorate([\r\n    SceneChangeDetection({ type: 'transform' }),\r\n    __metadata(\"design:type\", Object)\r\n], Node.prototype, \"scalingCenterY\", void 0);\r\n__decorate([\r\n    SceneChangeDetection({ type: 'transform' }),\r\n    __metadata(\"design:type\", Object)\r\n], Node.prototype, \"rotationCenterX\", void 0);\r\n__decorate([\r\n    SceneChangeDetection({ type: 'transform' }),\r\n    __metadata(\"design:type\", Object)\r\n], Node.prototype, \"rotationCenterY\", void 0);\r\n__decorate([\r\n    SceneChangeDetection({ type: 'transform' }),\r\n    __metadata(\"design:type\", Number)\r\n], Node.prototype, \"rotation\", void 0);\r\n__decorate([\r\n    SceneChangeDetection({ type: 'transform' }),\r\n    __metadata(\"design:type\", Number)\r\n], Node.prototype, \"translationX\", void 0);\r\n__decorate([\r\n    SceneChangeDetection({ type: 'transform' }),\r\n    __metadata(\"design:type\", Number)\r\n], Node.prototype, \"translationY\", void 0);\r\n__decorate([\r\n    SceneChangeDetection({ redraw: RedrawType.MAJOR, changeCb: (o) => o.visibilityChanged() }),\r\n    __metadata(\"design:type\", Boolean)\r\n], Node.prototype, \"visible\", void 0);\r\n__decorate([\r\n    SceneChangeDetection({\r\n        redraw: RedrawType.TRIVIAL,\r\n        changeCb: zIndexChangedCallback,\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], Node.prototype, \"zIndex\", void 0);\r\n__decorate([\r\n    SceneChangeDetection({\r\n        redraw: RedrawType.TRIVIAL,\r\n        changeCb: zIndexChangedCallback,\r\n    })\r\n    /** Discriminators for render order within a zIndex. */\r\n    ,\r\n    __metadata(\"design:type\", Array)\r\n], Node.prototype, \"zIndexSubOrder\", void 0);\n\nclass DropShadow extends ChangeDetectable {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.enabled = true;\r\n        this.color = 'rgba(0, 0, 0, 0.5)';\r\n        this.xOffset = 0;\r\n        this.yOffset = 0;\r\n        this.blur = 5;\r\n    }\r\n}\r\n__decorate([\r\n    Validate(BOOLEAN),\r\n    SceneChangeDetection({ redraw: RedrawType.MAJOR }),\r\n    __metadata(\"design:type\", Object)\r\n], DropShadow.prototype, \"enabled\", void 0);\r\n__decorate([\r\n    Validate(COLOR_STRING),\r\n    SceneChangeDetection({ redraw: RedrawType.MAJOR }),\r\n    __metadata(\"design:type\", Object)\r\n], DropShadow.prototype, \"color\", void 0);\r\n__decorate([\r\n    Validate(NUMBER$1()),\r\n    SceneChangeDetection({ redraw: RedrawType.MAJOR }),\r\n    __metadata(\"design:type\", Object)\r\n], DropShadow.prototype, \"xOffset\", void 0);\r\n__decorate([\r\n    Validate(NUMBER$1()),\r\n    SceneChangeDetection({ redraw: RedrawType.MAJOR }),\r\n    __metadata(\"design:type\", Object)\r\n], DropShadow.prototype, \"yOffset\", void 0);\r\n__decorate([\r\n    Validate(NUMBER$1(0)),\r\n    SceneChangeDetection({ redraw: RedrawType.MAJOR }),\r\n    __metadata(\"design:type\", Object)\r\n], DropShadow.prototype, \"blur\", void 0);\n\nconst MOBILE = [/Android/i, /webOS/i, /iPhone/i, /iPad/i, /iPod/i, /BlackBerry/i, /Windows Phone/i];\r\nfunction isDesktop() {\r\n    if (typeof navigator === 'undefined') {\r\n        return true;\r\n    }\r\n    const userAgent = navigator.userAgent;\r\n    return !MOBILE.some((r) => r.test(userAgent));\r\n}\n\n/**\r\n * Wraps the native Canvas element and overrides its CanvasRenderingContext2D to\r\n * provide resolution independent rendering based on `window.devicePixelRatio`.\r\n */\r\nclass HdpiCanvas {\r\n    // The width/height attributes of the Canvas element default to\r\n    // 300/150 according to w3.org.\r\n    constructor(opts) {\r\n        this._enabled = true;\r\n        // `NaN` is deliberate here, so that overrides are always applied\r\n        // and the `resetTransform` inside the `resize` method works in IE11.\r\n        this._pixelRatio = NaN;\r\n        this._width = 0;\r\n        this._height = 0;\r\n        const { document, window, width = 600, height = 300, domLayer = false, zIndex = 0, name = undefined, overrideDevicePixelRatio = undefined, } = opts;\r\n        this.document = document;\r\n        this.window = window;\r\n        HdpiCanvas.document = document;\r\n        // Create canvas and immediately apply width + height to avoid out-of-memory\r\n        // errors on iOS/iPadOS Safari.\r\n        this.element = document.createElement('canvas');\r\n        this.element.width = width;\r\n        this.element.height = height;\r\n        this.realContext = this.element.getContext('2d');\r\n        this.imageSource = this.realContext.canvas;\r\n        const { style } = this.element;\r\n        style.userSelect = 'none';\r\n        style.display = 'block';\r\n        if (domLayer) {\r\n            style.position = 'absolute';\r\n            style.zIndex = String(zIndex);\r\n            style.top = '0';\r\n            style.left = '0';\r\n            style.pointerEvents = 'none';\r\n            style.opacity = `1`;\r\n            if (name) {\r\n                this.element.id = name;\r\n            }\r\n        }\r\n        this.context = this.setPixelRatio(overrideDevicePixelRatio);\r\n        this.resize(width, height);\r\n    }\r\n    set container(value) {\r\n        if (this._container !== value) {\r\n            this.remove();\r\n            if (value) {\r\n                value.appendChild(this.element);\r\n            }\r\n            this._container = value;\r\n        }\r\n    }\r\n    get container() {\r\n        return this._container;\r\n    }\r\n    set enabled(value) {\r\n        this.element.style.display = value ? 'block' : 'none';\r\n        this._enabled = !!value;\r\n    }\r\n    get enabled() {\r\n        return this._enabled;\r\n    }\r\n    remove() {\r\n        const { parentNode } = this.element;\r\n        if (parentNode != null) {\r\n            parentNode.removeChild(this.element);\r\n        }\r\n    }\r\n    destroy() {\r\n        this.element.remove();\r\n        // Workaround memory allocation quirks in iOS Safari by resizing to 0x0 and clearing.\r\n        // See https://bugs.webkit.org/show_bug.cgi?id=195325.\r\n        this.element.width = 0;\r\n        this.element.height = 0;\r\n        this.context.clearRect(0, 0, 0, 0);\r\n        Object.freeze(this);\r\n    }\r\n    snapshot() {\r\n        // No-op for compatibility with HdpiOffscreenCanvas.\r\n    }\r\n    clear() {\r\n        this.context.save();\r\n        this.context.resetTransform();\r\n        this.context.clearRect(0, 0, this.width, this.height);\r\n        this.context.restore();\r\n    }\r\n    toImage() {\r\n        const img = this.document.createElement('img');\r\n        img.src = this.getDataURL();\r\n        return img;\r\n    }\r\n    getDataURL(type) {\r\n        return this.element.toDataURL(type);\r\n    }\r\n    /**\r\n     * @param fileName The name of the downloaded file.\r\n     * @param fileFormat The file format, the default is `image/png`\r\n     */\r\n    download(fileName, fileFormat = 'image/png') {\r\n        fileName = (fileName !== null && fileName !== void 0 ? fileName : '').trim() || 'image';\r\n        const dataUrl = this.getDataURL(fileFormat);\r\n        const document = this.document;\r\n        const a = document.createElement('a');\r\n        a.href = dataUrl;\r\n        a.download = fileName;\r\n        a.style.display = 'none';\r\n        document.body.appendChild(a); // required for the `click` to work in Firefox\r\n        a.click();\r\n        document.body.removeChild(a);\r\n    }\r\n    get pixelRatio() {\r\n        return this._pixelRatio;\r\n    }\r\n    /**\r\n     * Changes the pixel ratio of the Canvas element to the given value,\r\n     * or uses the window.devicePixelRatio (default), then resizes the Canvas\r\n     * element accordingly (default).\r\n     */\r\n    setPixelRatio(ratio) {\r\n        let pixelRatio = ratio !== null && ratio !== void 0 ? ratio : this.window.devicePixelRatio;\r\n        if (!isDesktop()) {\r\n            // Mobile browsers have stricter memory limits, we reduce rendering resolution to\r\n            // improve stability on mobile browsers. iOS Safari 12->16 are pain-points since they\r\n            // have memory allocation quirks - see https://bugs.webkit.org/show_bug.cgi?id=195325.\r\n            pixelRatio = 1;\r\n        }\r\n        this._pixelRatio = pixelRatio;\r\n        return HdpiCanvas.overrideScale(this.realContext, pixelRatio);\r\n    }\r\n    set pixelated(value) {\r\n        this.element.style.imageRendering = value ? 'pixelated' : 'auto';\r\n    }\r\n    get pixelated() {\r\n        return this.element.style.imageRendering === 'pixelated';\r\n    }\r\n    get width() {\r\n        return this._width;\r\n    }\r\n    get height() {\r\n        return this._height;\r\n    }\r\n    resize(width, height) {\r\n        if (!(width > 0 && height > 0)) {\r\n            return;\r\n        }\r\n        const { element, context, pixelRatio } = this;\r\n        element.width = Math.round(width * pixelRatio);\r\n        element.height = Math.round(height * pixelRatio);\r\n        element.style.width = width + 'px';\r\n        element.style.height = height + 'px';\r\n        context.resetTransform();\r\n        this._width = width;\r\n        this._height = height;\r\n    }\r\n    static get textMeasuringContext() {\r\n        if (this._textMeasuringContext) {\r\n            return this._textMeasuringContext;\r\n        }\r\n        const canvas = this.document.createElement('canvas');\r\n        this._textMeasuringContext = canvas.getContext('2d');\r\n        return this._textMeasuringContext;\r\n    }\r\n    static get svgText() {\r\n        if (this._svgText) {\r\n            return this._svgText;\r\n        }\r\n        const xmlns = 'http://www.w3.org/2000/svg';\r\n        const svg = document.createElementNS(xmlns, 'svg');\r\n        svg.setAttribute('width', '100');\r\n        svg.setAttribute('height', '100');\r\n        // Add a descriptive class name in case someone sees this SVG element\r\n        // in devtools and wonders about its purpose:\r\n        if (svg.classList) {\r\n            svg.classList.add('text-measuring-svg');\r\n        }\r\n        else {\r\n            svg.setAttribute('class', 'text-measuring-svg');\r\n        }\r\n        svg.style.position = 'absolute';\r\n        svg.style.top = '-1000px';\r\n        svg.style.visibility = 'hidden';\r\n        const svgText = document.createElementNS(xmlns, 'text');\r\n        svgText.setAttribute('x', '0');\r\n        svgText.setAttribute('y', '30');\r\n        svgText.setAttribute('text', 'black');\r\n        svg.appendChild(svgText);\r\n        document.body.appendChild(svg);\r\n        this._svgText = svgText;\r\n        return svgText;\r\n    }\r\n    static get has() {\r\n        if (this._has) {\r\n            return this._has;\r\n        }\r\n        const isChrome = typeof navigator === 'undefined' || navigator.userAgent.indexOf('Chrome') > -1;\r\n        const isFirefox = typeof navigator !== 'undefined' && navigator.userAgent.indexOf('Firefox') > -1;\r\n        const isSafari = !isChrome && typeof navigator !== 'undefined' && navigator.userAgent.indexOf('Safari') > -1;\r\n        this._has = Object.freeze({\r\n            textMetrics: this.textMeasuringContext.measureText('test').actualBoundingBoxDescent !== undefined &&\r\n                // Firefox implemented advanced TextMetrics object in v74:\r\n                // https://bugzilla.mozilla.org/show_bug.cgi?id=1102584\r\n                // but it's buggy, so we'll keep using the SVG for text measurement in Firefox for now.\r\n                !isFirefox &&\r\n                !isSafari,\r\n            getTransform: this.textMeasuringContext.getTransform !== undefined,\r\n        });\r\n        return this._has;\r\n    }\r\n    static measureText(text, font, textBaseline, textAlign) {\r\n        const ctx = this.textMeasuringContext;\r\n        ctx.font = font;\r\n        ctx.textBaseline = textBaseline;\r\n        ctx.textAlign = textAlign;\r\n        return ctx.measureText(text);\r\n    }\r\n    /**\r\n     * Returns the width and height of the measured text.\r\n     * @param text The single-line text to measure.\r\n     * @param font The font shorthand string.\r\n     */\r\n    static getTextSize(text, font) {\r\n        if (this.has.textMetrics) {\r\n            const ctx = this.textMeasuringContext;\r\n            ctx.font = font;\r\n            const metrics = ctx.measureText(text);\r\n            return {\r\n                width: metrics.width,\r\n                height: metrics.actualBoundingBoxAscent + metrics.actualBoundingBoxDescent,\r\n            };\r\n        }\r\n        else {\r\n            return this.measureSvgText(text, font);\r\n        }\r\n    }\r\n    static measureSvgText(text, font) {\r\n        const cache = this.textSizeCache;\r\n        const fontCache = cache[font];\r\n        // Note: consider not caching the size of numeric strings.\r\n        // For example: if (isNaN(+text)) { // skip\r\n        if (fontCache) {\r\n            const size = fontCache[text];\r\n            if (size) {\r\n                return size;\r\n            }\r\n        }\r\n        else {\r\n            cache[font] = {};\r\n        }\r\n        const svgText = this.svgText;\r\n        svgText.style.font = font;\r\n        svgText.textContent = text;\r\n        // `getBBox` returns an instance of `SVGRect` with the same `width` and `height`\r\n        // measurements as `DOMRect` instance returned by the `getBoundingClientRect`.\r\n        // But the `SVGRect` instance has half the properties of the `DOMRect`,\r\n        // so we use the `getBBox` method.\r\n        const bbox = svgText.getBBox();\r\n        const size = {\r\n            width: bbox.width,\r\n            height: bbox.height,\r\n        };\r\n        cache[font][text] = size;\r\n        return size;\r\n    }\r\n    static overrideScale(ctx, scale) {\r\n        let depth = 0;\r\n        const overrides = {\r\n            save() {\r\n                this.$save();\r\n                depth++;\r\n            },\r\n            restore() {\r\n                if (depth > 0) {\r\n                    this.$restore();\r\n                    depth--;\r\n                }\r\n                else {\r\n                    throw new Error('AG Charts - Unable to restore() past depth 0');\r\n                }\r\n            },\r\n            setTransform(a, b, c, d, e, f) {\r\n                if (typeof a === 'object') {\r\n                    this.$setTransform(a);\r\n                }\r\n                else {\r\n                    this.$setTransform(a * scale, b * scale, c * scale, d * scale, e * scale, f * scale);\r\n                }\r\n            },\r\n            resetTransform() {\r\n                // As of Jan 8, 2019, `resetTransform` is still an \"experimental technology\",\r\n                // and doesn't work in IE11 and Edge 44.\r\n                this.$setTransform(scale, 0, 0, scale, 0, 0);\r\n            },\r\n            verifyDepthZero() {\r\n                if (depth !== 0) {\r\n                    throw new Error('AG Charts - Save/restore depth is non-zero: ' + depth);\r\n                }\r\n            },\r\n        };\r\n        for (const name in overrides) {\r\n            if (Object.prototype.hasOwnProperty.call(overrides, name)) {\r\n                // Save native methods under prefixed names,\r\n                // if this hasn't been done by the previous overrides already.\r\n                if (!ctx['$' + name]) {\r\n                    ctx['$' + name] = ctx[name];\r\n                }\r\n                // Replace native methods with overrides,\r\n                // or previous overrides with the new ones.\r\n                ctx[name] = overrides[name];\r\n            }\r\n        }\r\n        return ctx;\r\n    }\r\n}\r\nHdpiCanvas.document = globalThis.document;\r\nHdpiCanvas.textSizeCache = {};\n\nclass Gradient {\r\n    constructor() {\r\n        this.stops = [];\r\n    }\r\n}\n\nclass LinearGradient extends Gradient {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.angle = 0;\r\n    }\r\n    createGradient(ctx, bbox) {\r\n        // Gradient 0° angle starts at top according to CSS spec\r\n        const angleOffset = 90;\r\n        const { stops, angle } = this;\r\n        const radians = normalizeAngle360(toRadians(angle + angleOffset));\r\n        const cos = Math.cos(radians);\r\n        const sin = Math.sin(radians);\r\n        const w = bbox.width;\r\n        const h = bbox.height;\r\n        const cx = bbox.x + w * 0.5;\r\n        const cy = bbox.y + h * 0.5;\r\n        if (w > 0 && h > 0) {\r\n            const diagonal = Math.sqrt(h * h + w * w) / 2;\r\n            const diagonalAngle = Math.atan2(h, w);\r\n            let quarteredAngle;\r\n            if (radians < Math.PI / 2) {\r\n                quarteredAngle = radians;\r\n            }\r\n            else if (radians < Math.PI) {\r\n                quarteredAngle = Math.PI - radians;\r\n            }\r\n            else if (radians < (3 * Math.PI) / 2) {\r\n                quarteredAngle = radians - Math.PI;\r\n            }\r\n            else {\r\n                quarteredAngle = 2 * Math.PI - radians;\r\n            }\r\n            const l = diagonal * Math.abs(Math.cos(quarteredAngle - diagonalAngle));\r\n            const gradient = ctx.createLinearGradient(cx + cos * l, cy + sin * l, cx - cos * l, cy - sin * l);\r\n            stops.forEach((stop) => {\r\n                gradient.addColorStop(stop.offset, stop.color);\r\n            });\r\n            return gradient;\r\n        }\r\n        return 'black';\r\n    }\r\n}\n\nconst LINEAR_GRADIENT_REGEXP = /^linear-gradient\\((.*?)deg,\\s*(.*?)\\s*\\)$/i;\r\nclass Shape extends Node {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.fillOpacity = 1;\r\n        this.strokeOpacity = 1;\r\n        this.fill = Shape.defaultStyles.fill;\r\n        /**\r\n         * Note that `strokeStyle = null` means invisible stroke,\r\n         * while `lineWidth = 0` means no stroke, and sometimes this can mean different things.\r\n         * For example, a rect shape with an invisible stroke may not align to the pixel grid\r\n         * properly because the stroke affects the rules of alignment, and arc shapes forming\r\n         * a pie chart will have a gap between them if they have an invisible stroke, whereas\r\n         * there would be not gap if there was no stroke at all.\r\n         * The preferred way of making the stroke invisible is setting the `lineWidth` to zero,\r\n         * unless specific looks that is achieved by having an invisible stroke is desired.\r\n         */\r\n        this.stroke = Shape.defaultStyles.stroke;\r\n        this.strokeWidth = Shape.defaultStyles.strokeWidth;\r\n        this.lineDash = Shape.defaultStyles.lineDash;\r\n        this.lineDashOffset = Shape.defaultStyles.lineDashOffset;\r\n        this.lineCap = Shape.defaultStyles.lineCap;\r\n        this.lineJoin = Shape.defaultStyles.lineJoin;\r\n        this.opacity = Shape.defaultStyles.opacity;\r\n        this.fillShadow = Shape.defaultStyles.fillShadow;\r\n    }\r\n    /**\r\n     * Restores the default styles introduced by this subclass.\r\n     */\r\n    restoreOwnStyles() {\r\n        const styles = this.constructor.defaultStyles;\r\n        const keys = Object.getOwnPropertyNames(styles);\r\n        // getOwnPropertyNames is about 2.5 times faster than\r\n        // for..in with the hasOwnProperty check and in this\r\n        // case, where most properties are inherited, can be\r\n        // more than an order of magnitude faster.\r\n        for (let i = 0, n = keys.length; i < n; i++) {\r\n            const key = keys[i];\r\n            this[key] = styles[key];\r\n        }\r\n    }\r\n    updateGradient() {\r\n        const { fill } = this;\r\n        let linearGradientMatch;\r\n        if ((fill === null || fill === void 0 ? void 0 : fill.startsWith('linear-gradient')) && (linearGradientMatch = LINEAR_GRADIENT_REGEXP.exec(fill))) {\r\n            const angle = parseFloat(linearGradientMatch[1]);\r\n            const colors = [];\r\n            const colorsPart = linearGradientMatch[2];\r\n            const colorRegex = /(#[0-9a-f]+)|(rgba?\\(.+?\\))|([a-z]+)/gi;\r\n            let c;\r\n            while ((c = colorRegex.exec(colorsPart))) {\r\n                colors.push(c[0]);\r\n            }\r\n            this.gradient = new LinearGradient();\r\n            this.gradient.angle = angle;\r\n            this.gradient.stops = colors.map((color, index) => {\r\n                const offset = index / (colors.length - 1);\r\n                return { offset, color };\r\n            });\r\n        }\r\n        else {\r\n            this.gradient = undefined;\r\n        }\r\n    }\r\n    /**\r\n     * Returns a device-pixel aligned coordinate (or length if length is supplied).\r\n     *\r\n     * NOTE: Not suitable for strokes, since the stroke needs to be offset to the middle\r\n     * of a device pixel.\r\n     */\r\n    align(start, length) {\r\n        var _a, _b, _c;\r\n        const pixelRatio = (_c = (_b = (_a = this.layerManager) === null || _a === void 0 ? void 0 : _a.canvas) === null || _b === void 0 ? void 0 : _b.pixelRatio) !== null && _c !== void 0 ? _c : 1;\r\n        const alignedStart = Math.round(start * pixelRatio) / pixelRatio;\r\n        if (length == undefined) {\r\n            return alignedStart;\r\n        }\r\n        if (length === 0) {\r\n            return 0;\r\n        }\r\n        if (length < 1) {\r\n            // Avoid hiding crisp shapes\r\n            return Math.ceil(length * pixelRatio) / pixelRatio;\r\n        }\r\n        // Account for the rounding of alignedStart by increasing length to compensate before\r\n        // alignment.\r\n        return Math.round((length + start) * pixelRatio) / pixelRatio - alignedStart;\r\n    }\r\n    fillStroke(ctx) {\r\n        this.renderFill(ctx);\r\n        this.renderStroke(ctx);\r\n    }\r\n    renderFill(ctx) {\r\n        if (this.fill) {\r\n            const { globalAlpha } = ctx;\r\n            this.applyFill(ctx);\r\n            this.applyFillAlpha(ctx);\r\n            this.applyShadow(ctx);\r\n            ctx.fill();\r\n            ctx.globalAlpha = globalAlpha;\r\n        }\r\n        ctx.shadowColor = 'rgba(0, 0, 0, 0)';\r\n    }\r\n    applyFill(ctx) {\r\n        if (this.gradient) {\r\n            ctx.fillStyle = this.gradient.createGradient(ctx, this.computeBBox());\r\n        }\r\n        else {\r\n            ctx.fillStyle = this.fill;\r\n        }\r\n    }\r\n    applyFillAlpha(ctx) {\r\n        const { globalAlpha } = ctx;\r\n        ctx.globalAlpha = globalAlpha * this.opacity * this.fillOpacity;\r\n    }\r\n    applyShadow(ctx) {\r\n        var _a, _b;\r\n        // The canvas context scaling (depends on the device's pixel ratio)\r\n        // has no effect on shadows, so we have to account for the pixel ratio\r\n        // manually here.\r\n        const pixelRatio = (_b = (_a = this.layerManager) === null || _a === void 0 ? void 0 : _a.canvas.pixelRatio) !== null && _b !== void 0 ? _b : 1;\r\n        const fillShadow = this.fillShadow;\r\n        if (fillShadow === null || fillShadow === void 0 ? void 0 : fillShadow.enabled) {\r\n            ctx.shadowColor = fillShadow.color;\r\n            ctx.shadowOffsetX = fillShadow.xOffset * pixelRatio;\r\n            ctx.shadowOffsetY = fillShadow.yOffset * pixelRatio;\r\n            ctx.shadowBlur = fillShadow.blur * pixelRatio;\r\n        }\r\n    }\r\n    renderStroke(ctx) {\r\n        if (this.stroke && this.strokeWidth) {\r\n            const { globalAlpha } = ctx;\r\n            ctx.strokeStyle = this.stroke;\r\n            ctx.globalAlpha = globalAlpha * this.opacity * this.strokeOpacity;\r\n            ctx.lineWidth = this.strokeWidth;\r\n            if (this.lineDash) {\r\n                ctx.setLineDash(this.lineDash);\r\n            }\r\n            if (this.lineDashOffset) {\r\n                ctx.lineDashOffset = this.lineDashOffset;\r\n            }\r\n            if (this.lineCap) {\r\n                ctx.lineCap = this.lineCap;\r\n            }\r\n            if (this.lineJoin) {\r\n                ctx.lineJoin = this.lineJoin;\r\n            }\r\n            ctx.stroke();\r\n            ctx.globalAlpha = globalAlpha;\r\n        }\r\n    }\r\n    containsPoint(x, y) {\r\n        return this.isPointInPath(x, y);\r\n    }\r\n}\r\n/**\r\n * Defaults for style properties. Note that properties that affect the position\r\n * and shape of the node are not considered style properties, for example:\r\n * `x`, `y`, `width`, `height`, `radius`, `rotation`, etc.\r\n * Can be used to reset to the original styling after some custom styling\r\n * has been applied (using the `restoreOwnStyles` method).\r\n * These static defaults are meant to be inherited by subclasses.\r\n */\r\nShape.defaultStyles = Object.assign({}, {\r\n    fill: 'black',\r\n    stroke: undefined,\r\n    strokeWidth: 0,\r\n    lineDash: undefined,\r\n    lineDashOffset: 0,\r\n    lineCap: undefined,\r\n    lineJoin: undefined,\r\n    opacity: 1,\r\n    fillShadow: undefined,\r\n});\r\n__decorate([\r\n    SceneChangeDetection({ redraw: RedrawType.MINOR }),\r\n    __metadata(\"design:type\", Number)\r\n], Shape.prototype, \"fillOpacity\", void 0);\r\n__decorate([\r\n    SceneChangeDetection({ redraw: RedrawType.MINOR }),\r\n    __metadata(\"design:type\", Number)\r\n], Shape.prototype, \"strokeOpacity\", void 0);\r\n__decorate([\r\n    SceneChangeDetection({ redraw: RedrawType.MINOR, changeCb: (s) => s.updateGradient() }),\r\n    __metadata(\"design:type\", Object)\r\n], Shape.prototype, \"fill\", void 0);\r\n__decorate([\r\n    SceneChangeDetection({ redraw: RedrawType.MINOR }),\r\n    __metadata(\"design:type\", Object)\r\n], Shape.prototype, \"stroke\", void 0);\r\n__decorate([\r\n    SceneChangeDetection({ redraw: RedrawType.MINOR }),\r\n    __metadata(\"design:type\", Number)\r\n], Shape.prototype, \"strokeWidth\", void 0);\r\n__decorate([\r\n    SceneChangeDetection({ redraw: RedrawType.MINOR }),\r\n    __metadata(\"design:type\", Object)\r\n], Shape.prototype, \"lineDash\", void 0);\r\n__decorate([\r\n    SceneChangeDetection({ redraw: RedrawType.MINOR }),\r\n    __metadata(\"design:type\", Number)\r\n], Shape.prototype, \"lineDashOffset\", void 0);\r\n__decorate([\r\n    SceneChangeDetection({ redraw: RedrawType.MINOR }),\r\n    __metadata(\"design:type\", String)\r\n], Shape.prototype, \"lineCap\", void 0);\r\n__decorate([\r\n    SceneChangeDetection({ redraw: RedrawType.MINOR }),\r\n    __metadata(\"design:type\", String)\r\n], Shape.prototype, \"lineJoin\", void 0);\r\n__decorate([\r\n    SceneChangeDetection({\r\n        redraw: RedrawType.MINOR,\r\n        convertor: (v) => Math.min(1, Math.max(0, v)),\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], Shape.prototype, \"opacity\", void 0);\r\n__decorate([\r\n    SceneChangeDetection({ redraw: RedrawType.MINOR, checkDirtyOnAssignment: true }),\r\n    __metadata(\"design:type\", Object)\r\n], Shape.prototype, \"fillShadow\", void 0);\n\nconst ellipsis = '\\u2026';\r\nfunction SceneFontChangeDetection(opts) {\r\n    const { redraw = RedrawType.MAJOR, changeCb } = opts !== null && opts !== void 0 ? opts : {};\r\n    return SceneChangeDetection({ redraw, type: 'font', changeCb });\r\n}\r\nclass Text extends Shape {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.x = 0;\r\n        this.y = 0;\r\n        this.lines = [];\r\n        this.text = undefined;\r\n        this._dirtyFont = true;\r\n        this.fontSize = 10;\r\n        this.fontFamily = 'sans-serif';\r\n        this.textAlign = Text.defaultStyles.textAlign;\r\n        this.textBaseline = Text.defaultStyles.textBaseline;\r\n        // TextMetrics are used if lineHeight is not defined.\r\n        this.lineHeight = undefined;\r\n    }\r\n    _setLines() {\r\n        this.lines = splitText(this.text);\r\n    }\r\n    get font() {\r\n        if (this._font == null || this._dirtyFont) {\r\n            this._dirtyFont = false;\r\n            this._font = getFont(this);\r\n        }\r\n        return this._font;\r\n    }\r\n    computeBBox() {\r\n        return HdpiCanvas.has.textMetrics\r\n            ? getPreciseBBox(this.lines, this.x, this.y, this)\r\n            : getApproximateBBox(this.lines, this.x, this.y, this);\r\n    }\r\n    getLineHeight(line) {\r\n        var _a, _b;\r\n        if (this.lineHeight)\r\n            return this.lineHeight;\r\n        if (HdpiCanvas.has.textMetrics) {\r\n            const metrics = HdpiCanvas.measureText(line, this.font, this.textBaseline, this.textAlign);\r\n            return (((_a = metrics.fontBoundingBoxAscent) !== null && _a !== void 0 ? _a : metrics.emHeightAscent) +\r\n                ((_b = metrics.fontBoundingBoxDescent) !== null && _b !== void 0 ? _b : metrics.emHeightDescent));\r\n        }\r\n        return HdpiCanvas.getTextSize(line, this.font).height;\r\n    }\r\n    isPointInPath(x, y) {\r\n        const point = this.transformPoint(x, y);\r\n        const bbox = this.computeBBox();\r\n        return bbox ? bbox.containsPoint(point.x, point.y) : false;\r\n    }\r\n    render(renderCtx) {\r\n        const { ctx, forceRender, stats } = renderCtx;\r\n        if (this.dirty === RedrawType.NONE && !forceRender) {\r\n            if (stats)\r\n                stats.nodesSkipped += this.nodeCount.count;\r\n            return;\r\n        }\r\n        if (!this.lines.length || !this.layerManager) {\r\n            if (stats)\r\n                stats.nodesSkipped += this.nodeCount.count;\r\n            return;\r\n        }\r\n        this.computeTransformMatrix();\r\n        this.matrix.toContext(ctx);\r\n        const { fill, stroke, strokeWidth } = this;\r\n        ctx.font = this.font;\r\n        ctx.textAlign = this.textAlign;\r\n        ctx.textBaseline = this.textBaseline;\r\n        const pixelRatio = this.layerManager.canvas.pixelRatio || 1;\r\n        const { globalAlpha } = ctx;\r\n        if (fill) {\r\n            ctx.fillStyle = fill;\r\n            ctx.globalAlpha = globalAlpha * this.opacity * this.fillOpacity;\r\n            const { fillShadow } = this;\r\n            if (fillShadow === null || fillShadow === void 0 ? void 0 : fillShadow.enabled) {\r\n                ctx.shadowColor = fillShadow.color;\r\n                ctx.shadowOffsetX = fillShadow.xOffset * pixelRatio;\r\n                ctx.shadowOffsetY = fillShadow.yOffset * pixelRatio;\r\n                ctx.shadowBlur = fillShadow.blur * pixelRatio;\r\n            }\r\n            this.renderLines((line, x, y) => ctx.fillText(line, x, y));\r\n        }\r\n        if (stroke && strokeWidth) {\r\n            ctx.strokeStyle = stroke;\r\n            ctx.lineWidth = strokeWidth;\r\n            ctx.globalAlpha = globalAlpha * this.opacity * this.strokeOpacity;\r\n            const { lineDash, lineDashOffset, lineCap, lineJoin } = this;\r\n            if (lineDash) {\r\n                ctx.setLineDash(lineDash);\r\n            }\r\n            if (lineDashOffset) {\r\n                ctx.lineDashOffset = lineDashOffset;\r\n            }\r\n            if (lineCap) {\r\n                ctx.lineCap = lineCap;\r\n            }\r\n            if (lineJoin) {\r\n                ctx.lineJoin = lineJoin;\r\n            }\r\n            this.renderLines((line, x, y) => ctx.strokeText(line, x, y));\r\n        }\r\n        super.render(renderCtx);\r\n    }\r\n    renderLines(renderCallback) {\r\n        const { lines, x, y } = this;\r\n        const lineHeights = this.lines.map((line) => this.getLineHeight(line));\r\n        const totalHeight = lineHeights.reduce((a, b) => a + b, 0);\r\n        let offsetY = -(totalHeight - lineHeights[0]) * getVerticalOffset(this.textBaseline);\r\n        for (let i = 0; i < lines.length; i++) {\r\n            renderCallback(lines[i], x, y + offsetY);\r\n            offsetY += lineHeights[i];\r\n        }\r\n    }\r\n    static wrap(text, maxWidth, maxHeight, textProps, wrapping, overflow = 'ellipsis') {\r\n        var _a;\r\n        const canOverflow = overflow !== 'hide';\r\n        const font = getFont(textProps);\r\n        const measurer = createTextMeasurer(font);\r\n        const lines = text.split(/\\r?\\n/g);\r\n        if (lines.length === 0) {\r\n            return '';\r\n        }\r\n        if (wrapping === 'never') {\r\n            return (_a = Text.truncateLine(lines[0], maxWidth, measurer, canOverflow ? 'auto' : 'never')) !== null && _a !== void 0 ? _a : '';\r\n        }\r\n        const result = [];\r\n        let cumulativeHeight = 0;\r\n        for (const line of lines) {\r\n            const wrappedLine = Text.wrapLine(line, maxWidth, maxHeight, measurer, textProps, wrapping, cumulativeHeight, canOverflow);\r\n            if (wrappedLine == null) {\r\n                return '';\r\n            }\r\n            result.push(wrappedLine.result);\r\n            cumulativeHeight = wrappedLine.cumulativeHeight;\r\n            if (wrappedLine.truncated) {\r\n                break;\r\n            }\r\n        }\r\n        return result.join('\\n').trim();\r\n    }\r\n    static wrapLine(text, maxWidth, maxHeight, measurer, textProps, wrapping, cumulativeHeight, canOverflow) {\r\n        text = text.trim();\r\n        if (!text) {\r\n            return { result: '', truncated: false, cumulativeHeight };\r\n        }\r\n        const initialSize = measurer.size(text);\r\n        if (initialSize.width <= maxWidth) {\r\n            // Text fits into a single line\r\n            return {\r\n                result: text,\r\n                truncated: false,\r\n                cumulativeHeight: cumulativeHeight + initialSize.height,\r\n            };\r\n        }\r\n        if (initialSize.height > maxHeight || measurer.width('W') > maxWidth) {\r\n            // Not enough space for a single line or character\r\n            return canOverflow ? { result: '', truncated: true, cumulativeHeight } : undefined;\r\n        }\r\n        const words = text.split(/\\s+/g);\r\n        const wrapResult = Text.wrapLineSequentially(words, maxWidth, maxHeight, measurer, textProps, wrapping, cumulativeHeight, canOverflow);\r\n        if (wrapResult == null) {\r\n            return undefined;\r\n        }\r\n        cumulativeHeight = wrapResult.cumulativeHeight;\r\n        let { lines } = wrapResult;\r\n        if (!(wrapResult.wordsBrokenOrTruncated || wrapResult.linesTruncated)) {\r\n            // If no word breaks or truncations, try the balanced wrapping\r\n            const linesCount = wrapResult.lines.length;\r\n            const balanced = Text.wrapLineBalanced(words, maxWidth, measurer, linesCount);\r\n            if (balanced.length === lines.length) {\r\n                // Some lines can't be balanced properly because of unusually long words\r\n                lines = balanced;\r\n            }\r\n        }\r\n        const wrappedText = lines.map((ln) => ln.join(' ')).join('\\n');\r\n        return { result: wrappedText, truncated: wrapResult.linesTruncated, cumulativeHeight };\r\n    }\r\n    static breakWord(word, firstLineWidth, maxWidth, hyphens, measurer) {\r\n        const isPunctuationAt = (index) => Text.punctuationMarks.includes(word[index]);\r\n        const h = hyphens ? measurer.width('-') : 0;\r\n        const breaks = [];\r\n        let partWidth = 0;\r\n        let p = 0;\r\n        for (let i = 0; i < word.length; i++) {\r\n            const c = word[i];\r\n            const w = measurer.width(c);\r\n            const limit = p === 0 ? firstLineWidth : maxWidth;\r\n            if (partWidth + w + h > limit) {\r\n                breaks.push(i);\r\n                partWidth = 0;\r\n                p++;\r\n            }\r\n            partWidth += w;\r\n        }\r\n        const parts = [];\r\n        let start = 0;\r\n        for (const index of breaks) {\r\n            let part = word.substring(start, index);\r\n            if (hyphens && part.length > 0 && !isPunctuationAt(index - 1) && !isPunctuationAt(index)) {\r\n                part += '-';\r\n            }\r\n            parts.push(part);\r\n            start = index;\r\n        }\r\n        parts.push(word.substring(start));\r\n        return parts;\r\n    }\r\n    static truncateLine(text, maxWidth, measurer, ellipsisMode) {\r\n        text = text.trimEnd();\r\n        const lineWidth = measurer.width(text);\r\n        if (lineWidth > maxWidth && ellipsisMode === 'never') {\r\n            return undefined;\r\n        }\r\n        else if (lineWidth <= maxWidth && ellipsisMode !== 'force') {\r\n            return text;\r\n        }\r\n        const ellipsisWidth = measurer.width(ellipsis);\r\n        let trunc = text;\r\n        let truncWidth = lineWidth;\r\n        while (trunc.length > 0 && truncWidth + ellipsisWidth > maxWidth) {\r\n            // Ensure there is no space between the ellipsis and last letter\r\n            trunc = trunc.slice(0, -1).trimEnd();\r\n            truncWidth = measurer.width(trunc);\r\n        }\r\n        if (truncWidth + ellipsisWidth <= maxWidth) {\r\n            return `${trunc}${ellipsis}`;\r\n        }\r\n        else {\r\n            return undefined;\r\n        }\r\n    }\r\n    static wrapLineSequentially(words, maxWidth, maxHeight, measurer, textProps, wrapping, cumulativeHeight, canOverflow) {\r\n        const { fontSize = 0, lineHeight = fontSize * Text.defaultLineHeightRatio } = textProps;\r\n        const breakWord = wrapping === 'always' || wrapping === 'hyphenate';\r\n        const hyphenate = wrapping === 'hyphenate';\r\n        const spaceWidth = measurer.width(' ');\r\n        let wordsBrokenOrTruncated = false;\r\n        let linesTruncated = false;\r\n        const lines = [];\r\n        let currentLine = [];\r\n        let lineWidth = 0;\r\n        const getReturnValue = () => ({\r\n            lines,\r\n            linesTruncated,\r\n            wordsBrokenOrTruncated,\r\n            cumulativeHeight,\r\n        });\r\n        const truncateLastLine = () => {\r\n            if (!canOverflow) {\r\n                return undefined;\r\n            }\r\n            const lastLine = currentLine.join(' ');\r\n            const trunc = Text.truncateLine(lastLine, maxWidth, measurer, 'force');\r\n            if (trunc == null) {\r\n                return undefined;\r\n            }\r\n            currentLine.splice(0, currentLine.length, trunc);\r\n            linesTruncated = true;\r\n            return getReturnValue();\r\n        };\r\n        const addNewLine = () => {\r\n            const expectedHeight = cumulativeHeight + lineHeight;\r\n            if (expectedHeight >= maxHeight) {\r\n                return false;\r\n            }\r\n            // Add new line\r\n            currentLine = [];\r\n            lineWidth = 0;\r\n            cumulativeHeight = expectedHeight;\r\n            lines.push(currentLine);\r\n            return true;\r\n        };\r\n        if (!addNewLine()) {\r\n            return truncateLastLine();\r\n        }\r\n        for (let i = 0; i < words.length; i++) {\r\n            const word = words[i];\r\n            const wordWidth = measurer.width(word);\r\n            const expectedSpaceWidth = currentLine.length === 0 ? 0 : spaceWidth;\r\n            const expectedLineWidth = lineWidth + expectedSpaceWidth + wordWidth;\r\n            if (expectedLineWidth <= maxWidth) {\r\n                // If the word fits, add it to the current line\r\n                currentLine.push(word);\r\n                lineWidth = expectedLineWidth;\r\n                continue;\r\n            }\r\n            if (wordWidth <= maxWidth) {\r\n                // If the word is not too long, put it onto new line\r\n                if (!addNewLine()) {\r\n                    return truncateLastLine();\r\n                }\r\n                currentLine.push(word);\r\n                lineWidth = wordWidth;\r\n                continue;\r\n            }\r\n            // Handle a long word\r\n            wordsBrokenOrTruncated = true;\r\n            if (breakWord) {\r\n                // Break the word into parts\r\n                const availWidth = maxWidth - lineWidth - expectedSpaceWidth;\r\n                const parts = Text.breakWord(word, availWidth, maxWidth, hyphenate, measurer);\r\n                for (let p = 0; p < parts.length; p++) {\r\n                    const part = parts[p];\r\n                    part && currentLine.push(part);\r\n                    if (p === parts.length - 1) {\r\n                        lineWidth = measurer.width(part);\r\n                    }\r\n                    else if (!addNewLine()) {\r\n                        return truncateLastLine();\r\n                    }\r\n                }\r\n            }\r\n            else if (canOverflow) {\r\n                // Truncate the word\r\n                if (!addNewLine()) {\r\n                    return truncateLastLine();\r\n                }\r\n                const trunc = Text.truncateLine(word, maxWidth, measurer, 'force');\r\n                if (trunc == null) {\r\n                    return undefined;\r\n                }\r\n                currentLine.push(trunc);\r\n                if (i < words.length - 1) {\r\n                    linesTruncated = true;\r\n                }\r\n                break;\r\n            }\r\n            else {\r\n                return undefined;\r\n            }\r\n        }\r\n        return getReturnValue();\r\n    }\r\n    static wrapLineBalanced(words, maxWidth, measurer, linesCount) {\r\n        const totalWordsWidth = words.reduce((sum, w) => sum + measurer.width(w), 0);\r\n        const spaceWidth = measurer.width(' ');\r\n        const totalSpaceWidth = spaceWidth * (words.length - linesCount - 2);\r\n        const averageLineWidth = (totalWordsWidth + totalSpaceWidth) / linesCount;\r\n        const lines = [];\r\n        let currentLine = [];\r\n        let lineWidth = measurer.width(words[0]);\r\n        let newLine = true;\r\n        for (const word of words) {\r\n            const width = measurer.width(word);\r\n            if (newLine) {\r\n                // New line\r\n                currentLine = [];\r\n                currentLine.push(word);\r\n                lineWidth = width;\r\n                newLine = false;\r\n                lines.push(currentLine);\r\n                continue;\r\n            }\r\n            const expectedLineWidth = lineWidth + spaceWidth + width;\r\n            if (expectedLineWidth <= averageLineWidth) {\r\n                // Keep adding words to the line\r\n                currentLine.push(word);\r\n                lineWidth = expectedLineWidth;\r\n            }\r\n            else if (expectedLineWidth <= maxWidth) {\r\n                // Add the last word to the line\r\n                currentLine.push(word);\r\n                newLine = true;\r\n            }\r\n            else {\r\n                // Put the word onto the next line\r\n                currentLine = [word];\r\n                lineWidth = width;\r\n                lines.push(currentLine);\r\n            }\r\n        }\r\n        return lines;\r\n    }\r\n    setFont(props) {\r\n        this.fontFamily = props.fontFamily;\r\n        this.fontSize = props.fontSize;\r\n        this.fontStyle = props.fontStyle;\r\n        this.fontWeight = props.fontWeight;\r\n    }\r\n    setAlign(props) {\r\n        this.textAlign = props.textAlign;\r\n        this.textBaseline = props.textBaseline;\r\n    }\r\n}\r\nText.className = 'Text';\r\n// The default line spacing for document editors is usually 1.15\r\nText.defaultLineHeightRatio = 1.15;\r\nText.defaultStyles = Object.assign({}, Shape.defaultStyles, {\r\n    textAlign: 'start',\r\n    fontStyle: undefined,\r\n    fontWeight: undefined,\r\n    fontSize: 10,\r\n    fontFamily: 'sans-serif',\r\n    textBaseline: 'alphabetic',\r\n});\r\nText.ellipsis = ellipsis;\r\nText.punctuationMarks = ['.', ',', '-', ':', ';', '!', '?', `'`, '\"', '(', ')'];\r\n__decorate([\r\n    SceneChangeDetection({ redraw: RedrawType.MAJOR }),\r\n    __metadata(\"design:type\", Number)\r\n], Text.prototype, \"x\", void 0);\r\n__decorate([\r\n    SceneChangeDetection({ redraw: RedrawType.MAJOR }),\r\n    __metadata(\"design:type\", Number)\r\n], Text.prototype, \"y\", void 0);\r\n__decorate([\r\n    SceneChangeDetection({ redraw: RedrawType.MAJOR, changeCb: (o) => o._setLines() }),\r\n    __metadata(\"design:type\", String)\r\n], Text.prototype, \"text\", void 0);\r\n__decorate([\r\n    SceneFontChangeDetection(),\r\n    __metadata(\"design:type\", String)\r\n], Text.prototype, \"fontStyle\", void 0);\r\n__decorate([\r\n    SceneFontChangeDetection(),\r\n    __metadata(\"design:type\", String)\r\n], Text.prototype, \"fontWeight\", void 0);\r\n__decorate([\r\n    SceneFontChangeDetection(),\r\n    __metadata(\"design:type\", Number)\r\n], Text.prototype, \"fontSize\", void 0);\r\n__decorate([\r\n    SceneFontChangeDetection(),\r\n    __metadata(\"design:type\", String)\r\n], Text.prototype, \"fontFamily\", void 0);\r\n__decorate([\r\n    SceneChangeDetection({ redraw: RedrawType.MAJOR }),\r\n    __metadata(\"design:type\", String)\r\n], Text.prototype, \"textAlign\", void 0);\r\n__decorate([\r\n    SceneChangeDetection({ redraw: RedrawType.MAJOR }),\r\n    __metadata(\"design:type\", String)\r\n], Text.prototype, \"textBaseline\", void 0);\r\n__decorate([\r\n    SceneChangeDetection({ redraw: RedrawType.MAJOR }),\r\n    __metadata(\"design:type\", Number)\r\n], Text.prototype, \"lineHeight\", void 0);\r\nfunction createTextMeasurer(font) {\r\n    const cache = new Map();\r\n    const getTextSize = (text) => HdpiCanvas.getTextSize(text, font);\r\n    const getLineWidth = (text) => {\r\n        if (cache.has(text)) {\r\n            return cache.get(text);\r\n        }\r\n        const { width } = getTextSize(text);\r\n        cache.set(text, width);\r\n        return width;\r\n    };\r\n    return { size: getTextSize, width: getLineWidth };\r\n}\r\nfunction getFont(fontProps) {\r\n    const { fontFamily, fontSize, fontStyle, fontWeight } = fontProps;\r\n    return [fontStyle !== null && fontStyle !== void 0 ? fontStyle : '', fontWeight !== null && fontWeight !== void 0 ? fontWeight : '', fontSize + 'px', fontFamily].join(' ').trim();\r\n}\r\nfunction measureText(lines, x, y, textProps) {\r\n    return HdpiCanvas.has.textMetrics\r\n        ? getPreciseBBox(lines, x, y, textProps)\r\n        : getApproximateBBox(lines, x, y, textProps);\r\n}\r\nfunction getPreciseBBox(lines, x, y, textProps) {\r\n    var _a, _b;\r\n    let left = 0;\r\n    let top = 0;\r\n    let width = 0;\r\n    let height = 0;\r\n    // Distance between first and last base lines.\r\n    let baselineDistance = 0;\r\n    const font = getFont(textProps);\r\n    const { lineHeight, textBaseline = Text.defaultStyles.textBaseline, textAlign = Text.defaultStyles.textAlign, } = textProps;\r\n    for (let i = 0; i < lines.length; i++) {\r\n        const metrics = HdpiCanvas.measureText(lines[i], font, textBaseline, textAlign);\r\n        left = Math.max(left, metrics.actualBoundingBoxLeft);\r\n        width = Math.max(width, metrics.width);\r\n        if (i == 0) {\r\n            top += metrics.actualBoundingBoxAscent;\r\n            height += metrics.actualBoundingBoxAscent;\r\n        }\r\n        else {\r\n            baselineDistance += (_a = metrics.fontBoundingBoxAscent) !== null && _a !== void 0 ? _a : metrics.emHeightAscent;\r\n        }\r\n        if (i == lines.length - 1) {\r\n            height += metrics.actualBoundingBoxDescent;\r\n        }\r\n        else {\r\n            baselineDistance += (_b = metrics.fontBoundingBoxDescent) !== null && _b !== void 0 ? _b : metrics.emHeightDescent;\r\n        }\r\n    }\r\n    if (lineHeight !== undefined) {\r\n        baselineDistance = (lines.length - 1) * lineHeight;\r\n    }\r\n    height += baselineDistance;\r\n    top += baselineDistance * getVerticalOffset(textBaseline);\r\n    return new BBox(x - left, y - top, width, height);\r\n}\r\nfunction getApproximateBBox(lines, x, y, textProps) {\r\n    let width = 0;\r\n    let firstLineHeight = 0;\r\n    // Distance between first and last base lines.\r\n    let baselineDistance = 0;\r\n    const font = getFont(textProps);\r\n    const { lineHeight, textBaseline = Text.defaultStyles.textBaseline, textAlign = Text.defaultStyles.textAlign, } = textProps;\r\n    if (lines.length > 0) {\r\n        const lineSize = HdpiCanvas.getTextSize(lines[0], font);\r\n        width = lineSize.width;\r\n        firstLineHeight = lineSize.height;\r\n    }\r\n    for (let i = 1; i < lines.length; i++) {\r\n        const lineSize = HdpiCanvas.getTextSize(lines[i], font);\r\n        width = Math.max(width, lineSize.width);\r\n        baselineDistance += lineHeight !== null && lineHeight !== void 0 ? lineHeight : lineSize.height;\r\n    }\r\n    switch (textAlign) {\r\n        case 'end':\r\n        case 'right':\r\n            x -= width;\r\n            break;\r\n        case 'center':\r\n            x -= width / 2;\r\n    }\r\n    switch (textBaseline) {\r\n        case 'alphabetic':\r\n            y -= firstLineHeight * 0.7 + baselineDistance * 0.5;\r\n            break;\r\n        case 'middle':\r\n            y -= firstLineHeight * 0.45 + baselineDistance * 0.5;\r\n            break;\r\n        case 'ideographic':\r\n            y -= firstLineHeight + baselineDistance;\r\n            break;\r\n        case 'hanging':\r\n            y -= firstLineHeight * 0.2 + baselineDistance * 0.5;\r\n            break;\r\n        case 'bottom':\r\n            y -= firstLineHeight + baselineDistance;\r\n            break;\r\n    }\r\n    return new BBox(x, y, width, firstLineHeight + baselineDistance);\r\n}\r\nfunction getVerticalOffset(textBaseline) {\r\n    switch (textBaseline) {\r\n        case 'top':\r\n        case 'hanging':\r\n            return 0;\r\n        case 'bottom':\r\n        case 'alphabetic':\r\n        case 'ideographic':\r\n            return 1;\r\n        case 'middle':\r\n            return 0.5;\r\n    }\r\n}\r\nfunction splitText(text) {\r\n    return typeof text === 'string' ? text.split(/\\r?\\n/g) : [];\r\n}\n\nfunction ProxyOnWrite(proxyProperty) {\r\n    return addTransformToInstanceProperty((target, _, value) => {\r\n        target[proxyProperty] = value;\r\n        return value;\r\n    });\r\n}\r\nfunction ProxyPropertyOnWrite(childName, childProperty) {\r\n    return addTransformToInstanceProperty((target, key, value) => {\r\n        target[childName][childProperty !== null && childProperty !== void 0 ? childProperty : key] = value;\r\n        return value;\r\n    });\r\n}\r\n/**\r\n * Allows side-effects to be triggered on property write.\r\n *\r\n * @param opts.newValue called when a new value is set - never called for undefined values.\r\n * @param opts.oldValue called with the old value before a new value is set - never called for\r\n *                      undefined values.\r\n * @param opts.changeValue called on any change to the value - always called.\r\n */\r\nfunction ActionOnSet(opts) {\r\n    const { newValue: newValueFn, oldValue: oldValueFn, changeValue: changeValueFn } = opts;\r\n    return addTransformToInstanceProperty((target, _, newValue, oldValue) => {\r\n        if (newValue !== oldValue) {\r\n            if (oldValue !== undefined) {\r\n                oldValueFn === null || oldValueFn === void 0 ? void 0 : oldValueFn.call(target, oldValue);\r\n            }\r\n            if (newValue !== undefined) {\r\n                newValueFn === null || newValueFn === void 0 ? void 0 : newValueFn.call(target, newValue);\r\n            }\r\n            changeValueFn === null || changeValueFn === void 0 ? void 0 : changeValueFn.call(target, newValue, oldValue);\r\n        }\r\n        return newValue;\r\n    });\r\n}\n\nclass Caption {\r\n    constructor() {\r\n        this.node = new Text();\r\n        this.enabled = false;\r\n        this.text = undefined;\r\n        this.fontSize = 10;\r\n        this.fontFamily = 'sans-serif';\r\n        this.maxWidth = undefined;\r\n        this.maxHeight = undefined;\r\n        this.wrapping = 'always';\r\n        const node = this.node;\r\n        node.textAlign = 'center';\r\n        node.pointerEvents = PointerEvents.None;\r\n    }\r\n    computeTextWrap(containerWidth, containerHeight) {\r\n        var _a, _b;\r\n        const { text, wrapping } = this;\r\n        const maxWidth = Math.min((_a = this.maxWidth) !== null && _a !== void 0 ? _a : Infinity, containerWidth);\r\n        const maxHeight = (_b = this.maxHeight) !== null && _b !== void 0 ? _b : containerHeight;\r\n        if (!isFinite(maxWidth) && !isFinite(maxHeight)) {\r\n            this.node.text = text;\r\n            return;\r\n        }\r\n        const wrapped = Text.wrap(text !== null && text !== void 0 ? text : '', maxWidth, maxHeight, this, wrapping);\r\n        this.node.text = wrapped;\r\n    }\r\n}\r\nCaption.SMALL_PADDING = 10;\r\nCaption.LARGE_PADDING = 20;\r\n__decorate([\r\n    Validate(BOOLEAN),\r\n    __metadata(\"design:type\", Object)\r\n], Caption.prototype, \"enabled\", void 0);\r\n__decorate([\r\n    Validate(OPT_STRING),\r\n    ProxyPropertyOnWrite('node'),\r\n    __metadata(\"design:type\", String)\r\n], Caption.prototype, \"text\", void 0);\r\n__decorate([\r\n    Validate(OPT_FONT_STYLE),\r\n    ProxyPropertyOnWrite('node'),\r\n    __metadata(\"design:type\", Object)\r\n], Caption.prototype, \"fontStyle\", void 0);\r\n__decorate([\r\n    Validate(OPT_FONT_WEIGHT),\r\n    ProxyPropertyOnWrite('node'),\r\n    __metadata(\"design:type\", Object)\r\n], Caption.prototype, \"fontWeight\", void 0);\r\n__decorate([\r\n    Validate(NUMBER$1(0)),\r\n    ProxyPropertyOnWrite('node'),\r\n    __metadata(\"design:type\", Number)\r\n], Caption.prototype, \"fontSize\", void 0);\r\n__decorate([\r\n    Validate(STRING),\r\n    ProxyPropertyOnWrite('node'),\r\n    __metadata(\"design:type\", String)\r\n], Caption.prototype, \"fontFamily\", void 0);\r\n__decorate([\r\n    Validate(OPT_COLOR_STRING),\r\n    ProxyPropertyOnWrite('node', 'fill'),\r\n    __metadata(\"design:type\", Object)\r\n], Caption.prototype, \"color\", void 0);\r\n__decorate([\r\n    Validate(OPT_NUMBER(0)),\r\n    __metadata(\"design:type\", Number)\r\n], Caption.prototype, \"spacing\", void 0);\r\n__decorate([\r\n    Validate(OPT_NUMBER(0)),\r\n    __metadata(\"design:type\", Number)\r\n], Caption.prototype, \"lineHeight\", void 0);\r\n__decorate([\r\n    Validate(OPT_NUMBER(0)),\r\n    __metadata(\"design:type\", Number)\r\n], Caption.prototype, \"maxWidth\", void 0);\r\n__decorate([\r\n    Validate(OPT_NUMBER(0)),\r\n    __metadata(\"design:type\", Number)\r\n], Caption.prototype, \"maxHeight\", void 0);\r\n__decorate([\r\n    Validate(TEXT_WRAP),\r\n    __metadata(\"design:type\", String)\r\n], Caption.prototype, \"wrapping\", void 0);\n\nclass AxisTitle {\r\n    constructor() {\r\n        this.enabled = false;\r\n        this.text = undefined;\r\n        this.spacing = Caption.SMALL_PADDING;\r\n        this.fontStyle = undefined;\r\n        this.fontWeight = undefined;\r\n        this.fontSize = 10;\r\n        this.fontFamily = 'sans-serif';\r\n        this.wrapping = 'always';\r\n        this.formatter = undefined;\r\n    }\r\n}\r\n__decorate([\r\n    Validate(BOOLEAN),\r\n    __metadata(\"design:type\", Object)\r\n], AxisTitle.prototype, \"enabled\", void 0);\r\n__decorate([\r\n    Validate(OPT_STRING),\r\n    __metadata(\"design:type\", String)\r\n], AxisTitle.prototype, \"text\", void 0);\r\n__decorate([\r\n    Validate(OPT_NUMBER(0)),\r\n    __metadata(\"design:type\", Number)\r\n], AxisTitle.prototype, \"spacing\", void 0);\r\n__decorate([\r\n    Validate(OPT_FONT_STYLE),\r\n    __metadata(\"design:type\", String)\r\n], AxisTitle.prototype, \"fontStyle\", void 0);\r\n__decorate([\r\n    Validate(OPT_FONT_WEIGHT),\r\n    __metadata(\"design:type\", String)\r\n], AxisTitle.prototype, \"fontWeight\", void 0);\r\n__decorate([\r\n    Validate(NUMBER$1(0)),\r\n    __metadata(\"design:type\", Number)\r\n], AxisTitle.prototype, \"fontSize\", void 0);\r\n__decorate([\r\n    Validate(STRING),\r\n    __metadata(\"design:type\", String)\r\n], AxisTitle.prototype, \"fontFamily\", void 0);\r\n__decorate([\r\n    Validate(OPT_COLOR_STRING),\r\n    __metadata(\"design:type\", String)\r\n], AxisTitle.prototype, \"color\", void 0);\r\n__decorate([\r\n    Validate(TEXT_WRAP),\r\n    __metadata(\"design:type\", String)\r\n], AxisTitle.prototype, \"wrapping\", void 0);\r\n__decorate([\r\n    Validate(OPT_FUNCTION),\r\n    __metadata(\"design:type\", Function)\r\n], AxisTitle.prototype, \"formatter\", void 0);\n\n/**\r\n * Zip two arrays into an object of keys and values, or an object of keys with a single value.\r\n */\r\nfunction zipObject(keys, values) {\r\n    const zipped = {};\r\n    if (Array.isArray(values)) {\r\n        for (let i = 0; i < keys.length; i++) {\r\n            zipped[`${keys[i]}`] = values[i];\r\n        }\r\n    }\r\n    else {\r\n        for (let i = 0; i < keys.length; i++) {\r\n            zipped[`${keys[i]}`] = values;\r\n        }\r\n    }\r\n    return zipped;\r\n}\n\nfunction interpolateNumber(a, b) {\r\n    return (d) => Number(a) * (1 - d) + Number(b) * d;\r\n}\r\nfunction interpolateColor(a, b) {\r\n    if (typeof a === 'string') {\r\n        try {\r\n            a = Color.fromString(a);\r\n        }\r\n        catch (e) {\r\n            a = Color.fromArray([0, 0, 0]);\r\n        }\r\n    }\r\n    if (typeof b === 'string') {\r\n        try {\r\n            b = Color.fromString(b);\r\n        }\r\n        catch (e) {\r\n            b = Color.fromArray([0, 0, 0]);\r\n        }\r\n    }\r\n    const red = interpolateNumber(a.r, b.r);\r\n    const green = interpolateNumber(a.g, b.g);\r\n    const blue = interpolateNumber(a.b, b.b);\r\n    const alpha = interpolateNumber(a.a, b.a);\r\n    return (d) => Color.fromArray([red(d), green(d), blue(d), alpha(d)]).toRgbaString();\r\n}\n\nconst linear = (n) => n;\r\nconst easeIn = (n) => 1 - Math.cos((n * Math.PI) / 2);\r\nconst easeOut = (n) => Math.sin((n * Math.PI) / 2);\r\nconst easeInOut = (n) => -(Math.cos(n * Math.PI) - 1) / 2;\r\nconst easeInQuad = (n) => n * n;\r\nconst easeOutQuad = (n) => 1 - Math.pow((1 - n), 2);\r\nconst easeInOutQuad = (n) => (n < 0.5 ? 2 * n * n : 1 - Math.pow((-2 * n + 2), 2) / 2);\n\nvar easing = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    linear: linear,\n    easeIn: easeIn,\n    easeOut: easeOut,\n    easeInOut: easeInOut,\n    easeInQuad: easeInQuad,\n    easeOutQuad: easeOutQuad,\n    easeInOutQuad: easeInOutQuad\n});\n\nconst QUICK_TRANSITION = 0.2;\r\nconst INITIAL_LOAD = {\r\n    animationDuration: 1,\r\n    animationDelay: 0,\r\n};\r\nconst REMOVE_PHASE = {\r\n    animationDuration: 0.25,\r\n    animationDelay: 0,\r\n};\r\nconst UPDATE_PHASE = {\r\n    animationDuration: 0.5,\r\n    animationDelay: 0.25,\r\n};\r\nconst ADD_PHASE = {\r\n    animationDuration: 0.25,\r\n    animationDelay: 0.75,\r\n};\r\nconst LABEL_PHASE = {\r\n    animationDuration: QUICK_TRANSITION,\r\n    animationDelay: 1,\r\n};\r\nvar RepeatType;\r\n(function (RepeatType) {\r\n    RepeatType[\"Loop\"] = \"loop\";\r\n    RepeatType[\"Reverse\"] = \"reverse\";\r\n})(RepeatType || (RepeatType = {}));\r\nfunction isNodeArray(array) {\r\n    return array.every((n) => n instanceof Node);\r\n}\r\nclass Animation {\r\n    constructor(opts) {\r\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;\r\n        this.elapsed = 0;\r\n        this.iteration = 0;\r\n        this.isPlaying = false;\r\n        this.isReverse = false;\r\n        // animation configuration\r\n        this.id = opts.id;\r\n        this.groupId = opts.groupId;\r\n        this.autoplay = (_a = opts.autoplay) !== null && _a !== void 0 ? _a : true;\r\n        this.delay = (_b = opts.delay) !== null && _b !== void 0 ? _b : 0;\r\n        this.duration = (_c = opts.duration) !== null && _c !== void 0 ? _c : 1000;\r\n        this.ease = (_d = opts.ease) !== null && _d !== void 0 ? _d : linear;\r\n        this.repeat = (_e = opts.repeat) !== null && _e !== void 0 ? _e : 0;\r\n        this.repeatType = (_f = opts.repeatType) !== null && _f !== void 0 ? _f : RepeatType.Loop;\r\n        // user defined event listeners\r\n        this.onComplete = opts.onComplete;\r\n        this.onPlay = opts.onPlay;\r\n        this.onStop = opts.onStop;\r\n        this.onRepeat = opts.onRepeat;\r\n        this.onUpdate = opts.onUpdate;\r\n        // animation interpolator based on `from` & `to` types\r\n        this.interpolate = this.createInterpolator(opts.from, opts.to);\r\n        if (opts.skip === true) {\r\n            (_g = this.onUpdate) === null || _g === void 0 ? void 0 : _g.call(this, opts.to, false, this);\r\n            (_h = this.onStop) === null || _h === void 0 ? void 0 : _h.call(this, this);\r\n            (_j = this.onComplete) === null || _j === void 0 ? void 0 : _j.call(this, this);\r\n        }\r\n        else if (this.autoplay) {\r\n            this.play();\r\n            // Initialise the animation immediately without requesting a frame to prevent flashes\r\n            (_k = this.onUpdate) === null || _k === void 0 ? void 0 : _k.call(this, opts.from, true, this);\r\n        }\r\n    }\r\n    play() {\r\n        var _a;\r\n        if (!this.isPlaying) {\r\n            this.isPlaying = true;\r\n            (_a = this.onPlay) === null || _a === void 0 ? void 0 : _a.call(this, this);\r\n        }\r\n        return this;\r\n    }\r\n    pause() {\r\n        if (this.isPlaying) {\r\n            this.isPlaying = false;\r\n        }\r\n        return this;\r\n    }\r\n    stop() {\r\n        var _a;\r\n        if (this.isPlaying) {\r\n            this.isPlaying = false;\r\n            (_a = this.onStop) === null || _a === void 0 ? void 0 : _a.call(this, this);\r\n        }\r\n        return this;\r\n    }\r\n    reset(opts) {\r\n        const deltaState = this.interpolate(this.isReverse ? 1 - this.delta : this.delta);\r\n        this.interpolate = this.createInterpolator(deltaState, opts.to);\r\n        this.elapsed = 0;\r\n        this.iteration = 0;\r\n        if (typeof opts.delay === 'number') {\r\n            this.delay = opts.delay;\r\n        }\r\n        if (typeof opts.duration === 'number') {\r\n            this.duration = opts.duration;\r\n        }\r\n        if (typeof opts.ease === 'function') {\r\n            this.ease = opts.ease;\r\n        }\r\n        return this;\r\n    }\r\n    update(time) {\r\n        var _a, _b, _c;\r\n        this.elapsed += time;\r\n        if (this.elapsed <= this.delay) {\r\n            return this;\r\n        }\r\n        const value = this.interpolate(this.isReverse ? 1 - this.delta : this.delta);\r\n        (_a = this.onUpdate) === null || _a === void 0 ? void 0 : _a.call(this, value, false, this);\r\n        if (this.elapsed - this.delay >= this.duration) {\r\n            if (this.iteration < this.repeat) {\r\n                this.iteration++;\r\n                this.elapsed = ((this.elapsed - this.delay) % this.duration) + this.delay;\r\n                if (this.repeatType === RepeatType.Reverse) {\r\n                    this.isReverse = !this.isReverse;\r\n                }\r\n                (_b = this.onRepeat) === null || _b === void 0 ? void 0 : _b.call(this, this);\r\n            }\r\n            else {\r\n                this.stop();\r\n                (_c = this.onComplete) === null || _c === void 0 ? void 0 : _c.call(this, this);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n    get delta() {\r\n        return this.ease(clamp(0, (this.elapsed - this.delay) / this.duration, 1));\r\n    }\r\n    createInterpolator(from, to) {\r\n        if (typeof to !== 'object') {\r\n            return this.interpolateValue(from, to);\r\n        }\r\n        const interpolatorEntries = Object.keys(to).map((key) => [\r\n            key,\r\n            this.interpolateValue(from[key], to[key]),\r\n        ]);\r\n        return (d) => {\r\n            const result = {};\r\n            for (const [key, interpolator] of interpolatorEntries) {\r\n                result[key] = interpolator(d);\r\n            }\r\n            return result;\r\n        };\r\n    }\r\n    interpolateValue(a, b) {\r\n        try {\r\n            switch (typeof a) {\r\n                case 'number':\r\n                    return interpolateNumber(a, b);\r\n                case 'string':\r\n                    return interpolateColor(a, b);\r\n            }\r\n        }\r\n        catch (e) {\r\n            // Error-case handled below.\r\n        }\r\n        throw new Error(`Unable to interpolate values: ${a}, ${b}`);\r\n    }\r\n}\n\nconst NODE_UPDATE_PHASES = ['removed', 'updated', 'added'];\r\nconst FROM_TO_MIXINS = {\r\n    added: ADD_PHASE,\r\n    updated: UPDATE_PHASE,\r\n    removed: REMOVE_PHASE,\r\n    unknown: INITIAL_LOAD,\r\n};\r\n/**\r\n * Implements a per-node \"to/from\" animation, with support for detection of added/moved/removed\r\n * nodes.\r\n *\r\n * @param id prefix for all animation ids generated by this call\r\n * @param animationManager used to schedule generated animations\r\n * @param selections contains nodes to be animated\r\n * @param fromFn callback to determine per-node starting properties\r\n * @param toFn callback to determine per-node final properties\r\n * @param extraOpts optional additional animation properties to pass to AnimationManager#animate.\r\n * @param getDatumId optional per-datum 'id' generation function for diff calculation - must be\r\n *                   specified iff diff is specified\r\n * @param diff optional diff from a DataModel to use to detect added/moved/removed cases\r\n */\r\nfunction fromToMotion(groupId, subId, animationManager, selectionsOrNodes, fns, getDatumId, diff) {\r\n    const { defaultDuration } = animationManager;\r\n    const { fromFn, toFn, intermediateFn } = fns;\r\n    const isNodes = isNodeArray(selectionsOrNodes);\r\n    const nodes = isNodes ? selectionsOrNodes : [];\r\n    const selections = !isNodes ? selectionsOrNodes : [];\r\n    // Dynamic case with varying add/update/remove behavior.\r\n    const ids = { added: {}, removed: {} };\r\n    if (getDatumId && diff) {\r\n        ids.added = zipObject(diff.added, true);\r\n        ids.removed = zipObject(diff.removed, true);\r\n    }\r\n    const processNodes = (liveNodes, nodes) => {\r\n        var _a, _b;\r\n        let prevFromProps;\r\n        let liveNodeIndex = 0;\r\n        let nodeIndex = 0;\r\n        for (const node of nodes) {\r\n            const isLive = liveNodes[liveNodeIndex] === node;\r\n            const ctx = {\r\n                last: nodeIndex >= nodes.length - 1,\r\n                lastLive: liveNodeIndex >= liveNodes.length - 1,\r\n                prev: nodes[nodeIndex - 1],\r\n                prevFromProps,\r\n                prevLive: liveNodes[liveNodeIndex - 1],\r\n                next: nodes[nodeIndex + 1],\r\n                nextLive: liveNodes[liveNodeIndex + (isLive ? 1 : 0)],\r\n            };\r\n            const animationId = `${groupId}_${subId}_${node.id}`;\r\n            animationManager.stopByAnimationId(animationId);\r\n            let status = 'unknown';\r\n            if (!isLive) {\r\n                status = 'removed';\r\n            }\r\n            else if (getDatumId && diff) {\r\n                status = calculateStatus(node, node.datum, getDatumId, ids);\r\n            }\r\n            const _c = fromFn(node, node.datum, status, ctx), { animationDelay: delay, animationDuration: duration, start = {}, finish = {} } = _c, from = __rest(_c, [\"animationDelay\", \"animationDuration\", \"start\", \"finish\"]);\r\n            const _d = toFn(node, node.datum, status, ctx), { animationDelay: toDelay, animationDuration: toDuration, start: toStart = {}, finish: toFinish = {} } = _d, to = __rest(_d, [\"animationDelay\", \"animationDuration\", \"start\", \"finish\"]);\r\n            animationManager.animate({\r\n                id: animationId,\r\n                groupId,\r\n                from: from,\r\n                to: to,\r\n                ease: easeOut,\r\n                onPlay: () => {\r\n                    node.setProperties(Object.assign(Object.assign({}, start), toStart));\r\n                },\r\n                onUpdate(props) {\r\n                    node.setProperties(props);\r\n                    if (intermediateFn) {\r\n                        node.setProperties(intermediateFn(node, node.datum, status, ctx));\r\n                    }\r\n                },\r\n                onStop: () => {\r\n                    node.setProperties(Object.assign(Object.assign(Object.assign({}, to), finish), toFinish));\r\n                },\r\n                duration: ((_a = duration !== null && duration !== void 0 ? duration : toDuration) !== null && _a !== void 0 ? _a : 1) * defaultDuration,\r\n                delay: ((_b = delay !== null && delay !== void 0 ? delay : toDelay) !== null && _b !== void 0 ? _b : 0) * defaultDuration,\r\n            });\r\n            if (isLive) {\r\n                liveNodeIndex++;\r\n            }\r\n            nodeIndex++;\r\n            prevFromProps = from;\r\n        }\r\n    };\r\n    let selectionIndex = 0;\r\n    for (const selection of selections) {\r\n        const nodes = selection.nodes();\r\n        const liveNodes = nodes.filter((n) => !selection.isGarbage(n));\r\n        processNodes(liveNodes, nodes);\r\n        // Only perform selection cleanup once.\r\n        animationManager.animate({\r\n            id: `${groupId}_${subId}_selection_${selectionIndex}`,\r\n            groupId,\r\n            from: 0,\r\n            to: 1,\r\n            ease: easeOut,\r\n            onStop() {\r\n                selection.cleanup();\r\n            },\r\n        });\r\n        selectionIndex++;\r\n    }\r\n    processNodes(nodes, nodes);\r\n}\r\n/**\r\n * Implements a batch \"to/from\" animation.\r\n *\r\n * @param id prefix for all animation ids generated by this call\r\n * @param animationManager used to schedule generated animations\r\n * @param selectionsOrNodes contains nodes to be animated\r\n * @param from node starting properties\r\n * @param to node final properties\r\n * @param extraOpts optional additional animation properties to pass to AnimationManager#animate.\r\n */\r\nfunction staticFromToMotion(groupId, subId, animationManager, selectionsOrNodes, from, to, extraOpts = {}) {\r\n    const isNodes = isNodeArray(selectionsOrNodes);\r\n    const nodes = isNodes ? selectionsOrNodes : [];\r\n    const selections = !isNodes ? selectionsOrNodes : [];\r\n    const { animationDelay = 0, animationDuration = 1, start = {}, finish = {} } = extraOpts;\r\n    const { defaultDuration } = animationManager;\r\n    // Simple static to/from case, we can batch updates.\r\n    animationManager.animate({\r\n        id: `${groupId}_${subId}`,\r\n        groupId,\r\n        from,\r\n        to,\r\n        ease: easeOut,\r\n        onPlay: () => {\r\n            for (const node of nodes) {\r\n                node.setProperties(start);\r\n            }\r\n            for (const selection of selections) {\r\n                for (const node of selection.nodes()) {\r\n                    node.setProperties(start);\r\n                }\r\n            }\r\n        },\r\n        onUpdate(props) {\r\n            for (const node of nodes) {\r\n                node.setProperties(props);\r\n            }\r\n            for (const selection of selections) {\r\n                for (const node of selection.nodes()) {\r\n                    node.setProperties(props);\r\n                }\r\n            }\r\n        },\r\n        onStop: () => {\r\n            for (const node of nodes) {\r\n                node.setProperties(Object.assign(Object.assign({}, to), finish));\r\n            }\r\n            for (const selection of selections) {\r\n                for (const node of selection.nodes()) {\r\n                    node.setProperties(Object.assign(Object.assign({}, to), finish));\r\n                }\r\n            }\r\n        },\r\n        duration: animationDuration * defaultDuration,\r\n        delay: animationDelay * defaultDuration,\r\n    });\r\n}\r\nfunction calculateStatus(node, datum, getDatumId, ids) {\r\n    const id = getDatumId(node, datum);\r\n    if (ids.added[id]) {\r\n        return 'added';\r\n    }\r\n    else if (ids.removed[id]) {\r\n        return 'removed';\r\n    }\r\n    return 'updated';\r\n}\n\nvar fromToMotion$1 = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    NODE_UPDATE_PHASES: NODE_UPDATE_PHASES,\n    FROM_TO_MIXINS: FROM_TO_MIXINS,\n    fromToMotion: fromToMotion,\n    staticFromToMotion: staticFromToMotion\n});\n\nconst group = (content) => `(${content})`;\r\nconst optionalGroup = (content) => `${group(content)}?`;\r\nconst nonCapturingGroup = (content) => optionalGroup(`?:${content}`);\r\nconst formatRegEx = (() => {\r\n    const fill = '.';\r\n    const align = '[<>=^]';\r\n    const sign = '[+\\\\-( ]';\r\n    const symbol = '[$€£¥₣₹#]';\r\n    const zero = '0';\r\n    const width = '\\\\d+';\r\n    const comma = ',';\r\n    const precision = '\\\\d+';\r\n    const tilde = '~';\r\n    const type = '[%a-z]';\r\n    return new RegExp([\r\n        '^',\r\n        nonCapturingGroup(`${optionalGroup(fill)}${group(align)}`),\r\n        optionalGroup(sign),\r\n        optionalGroup(symbol),\r\n        optionalGroup(zero),\r\n        optionalGroup(width),\r\n        optionalGroup(comma),\r\n        nonCapturingGroup(`\\\\.${group(precision)}`),\r\n        optionalGroup(tilde),\r\n        optionalGroup(type),\r\n        '$',\r\n    ].join(''), 'i');\r\n})();\r\nconst surroundedRegEx = (() => {\r\n    const prefix = '.*?';\r\n    const content = '.+?';\r\n    const suffix = '.*?';\r\n    return new RegExp(['^', group(prefix), `#\\\\{${group(content)}\\\\}`, group(suffix), '$'].join(''));\r\n})();\r\nfunction parseFormatter(formatter) {\r\n    let prefix;\r\n    let suffix;\r\n    const surrounded = surroundedRegEx.exec(formatter);\r\n    if (surrounded) {\r\n        [, prefix, formatter, suffix] = surrounded;\r\n    }\r\n    const match = formatRegEx.exec(formatter);\r\n    if (!match) {\r\n        throw new Error(`The number formatter is invalid: ${formatter}`);\r\n    }\r\n    const [, fill, align, sign, symbol, zero, width, comma, precision, trim, type] = match;\r\n    return {\r\n        fill,\r\n        align,\r\n        sign,\r\n        symbol,\r\n        zero,\r\n        width: parseInt(width),\r\n        comma,\r\n        precision: parseInt(precision),\r\n        trim: Boolean(trim),\r\n        type,\r\n        prefix,\r\n        suffix,\r\n    };\r\n}\r\nfunction format(formatter) {\r\n    const options = typeof formatter === 'string' ? parseFormatter(formatter) : formatter;\r\n    const { fill, align, sign = '-', symbol, zero, width, comma, type, prefix = '', suffix = '', precision } = options;\r\n    let { trim } = options;\r\n    const precisionIsNaN = precision === undefined || isNaN(precision);\r\n    let formatBody;\r\n    if (!type) {\r\n        formatBody = decimalTypes['g'];\r\n        trim = true;\r\n    }\r\n    else if (type in decimalTypes && type in integerTypes) {\r\n        formatBody = precisionIsNaN ? integerTypes[type] : decimalTypes[type];\r\n    }\r\n    else if (type in decimalTypes) {\r\n        formatBody = decimalTypes[type];\r\n    }\r\n    else if (type in integerTypes) {\r\n        formatBody = integerTypes[type];\r\n    }\r\n    else {\r\n        throw new Error(`The number formatter type is invalid: ${type}`);\r\n    }\r\n    let formatterPrecision;\r\n    if (precision == null || precisionIsNaN) {\r\n        formatterPrecision = type ? 6 : 12;\r\n    }\r\n    else {\r\n        formatterPrecision = precision;\r\n    }\r\n    return (n) => {\r\n        let result = formatBody(n, formatterPrecision);\r\n        if (trim) {\r\n            result = removeTrailingZeros(result);\r\n        }\r\n        if (comma) {\r\n            result = insertSeparator(result, comma);\r\n        }\r\n        result = addSign(n, result, sign);\r\n        if (symbol && symbol !== '#') {\r\n            result = `${symbol}${result}`;\r\n        }\r\n        if (symbol === '#' && type === 'x') {\r\n            result = `0x${result}`;\r\n        }\r\n        if (type === 's') {\r\n            result = `${result}${getSIPrefix(n)}`;\r\n        }\r\n        if (type === '%' || type === 'p') {\r\n            result = `${result}%`;\r\n        }\r\n        if (width != null && !isNaN(width)) {\r\n            result = addPadding(result, width, fill !== null && fill !== void 0 ? fill : zero, align);\r\n        }\r\n        result = `${prefix}${result}${suffix}`;\r\n        return result;\r\n    };\r\n}\r\nconst absFloor = (n) => Math.floor(Math.abs(n));\r\nconst integerTypes = {\r\n    b: (n) => absFloor(n).toString(2),\r\n    c: (n) => String.fromCharCode(n),\r\n    d: (n) => Math.round(Math.abs(n)).toFixed(0),\r\n    o: (n) => absFloor(n).toString(8),\r\n    x: (n) => absFloor(n).toString(16),\r\n    X: (n) => integerTypes.x(n).toUpperCase(),\r\n    n: (n) => integerTypes.d(n),\r\n    '%': (n) => `${absFloor(n * 100).toFixed(0)}`,\r\n};\r\nconst decimalTypes = {\r\n    e: (n, f) => Math.abs(n).toExponential(f),\r\n    E: (n, f) => decimalTypes.e(n, f).toUpperCase(),\r\n    f: (n, f) => Math.abs(n).toFixed(f),\r\n    F: (n, f) => decimalTypes.f(n, f).toUpperCase(),\r\n    g: (n, f) => {\r\n        if (n === 0) {\r\n            return '0';\r\n        }\r\n        const a = Math.abs(n);\r\n        const p = Math.floor(Math.log10(a));\r\n        if (p >= -4 && p < f) {\r\n            return a.toFixed(f - 1 - p);\r\n        }\r\n        return a.toExponential(f - 1);\r\n    },\r\n    G: (n, f) => decimalTypes.g(n, f).toUpperCase(),\r\n    n: (n, f) => decimalTypes.g(n, f),\r\n    p: (n, f) => decimalTypes.r(n * 100, f),\r\n    r: (n, f) => {\r\n        if (n === 0) {\r\n            return '0';\r\n        }\r\n        const a = Math.abs(n);\r\n        const p = Math.floor(Math.log10(a));\r\n        const q = p - (f - 1);\r\n        if (q <= 0) {\r\n            return a.toFixed(-q);\r\n        }\r\n        const x = Math.pow(10, q);\r\n        return (Math.round(a / x) * x).toFixed();\r\n    },\r\n    s: (n, f) => {\r\n        const p = getSIPrefixPower(n);\r\n        return decimalTypes.r(n / Math.pow(10, p), f);\r\n    },\r\n    '%': (n, f) => decimalTypes.f(n * 100, f),\r\n};\r\nfunction removeTrailingZeros(numString) {\r\n    return numString.replace(/\\.0+$/, '').replace(/(\\.[1-9])0+$/, '$1');\r\n}\r\nfunction insertSeparator(numString, separator) {\r\n    let dotIndex = numString.indexOf('.');\r\n    if (dotIndex < 0) {\r\n        dotIndex = numString.length;\r\n    }\r\n    const integerChars = numString.substring(0, dotIndex).split('');\r\n    const fractionalPart = numString.substring(dotIndex);\r\n    for (let i = integerChars.length - 3; i > 0; i -= 3) {\r\n        integerChars.splice(i, 0, separator);\r\n    }\r\n    return `${integerChars.join('')}${fractionalPart}`;\r\n}\r\nfunction getSIPrefix(n) {\r\n    return siPrefixes[getSIPrefixPower(n)];\r\n}\r\nfunction getSIPrefixPower(n) {\r\n    const power = Math.log10(Math.abs(n));\r\n    const p = Math.floor(power / 3) * 3;\r\n    return Math.max(minSIPrefix, Math.min(maxSIPrefix, p));\r\n}\r\nconst minSIPrefix = -24;\r\nconst maxSIPrefix = 24;\r\nconst siPrefixes = {\r\n    [minSIPrefix]: 'y',\r\n    [-21]: 'z',\r\n    [-18]: 'a',\r\n    [-15]: 'f',\r\n    [-12]: 'p',\r\n    [-9]: 'n',\r\n    [-6]: 'µ',\r\n    [-3]: 'm',\r\n    [0]: '',\r\n    [3]: 'k',\r\n    [6]: 'M',\r\n    [9]: 'G',\r\n    [12]: 'T',\r\n    [15]: 'P',\r\n    [18]: 'E',\r\n    [21]: 'Z',\r\n    [maxSIPrefix]: 'Y',\r\n};\r\nconst minusSign = '\\u2212';\r\nfunction addSign(num, numString, signType = '') {\r\n    if (signType === '(') {\r\n        return num >= 0 ? numString : `(${numString})`;\r\n    }\r\n    const plusSign = signType === '+' ? '+' : '';\r\n    return `${num >= 0 ? plusSign : minusSign}${numString}`;\r\n}\r\nfunction addPadding(numString, width, fill = ' ', align = '>') {\r\n    let result = numString;\r\n    if (align === '>' || !align) {\r\n        result = result.padStart(width, fill);\r\n    }\r\n    else if (align === '<') {\r\n        result = result.padEnd(width, fill);\r\n    }\r\n    else if (align === '^') {\r\n        const padWidth = Math.max(0, width - result.length);\r\n        const padLeft = Math.ceil(padWidth / 2);\r\n        const padRight = Math.floor(padWidth / 2);\r\n        result = result.padStart(padLeft + result.length, fill);\r\n        result = result.padEnd(padRight + result.length, fill);\r\n    }\r\n    return result;\r\n}\r\nfunction tickFormat(ticks, formatter) {\r\n    const options = parseFormatter(formatter !== null && formatter !== void 0 ? formatter : ',f');\r\n    const { precision } = options;\r\n    if (precision == null || isNaN(precision)) {\r\n        if (options.type === 'f' || options.type === '%') {\r\n            options.precision = Math.max(...ticks.map((x) => {\r\n                if (typeof x !== 'number' || x === 0) {\r\n                    return 0;\r\n                }\r\n                const l = Math.floor(Math.log10(Math.abs(x)));\r\n                const digits = options.type ? 6 : 12;\r\n                const exp = x.toExponential(digits - 1).replace(/\\.?0+e/, 'e');\r\n                const dotIndex = exp.indexOf('.');\r\n                if (dotIndex < 0) {\r\n                    return l >= 0 ? 0 : -l;\r\n                }\r\n                const s = exp.indexOf('e') - dotIndex;\r\n                return Math.max(0, s - l - 1);\r\n            }));\r\n        }\r\n        else if (!options.type || options.type in decimalTypes) {\r\n            options.precision = Math.max(...ticks.map((x) => {\r\n                if (typeof x !== 'number') {\r\n                    return 0;\r\n                }\r\n                const exp = x.toExponential((options.type ? 6 : 12) - 1).replace(/\\.?0+e/, 'e');\r\n                return exp.substring(0, exp.indexOf('e')).replace('.', '').length;\r\n            }));\r\n        }\r\n    }\r\n    const f = format(options);\r\n    return (n) => f(Number(n));\r\n}\n\nfunction ticks (start, stop, count, minCount, maxCount) {\r\n    if (count < 2) {\r\n        return range$1(start, stop, stop - start);\r\n    }\r\n    const step = tickStep(start, stop, count, minCount, maxCount);\r\n    if (isNaN(step)) {\r\n        return new NumericTicks(0);\r\n    }\r\n    start = Math.ceil(start / step) * step;\r\n    stop = Math.floor(stop / step) * step;\r\n    return range$1(start, stop, step);\r\n}\r\nconst tickMultipliers = [1, 2, 5, 10];\r\nfunction tickStep(a, b, count, minCount = 0, maxCount = Infinity) {\r\n    const rawStep = (b - a) / count;\r\n    const power = Math.floor(Math.log10(rawStep));\r\n    const step = Math.pow(10, power);\r\n    const m = tickMultipliers\r\n        .map((multiplier) => {\r\n        const s = multiplier * step;\r\n        const c = Math.ceil((b - a) / s);\r\n        const isWithinBounds = c >= minCount && c <= maxCount;\r\n        const diffCount = Math.abs(c - count);\r\n        return { multiplier, isWithinBounds, diffCount };\r\n    })\r\n        .sort((a, b) => {\r\n        if (a.isWithinBounds !== b.isWithinBounds) {\r\n            return a.isWithinBounds ? -1 : 1;\r\n        }\r\n        return a.diffCount - b.diffCount;\r\n    })[0].multiplier;\r\n    if (!m || isNaN(m)) {\r\n        return NaN;\r\n    }\r\n    return m * step;\r\n}\r\nfunction singleTickDomain(a, b) {\r\n    const power = Math.floor(Math.log10(b - a));\r\n    const step = Math.pow(10, power);\r\n    return tickMultipliers\r\n        .map((multiplier) => {\r\n        const s = multiplier * step;\r\n        const start = Math.floor(a / s) * s;\r\n        const end = Math.ceil(b / s) * s;\r\n        const error = 1 - (b - a) / (end - start);\r\n        const domain = [start, end];\r\n        return { error, domain };\r\n    })\r\n        .sort((a, b) => a.error - b.error)[0].domain;\r\n}\r\nclass NumericTicks extends Array {\r\n    constructor(fractionDigits, elements) {\r\n        super();\r\n        if (elements) {\r\n            for (let i = 0, n = elements.length; i < n; i++) {\r\n                this[i] = elements[i];\r\n            }\r\n        }\r\n        this.fractionDigits = fractionDigits;\r\n    }\r\n}\r\nfunction range$1(start, stop, step) {\r\n    const countDigits = (expNo) => {\r\n        var _a, _b;\r\n        const parts = expNo.split('e');\r\n        return Math.max(((_b = (_a = parts[0].split('.')[1]) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0) - Number(parts[1]), 0);\r\n    };\r\n    const fractionalDigits = countDigits((step % 1).toExponential());\r\n    const f = Math.pow(10, fractionalDigits);\r\n    const n = Math.ceil((stop - start) / step);\r\n    const values = new NumericTicks(fractionalDigits);\r\n    for (let i = 0; i <= n; i++) {\r\n        const value = start + step * i;\r\n        values.push(Math.round(value * f) / f);\r\n    }\r\n    return values;\r\n}\n\nclass ContinuousScale {\r\n    static is(value) {\r\n        return value instanceof ContinuousScale;\r\n    }\r\n    constructor(domain, range) {\r\n        this.domain = domain;\r\n        this.range = range;\r\n        this.nice = false;\r\n        this.tickCount = ContinuousScale.defaultTickCount;\r\n        this.minTickCount = 0;\r\n        this.maxTickCount = Infinity;\r\n        this.niceDomain = [];\r\n        this.defaultClampMode = 'raw';\r\n        this.cache = null;\r\n        this.cacheProps = ['domain', 'range', 'nice', 'tickCount', 'minTickCount', 'maxTickCount'];\r\n    }\r\n    transform(x) {\r\n        return x;\r\n    }\r\n    transformInvert(x) {\r\n        return x;\r\n    }\r\n    calcBandwidth(smallestInterval = 1) {\r\n        const domain = this.getDomain();\r\n        const maxRange = Math.max(...this.range);\r\n        const intervals = (domain[1] - domain[0]) / smallestInterval + 1;\r\n        // The number of intervals/bands is used to determine the width of individual bands by dividing the available range.\r\n        // Allow a maximum number of bands to ensure the step does not fall below 1 pixel.\r\n        // This means there could be some overlap of the bands in the chart.\r\n        const maxBands = Math.floor(maxRange); // A minimum of 1px per bar/column means the maximum number of bands will equal the available range\r\n        const bands = Math.min(intervals, maxBands);\r\n        return maxRange / Math.max(1, bands);\r\n    }\r\n    fromDomain(d) {\r\n        if (typeof d === 'number') {\r\n            return d;\r\n        }\r\n        else if (d instanceof Date) {\r\n            return d.getTime();\r\n        }\r\n        return NaN;\r\n    }\r\n    getDomain() {\r\n        if (this.nice) {\r\n            this.refresh();\r\n            if (this.niceDomain.length) {\r\n                return this.niceDomain;\r\n            }\r\n        }\r\n        return this.domain;\r\n    }\r\n    convert(x, opts) {\r\n        var _a;\r\n        const clampMode = (_a = opts === null || opts === void 0 ? void 0 : opts.clampMode) !== null && _a !== void 0 ? _a : this.defaultClampMode;\r\n        if (!this.domain || this.domain.length < 2) {\r\n            return NaN;\r\n        }\r\n        this.refresh();\r\n        const domain = this.getDomain().map((d) => this.transform(d));\r\n        const [d0, d1] = domain;\r\n        const { range } = this;\r\n        const [r0, r1] = range;\r\n        x = this.transform(x);\r\n        if (clampMode === 'clamped') {\r\n            if (x < d0) {\r\n                return r0;\r\n            }\r\n            else if (x > d1) {\r\n                return r1;\r\n            }\r\n        }\r\n        if (d0 === d1) {\r\n            return (r0 + r1) / 2;\r\n        }\r\n        else if (x === d0) {\r\n            return r0;\r\n        }\r\n        else if (x === d1) {\r\n            return r1;\r\n        }\r\n        return (r0 + ((this.fromDomain(x) - this.fromDomain(d0)) / (this.fromDomain(d1) - this.fromDomain(d0))) * (r1 - r0));\r\n    }\r\n    invert(x) {\r\n        this.refresh();\r\n        const domain = this.getDomain().map((d) => this.transform(d));\r\n        const [d0, d1] = domain;\r\n        const { range } = this;\r\n        const [r0, r1] = range;\r\n        const isReversed = r0 > r1;\r\n        const rMin = isReversed ? r1 : r0;\r\n        const rMax = isReversed ? r0 : r1;\r\n        let d;\r\n        if (x < rMin) {\r\n            return isReversed ? d1 : d0;\r\n        }\r\n        else if (x > rMax) {\r\n            return isReversed ? d0 : d1;\r\n        }\r\n        else if (r0 === r1) {\r\n            d = this.toDomain((this.fromDomain(d0) + this.fromDomain(d1)) / 2);\r\n        }\r\n        else {\r\n            d = this.toDomain(this.fromDomain(d0) + ((x - r0) / (r1 - r0)) * (this.fromDomain(d1) - this.fromDomain(d0)));\r\n        }\r\n        return this.transformInvert(d);\r\n    }\r\n    didChange() {\r\n        const { cache } = this;\r\n        const didChange = !cache || this.cacheProps.some((p) => this[p] !== cache[p]);\r\n        if (didChange) {\r\n            this.cache = {};\r\n            this.cacheProps.forEach((p) => (this.cache[p] = this[p]));\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    refresh() {\r\n        if (this.didChange()) {\r\n            this.update();\r\n        }\r\n    }\r\n    getPixelRange() {\r\n        const range = this.range.slice().sort((a, b) => a - b);\r\n        return range[1] - range[0];\r\n    }\r\n    isDenseInterval({ start, stop, interval, count, }) {\r\n        const domain = stop - start;\r\n        const availableRange = this.getPixelRange();\r\n        const step = typeof interval === 'number' ? interval : 1;\r\n        count !== null && count !== void 0 ? count : (count = domain / step);\r\n        if (count >= availableRange) {\r\n            Logger.warn(`the configured tick interval results in more than 1 tick per pixel, ignoring. Supply a larger tick interval or omit this configuration.`);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\nContinuousScale.defaultTickCount = 5;\r\nContinuousScale.defaultMaxTickCount = 6;\n\n/**\r\n * Maps continuous domain to a continuous range.\r\n */\r\nclass LinearScale extends ContinuousScale {\r\n    constructor() {\r\n        super([0, 1], [0, 1]);\r\n        this.type = 'linear';\r\n    }\r\n    toDomain(d) {\r\n        return d;\r\n    }\r\n    ticks() {\r\n        var _a;\r\n        const count = (_a = this.tickCount) !== null && _a !== void 0 ? _a : ContinuousScale.defaultTickCount;\r\n        if (!this.domain || this.domain.length < 2 || count < 1 || this.domain.some((d) => !isFinite(d))) {\r\n            return [];\r\n        }\r\n        this.refresh();\r\n        const [d0, d1] = this.getDomain();\r\n        const { interval } = this;\r\n        if (interval) {\r\n            const step = Math.abs(interval);\r\n            if (!this.isDenseInterval({ start: d0, stop: d1, interval: step })) {\r\n                return range$1(d0, d1, step);\r\n            }\r\n        }\r\n        return ticks(d0, d1, count, this.minTickCount, this.maxTickCount);\r\n    }\r\n    update() {\r\n        if (!this.domain || this.domain.length < 2) {\r\n            return;\r\n        }\r\n        if (this.nice) {\r\n            this.updateNiceDomain();\r\n        }\r\n    }\r\n    getTickStep(start, stop) {\r\n        var _a, _b;\r\n        const count = (_a = this.tickCount) !== null && _a !== void 0 ? _a : ContinuousScale.defaultTickCount;\r\n        return (_b = this.interval) !== null && _b !== void 0 ? _b : tickStep(start, stop, count, this.minTickCount, this.maxTickCount);\r\n    }\r\n    /**\r\n     * Extends the domain so that it starts and ends on nice round values.\r\n     */\r\n    updateNiceDomain() {\r\n        var _a;\r\n        const count = (_a = this.tickCount) !== null && _a !== void 0 ? _a : ContinuousScale.defaultTickCount;\r\n        let [start, stop] = this.domain;\r\n        if (count < 1) {\r\n            this.niceDomain = [start, stop];\r\n            return;\r\n        }\r\n        if (count === 1) {\r\n            this.niceDomain = singleTickDomain(start, stop);\r\n            return;\r\n        }\r\n        const maxAttempts = 4;\r\n        let prev0 = start;\r\n        let prev1 = stop;\r\n        for (let i = 0; i < maxAttempts; i++) {\r\n            const step = this.getTickStep(start, stop);\r\n            const [d0, d1] = this.domain;\r\n            if (step >= 1) {\r\n                start = Math.floor(d0 / step) * step;\r\n                stop = Math.ceil(d1 / step) * step;\r\n            }\r\n            else {\r\n                // Prevent floating point error\r\n                const s = 1 / step;\r\n                start = Math.floor(d0 * s) / s;\r\n                stop = Math.ceil(d1 * s) / s;\r\n            }\r\n            if (start === prev0 && stop === prev1) {\r\n                break;\r\n            }\r\n            prev0 = start;\r\n            prev1 = stop;\r\n        }\r\n        this.niceDomain = [start, stop];\r\n    }\r\n    tickFormat({ ticks, specifier }) {\r\n        return tickFormat(ticks !== null && ticks !== void 0 ? ticks : this.ticks(), specifier);\r\n    }\r\n}\n\nfunction ascendingStringNumberUndefined(a, b) {\r\n    let diff = 0;\r\n    if (typeof a === 'number' && typeof b === 'number') {\r\n        diff = a - b;\r\n    }\r\n    else if (typeof a === 'string' && typeof b === 'string') {\r\n        diff = a.localeCompare(b);\r\n    }\r\n    else if (a == null && b == null) ;\r\n    else if (a == null) {\r\n        diff = -1;\r\n    }\r\n    else if (b == null) {\r\n        diff = 1;\r\n    }\r\n    else {\r\n        diff = String(a).localeCompare(String(b));\r\n    }\r\n    return diff;\r\n}\r\nfunction compoundAscending(a, b, comparator) {\r\n    const toLiteral = (v) => {\r\n        if (typeof v === 'function') {\r\n            return v();\r\n        }\r\n        return v;\r\n    };\r\n    for (const idx in a) {\r\n        const diff = comparator(toLiteral(a[idx]), toLiteral(b[idx]));\r\n        if (diff !== 0) {\r\n            return diff;\r\n        }\r\n    }\r\n    return 0;\r\n}\n\nclass Group extends Node {\r\n    zIndexChanged() {\r\n        var _a;\r\n        if (this.layer) {\r\n            (_a = this._layerManager) === null || _a === void 0 ? void 0 : _a.moveLayer(this.layer, this.zIndex, this.zIndexSubOrder);\r\n        }\r\n    }\r\n    isLayer() {\r\n        return this.layer != null;\r\n    }\r\n    constructor(opts) {\r\n        var _a;\r\n        super({ isVirtual: opts === null || opts === void 0 ? void 0 : opts.isVirtual });\r\n        this.opts = opts;\r\n        this.opacity = 1;\r\n        this.lastBBox = undefined;\r\n        const { zIndex, zIndexSubOrder } = opts !== null && opts !== void 0 ? opts : {};\r\n        this.isContainerNode = true;\r\n        if (zIndex !== undefined) {\r\n            this.zIndex = zIndex;\r\n        }\r\n        if (zIndexSubOrder !== undefined) {\r\n            this.zIndexSubOrder = zIndexSubOrder;\r\n        }\r\n        this.name = (_a = this.opts) === null || _a === void 0 ? void 0 : _a.name;\r\n    }\r\n    _setLayerManager(scene) {\r\n        var _a, _b;\r\n        if (this._layerManager && this.layer) {\r\n            this._layerManager.removeLayer(this.layer);\r\n            this.layer = undefined;\r\n        }\r\n        if (this.layer) {\r\n            throw new Error('AG Charts - unable to deregister scene rendering layer!');\r\n        }\r\n        super._setLayerManager(scene);\r\n        if (scene && ((_a = this.opts) === null || _a === void 0 ? void 0 : _a.layer)) {\r\n            const { zIndex, zIndexSubOrder, name } = (_b = this.opts) !== null && _b !== void 0 ? _b : {};\r\n            const getComputedOpacity = () => this.getComputedOpacity();\r\n            const getVisibility = () => this.getVisibility();\r\n            this.layer = scene.addLayer({\r\n                zIndex,\r\n                zIndexSubOrder,\r\n                name,\r\n                getComputedOpacity,\r\n                getVisibility,\r\n            });\r\n        }\r\n    }\r\n    getComputedOpacity() {\r\n        let opacity = 1;\r\n        let node = this;\r\n        do {\r\n            if (node instanceof Group) {\r\n                opacity *= node.opacity;\r\n            }\r\n        } while ((node = node.parent));\r\n        return opacity;\r\n    }\r\n    getVisibility() {\r\n        let node = this;\r\n        let visible = this.visible;\r\n        while ((node = node.parent)) {\r\n            if (node.visible) {\r\n                continue;\r\n            }\r\n            visible = node.visible;\r\n        }\r\n        return visible;\r\n    }\r\n    visibilityChanged() {\r\n        if (this.layer) {\r\n            this.layer.enabled = this.visible;\r\n        }\r\n    }\r\n    markDirty(source, type = RedrawType.TRIVIAL) {\r\n        if (this.isVirtual) {\r\n            // Always percolate directly for virtual nodes - they don't exist for rendering purposes.\r\n            super.markDirty(source, type);\r\n            return;\r\n        }\r\n        // Downgrade dirty-ness percolated to parent in special cases.\r\n        let parentType = type;\r\n        if (type < RedrawType.MINOR || this.layer != null) {\r\n            parentType = RedrawType.TRIVIAL;\r\n        }\r\n        super.markDirty(source, type, parentType);\r\n    }\r\n    // We consider a group to be boundless, thus any point belongs to it.\r\n    containsPoint(_x, _y) {\r\n        return true;\r\n    }\r\n    computeBBox() {\r\n        this.computeTransformMatrix();\r\n        return Group.computeBBox(this.children);\r\n    }\r\n    computeTransformedBBox() {\r\n        return this.computeBBox();\r\n    }\r\n    render(renderCtx) {\r\n        var _a, _b;\r\n        const { opts: { name = undefined } = {}, _debug: debug = () => { } } = this;\r\n        const { dirty, dirtyZIndex, layer, children, clipRect, dirtyTransform } = this;\r\n        let { ctx, forceRender, clipBBox } = renderCtx;\r\n        const { resized, stats } = renderCtx;\r\n        const canvasCtxTransform = ctx.getTransform();\r\n        const isDirty = dirty >= RedrawType.MINOR || dirtyZIndex || resized;\r\n        let isChildDirty = isDirty;\r\n        let isChildLayerDirty = false;\r\n        for (const child of children) {\r\n            isChildDirty || (isChildDirty = child.layerManager == null && child.dirty >= RedrawType.TRIVIAL);\r\n            isChildLayerDirty || (isChildLayerDirty = child.layerManager != null && child.dirty >= RedrawType.TRIVIAL);\r\n            if (isChildDirty) {\r\n                break;\r\n            }\r\n        }\r\n        if (name) {\r\n            debug({ name, group: this, isDirty, isChildDirty, dirtyTransform, renderCtx, forceRender });\r\n        }\r\n        if (dirtyTransform) {\r\n            forceRender = 'dirtyTransform';\r\n        }\r\n        else if (layer) {\r\n            // If bounding-box of a layer changes, force re-render.\r\n            const currentBBox = this.computeBBox();\r\n            if (this.lastBBox === undefined || !this.lastBBox.equals(currentBBox)) {\r\n                forceRender = 'dirtyTransform';\r\n                this.lastBBox = currentBBox;\r\n            }\r\n        }\r\n        if (!isDirty && !isChildDirty && !isChildLayerDirty && !forceRender) {\r\n            if (name && stats) {\r\n                debug({ name, result: 'skipping', renderCtx, counts: this.nodeCount, group: this });\r\n            }\r\n            if (layer && stats) {\r\n                stats.layersSkipped++;\r\n                stats.nodesSkipped += this.nodeCount.count;\r\n            }\r\n            this.markClean({ recursive: false });\r\n            // Nothing to do.\r\n            return;\r\n        }\r\n        const groupVisible = this.visible;\r\n        if (layer) {\r\n            // Switch context to the canvas layer we use for this group.\r\n            ctx = layer.context;\r\n            ctx.save();\r\n            ctx.resetTransform();\r\n            if (forceRender !== 'dirtyTransform') {\r\n                forceRender = isChildDirty || dirtyZIndex;\r\n            }\r\n            if (forceRender)\r\n                layer.clear();\r\n            if (clipBBox) {\r\n                // clipBBox is in the canvas coordinate space, when we hit a layer we apply the new clipping at which point there are no transforms in play\r\n                const { width, height, x, y } = clipBBox;\r\n                debug(() => ({\r\n                    name,\r\n                    clipBBox,\r\n                    ctxTransform: ctx.getTransform(),\r\n                    renderCtx,\r\n                    group: this,\r\n                }));\r\n                this.clipCtx(ctx, x, y, width, height);\r\n            }\r\n            ctx.setTransform(canvasCtxTransform);\r\n        }\r\n        else {\r\n            // Only apply opacity if this isn't a distinct layer - opacity will be applied\r\n            // at composition time.\r\n            ctx.globalAlpha *= this.opacity;\r\n        }\r\n        // A group can have `scaling`, `rotation`, `translation` properties\r\n        // that are applied to the canvas context before children are rendered,\r\n        // so all children can be transformed at once.\r\n        this.computeTransformMatrix();\r\n        this.matrix.toContext(ctx);\r\n        if (clipRect) {\r\n            // clipRect is in the group's coordinate space\r\n            const { x, y, width, height } = clipRect;\r\n            ctx.save();\r\n            debug(() => ({ name, clipRect, ctxTransform: ctx.getTransform(), renderCtx, group: this }));\r\n            this.clipCtx(ctx, x, y, width, height);\r\n            // clipBBox is in the canvas coordinate space, when we hit a layer we apply the new clipping at which point there are no transforms in play\r\n            clipBBox = this.matrix.transformBBox(clipRect);\r\n        }\r\n        const hasVirtualChildren = this.hasVirtualChildren();\r\n        if (dirtyZIndex) {\r\n            this.sortChildren(children);\r\n            if (forceRender !== 'dirtyTransform')\r\n                forceRender = true;\r\n        }\r\n        else if (hasVirtualChildren) {\r\n            this.sortChildren(children);\r\n        }\r\n        // Reduce churn if renderCtx is identical.\r\n        const renderContextChanged = forceRender !== renderCtx.forceRender || clipBBox !== renderCtx.clipBBox || ctx !== renderCtx.ctx;\r\n        const childRenderContext = renderContextChanged ? Object.assign(Object.assign({}, renderCtx), { ctx, forceRender, clipBBox }) : renderCtx;\r\n        // Render visible children.\r\n        let skipped = 0;\r\n        for (const child of children) {\r\n            if (!child.visible || !groupVisible) {\r\n                // Skip invisible children, but make sure their dirty flag is reset.\r\n                child.markClean();\r\n                if (stats)\r\n                    skipped += child.nodeCount.count;\r\n                continue;\r\n            }\r\n            if (!forceRender && child.dirty === RedrawType.NONE) {\r\n                // Skip children that don't need to be redrawn.\r\n                if (stats)\r\n                    skipped += child.nodeCount.count;\r\n                continue;\r\n            }\r\n            // Render marks this node (and children) as clean - no need to explicitly markClean().\r\n            ctx.save();\r\n            child.render(childRenderContext);\r\n            ctx.restore();\r\n        }\r\n        if (stats)\r\n            stats.nodesSkipped += skipped;\r\n        // Render marks this node as clean - no need to explicitly markClean().\r\n        super.render(renderCtx);\r\n        if (clipRect) {\r\n            ctx.restore();\r\n        }\r\n        if (hasVirtualChildren) {\r\n            // Mark virtual nodes as clean and their virtual children - all other nodes have already\r\n            // been visited and marked clean.\r\n            for (const child of this.virtualChildren) {\r\n                child.markClean({ recursive: 'virtual' });\r\n            }\r\n        }\r\n        if (layer) {\r\n            if (stats)\r\n                stats.layersRendered++;\r\n            ctx.restore();\r\n            if (forceRender)\r\n                layer.snapshot();\r\n            // Check for save/restore depth of zero!\r\n            (_b = (_a = layer.context).verifyDepthZero) === null || _b === void 0 ? void 0 : _b.call(_a);\r\n        }\r\n        if (name && stats) {\r\n            debug({ name, result: 'rendered', skipped, renderCtx, counts: this.nodeCount, group: this });\r\n        }\r\n    }\r\n    sortChildren(children) {\r\n        this.dirtyZIndex = false;\r\n        children.sort((a, b) => {\r\n            var _a, _b;\r\n            return compoundAscending([a.zIndex, ...((_a = a.zIndexSubOrder) !== null && _a !== void 0 ? _a : [undefined, undefined]), a.serialNumber], [b.zIndex, ...((_b = b.zIndexSubOrder) !== null && _b !== void 0 ? _b : [undefined, undefined]), b.serialNumber], ascendingStringNumberUndefined);\r\n        });\r\n    }\r\n    clipCtx(ctx, x, y, width, height) {\r\n        ctx.beginPath();\r\n        ctx.moveTo(x, y);\r\n        ctx.lineTo(x + width, y);\r\n        ctx.lineTo(x + width, y + height);\r\n        ctx.lineTo(x, y + height);\r\n        ctx.closePath();\r\n        ctx.clip();\r\n    }\r\n    static computeBBox(nodes) {\r\n        let left = Infinity;\r\n        let right = -Infinity;\r\n        let top = Infinity;\r\n        let bottom = -Infinity;\r\n        nodes.forEach((n) => {\r\n            if (!n.visible) {\r\n                return;\r\n            }\r\n            const bbox = n.computeTransformedBBox();\r\n            if (!bbox) {\r\n                return;\r\n            }\r\n            const x = bbox.x;\r\n            const y = bbox.y;\r\n            if (x < left) {\r\n                left = x;\r\n            }\r\n            if (y < top) {\r\n                top = y;\r\n            }\r\n            if (x + bbox.width > right) {\r\n                right = x + bbox.width;\r\n            }\r\n            if (y + bbox.height > bottom) {\r\n                bottom = y + bbox.height;\r\n            }\r\n        });\r\n        return new BBox(left, top, right - left, bottom - top);\r\n    }\r\n    /**\r\n     * Transforms bbox given in the canvas coordinate space to bbox in this group's coordinate space and\r\n     * sets this group's clipRect to the transformed bbox.\r\n     * @param bbox clipRect bbox in the canvas coordinate space.\r\n     */\r\n    setClipRectInGroupCoordinateSpace(bbox) {\r\n        this.clipRect = bbox ? this.transformBBox(bbox) : undefined;\r\n    }\r\n}\r\nGroup.className = 'Group';\r\n__decorate([\r\n    SceneChangeDetection({\r\n        redraw: RedrawType.MAJOR,\r\n        convertor: (v) => Math.min(1, Math.max(0, v)),\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], Group.prototype, \"opacity\", void 0);\n\nclass Selection {\r\n    static select(parent, classOrFactory, garbageCollection = true) {\r\n        return new Selection(parent, classOrFactory, garbageCollection);\r\n    }\r\n    static selectAll(parent, predicate) {\r\n        const results = [];\r\n        const traverse = (node) => {\r\n            if (predicate(node)) {\r\n                results.push(node);\r\n            }\r\n            node.children.forEach(traverse);\r\n        };\r\n        traverse(parent);\r\n        return results;\r\n    }\r\n    static selectByClass(node, Class) {\r\n        return Selection.selectAll(node, (node) => node instanceof Class);\r\n    }\r\n    static selectByTag(node, tag) {\r\n        return Selection.selectAll(node, (node) => node.tag === tag);\r\n    }\r\n    constructor(parentNode, classOrFactory, autoCleanup = true) {\r\n        this.parentNode = parentNode;\r\n        this.autoCleanup = autoCleanup;\r\n        this.garbageBin = new Set();\r\n        this._nodesMap = new Map();\r\n        this._nodes = [];\r\n        this.data = [];\r\n        this.debug = Debug.create(true, 'scene', 'scene:selections');\r\n        this.nodeFactory = Object.prototype.isPrototypeOf.call(Node, classOrFactory)\r\n            ? () => new classOrFactory()\r\n            : classOrFactory;\r\n    }\r\n    createNode(datum, initializer, idx) {\r\n        const node = this.nodeFactory(datum);\r\n        node.datum = datum;\r\n        initializer === null || initializer === void 0 ? void 0 : initializer(node);\r\n        if (idx != null) {\r\n            this._nodes.splice(idx, 0, node);\r\n        }\r\n        else {\r\n            this._nodes.push(node);\r\n        }\r\n        this.parentNode.appendChild(node);\r\n        return node;\r\n    }\r\n    /**\r\n     * Update the data in a selection. If an `getDatumId()` function is provided, maintain a list of ids related to\r\n     * the nodes. Otherwise, take the more efficient route of simply creating and destroying nodes at the end\r\n     * of the array.\r\n     */\r\n    update(data, initializer, getDatumId) {\r\n        if (this.garbageBin.size > 0) {\r\n            this.debug(`Selection - update() called with pending garbage: ${data}`);\r\n        }\r\n        if (getDatumId) {\r\n            const dataMap = new Map(data.map((datum, idx) => [getDatumId(datum), [datum, idx]]));\r\n            for (const [node, datumId] of this._nodesMap.entries()) {\r\n                if (dataMap.has(datumId)) {\r\n                    const [newDatum] = dataMap.get(datumId);\r\n                    node.datum = newDatum;\r\n                    this.garbageBin.delete(node);\r\n                    dataMap.delete(datumId);\r\n                }\r\n                else {\r\n                    this.garbageBin.add(node);\r\n                }\r\n            }\r\n            for (const [datumId, [datum, idx]] of dataMap.entries()) {\r\n                this._nodesMap.set(this.createNode(datum, initializer, idx), datumId);\r\n            }\r\n        }\r\n        else {\r\n            const maxLength = Math.max(data.length, this.data.length);\r\n            for (let i = 0; i < maxLength; i++) {\r\n                if (i >= data.length) {\r\n                    this.garbageBin.add(this._nodes[i]);\r\n                }\r\n                else if (i >= this._nodes.length) {\r\n                    this.createNode(data[i], initializer);\r\n                }\r\n                else {\r\n                    this._nodes[i].datum = data[i];\r\n                    this.garbageBin.delete(this._nodes[i]);\r\n                }\r\n            }\r\n        }\r\n        this.data = data.slice();\r\n        if (this.autoCleanup) {\r\n            this.cleanup();\r\n        }\r\n        return this;\r\n    }\r\n    cleanup() {\r\n        if (this.garbageBin.size === 0) {\r\n            return this;\r\n        }\r\n        this._nodes = this._nodes.filter((node) => {\r\n            if (this.garbageBin.has(node)) {\r\n                this._nodesMap.delete(node);\r\n                this.garbageBin.delete(node);\r\n                this.parentNode.removeChild(node);\r\n                return false;\r\n            }\r\n            return true;\r\n        });\r\n        return this;\r\n    }\r\n    clear() {\r\n        this.update([]);\r\n        return this;\r\n    }\r\n    isGarbage(node) {\r\n        return this.garbageBin.has(node);\r\n    }\r\n    hasGarbage() {\r\n        return this.garbageBin.size > 0;\r\n    }\r\n    each(iterate) {\r\n        this._nodes.forEach((node, i) => iterate(node, node.datum, i));\r\n        return this;\r\n    }\r\n    *[Symbol.iterator]() {\r\n        for (let index = 0; index < this._nodes.length; index++) {\r\n            const node = this._nodes[index];\r\n            const datum = this._nodes[index].datum;\r\n            yield { node, datum, index };\r\n        }\r\n    }\r\n    select(predicate) {\r\n        return Selection.selectAll(this.parentNode, predicate);\r\n    }\r\n    selectByClass(Class) {\r\n        return Selection.selectByClass(this.parentNode, Class);\r\n    }\r\n    selectByTag(tag) {\r\n        return Selection.selectByTag(this.parentNode, tag);\r\n    }\r\n    nodes() {\r\n        return this._nodes;\r\n    }\r\n}\n\nclass Line extends Shape {\r\n    constructor(opts = {}) {\r\n        super(opts);\r\n        this.x1 = 0;\r\n        this.y1 = 0;\r\n        this.x2 = 0;\r\n        this.y2 = 0;\r\n        this.restoreOwnStyles();\r\n    }\r\n    set x(value) {\r\n        this.x1 = value;\r\n        this.x2 = value;\r\n    }\r\n    set y(value) {\r\n        this.y1 = value;\r\n        this.y2 = value;\r\n    }\r\n    computeBBox() {\r\n        return new BBox(Math.min(this.x1, this.x2), Math.min(this.y1, this.y2), Math.abs(this.x2 - this.x1), Math.abs(this.y2 - this.y1));\r\n    }\r\n    isPointInPath(px, py) {\r\n        if (this.x1 === this.x2 || this.y1 === this.y2) {\r\n            const { x, y } = this.transformPoint(px, py);\r\n            return this.computeBBox()\r\n                .grow(this.strokeWidth / 2)\r\n                .containsPoint(x, y);\r\n        }\r\n        return false;\r\n    }\r\n    render(renderCtx) {\r\n        var _a;\r\n        const { ctx, forceRender, stats } = renderCtx;\r\n        if (this.dirty === RedrawType.NONE && !forceRender) {\r\n            if (stats)\r\n                stats.nodesSkipped += this.nodeCount.count;\r\n            return;\r\n        }\r\n        this.computeTransformMatrix();\r\n        this.matrix.toContext(ctx);\r\n        let { x1, y1, x2, y2 } = this;\r\n        // Align to the pixel grid if the line is strictly vertical\r\n        // or horizontal (but not both, i.e. a dot).\r\n        if (x1 === x2) {\r\n            const x = Math.round(x1) + (Math.floor(this.strokeWidth) % 2) / 2;\r\n            x1 = x;\r\n            x2 = x;\r\n        }\r\n        else if (y1 === y2) {\r\n            const y = Math.round(y1) + (Math.floor(this.strokeWidth) % 2) / 2;\r\n            y1 = y;\r\n            y2 = y;\r\n        }\r\n        ctx.beginPath();\r\n        ctx.moveTo(x1, y1);\r\n        ctx.lineTo(x2, y2);\r\n        this.fillStroke(ctx);\r\n        (_a = this.fillShadow) === null || _a === void 0 ? void 0 : _a.markClean();\r\n        super.render(renderCtx);\r\n    }\r\n}\r\nLine.className = 'Line';\r\nLine.defaultStyles = Object.assign({}, Shape.defaultStyles, {\r\n    fill: undefined,\r\n    strokeWidth: 1,\r\n});\r\n__decorate([\r\n    SceneChangeDetection({ redraw: RedrawType.MAJOR }),\r\n    __metadata(\"design:type\", Number)\r\n], Line.prototype, \"x1\", void 0);\r\n__decorate([\r\n    SceneChangeDetection({ redraw: RedrawType.MAJOR }),\r\n    __metadata(\"design:type\", Number)\r\n], Line.prototype, \"y1\", void 0);\r\n__decorate([\r\n    SceneChangeDetection({ redraw: RedrawType.MAJOR }),\r\n    __metadata(\"design:type\", Number)\r\n], Line.prototype, \"x2\", void 0);\r\n__decorate([\r\n    SceneChangeDetection({ redraw: RedrawType.MAJOR }),\r\n    __metadata(\"design:type\", Number)\r\n], Line.prototype, \"y2\", void 0);\n\n/**\r\n * Finds the roots of a parametric linear equation in `t`,\r\n * where `t` lies in the interval of `[0,1]`.\r\n */\r\nfunction linearRoot(a, b) {\r\n    const t = -b / a;\r\n    return a !== 0 && t >= 0 && t <= 1 ? [t] : [];\r\n}\r\n/**\r\n * Finds the roots of a parametric quadratic equation in `t`,\r\n * where `t` lies in the interval of `[0,1]`.\r\n */\r\nfunction quadraticRoots(a, b, c) {\r\n    if (a === 0) {\r\n        return linearRoot(b, c);\r\n    }\r\n    const D = b * b - 4 * a * c; // The polynomial's discriminant.\r\n    const roots = [];\r\n    if (D === 0) {\r\n        // A single real root.\r\n        const t = -b / (2 * a);\r\n        if (t >= 0 && t <= 1) {\r\n            roots.push(t);\r\n        }\r\n    }\r\n    else if (D > 0) {\r\n        // A pair of distinct real roots.\r\n        const rD = Math.sqrt(D);\r\n        const t1 = (-b - rD) / (2 * a);\r\n        const t2 = (-b + rD) / (2 * a);\r\n        if (t1 >= 0 && t1 <= 1) {\r\n            roots.push(t1);\r\n        }\r\n        if (t2 >= 0 && t2 <= 1) {\r\n            roots.push(t2);\r\n        }\r\n    }\r\n    // else -> Complex roots.\r\n    return roots;\r\n}\r\n/**\r\n * Finds the roots of a parametric cubic equation in `t`,\r\n * where `t` lies in the interval of `[0,1]`.\r\n * Returns an array of parametric intersection locations along the cubic,\r\n * excluding out-of-bounds intersections (before or after the end point\r\n * or in the imaginary plane).\r\n * An adaptation of http://www.particleincell.com/blog/2013/cubic-line-intersection/\r\n */\r\nfunction cubicRoots(a, b, c, d) {\r\n    if (a === 0) {\r\n        return quadraticRoots(b, c, d);\r\n    }\r\n    const A = b / a;\r\n    const B = c / a;\r\n    const C = d / a;\r\n    const Q = (3 * B - A * A) / 9;\r\n    const R = (9 * A * B - 27 * C - 2 * A * A * A) / 54;\r\n    const D = Q * Q * Q + R * R; // The polynomial's discriminant.\r\n    const third = 1 / 3;\r\n    const roots = [];\r\n    if (D >= 0) {\r\n        // Complex or duplicate roots.\r\n        const rD = Math.sqrt(D);\r\n        const S = Math.sign(R + rD) * Math.pow(Math.abs(R + rD), third);\r\n        const T = Math.sign(R - rD) * Math.pow(Math.abs(R - rD), third);\r\n        const Im = Math.abs((Math.sqrt(3) * (S - T)) / 2); // Complex part of the root pair.\r\n        const t = -third * A + (S + T); // A real root.\r\n        if (t >= 0 && t <= 1) {\r\n            roots.push(t);\r\n        }\r\n        if (Im === 0) {\r\n            const t = -third * A - (S + T) / 2; // The real part of a complex root.\r\n            if (t >= 0 && t <= 1) {\r\n                roots.push(t);\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        // Distinct real roots.\r\n        const theta = Math.acos(R / Math.sqrt(-Q * Q * Q));\r\n        const thirdA = third * A;\r\n        const twoSqrtQ = 2 * Math.sqrt(-Q);\r\n        const t1 = twoSqrtQ * Math.cos(third * theta) - thirdA;\r\n        const t2 = twoSqrtQ * Math.cos(third * (theta + 2 * Math.PI)) - thirdA;\r\n        const t3 = twoSqrtQ * Math.cos(third * (theta + 4 * Math.PI)) - thirdA;\r\n        if (t1 >= 0 && t1 <= 1) {\r\n            roots.push(t1);\r\n        }\r\n        if (t2 >= 0 && t2 <= 1) {\r\n            roots.push(t2);\r\n        }\r\n        if (t3 >= 0 && t3 <= 1) {\r\n            roots.push(t3);\r\n        }\r\n    }\r\n    return roots;\r\n}\n\n/**\r\n * Returns the intersection point for the given pair of line segments, or null,\r\n * if the segments are parallel or don't intersect.\r\n * Based on http://paulbourke.net/geometry/pointlineplane/\r\n */\r\nfunction segmentIntersection(ax1, ay1, ax2, ay2, bx1, by1, bx2, by2) {\r\n    const d = (ax2 - ax1) * (by2 - by1) - (ay2 - ay1) * (bx2 - bx1);\r\n    if (d === 0) {\r\n        // The lines are parallel.\r\n        return null;\r\n    }\r\n    const ua = ((bx2 - bx1) * (ay1 - by1) - (ax1 - bx1) * (by2 - by1)) / d;\r\n    const ub = ((ax2 - ax1) * (ay1 - by1) - (ay2 - ay1) * (ax1 - bx1)) / d;\r\n    if (ua >= 0 && ua <= 1 && ub >= 0 && ub <= 1) {\r\n        return {\r\n            x: ax1 + ua * (ax2 - ax1),\r\n            y: ay1 + ua * (ay2 - ay1),\r\n        };\r\n    }\r\n    return null; // The intersection point is outside either or both segments.\r\n}\r\n/**\r\n * Returns intersection points of the given cubic curve and the line segment.\r\n * Takes in x/y components of cubic control points and line segment start/end points\r\n * as parameters.\r\n */\r\nfunction cubicSegmentIntersections(px1, py1, px2, py2, px3, py3, px4, py4, x1, y1, x2, y2) {\r\n    const intersections = [];\r\n    // Find line equation coefficients.\r\n    const A = y1 - y2;\r\n    const B = x2 - x1;\r\n    const C = x1 * (y2 - y1) - y1 * (x2 - x1);\r\n    // Find cubic Bezier curve equation coefficients from control points.\r\n    const bx = bezierCoefficients(px1, px2, px3, px4);\r\n    const by = bezierCoefficients(py1, py2, py3, py4);\r\n    const a = A * bx[0] + B * by[0]; // t^3\r\n    const b = A * bx[1] + B * by[1]; // t^2\r\n    const c = A * bx[2] + B * by[2]; // t\r\n    const d = A * bx[3] + B * by[3] + C; // 1\r\n    const roots = cubicRoots(a, b, c, d);\r\n    // Verify that the roots are within bounds of the linear segment.\r\n    for (const t of roots) {\r\n        const tt = t * t;\r\n        const ttt = t * tt;\r\n        // Find the cartesian plane coordinates for the parametric root `t`.\r\n        const x = bx[0] * ttt + bx[1] * tt + bx[2] * t + bx[3];\r\n        const y = by[0] * ttt + by[1] * tt + by[2] * t + by[3];\r\n        // The parametric cubic roots we found are intersection points\r\n        // with an infinite line, and so the x/y coordinates above are as well.\r\n        // Make sure the x/y is also within the bounds of the given segment.\r\n        let s;\r\n        if (x1 !== x2) {\r\n            s = (x - x1) / (x2 - x1);\r\n        }\r\n        else {\r\n            // the line is vertical\r\n            s = (y - y1) / (y2 - y1);\r\n        }\r\n        if (s >= 0 && s <= 1) {\r\n            intersections.push({ x, y });\r\n        }\r\n    }\r\n    return intersections;\r\n}\r\n/**\r\n * Returns the given coordinates vector multiplied by the coefficient matrix\r\n * of the parametric cubic Bézier equation.\r\n */\r\nfunction bezierCoefficients(P1, P2, P3, P4) {\r\n    return [\r\n        // Bézier expressed as matrix operations:\r\n        -P1 + 3 * P2 - 3 * P3 + P4,\r\n        3 * P1 - 6 * P2 + 3 * P3,\r\n        -3 * P1 + 3 * P2,\r\n        P1, //                 | 1  0  0  0| |P4|\r\n    ];\r\n}\r\n/**\r\n * Returns intersection points of the arc and the line segment.\r\n * Takes in arc parameters and line segment start/end points.\r\n */\r\nfunction arcIntersections(cx, cy, r, startAngle, endAngle, counterClockwise, x1, y1, x2, y2) {\r\n    // Solving the quadratic equation:\r\n    // 1. y = k * x + y0\r\n    // 2. (x - cx)^2 + (y - cy)^2 = r^2\r\n    const k = (y2 - y1) / (x2 - x1);\r\n    const y0 = y1 - k * x1;\r\n    const a = Math.pow(k, 2) + 1;\r\n    const b = 2 * (k * (y0 - cy) - cx);\r\n    const c = Math.pow(cx, 2) + Math.pow(y0 - cy, 2) - Math.pow(r, 2);\r\n    const d = Math.pow(b, 2) - 4 * a * c;\r\n    if (d < 0) {\r\n        return [];\r\n    }\r\n    const i1x = (-b + Math.sqrt(d)) / 2 / a;\r\n    const i2x = (-b - Math.sqrt(d)) / 2 / a;\r\n    const intersections = [];\r\n    [i1x, i2x].forEach((x) => {\r\n        const isXInsideLine = x >= Math.min(x1, x2) && x <= Math.max(x1, x2);\r\n        if (!isXInsideLine) {\r\n            return;\r\n        }\r\n        const y = k * x + y0;\r\n        const a1 = normalizeAngle360(startAngle);\r\n        let a2 = normalizeAngle360(endAngle);\r\n        let a = normalizeAngle360(Math.atan2(y, x));\r\n        // Order angles clockwise after the start angle\r\n        if (a2 <= a1) {\r\n            a2 += 2 * Math.PI;\r\n        }\r\n        if (a < a1) {\r\n            a += 2 * Math.PI;\r\n        }\r\n        if (counterClockwise !== (a >= a1 && a <= a2)) {\r\n            intersections.push({ x, y });\r\n        }\r\n    });\r\n    return intersections;\r\n}\n\nfunction isPointInSector(x, y, sector) {\r\n    const radius = Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2));\r\n    const { innerRadius, outerRadius } = sector;\r\n    if (sector.startAngle === sector.endAngle ||\r\n        radius < Math.min(innerRadius, outerRadius) ||\r\n        radius > Math.max(innerRadius, outerRadius)) {\r\n        return false;\r\n    }\r\n    const startAngle = normalizeAngle180(sector.startAngle);\r\n    const endAngle = normalizeAngle180(sector.endAngle);\r\n    const angle = Math.atan2(y, x);\r\n    // Sector can cross axis start\r\n    return startAngle < endAngle\r\n        ? angle <= endAngle && angle >= startAngle\r\n        : (angle <= endAngle && angle >= -Math.PI) || (angle >= startAngle && angle <= Math.PI);\r\n}\r\nfunction lineCollidesSector(line, sector) {\r\n    const { startAngle, endAngle, innerRadius, outerRadius } = sector;\r\n    const outerStart = { x: outerRadius * Math.cos(startAngle), y: outerRadius * Math.sin(startAngle) };\r\n    const outerEnd = { x: outerRadius * Math.cos(endAngle), y: outerRadius * Math.sin(endAngle) };\r\n    const innerStart = innerRadius === 0\r\n        ? { x: 0, y: 0 }\r\n        : { x: innerRadius * Math.cos(startAngle), y: innerRadius * Math.sin(startAngle) };\r\n    const innerEnd = innerRadius === 0\r\n        ? { x: 0, y: 0 }\r\n        : { x: innerRadius * Math.cos(endAngle), y: innerRadius * Math.sin(endAngle) };\r\n    return (segmentIntersection(line.start.x, line.start.y, line.end.x, line.end.y, outerStart.x, outerStart.y, innerStart.x, innerStart.y) != null ||\r\n        segmentIntersection(line.start.x, line.start.y, line.end.x, line.end.y, outerEnd.x, outerEnd.y, innerEnd.x, innerEnd.y) != null ||\r\n        arcIntersections(0, 0, outerRadius, startAngle, endAngle, true, line.start.x, line.start.y, line.end.x, line.end.y).length > 0);\r\n}\r\nfunction boxCollidesSector(box, sector) {\r\n    const topLeft = { x: box.x, y: box.y };\r\n    const topRight = { x: box.x + box.width, y: box.y };\r\n    const bottomLeft = { x: box.x, y: box.y + box.height };\r\n    const bottomRight = { x: box.x + box.width, y: box.y + box.height };\r\n    return (lineCollidesSector({ start: topLeft, end: topRight }, sector) ||\r\n        lineCollidesSector({ start: bottomLeft, end: bottomRight }, sector));\r\n}\n\nvar Command;\r\n(function (Command) {\r\n    Command[Command[\"Move\"] = 0] = \"Move\";\r\n    Command[Command[\"Line\"] = 1] = \"Line\";\r\n    Command[Command[\"Arc\"] = 2] = \"Arc\";\r\n    Command[Command[\"Curve\"] = 3] = \"Curve\";\r\n    Command[Command[\"ClosePath\"] = 4] = \"ClosePath\";\r\n})(Command || (Command = {}));\r\nclass Path2D {\r\n    constructor() {\r\n        // The methods of this class will likely be called many times per animation frame,\r\n        // and any allocation can trigger a GC cycle during animation, so we attempt\r\n        // to minimize the number of allocations.\r\n        this.previousCommands = [];\r\n        this.previousParams = [];\r\n        this.previousClosedPath = false;\r\n        this.commands = [];\r\n        this.params = [];\r\n        this._closedPath = false;\r\n    }\r\n    isDirty() {\r\n        if (this._closedPath !== this.previousClosedPath) {\r\n            return true;\r\n        }\r\n        if (this.previousCommands.length !== this.commands.length) {\r\n            return true;\r\n        }\r\n        if (this.previousParams.length !== this.params.length) {\r\n            return true;\r\n        }\r\n        for (let i = 0; i < this.commands.length; i++) {\r\n            if (this.commands[i] !== this.previousCommands[i]) {\r\n                return true;\r\n            }\r\n        }\r\n        for (let i = 0; i < this.params.length; i++) {\r\n            if (this.params[i] !== this.previousParams[i]) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    draw(ctx) {\r\n        const commands = this.commands;\r\n        const params = this.params;\r\n        let j = 0;\r\n        ctx.beginPath();\r\n        for (const command of commands) {\r\n            switch (command) {\r\n                case Command.Move:\r\n                    ctx.moveTo(params[j++], params[j++]);\r\n                    break;\r\n                case Command.Line:\r\n                    ctx.lineTo(params[j++], params[j++]);\r\n                    break;\r\n                case Command.Curve:\r\n                    ctx.bezierCurveTo(params[j++], params[j++], params[j++], params[j++], params[j++], params[j++]);\r\n                    break;\r\n                case Command.Arc:\r\n                    ctx.arc(params[j++], params[j++], params[j++], params[j++], params[j++], params[j++] === 1);\r\n                    break;\r\n                case Command.ClosePath:\r\n                    ctx.closePath();\r\n                    break;\r\n            }\r\n        }\r\n        if (commands.length === 0) {\r\n            ctx.closePath();\r\n        }\r\n    }\r\n    moveTo(x, y) {\r\n        if (this.xy) {\r\n            this.xy[0] = x;\r\n            this.xy[1] = y;\r\n        }\r\n        else {\r\n            this.xy = [x, y];\r\n        }\r\n        this.commands.push(Command.Move);\r\n        this.params.push(x, y);\r\n    }\r\n    lineTo(x, y) {\r\n        if (this.xy) {\r\n            this.commands.push(Command.Line);\r\n            this.params.push(x, y);\r\n            this.xy[0] = x;\r\n            this.xy[1] = y;\r\n        }\r\n        else {\r\n            this.moveTo(x, y);\r\n        }\r\n    }\r\n    rect(x, y, width, height) {\r\n        this.moveTo(x, y);\r\n        this.lineTo(x + width, y);\r\n        this.lineTo(x + width, y + height);\r\n        this.lineTo(x, y + height);\r\n        this.closePath();\r\n    }\r\n    arc(x, y, r, sAngle, eAngle, antiClockwise = false) {\r\n        const endX = x + r * Math.cos(eAngle);\r\n        const endY = y + r * Math.sin(eAngle);\r\n        if (this.xy) {\r\n            this.xy[0] = endX;\r\n            this.xy[1] = endY;\r\n        }\r\n        else {\r\n            this.xy = [endX, endY];\r\n        }\r\n        this.commands.push(Command.Arc);\r\n        this.params.push(x, y, r, sAngle, eAngle, antiClockwise ? 1 : 0);\r\n    }\r\n    cubicCurveTo(cx1, cy1, cx2, cy2, x, y) {\r\n        if (!this.xy) {\r\n            this.moveTo(cx1, cy1);\r\n        }\r\n        this.commands.push(Command.Curve);\r\n        this.params.push(cx1, cy1, cx2, cy2, x, y);\r\n        if (this.xy) {\r\n            this.xy[0] = x;\r\n            this.xy[1] = y;\r\n        }\r\n    }\r\n    get closedPath() {\r\n        return this._closedPath;\r\n    }\r\n    closePath() {\r\n        if (this.xy) {\r\n            this.xy = undefined;\r\n            this.commands.push(Command.ClosePath);\r\n            this._closedPath = true;\r\n        }\r\n    }\r\n    clear({ trackChanges } = { trackChanges: false }) {\r\n        if (trackChanges) {\r\n            this.previousCommands = this.commands;\r\n            this.previousParams = this.params;\r\n            this.previousClosedPath = this._closedPath;\r\n            this.commands = [];\r\n            this.params = [];\r\n        }\r\n        else {\r\n            this.commands.length = 0;\r\n            this.params.length = 0;\r\n        }\r\n        this.xy = undefined;\r\n        this._closedPath = false;\r\n    }\r\n    isPointInPath(x, y) {\r\n        const commands = this.commands;\r\n        const params = this.params;\r\n        const cn = commands.length;\r\n        // Hit testing using ray casting method, where the ray's origin is some point\r\n        // outside the path. In this case, an offscreen point that is remote enough, so that\r\n        // even if the path itself is large and is partially offscreen, the ray's origin\r\n        // will likely be outside the path anyway. To test if the given point is inside the\r\n        // path or not, we cast a ray from the origin to the given point and check the number\r\n        // of intersections of this segment with the path. If the number of intersections is\r\n        // even, then the ray both entered and exited the path an equal number of times,\r\n        // therefore the point is outside the path, and inside the path, if the number of\r\n        // intersections is odd. Since the path is compound, we check if the ray segment\r\n        // intersects with each of the path's segments, which can be either a line segment\r\n        // (one or no intersection points) or a Bézier curve segment (up to 3 intersection\r\n        // points).\r\n        const ox = -10000;\r\n        const oy = -10000;\r\n        // the starting point of the  current path\r\n        let sx = NaN;\r\n        let sy = NaN;\r\n        // the previous point of the current path\r\n        let px = 0;\r\n        let py = 0;\r\n        let intersectionCount = 0;\r\n        for (let ci = 0, pi = 0; ci < cn; ci++) {\r\n            switch (commands[ci]) {\r\n                case Command.Move:\r\n                    if (!isNaN(sx) && segmentIntersection(sx, sy, px, py, ox, oy, x, y)) {\r\n                        intersectionCount++;\r\n                    }\r\n                    px = params[pi++];\r\n                    sx = px;\r\n                    py = params[pi++];\r\n                    sy = py;\r\n                    break;\r\n                case Command.Line:\r\n                    if (segmentIntersection(px, py, params[pi++], params[pi++], ox, oy, x, y)) {\r\n                        intersectionCount++;\r\n                    }\r\n                    px = params[pi - 2];\r\n                    py = params[pi - 1];\r\n                    break;\r\n                case Command.Curve:\r\n                    intersectionCount += cubicSegmentIntersections(px, py, params[pi++], params[pi++], params[pi++], params[pi++], params[pi++], params[pi++], ox, oy, x, y).length;\r\n                    px = params[pi - 2];\r\n                    py = params[pi - 1];\r\n                    break;\r\n                case Command.Arc:\r\n                    const cx = params[pi++];\r\n                    const cy = params[pi++];\r\n                    const r = params[pi++];\r\n                    const startAngle = params[pi++];\r\n                    const endAngle = params[pi++];\r\n                    const counterClockwise = Boolean(params[pi++]);\r\n                    intersectionCount += arcIntersections(cx, cy, r, startAngle, endAngle, counterClockwise, ox, oy, x, y).length;\r\n                    px = cx + Math.cos(endAngle) * r;\r\n                    py = cy + Math.sin(endAngle) * r;\r\n                    break;\r\n                case Command.ClosePath:\r\n                    if (!isNaN(sx) && segmentIntersection(sx, sy, px, py, ox, oy, x, y)) {\r\n                        intersectionCount++;\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        return intersectionCount % 2 === 1;\r\n    }\r\n    getPoints() {\r\n        const { commands, params } = this;\r\n        const coords = [];\r\n        let pi = 0;\r\n        for (let ci = 0; ci < commands.length; ci++) {\r\n            switch (commands[ci]) {\r\n                case Command.Move:\r\n                case Command.Line:\r\n                    coords.push({ x: params[pi++], y: params[pi++] });\r\n                    break;\r\n                case Command.Curve:\r\n                    pi += 4;\r\n                    coords.push({ x: params[pi++], y: params[pi++] });\r\n                    break;\r\n                case Command.Arc:\r\n                    coords.push({ x: params[pi++], y: params[pi++] });\r\n                    pi += 4;\r\n                    break;\r\n                case Command.ClosePath:\r\n                    break;\r\n            }\r\n        }\r\n        return coords;\r\n    }\r\n}\n\nfunction ScenePathChangeDetection(opts) {\r\n    const { redraw = RedrawType.MAJOR, changeCb, convertor } = opts !== null && opts !== void 0 ? opts : {};\r\n    return SceneChangeDetection({ redraw, type: 'path', convertor, changeCb });\r\n}\r\nclass Path extends Shape {\r\n    constructor() {\r\n        super(...arguments);\r\n        /**\r\n         * Declare a path to retain for later rendering and hit testing\r\n         * using custom Path2D class. Think of it as a TypeScript version\r\n         * of the native Path2D (with some differences) that works in all browsers.\r\n         */\r\n        this.path = new Path2D();\r\n        this.clipScalingX = 1;\r\n        this.clipScalingY = 1;\r\n        /**\r\n         * The path only has to be updated when certain attributes change.\r\n         * For example, if transform attributes (such as `translationX`)\r\n         * are changed, we don't have to update the path. The `dirtyPath` flag\r\n         * is how we keep track if the path has to be updated or not.\r\n         */\r\n        this._dirtyPath = true;\r\n    }\r\n    set dirtyPath(value) {\r\n        if (this._dirtyPath !== value) {\r\n            this._dirtyPath = value;\r\n            if (value) {\r\n                this.markDirty(this, RedrawType.MAJOR);\r\n            }\r\n        }\r\n    }\r\n    get dirtyPath() {\r\n        return this._dirtyPath;\r\n    }\r\n    checkPathDirty() {\r\n        var _a, _b, _c, _d;\r\n        if (this._dirtyPath) {\r\n            return;\r\n        }\r\n        this.dirtyPath =\r\n            this.path.isDirty() || ((_b = (_a = this.fillShadow) === null || _a === void 0 ? void 0 : _a.isDirty()) !== null && _b !== void 0 ? _b : false) || ((_d = (_c = this.clipPath) === null || _c === void 0 ? void 0 : _c.isDirty()) !== null && _d !== void 0 ? _d : false);\r\n    }\r\n    isPointInPath(x, y) {\r\n        const point = this.transformPoint(x, y);\r\n        return this.path.closedPath && this.path.isPointInPath(point.x, point.y);\r\n    }\r\n    isDirtyPath() {\r\n        // Override point for more expensive dirty checks.\r\n        return false;\r\n    }\r\n    updatePath() {\r\n        // Override point for subclasses.\r\n    }\r\n    clip(ctx, op) {\r\n        const transform = ctx.getTransform();\r\n        const clipScale = this.clipScalingX !== 1 || this.clipScalingY !== 1;\r\n        if (clipScale) {\r\n            ctx.scale(this.clipScalingX, this.clipScalingY);\r\n        }\r\n        op();\r\n        if (clipScale) {\r\n            ctx.setTransform(transform);\r\n        }\r\n    }\r\n    render(renderCtx) {\r\n        var _a;\r\n        const { ctx, forceRender, stats } = renderCtx;\r\n        if (this.dirty === RedrawType.NONE && !forceRender) {\r\n            if (stats)\r\n                stats.nodesSkipped += this.nodeCount.count;\r\n            return;\r\n        }\r\n        this.computeTransformMatrix();\r\n        this.matrix.toContext(ctx);\r\n        if (this.dirtyPath || this.isDirtyPath()) {\r\n            this.updatePath();\r\n            this.dirtyPath = false;\r\n        }\r\n        if (this.clipPath && this.clipMode != null) {\r\n            ctx.save();\r\n            if (this.clipMode === 'normal') {\r\n                this.clip(ctx, () => {\r\n                    var _a;\r\n                    // Bound the shape rendered to the clipping path.\r\n                    (_a = this.clipPath) === null || _a === void 0 ? void 0 : _a.draw(ctx);\r\n                    ctx.clip();\r\n                });\r\n            }\r\n            if (this.clipScalingX > 0 && this.clipScalingY > 0) {\r\n                this.path.draw(ctx);\r\n                this.fillStroke(ctx);\r\n            }\r\n            if (this.clipMode === 'punch-out') {\r\n                this.clip(ctx, () => {\r\n                    var _a, _b;\r\n                    // Bound the shape rendered to the clipping path.\r\n                    (_a = this.clipPath) === null || _a === void 0 ? void 0 : _a.draw(ctx);\r\n                    ctx.clip();\r\n                    // Fallback values, but practically these should never be used.\r\n                    const { x = -10000, y = -10000, width = 20000, height = 20000 } = (_b = this.computeBBox()) !== null && _b !== void 0 ? _b : {};\r\n                    ctx.clearRect(x, y, width, height);\r\n                });\r\n            }\r\n            ctx.restore();\r\n        }\r\n        else {\r\n            this.path.draw(ctx);\r\n            this.fillStroke(ctx);\r\n        }\r\n        (_a = this.fillShadow) === null || _a === void 0 ? void 0 : _a.markClean();\r\n        super.render(renderCtx);\r\n    }\r\n}\r\nPath.className = 'Path';\r\n__decorate([\r\n    ScenePathChangeDetection(),\r\n    __metadata(\"design:type\", Path2D)\r\n], Path.prototype, \"clipPath\", void 0);\r\n__decorate([\r\n    ScenePathChangeDetection(),\r\n    __metadata(\"design:type\", String)\r\n], Path.prototype, \"clipMode\", void 0);\r\n__decorate([\r\n    ScenePathChangeDetection(),\r\n    __metadata(\"design:type\", Object)\r\n], Path.prototype, \"clipScalingX\", void 0);\r\n__decorate([\r\n    ScenePathChangeDetection(),\r\n    __metadata(\"design:type\", Object)\r\n], Path.prototype, \"clipScalingY\", void 0);\n\nclass Sector extends Path {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.centerX = 0;\r\n        this.centerY = 0;\r\n        this.innerRadius = 10;\r\n        this.outerRadius = 20;\r\n        this.startAngle = 0;\r\n        this.endAngle = Math.PI * 2;\r\n        this.angleOffset = 0;\r\n        this.inset = 0;\r\n    }\r\n    computeBBox() {\r\n        const radius = this.outerRadius;\r\n        return new BBox(this.centerX - radius, this.centerY - radius, radius * 2, radius * 2);\r\n    }\r\n    updatePath() {\r\n        const path = this.path;\r\n        const { angleOffset, inset } = this;\r\n        const startAngle = this.startAngle + angleOffset;\r\n        const endAngle = this.endAngle + angleOffset;\r\n        const fullPie = Math.abs(this.endAngle - this.startAngle) >= 2 * Math.PI;\r\n        const centerX = this.centerX;\r\n        const centerY = this.centerY;\r\n        path.clear();\r\n        if (fullPie) {\r\n            const baseInnerRadius = this.innerRadius <= 0 ? 0 : this.innerRadius + inset;\r\n            const innerRadius = Math.min(baseInnerRadius, this.outerRadius - inset);\r\n            const outerRadius = Math.max(baseInnerRadius, this.outerRadius - inset);\r\n            path.arc(centerX, centerY, outerRadius, startAngle, endAngle);\r\n            if (innerRadius > 0) {\r\n                path.moveTo(centerX + innerRadius * Math.cos(endAngle), centerY + innerRadius * Math.sin(endAngle));\r\n                path.arc(centerX, centerY, innerRadius, endAngle, startAngle, true);\r\n            }\r\n        }\r\n        else {\r\n            const innerRadius = Math.min(this.innerRadius + inset, this.outerRadius - inset);\r\n            const outerRadius = Math.max(this.innerRadius + inset, this.outerRadius - inset);\r\n            const innerAngleOffset = innerRadius > 0 ? inset / innerRadius : 0;\r\n            const outerAngleOffset = outerRadius > 0 ? inset / outerRadius : 0;\r\n            const sweep = Math.abs(endAngle - startAngle);\r\n            const outerAngleExceeded = sweep < 2 * outerAngleOffset;\r\n            if (outerAngleExceeded)\r\n                return;\r\n            const innerAngleExceeded = innerRadius <= inset || sweep < 2 * innerAngleOffset;\r\n            if (innerAngleExceeded) {\r\n                // Draw a wedge on a cartesian co-ordinate with radius `sweep`\r\n                // Inset from bottom - i.e. y = innerRadius\r\n                // Inset the top - i.e. y = (x - x0) * tan(sweep)\r\n                // Form a right angle from the wedge with hypotenuse x0 and an opposite side of innerRadius\r\n                // Gives x0 = inset * sin(sweep)\r\n                // y = inset = (x - inset * sin(sweep)) * tan(sweep) - solve for x\r\n                // This formula has limits (i.e. sweep being >= a quarter turn),\r\n                // but the bounds for x should be [innerRadius, outerRadius)\r\n                const x = Math.abs(sweep) < Math.PI * 0.5 ? (inset * (1 + Math.cos(sweep))) / Math.sin(sweep) : NaN;\r\n                // r = sqrt(x**2 + y**2)\r\n                let r;\r\n                if (x > 0 && x < outerRadius) {\r\n                    // Even within the formula limits, floating point precision isn't always enough,\r\n                    // so ensure we never go less than the inner radius\r\n                    r = Math.max(Math.hypot(inset, x), innerRadius);\r\n                }\r\n                else {\r\n                    // Formula limits exceeded - just use the inner radius\r\n                    r = innerRadius;\r\n                }\r\n                const midAngle = (startAngle + endAngle) * 0.5;\r\n                path.moveTo(centerX + r * Math.cos(midAngle), centerY + r * Math.sin(midAngle));\r\n            }\r\n            else {\r\n                path.moveTo(centerX + innerRadius * Math.cos(startAngle + innerAngleOffset), centerY + innerRadius * Math.sin(startAngle + innerAngleOffset));\r\n            }\r\n            path.arc(centerX, centerY, outerRadius, startAngle + outerAngleOffset, endAngle - outerAngleOffset);\r\n            if (innerAngleExceeded) ;\r\n            else if (innerRadius > 0) {\r\n                path.arc(centerX, centerY, innerRadius, endAngle - innerAngleOffset, startAngle + innerAngleOffset, true);\r\n            }\r\n            else {\r\n                path.lineTo(centerX, centerY);\r\n            }\r\n        }\r\n        path.closePath();\r\n        this.dirtyPath = false;\r\n    }\r\n    isPointInPath(x, y) {\r\n        const { angleOffset } = this;\r\n        const startAngle = this.startAngle + angleOffset;\r\n        const endAngle = this.endAngle + angleOffset;\r\n        const innerRadius = Math.min(this.innerRadius, this.outerRadius);\r\n        const outerRadius = Math.max(this.innerRadius, this.outerRadius);\r\n        const point = this.transformPoint(x, y);\r\n        return isPointInSector(point.x, point.y, { startAngle, endAngle, innerRadius, outerRadius });\r\n    }\r\n}\r\nSector.className = 'Sector';\r\n__decorate([\r\n    ScenePathChangeDetection(),\r\n    __metadata(\"design:type\", Number)\r\n], Sector.prototype, \"centerX\", void 0);\r\n__decorate([\r\n    ScenePathChangeDetection(),\r\n    __metadata(\"design:type\", Number)\r\n], Sector.prototype, \"centerY\", void 0);\r\n__decorate([\r\n    ScenePathChangeDetection(),\r\n    __metadata(\"design:type\", Number)\r\n], Sector.prototype, \"innerRadius\", void 0);\r\n__decorate([\r\n    ScenePathChangeDetection(),\r\n    __metadata(\"design:type\", Number)\r\n], Sector.prototype, \"outerRadius\", void 0);\r\n__decorate([\r\n    ScenePathChangeDetection(),\r\n    __metadata(\"design:type\", Number)\r\n], Sector.prototype, \"startAngle\", void 0);\r\n__decorate([\r\n    ScenePathChangeDetection(),\r\n    __metadata(\"design:type\", Number)\r\n], Sector.prototype, \"endAngle\", void 0);\r\n__decorate([\r\n    ScenePathChangeDetection(),\r\n    __metadata(\"design:type\", Number)\r\n], Sector.prototype, \"angleOffset\", void 0);\r\n__decorate([\r\n    ScenePathChangeDetection(),\r\n    __metadata(\"design:type\", Number)\r\n], Sector.prototype, \"inset\", void 0);\n\nfunction deepMerge(target, source) {\r\n    if (isPlainObject(target) && isPlainObject(source)) {\r\n        const result = {};\r\n        Object.keys(target).forEach((key) => {\r\n            if (key in source) {\r\n                result[key] = deepMerge(target[key], source[key]);\r\n            }\r\n            else {\r\n                result[key] = target[key];\r\n            }\r\n        });\r\n        Object.keys(source).forEach((key) => {\r\n            if (!(key in target)) {\r\n                result[key] = source[key];\r\n            }\r\n        });\r\n        return result;\r\n    }\r\n    if ((Array.isArray(target) && !Array.isArray(source)) || (isObjectLike(target) && !isObjectLike(source))) {\r\n        return target;\r\n    }\r\n    return source;\r\n}\r\nfunction isObjectLike(value) {\r\n    return typeof value === 'object' && value !== null;\r\n}\r\nfunction isObject(value) {\r\n    return isObjectLike(value) && !Array.isArray(value);\r\n}\r\nfunction isPlainObject(x) {\r\n    return isObject(x) && x.constructor === Object;\r\n}\r\nfunction mergeDefaults(...sources) {\r\n    var _a;\r\n    const target = {};\r\n    for (const source of sources) {\r\n        if (!source)\r\n            continue;\r\n        const keys = isDecoratedObject(source) ? listDecoratedProperties(source) : Object.keys(source);\r\n        for (const key of keys) {\r\n            if (isObject(target[key]) && isObject(source[key])) {\r\n                target[key] = mergeDefaults(target[key], source[key]);\r\n            }\r\n            else {\r\n                (_a = target[key]) !== null && _a !== void 0 ? _a : (target[key] = source[key]);\r\n            }\r\n        }\r\n    }\r\n    return target;\r\n}\r\n// Similar to Object.assign, but only copy an explicit set of keys.\r\nfunction partialAssign(keysToCopy, target, source) {\r\n    if (source === undefined) {\r\n        return target;\r\n    }\r\n    for (const key of keysToCopy) {\r\n        const value = source[key];\r\n        if (value !== undefined) {\r\n            target[key] = value;\r\n        }\r\n    }\r\n    return target;\r\n}\n\nlet element = null;\r\nfunction sanitizeHtml(text) {\r\n    if (text == null) {\r\n        return undefined;\r\n    }\r\n    else if (text === '') {\r\n        return '';\r\n    }\r\n    element !== null && element !== void 0 ? element : (element = document.createElement('div'));\r\n    element.textContent = String(text);\r\n    return element.innerHTML;\r\n}\n\nconst isString = (v) => typeof v === 'string';\r\nconst isStringObject = (v) => !!v && Object.prototype.hasOwnProperty.call(v, 'toString') && isString(v.toString());\r\nconst isDate = (v) => v instanceof Date && !isNaN(+v);\r\nfunction isDiscrete(value) {\r\n    return isString(value) || isStringObject(value);\r\n}\r\nfunction isContinuous(value) {\r\n    const isNumberObject = (v) => !!v && Object.prototype.hasOwnProperty.call(v, 'valueOf') && isNumber(v.valueOf());\r\n    const isDate = (v) => v instanceof Date && !isNaN(+v);\r\n    return isNumber(value) || isNumberObject(value) || isDate(value);\r\n}\r\nfunction checkDatum(value, isContinuousScale) {\r\n    if (isContinuousScale && isContinuous(value)) {\r\n        return value;\r\n    }\r\n    else if (!isContinuousScale) {\r\n        if (!isDiscrete(value)) {\r\n            return String(value);\r\n        }\r\n        return value;\r\n    }\r\n    return undefined;\r\n}\r\nconst isNumber = (v) => typeof v === 'number' && Number.isFinite(v);\n\nconst memorizedFns = new Map();\r\nfunction memo(params, fnGenerator) {\r\n    var _a, _b, _c;\r\n    const serialisedParams = JSON.stringify(params, null, 0);\r\n    if (!memorizedFns.has(fnGenerator)) {\r\n        memorizedFns.set(fnGenerator, new Map());\r\n    }\r\n    if (!((_a = memorizedFns.get(fnGenerator)) === null || _a === void 0 ? void 0 : _a.has(serialisedParams))) {\r\n        (_b = memorizedFns.get(fnGenerator)) === null || _b === void 0 ? void 0 : _b.set(serialisedParams, fnGenerator(params));\r\n    }\r\n    return (_c = memorizedFns.get(fnGenerator)) === null || _c === void 0 ? void 0 : _c.get(serialisedParams);\r\n}\n\nconst SMALLEST_KEY_INTERVAL = {\r\n    type: 'reducer',\r\n    property: 'smallestKeyInterval',\r\n    initialValue: Infinity,\r\n    reducer: () => {\r\n        let prevX = NaN;\r\n        return (smallestSoFar = Infinity, next) => {\r\n            const nextX = next.keys[0];\r\n            const interval = Math.abs(nextX - prevX);\r\n            prevX = nextX;\r\n            if (!isNaN(interval) && interval > 0 && interval < smallestSoFar) {\r\n                return interval;\r\n            }\r\n            return smallestSoFar;\r\n        };\r\n    },\r\n};\r\nconst AGG_VALUES_EXTENT = {\r\n    type: 'processor',\r\n    property: 'aggValuesExtent',\r\n    calculate: (processedData) => {\r\n        var _a, _b, _c, _d;\r\n        const result = [...((_b = (_a = processedData.domain.aggValues) === null || _a === void 0 ? void 0 : _a[0]) !== null && _b !== void 0 ? _b : [0, 0])];\r\n        for (const [min, max] of (_d = (_c = processedData.domain.aggValues) === null || _c === void 0 ? void 0 : _c.slice(1)) !== null && _d !== void 0 ? _d : []) {\r\n            if (min < result[0]) {\r\n                result[0] = min;\r\n            }\r\n            if (max > result[1]) {\r\n                result[1] = max;\r\n            }\r\n        }\r\n        return result;\r\n    },\r\n};\r\nconst SORT_DOMAIN_GROUPS = {\r\n    type: 'processor',\r\n    property: 'sortedGroupDomain',\r\n    calculate: ({ domain: { groups } }) => {\r\n        if (groups == null)\r\n            return undefined;\r\n        return [...groups].sort((a, b) => {\r\n            for (let i = 0; i < a.length; i++) {\r\n                const result = a[i] - b[i];\r\n                if (result !== 0) {\r\n                    return result;\r\n                }\r\n            }\r\n            return 0;\r\n        });\r\n    },\r\n};\r\nfunction normaliseFnBuilder({ normaliseTo, mode }) {\r\n    const normalise = (val, extent) => {\r\n        const result = (val * normaliseTo) / extent;\r\n        if (result >= 0) {\r\n            return Math.min(normaliseTo, result);\r\n        }\r\n        return Math.max(-normaliseTo, result);\r\n    };\r\n    return () => () => (values, valueIndexes) => {\r\n        const valuesExtent = [0, 0];\r\n        for (const valueIdx of valueIndexes) {\r\n            const value = values[valueIdx];\r\n            const valIdx = value < 0 ? 0 : 1;\r\n            if (mode === 'sum') {\r\n                valuesExtent[valIdx] += value;\r\n            }\r\n            else if (valIdx === 0) {\r\n                valuesExtent[valIdx] = Math.min(valuesExtent[valIdx], value);\r\n            }\r\n            else {\r\n                valuesExtent[valIdx] = Math.max(valuesExtent[valIdx], value);\r\n            }\r\n        }\r\n        const extent = Math.max(Math.abs(valuesExtent[0]), valuesExtent[1]);\r\n        for (const valueIdx of valueIndexes) {\r\n            values[valueIdx] = normalise(values[valueIdx], extent);\r\n        }\r\n    };\r\n}\r\nfunction normaliseGroupTo(scope, matchGroupIds, normaliseTo, mode = 'sum') {\r\n    return {\r\n        scopes: [scope.id],\r\n        type: 'group-value-processor',\r\n        matchGroupIds,\r\n        adjust: memo({ normaliseTo, mode }, normaliseFnBuilder),\r\n    };\r\n}\r\nfunction normalisePropertyFnBuilder({ normaliseTo, zeroDomain, rangeMin, rangeMax, }) {\r\n    const normaliseSpan = normaliseTo[1] - normaliseTo[0];\r\n    const normalise = (val, start, span) => {\r\n        const result = normaliseTo[0] + ((val - start) / span) * normaliseSpan;\r\n        if (span === 0)\r\n            return zeroDomain;\r\n        if (result >= normaliseTo[1])\r\n            return normaliseTo[1];\r\n        if (result < normaliseTo[0])\r\n            return normaliseTo[0];\r\n        return result;\r\n    };\r\n    return () => (pData, pIdx) => {\r\n        let [start, end] = pData.domain.values[pIdx];\r\n        if (rangeMin != null)\r\n            start = rangeMin;\r\n        if (rangeMax != null)\r\n            end = rangeMax;\r\n        const span = end - start;\r\n        pData.domain.values[pIdx] = [normaliseTo[0], normaliseTo[1]];\r\n        for (const group of pData.data) {\r\n            let groupValues = group.values;\r\n            if (pData.type === 'ungrouped') {\r\n                groupValues = [groupValues];\r\n            }\r\n            for (const values of groupValues) {\r\n                values[pIdx] = normalise(values[pIdx], start, span);\r\n            }\r\n        }\r\n    };\r\n}\r\nfunction normalisePropertyTo(scope, property, normaliseTo, zeroDomain, rangeMin, rangeMax) {\r\n    return {\r\n        scopes: [scope.id],\r\n        type: 'property-value-processor',\r\n        property,\r\n        adjust: memo({ normaliseTo, rangeMin, rangeMax, zeroDomain }, normalisePropertyFnBuilder),\r\n    };\r\n}\r\nfunction animationValidation(scope, valueKeyIds = []) {\r\n    return {\r\n        type: 'processor',\r\n        scopes: [scope.id],\r\n        property: 'animationValidation',\r\n        calculate(result) {\r\n            var _a;\r\n            const { keys, values } = result.defs;\r\n            const { input, data } = result;\r\n            let uniqueKeys = true;\r\n            let orderedKeys = true;\r\n            const valueKeys = [];\r\n            for (let k = 0; k < values.length; k++) {\r\n                if (!((_a = values[k].scopes) === null || _a === void 0 ? void 0 : _a.some((s) => s === scope.id)))\r\n                    continue;\r\n                if (!valueKeyIds.some((v) => values[k].id === v))\r\n                    continue;\r\n                valueKeys.push([k, values[k]]);\r\n            }\r\n            const processKey = (idx, def, type) => {\r\n                var _a;\r\n                if (def.valueType === 'category') {\r\n                    const keyValues = result.domain[type][idx];\r\n                    uniqueKeys && (uniqueKeys = keyValues.length === input.count);\r\n                    return;\r\n                }\r\n                let lastValue = (_a = data[0]) === null || _a === void 0 ? void 0 : _a[type][idx];\r\n                for (let d = 1; (uniqueKeys || orderedKeys) && d < data.length; d++) {\r\n                    const keyValue = data[d][type][idx];\r\n                    orderedKeys && (orderedKeys = lastValue <= keyValue);\r\n                    uniqueKeys && (uniqueKeys = lastValue !== keyValue);\r\n                    lastValue = keyValue;\r\n                }\r\n            };\r\n            for (let k = 0; (uniqueKeys || orderedKeys) && k < keys.length; k++) {\r\n                processKey(k, keys[k], 'keys');\r\n            }\r\n            for (let k = 0; (uniqueKeys || orderedKeys) && k < valueKeys.length; k++) {\r\n                const [idx, key] = valueKeys[k];\r\n                processKey(idx, key, 'values');\r\n            }\r\n            return { uniqueKeys, orderedKeys };\r\n        },\r\n    };\r\n}\r\nfunction buildGroupAccFn({ mode, separateNegative }) {\r\n    return () => () => (values, valueIndexes) => {\r\n        // Datum scope.\r\n        const acc = [0, 0];\r\n        for (const valueIdx of valueIndexes) {\r\n            const currentVal = values[valueIdx];\r\n            const accIndex = isNegative(currentVal) && separateNegative ? 0 : 1;\r\n            if (typeof currentVal !== 'number' || isNaN(currentVal))\r\n                continue;\r\n            if (mode === 'normal')\r\n                acc[accIndex] += currentVal;\r\n            values[valueIdx] = acc[accIndex];\r\n            if (mode === 'trailing')\r\n                acc[accIndex] += currentVal;\r\n        }\r\n    };\r\n}\r\nfunction buildGroupWindowAccFn({ mode, sum }) {\r\n    return () => {\r\n        // Entire data-set scope.\r\n        const lastValues = [];\r\n        let firstRow = true;\r\n        return () => {\r\n            // Group scope.\r\n            return (values, valueIndexes) => {\r\n                // Datum scope.\r\n                let acc = 0;\r\n                for (const valueIdx of valueIndexes) {\r\n                    const currentVal = values[valueIdx];\r\n                    const lastValue = firstRow && sum === 'current' ? 0 : lastValues[valueIdx];\r\n                    lastValues[valueIdx] = currentVal;\r\n                    const sumValue = sum === 'current' ? currentVal : lastValue;\r\n                    if (typeof currentVal !== 'number' || isNaN(currentVal)) {\r\n                        values[valueIdx] = acc;\r\n                        continue;\r\n                    }\r\n                    if (typeof lastValue !== 'number' || isNaN(lastValue)) {\r\n                        values[valueIdx] = acc;\r\n                        continue;\r\n                    }\r\n                    if (mode === 'normal')\r\n                        acc += sumValue;\r\n                    values[valueIdx] = acc;\r\n                    if (mode === 'trailing')\r\n                        acc += sumValue;\r\n                }\r\n                firstRow = false;\r\n            };\r\n        };\r\n    };\r\n}\r\nfunction accumulateGroup(scope, matchGroupId, mode, sum, separateNegative = false) {\r\n    let adjust;\r\n    if (mode.startsWith('window')) {\r\n        const modeParam = mode.endsWith('-trailing') ? 'trailing' : 'normal';\r\n        adjust = memo({ mode: modeParam, sum }, buildGroupWindowAccFn);\r\n    }\r\n    else {\r\n        adjust = memo({ mode: mode, separateNegative }, buildGroupAccFn);\r\n    }\r\n    return {\r\n        scopes: [scope.id],\r\n        type: 'group-value-processor',\r\n        matchGroupIds: [matchGroupId],\r\n        adjust,\r\n    };\r\n}\r\nfunction diff(previousData, updateMovedDatums = true) {\r\n    return {\r\n        type: 'processor',\r\n        property: 'diff',\r\n        calculate: (processedData) => {\r\n            const diff = {\r\n                changed: false,\r\n                moved: [],\r\n                added: [],\r\n                updated: [],\r\n                removed: [],\r\n                addedIndices: [],\r\n                updatedIndices: [],\r\n                removedIndices: [],\r\n            };\r\n            const moved = new Map();\r\n            const added = new Map();\r\n            const updated = new Map();\r\n            const removed = new Map();\r\n            const addedIndices = new Map();\r\n            const updatedIndices = new Map();\r\n            const removedIndices = new Map();\r\n            for (let i = 0; i < Math.max(previousData.data.length, processedData.data.length); i++) {\r\n                const prev = previousData.data[i];\r\n                const datum = processedData.data[i];\r\n                const prevId = prev ? createDatumId(prev.keys) : '';\r\n                const datumId = datum ? createDatumId(datum.keys) : '';\r\n                if (prevId === datumId) {\r\n                    if (!arraysEqual(prev.values, datum.values)) {\r\n                        updated.set(datumId, datum);\r\n                        updatedIndices.set(datumId, i);\r\n                    }\r\n                    continue;\r\n                }\r\n                if (removed.has(datumId)) {\r\n                    if (updateMovedDatums || !arraysEqual(removed.get(datumId).values, datum.values)) {\r\n                        updated.set(datumId, datum);\r\n                        updatedIndices.set(datumId, i);\r\n                        moved.set(datumId, datum);\r\n                    }\r\n                    removed.delete(datumId);\r\n                    removedIndices.delete(datumId);\r\n                }\r\n                else if (datum) {\r\n                    added.set(datumId, datum);\r\n                    addedIndices.set(datumId, i);\r\n                }\r\n                if (added.has(prevId)) {\r\n                    if (updateMovedDatums || !arraysEqual(added.get(prevId).values, prev.values)) {\r\n                        updated.set(prevId, prev);\r\n                        updatedIndices.set(prevId, i);\r\n                        moved.set(prevId, prev);\r\n                    }\r\n                    added.delete(prevId);\r\n                    addedIndices.delete(prevId);\r\n                }\r\n                else if (prev) {\r\n                    updated.delete(prevId);\r\n                    updatedIndices.delete(prevId);\r\n                    removed.set(prevId, prev);\r\n                    removedIndices.set(prevId, i);\r\n                }\r\n            }\r\n            diff.added = Array.from(added.keys());\r\n            diff.updated = Array.from(updated.keys());\r\n            diff.removed = Array.from(removed.keys());\r\n            diff.moved = Array.from(moved.keys());\r\n            diff.addedIndices = Array.from(addedIndices.values());\r\n            diff.updatedIndices = Array.from(updatedIndices.values());\r\n            diff.removedIndices = Array.from(removedIndices.values());\r\n            diff.changed = diff.added.length > 0 || diff.updated.length > 0 || diff.removed.length > 0;\r\n            return diff;\r\n        },\r\n    };\r\n}\r\nfunction createDatumId(keys) {\r\n    return keys.join('___');\r\n}\n\nclass Label {\r\n    constructor() {\r\n        this.enabled = true;\r\n        this.color = '#464646';\r\n        this.fontSize = 12;\r\n        this.fontFamily = 'Verdana, sans-serif';\r\n    }\r\n    getFont() {\r\n        return getFont(this);\r\n    }\r\n}\r\n__decorate([\r\n    Validate(BOOLEAN),\r\n    __metadata(\"design:type\", Object)\r\n], Label.prototype, \"enabled\", void 0);\r\n__decorate([\r\n    Validate(COLOR_STRING),\r\n    __metadata(\"design:type\", Object)\r\n], Label.prototype, \"color\", void 0);\r\n__decorate([\r\n    Validate(OPT_FONT_STYLE),\r\n    __metadata(\"design:type\", String)\r\n], Label.prototype, \"fontStyle\", void 0);\r\n__decorate([\r\n    Validate(OPT_FONT_WEIGHT),\r\n    __metadata(\"design:type\", String)\r\n], Label.prototype, \"fontWeight\", void 0);\r\n__decorate([\r\n    Validate(NUMBER$1(0)),\r\n    __metadata(\"design:type\", Object)\r\n], Label.prototype, \"fontSize\", void 0);\r\n__decorate([\r\n    Validate(STRING),\r\n    __metadata(\"design:type\", Object)\r\n], Label.prototype, \"fontFamily\", void 0);\r\n__decorate([\r\n    Validate(OPT_FUNCTION),\r\n    __metadata(\"design:type\", Function)\r\n], Label.prototype, \"formatter\", void 0);\r\nfunction calculateLabelRotation(opts) {\r\n    const { parallelFlipRotation = 0, regularFlipRotation = 0 } = opts;\r\n    const configuredRotation = opts.rotation ? normalizeAngle360(toRadians(opts.rotation)) : 0;\r\n    const parallelFlipFlag = !configuredRotation && parallelFlipRotation >= 0 && parallelFlipRotation <= Math.PI ? -1 : 1;\r\n    // Flip if the axis rotation angle is in the top hemisphere.\r\n    const regularFlipFlag = !configuredRotation && regularFlipRotation >= 0 && regularFlipRotation <= Math.PI ? -1 : 1;\r\n    let defaultRotation = 0;\r\n    if (opts.parallel) {\r\n        defaultRotation = (parallelFlipFlag * Math.PI) / 2;\r\n    }\r\n    else if (regularFlipFlag === -1) {\r\n        defaultRotation = Math.PI;\r\n    }\r\n    return { configuredRotation, defaultRotation, parallelFlipFlag, regularFlipFlag };\r\n}\r\nfunction getLabelSpacing(minSpacing, rotated) {\r\n    if (!isNaN(minSpacing)) {\r\n        return minSpacing;\r\n    }\r\n    return rotated ? 0 : 10;\r\n}\r\nfunction getTextBaseline(parallel, labelRotation, sideFlag, parallelFlipFlag) {\r\n    if (parallel && !labelRotation) {\r\n        return sideFlag * parallelFlipFlag === -1 ? 'hanging' : 'bottom';\r\n    }\r\n    return 'middle';\r\n}\r\nfunction getTextAlign(parallel, labelRotation, labelAutoRotation, sideFlag, regularFlipFlag) {\r\n    const labelRotated = labelRotation > 0 && labelRotation <= Math.PI;\r\n    const labelAutoRotated = labelAutoRotation > 0 && labelAutoRotation <= Math.PI;\r\n    const alignFlag = labelRotated || labelAutoRotated ? -1 : 1;\r\n    if (parallel) {\r\n        if (labelRotation || labelAutoRotation) {\r\n            if (sideFlag * alignFlag === -1) {\r\n                return 'end';\r\n            }\r\n        }\r\n        else {\r\n            return 'center';\r\n        }\r\n    }\r\n    else if (sideFlag * regularFlipFlag === -1) {\r\n        return 'end';\r\n    }\r\n    return 'start';\r\n}\r\nfunction calculateLabelBBox(text, bbox, labelX, labelY, labelMatrix) {\r\n    // Text.computeBBox() does not take into account any of the transformations that have been applied to the label nodes, only the width and height are useful.\r\n    // Rather than taking into account all transformations including those of parent nodes which would be the result of `computeTransformedBBox()`, giving the x and y in the entire axis coordinate space,\r\n    // take into account only the rotation and translation applied to individual label nodes to get the x y coordinates of the labels relative to each other\r\n    // this makes label collision detection a lot simpler\r\n    const { width, height } = bbox;\r\n    const translatedBBox = new BBox(labelX, labelY, 0, 0);\r\n    labelMatrix.transformBBox(translatedBBox, bbox);\r\n    const { x = 0, y = 0 } = bbox;\r\n    bbox.width = width;\r\n    bbox.height = height;\r\n    return {\r\n        point: { x, y, size: 0 },\r\n        label: { width, height, text },\r\n    };\r\n}\n\n/**\r\n * Constants to declare the expected nominal zIndex for all types of layer in chart rendering.\r\n */\r\nvar Layers;\r\n(function (Layers) {\r\n    Layers[Layers[\"SERIES_BACKGROUND_ZINDEX\"] = -10] = \"SERIES_BACKGROUND_ZINDEX\";\r\n    Layers[Layers[\"AXIS_GRID_ZINDEX\"] = 0] = \"AXIS_GRID_ZINDEX\";\r\n    Layers[Layers[\"AXIS_ZINDEX\"] = 20] = \"AXIS_ZINDEX\";\r\n    Layers[Layers[\"SERIES_CROSSLINE_RANGE_ZINDEX\"] = 30] = \"SERIES_CROSSLINE_RANGE_ZINDEX\";\r\n    Layers[Layers[\"SERIES_LAYER_ZINDEX\"] = 500] = \"SERIES_LAYER_ZINDEX\";\r\n    Layers[Layers[\"AXIS_FOREGROUND_ZINDEX\"] = 750] = \"AXIS_FOREGROUND_ZINDEX\";\r\n    Layers[Layers[\"SERIES_CROSSHAIR_ZINDEX\"] = 1000] = \"SERIES_CROSSHAIR_ZINDEX\";\r\n    Layers[Layers[\"SERIES_LABEL_ZINDEX\"] = 1500] = \"SERIES_LABEL_ZINDEX\";\r\n    Layers[Layers[\"SERIES_CROSSLINE_LINE_ZINDEX\"] = 2500] = \"SERIES_CROSSLINE_LINE_ZINDEX\";\r\n    Layers[Layers[\"LEGEND_ZINDEX\"] = 3000] = \"LEGEND_ZINDEX\";\r\n})(Layers || (Layers = {}));\n\nclass Marker extends Path {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.x = 0;\r\n        this.y = 0;\r\n        this.size = 12;\r\n    }\r\n    computeBBox() {\r\n        const { x, y, size } = this;\r\n        const half = size / 2;\r\n        return new BBox(x - half, y - half, size, size);\r\n    }\r\n    applyPath(s, moves) {\r\n        const { path } = this;\r\n        let { x, y } = this;\r\n        path.clear();\r\n        for (const { x: mx, y: my, t } of moves) {\r\n            x += mx * s;\r\n            y += my * s;\r\n            if (t === 'move') {\r\n                path.moveTo(x, y);\r\n            }\r\n            else {\r\n                path.lineTo(x, y);\r\n            }\r\n        }\r\n        path.closePath();\r\n    }\r\n}\r\n__decorate([\r\n    ScenePathChangeDetection(),\r\n    __metadata(\"design:type\", Number)\r\n], Marker.prototype, \"x\", void 0);\r\n__decorate([\r\n    ScenePathChangeDetection(),\r\n    __metadata(\"design:type\", Number)\r\n], Marker.prototype, \"y\", void 0);\r\n__decorate([\r\n    ScenePathChangeDetection({ convertor: Math.abs }),\r\n    __metadata(\"design:type\", Number)\r\n], Marker.prototype, \"size\", void 0);\n\nclass Circle extends Marker {\r\n    updatePath() {\r\n        const { x, y, path, size } = this;\r\n        const r = size / 2;\r\n        path.clear();\r\n        path.arc(x, y, r, 0, Math.PI * 2);\r\n        path.closePath();\r\n    }\r\n}\r\nCircle.className = 'Circle';\n\nconst DEFAULT_FILLS = {\r\n    BLUE: '#5090dc',\r\n    ORANGE: '#ffa03a',\r\n    GREEN: '#459d55',\r\n    CYAN: '#34bfe1',\r\n    YELLOW: '#e1cc00',\r\n    VIOLET: '#9669cb',\r\n    GRAY: '#b5b5b5',\r\n    MAGENTA: '#bd5aa7',\r\n    BROWN: '#8a6224',\r\n    RED: '#ef5452',\r\n};\r\nconst DEFAULT_STROKES = {\r\n    BLUE: '#2b5c95',\r\n    ORANGE: '#cc6f10',\r\n    GREEN: '#1e652e',\r\n    CYAN: '#18859e',\r\n    YELLOW: '#a69400',\r\n    VIOLET: '#603c88',\r\n    GRAY: '#575757',\r\n    MAGENTA: '#7d2f6d',\r\n    BROWN: '#4f3508',\r\n    RED: '#a82529',\r\n};\n\nclass ModuleMap {\r\n    constructor(parent) {\r\n        this.modules = {};\r\n        this.parent = parent;\r\n    }\r\n    destroy() {\r\n        for (const [key, module] of Object.entries(this.modules)) {\r\n            module.instance.destroy();\r\n            delete this.modules[key];\r\n            delete this.parent[key];\r\n        }\r\n    }\r\n    addModule(module) {\r\n        if (this.modules[module.optionsKey] != null) {\r\n            throw new Error('AG Charts - module already initialised: ' + module.optionsKey);\r\n        }\r\n        if (module.optionsKey in this.parent) {\r\n            throw new Error(`AG Charts - class already has option key '${module.optionsKey}'`);\r\n        }\r\n        if (this.moduleContext == null) {\r\n            this.moduleContext = this.parent.createModuleContext();\r\n        }\r\n        const moduleInstance = new module.instanceConstructor(Object.assign({}, this.moduleContext));\r\n        this.modules[module.optionsKey] = { instance: moduleInstance };\r\n        this.parent[module.optionsKey] = moduleInstance;\r\n    }\r\n    removeModule(module) {\r\n        var _a, _b;\r\n        (_b = (_a = this.modules[module.optionsKey]) === null || _a === void 0 ? void 0 : _a.instance) === null || _b === void 0 ? void 0 : _b.destroy();\r\n        delete this.modules[module.optionsKey];\r\n        delete this.parent[module.optionsKey];\r\n    }\r\n    isModuleEnabled(module) {\r\n        return this.modules[module.optionsKey] != null;\r\n    }\r\n    *[Symbol.iterator]() {\r\n        for (const { instance } of Object.values(this.modules)) {\r\n            yield instance;\r\n        }\r\n    }\r\n}\n\nclass Listeners {\r\n    constructor() {\r\n        this.registeredListeners = new Map();\r\n    }\r\n    addListener(eventType, handler, meta) {\r\n        const record = { symbol: Symbol(eventType), handler, meta };\r\n        if (this.registeredListeners.has(eventType)) {\r\n            this.registeredListeners.get(eventType).push(record);\r\n        }\r\n        else {\r\n            this.registeredListeners.set(eventType, [record]);\r\n        }\r\n        return () => this.removeListener(record.symbol);\r\n    }\r\n    removeListener(eventSymbol) {\r\n        for (const [type, listeners] of this.registeredListeners.entries()) {\r\n            const matchIndex = listeners.findIndex((listener) => listener.symbol === eventSymbol);\r\n            if (matchIndex >= 0) {\r\n                listeners.splice(matchIndex, 1);\r\n                if (listeners.length === 0) {\r\n                    this.registeredListeners.delete(type);\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    dispatch(eventType, ...params) {\r\n        // This is a utility class to store all the results of Listeners (or do nothing\r\n        // if R = void).\r\n        class ResultArray {\r\n            constructor() {\r\n                this.results = undefined;\r\n            }\r\n            push(result) {\r\n                var _a;\r\n                if (result === undefined)\r\n                    return;\r\n                (_a = this.results) !== null && _a !== void 0 ? _a : (this.results = []);\r\n                this.results.push(result);\r\n            }\r\n        }\r\n        const results = new ResultArray();\r\n        for (const listener of this.getListenersByType(eventType)) {\r\n            try {\r\n                results.push(listener.handler(...params));\r\n            }\r\n            catch (e) {\r\n                Logger.errorOnce(e);\r\n            }\r\n        }\r\n        return results.results;\r\n    }\r\n    dispatchWrapHandlers(eventType, wrapFn, ...params) {\r\n        for (const listener of this.getListenersByType(eventType)) {\r\n            try {\r\n                wrapFn(listener.handler, listener.meta, ...params);\r\n            }\r\n            catch (e) {\r\n                Logger.errorOnce(e);\r\n            }\r\n        }\r\n    }\r\n    getListenersByType(eventType) {\r\n        var _a;\r\n        return (_a = this.registeredListeners.get(eventType)) !== null && _a !== void 0 ? _a : [];\r\n    }\r\n}\n\nclass Observable {\r\n    constructor() {\r\n        this.eventListeners = new Map();\r\n    }\r\n    addEventListener(eventType, listener) {\r\n        if (typeof listener !== 'function') {\r\n            throw new Error('AG Charts - listener must be a Function');\r\n        }\r\n        const eventTypeListeners = this.eventListeners.get(eventType);\r\n        if (eventTypeListeners) {\r\n            eventTypeListeners.add(listener);\r\n        }\r\n        else {\r\n            this.eventListeners.set(eventType, new Set([listener]));\r\n        }\r\n    }\r\n    removeEventListener(type, listener) {\r\n        var _a;\r\n        (_a = this.eventListeners.get(type)) === null || _a === void 0 ? void 0 : _a.delete(listener);\r\n        if (this.eventListeners.size === 0) {\r\n            this.eventListeners.delete(type);\r\n        }\r\n    }\r\n    hasEventListener(type) {\r\n        return this.eventListeners.has(type);\r\n    }\r\n    clearEventListeners() {\r\n        this.eventListeners.clear();\r\n    }\r\n    fireEvent(event) {\r\n        var _a;\r\n        (_a = this.eventListeners.get(event.type)) === null || _a === void 0 ? void 0 : _a.forEach((listener) => listener(event));\r\n    }\r\n}\n\nfunction extendDomain(values, domain = [Infinity, -Infinity]) {\r\n    for (const value of values) {\r\n        if (typeof value !== 'number') {\r\n            continue;\r\n        }\r\n        if (value < domain[0]) {\r\n            domain[0] = value;\r\n        }\r\n        if (value > domain[1]) {\r\n            domain[1] = value;\r\n        }\r\n    }\r\n    return domain;\r\n}\n\nfunction sumValues(values, accumulator = [0, 0]) {\r\n    for (const value of values) {\r\n        if (typeof value !== 'number') {\r\n            continue;\r\n        }\r\n        if (value < 0) {\r\n            accumulator[0] += value;\r\n        }\r\n        if (value > 0) {\r\n            accumulator[1] += value;\r\n        }\r\n    }\r\n    return accumulator;\r\n}\r\nfunction sum(scope, id, matchGroupId) {\r\n    const result = {\r\n        id,\r\n        scopes: [scope.id],\r\n        matchGroupIds: [matchGroupId],\r\n        type: 'aggregate',\r\n        aggregateFunction: (values) => sumValues(values),\r\n    };\r\n    return result;\r\n}\r\nfunction groupSum(scope, id, matchGroupId) {\r\n    return {\r\n        id,\r\n        scopes: [scope.id],\r\n        type: 'aggregate',\r\n        matchGroupIds: matchGroupId ? [matchGroupId] : undefined,\r\n        aggregateFunction: (values) => sumValues(values),\r\n        groupAggregateFunction: (next, acc = [0, 0]) => {\r\n            var _a, _b;\r\n            acc[0] += (_a = next === null || next === void 0 ? void 0 : next[0]) !== null && _a !== void 0 ? _a : 0;\r\n            acc[1] += (_b = next === null || next === void 0 ? void 0 : next[1]) !== null && _b !== void 0 ? _b : 0;\r\n            return acc;\r\n        },\r\n    };\r\n}\r\nfunction range(scope, id, matchGroupId) {\r\n    const result = {\r\n        id,\r\n        scopes: [scope.id],\r\n        matchGroupIds: [matchGroupId],\r\n        type: 'aggregate',\r\n        aggregateFunction: (values) => extendDomain(values),\r\n    };\r\n    return result;\r\n}\r\nfunction count(scope, id) {\r\n    const result = {\r\n        id,\r\n        scopes: [scope.id],\r\n        type: 'aggregate',\r\n        aggregateFunction: () => [0, 1],\r\n    };\r\n    return result;\r\n}\r\nfunction groupCount(scope, id) {\r\n    return {\r\n        id,\r\n        scopes: [scope.id],\r\n        type: 'aggregate',\r\n        aggregateFunction: () => [0, 1],\r\n        groupAggregateFunction: (next, acc = [0, 0]) => {\r\n            var _a, _b;\r\n            acc[0] += (_a = next === null || next === void 0 ? void 0 : next[0]) !== null && _a !== void 0 ? _a : 0;\r\n            acc[1] += (_b = next === null || next === void 0 ? void 0 : next[1]) !== null && _b !== void 0 ? _b : 0;\r\n            return acc;\r\n        },\r\n    };\r\n}\r\nfunction average(scope, id, matchGroupId) {\r\n    const result = {\r\n        id,\r\n        scopes: [scope.id],\r\n        matchGroupIds: [matchGroupId],\r\n        type: 'aggregate',\r\n        aggregateFunction: (values) => sumValues(values).map((v) => v / values.length),\r\n    };\r\n    return result;\r\n}\r\nfunction groupAverage(scope, id, matchGroupId) {\r\n    const result = {\r\n        id,\r\n        scopes: [scope.id],\r\n        matchGroupIds: matchGroupId ? [matchGroupId] : undefined,\r\n        type: 'aggregate',\r\n        aggregateFunction: (values) => sumValues(values),\r\n        groupAggregateFunction: (next, acc = [0, 0, -1]) => {\r\n            var _a, _b;\r\n            acc[0] += (_a = next === null || next === void 0 ? void 0 : next[0]) !== null && _a !== void 0 ? _a : 0;\r\n            acc[1] += (_b = next === null || next === void 0 ? void 0 : next[1]) !== null && _b !== void 0 ? _b : 0;\r\n            acc[2]++;\r\n            return acc;\r\n        },\r\n        finalFunction: (acc = [0, 0, 0]) => {\r\n            const result = acc[0] + acc[1];\r\n            if (result >= 0) {\r\n                return [0, result / acc[2]];\r\n            }\r\n            return [result / acc[2], 0];\r\n        },\r\n    };\r\n    return result;\r\n}\r\nfunction area(scope, id, aggFn, matchGroupId) {\r\n    const result = {\r\n        id,\r\n        scopes: [scope.id],\r\n        matchGroupIds: matchGroupId ? [matchGroupId] : undefined,\r\n        type: 'aggregate',\r\n        aggregateFunction: (values, keyRange = []) => {\r\n            const keyWidth = keyRange[1] - keyRange[0];\r\n            return aggFn.aggregateFunction(values).map((v) => v / keyWidth);\r\n        },\r\n    };\r\n    if (aggFn.groupAggregateFunction) {\r\n        result.groupAggregateFunction = aggFn.groupAggregateFunction;\r\n    }\r\n    return result;\r\n}\r\nfunction accumulatedValue(onlyPositive) {\r\n    return () => {\r\n        let value = 0;\r\n        return (datum) => {\r\n            if (typeof datum !== 'number')\r\n                return datum;\r\n            if (isNaN(datum))\r\n                return datum;\r\n            value += onlyPositive ? Math.max(0, datum) : datum;\r\n            return value;\r\n        };\r\n    };\r\n}\r\nfunction trailingAccumulatedValue() {\r\n    return () => {\r\n        let value = 0;\r\n        return (datum) => {\r\n            if (typeof datum !== 'number')\r\n                return datum;\r\n            if (isNaN(datum))\r\n                return datum;\r\n            const trailingValue = value;\r\n            value += datum;\r\n            return trailingValue;\r\n        };\r\n    };\r\n}\n\n/** Modes of matching user interactions to rendered nodes (e.g. hover or click) */\r\nvar SeriesNodePickMode;\r\n(function (SeriesNodePickMode) {\r\n    /** Pick matches based upon pick coordinates being inside a matching shape/marker. */\r\n    SeriesNodePickMode[SeriesNodePickMode[\"EXACT_SHAPE_MATCH\"] = 0] = \"EXACT_SHAPE_MATCH\";\r\n    /** Pick matches by nearest category/X-axis value, then distance within that category/X-value. */\r\n    SeriesNodePickMode[SeriesNodePickMode[\"NEAREST_BY_MAIN_AXIS_FIRST\"] = 1] = \"NEAREST_BY_MAIN_AXIS_FIRST\";\r\n    /** Pick matches by nearest category value, then distance within that category. */\r\n    SeriesNodePickMode[SeriesNodePickMode[\"NEAREST_BY_MAIN_CATEGORY_AXIS_FIRST\"] = 2] = \"NEAREST_BY_MAIN_CATEGORY_AXIS_FIRST\";\r\n    /** Pick matches based upon distance to ideal position */\r\n    SeriesNodePickMode[SeriesNodePickMode[\"NEAREST_NODE\"] = 3] = \"NEAREST_NODE\";\r\n})(SeriesNodePickMode || (SeriesNodePickMode = {}));\r\nfunction basicContinuousCheckDatumValidation(v) {\r\n    return checkDatum(v, true) != null;\r\n}\r\nfunction basicDiscreteCheckDatumValidation(v) {\r\n    return checkDatum(v, false) != null;\r\n}\r\nfunction keyProperty(scope, propName, continuous, opts = {}) {\r\n    const result = Object.assign({ scopes: [scope.id], property: propName, type: 'key', valueType: continuous ? 'range' : 'category', validation: continuous ? basicContinuousCheckDatumValidation : basicDiscreteCheckDatumValidation }, opts);\r\n    return result;\r\n}\r\nfunction valueProperty(scope, propName, continuous, opts = {}) {\r\n    const result = Object.assign({ scopes: [scope.id], property: propName, type: 'value', valueType: continuous ? 'range' : 'category', validation: continuous ? basicContinuousCheckDatumValidation : basicDiscreteCheckDatumValidation }, opts);\r\n    return result;\r\n}\r\nfunction rangedValueProperty(scope, propName, opts = {}) {\r\n    const { min = -Infinity, max = Infinity } = opts, defOpts = __rest(opts, [\"min\", \"max\"]);\r\n    return Object.assign({ scopes: [scope.id], type: 'value', property: propName, valueType: 'range', validation: basicContinuousCheckDatumValidation, processor: () => (datum) => {\r\n            if (typeof datum !== 'number')\r\n                return datum;\r\n            if (isNaN(datum))\r\n                return datum;\r\n            return Math.min(Math.max(datum, min), max);\r\n        } }, defOpts);\r\n}\r\nfunction trailingValueProperty(scope, propName, continuous, opts = {}) {\r\n    const result = Object.assign(Object.assign({}, valueProperty(scope, propName, continuous, opts)), { processor: trailingValue() });\r\n    return result;\r\n}\r\nfunction trailingValue() {\r\n    return () => {\r\n        let value = 0;\r\n        return (datum) => {\r\n            const trailingValue = value;\r\n            value = datum;\r\n            return trailingValue;\r\n        };\r\n    };\r\n}\r\nfunction accumulativeValueProperty(scope, propName, continuous, opts = {}) {\r\n    const { onlyPositive } = opts, defOpts = __rest(opts, [\"onlyPositive\"]);\r\n    const result = Object.assign(Object.assign({}, valueProperty(scope, propName, continuous, defOpts)), { processor: accumulatedValue(onlyPositive) });\r\n    return result;\r\n}\r\nfunction trailingAccumulatedValueProperty(scope, propName, continuous, opts = {}) {\r\n    const result = Object.assign(Object.assign({}, valueProperty(scope, propName, continuous, opts)), { processor: trailingAccumulatedValue() });\r\n    return result;\r\n}\r\nfunction groupAccumulativeValueProperty(scope, propName, continuous, mode, sum = 'current', opts) {\r\n    return [\r\n        valueProperty(scope, propName, continuous, opts),\r\n        accumulateGroup(scope, opts.groupId, mode, sum, opts.separateNegative),\r\n    ];\r\n}\r\nclass SeriesNodeClickEvent {\r\n    constructor(type, event, { datum }, series) {\r\n        this.type = type;\r\n        this.event = event;\r\n        this.datum = datum;\r\n        this.seriesId = series.id;\r\n    }\r\n}\r\nclass SeriesItemHighlightStyle {\r\n    constructor() {\r\n        this.fill = 'yellow';\r\n        this.fillOpacity = undefined;\r\n        this.stroke = undefined;\r\n        this.strokeWidth = undefined;\r\n        this.strokeOpacity = undefined;\r\n        this.lineDash = undefined;\r\n        this.lineDashOffset = undefined;\r\n    }\r\n}\r\n__decorate([\r\n    Validate(OPT_COLOR_STRING),\r\n    __metadata(\"design:type\", String)\r\n], SeriesItemHighlightStyle.prototype, \"fill\", void 0);\r\n__decorate([\r\n    Validate(OPT_NUMBER(0, 1)),\r\n    __metadata(\"design:type\", Number)\r\n], SeriesItemHighlightStyle.prototype, \"fillOpacity\", void 0);\r\n__decorate([\r\n    Validate(OPT_COLOR_STRING),\r\n    __metadata(\"design:type\", String)\r\n], SeriesItemHighlightStyle.prototype, \"stroke\", void 0);\r\n__decorate([\r\n    Validate(OPT_NUMBER(0)),\r\n    __metadata(\"design:type\", Number)\r\n], SeriesItemHighlightStyle.prototype, \"strokeWidth\", void 0);\r\n__decorate([\r\n    Validate(OPT_NUMBER(0, 1)),\r\n    __metadata(\"design:type\", Number)\r\n], SeriesItemHighlightStyle.prototype, \"strokeOpacity\", void 0);\r\n__decorate([\r\n    Validate(OPT_LINE_DASH),\r\n    __metadata(\"design:type\", Array)\r\n], SeriesItemHighlightStyle.prototype, \"lineDash\", void 0);\r\n__decorate([\r\n    Validate(OPT_NUMBER(0)),\r\n    __metadata(\"design:type\", Number)\r\n], SeriesItemHighlightStyle.prototype, \"lineDashOffset\", void 0);\r\nclass SeriesHighlightStyle {\r\n    constructor() {\r\n        this.strokeWidth = undefined;\r\n        this.dimOpacity = undefined;\r\n        this.enabled = undefined;\r\n    }\r\n}\r\n__decorate([\r\n    Validate(OPT_NUMBER(0)),\r\n    __metadata(\"design:type\", Number)\r\n], SeriesHighlightStyle.prototype, \"strokeWidth\", void 0);\r\n__decorate([\r\n    Validate(OPT_NUMBER(0, 1)),\r\n    __metadata(\"design:type\", Number)\r\n], SeriesHighlightStyle.prototype, \"dimOpacity\", void 0);\r\n__decorate([\r\n    Validate(OPT_BOOLEAN),\r\n    __metadata(\"design:type\", Boolean)\r\n], SeriesHighlightStyle.prototype, \"enabled\", void 0);\r\nclass TextHighlightStyle {\r\n    constructor() {\r\n        this.color = 'black';\r\n    }\r\n}\r\n__decorate([\r\n    Validate(OPT_COLOR_STRING),\r\n    __metadata(\"design:type\", String)\r\n], TextHighlightStyle.prototype, \"color\", void 0);\r\nclass HighlightStyle {\r\n    constructor() {\r\n        this.item = new SeriesItemHighlightStyle();\r\n        this.series = new SeriesHighlightStyle();\r\n        this.text = new TextHighlightStyle();\r\n    }\r\n}\r\nvar SeriesHighlight;\r\n(function (SeriesHighlight) {\r\n    SeriesHighlight[SeriesHighlight[\"None\"] = 0] = \"None\";\r\n    SeriesHighlight[SeriesHighlight[\"This\"] = 1] = \"This\";\r\n    SeriesHighlight[SeriesHighlight[\"Other\"] = 2] = \"Other\";\r\n})(SeriesHighlight || (SeriesHighlight = {}));\r\nclass Series extends Observable {\r\n    get type() {\r\n        var _a;\r\n        return (_a = this.constructor.type) !== null && _a !== void 0 ? _a : '';\r\n    }\r\n    set data(input) {\r\n        this._data = input;\r\n        this.onDataChange();\r\n    }\r\n    get data() {\r\n        var _a;\r\n        return (_a = this._data) !== null && _a !== void 0 ? _a : this._chartData;\r\n    }\r\n    onDataChange() {\r\n        this.nodeDataRefresh = true;\r\n    }\r\n    setChartData(input) {\r\n        this._chartData = input;\r\n        if (this.data === input) {\r\n            this.onDataChange();\r\n        }\r\n    }\r\n    hasData() {\r\n        const { data } = this;\r\n        return data && (!Array.isArray(data) || data.length > 0);\r\n    }\r\n    set visible(value) {\r\n        this._visible = value;\r\n        this.visibleChanged();\r\n    }\r\n    get visible() {\r\n        return this._visible;\r\n    }\r\n    onSeriesGroupingChange(prev, next) {\r\n        const { id, type, visible, rootGroup, highlightGroup, annotationGroup } = this;\r\n        if (prev) {\r\n            this.ctx.seriesStateManager.deregisterSeries({ id, type });\r\n        }\r\n        if (next) {\r\n            this.ctx.seriesStateManager.registerSeries({ id, type, visible, seriesGrouping: next });\r\n        }\r\n        // Short-circuit if series isn't already attached to the scene-graph yet.\r\n        if (this.rootGroup.parent == null)\r\n            return;\r\n        this.ctx.seriesLayerManager.changeGroup({\r\n            id,\r\n            type,\r\n            rootGroup,\r\n            highlightGroup,\r\n            annotationGroup,\r\n            getGroupZIndexSubOrder: (type) => this.getGroupZIndexSubOrder(type),\r\n            seriesGrouping: next,\r\n            oldGrouping: prev,\r\n        });\r\n    }\r\n    getBandScalePadding() {\r\n        return { inner: 1, outer: 0 };\r\n    }\r\n    constructor(seriesOpts) {\r\n        super();\r\n        this.NodeClickEvent = SeriesNodeClickEvent;\r\n        this.id = createId(this);\r\n        // The group node that contains all the nodes used to render this series.\r\n        this.rootGroup = new Group({ name: 'seriesRoot', isVirtual: true });\r\n        this.axes = {\r\n            [ChartAxisDirection.X]: undefined,\r\n            [ChartAxisDirection.Y]: undefined,\r\n        };\r\n        this.directions = [ChartAxisDirection.X, ChartAxisDirection.Y];\r\n        // Flag to determine if we should recalculate node data.\r\n        this.nodeDataRefresh = true;\r\n        this._visible = true;\r\n        this.showInLegend = true;\r\n        this.cursor = 'default';\r\n        this.nodeClickRange = 'exact';\r\n        this.seriesGrouping = undefined;\r\n        this._declarationOrder = -1;\r\n        this.seriesListeners = new Listeners();\r\n        this.highlightStyle = new HighlightStyle();\r\n        this.moduleMap = new ModuleMap(this);\r\n        this.nodeDataDependencies = {};\r\n        this.ctx = seriesOpts.moduleCtx;\r\n        const { useLabelLayer = false, pickModes = [SeriesNodePickMode.NEAREST_BY_MAIN_AXIS_FIRST], directionKeys = {}, directionNames = {}, contentGroupVirtual = true, canHaveAxes = false, } = seriesOpts;\r\n        this.directionKeys = directionKeys;\r\n        this.directionNames = directionNames;\r\n        this.canHaveAxes = canHaveAxes;\r\n        this.contentGroup = this.rootGroup.appendChild(new Group({\r\n            name: `${this.id}-content`,\r\n            layer: !contentGroupVirtual,\r\n            isVirtual: contentGroupVirtual,\r\n            zIndex: Layers.SERIES_LAYER_ZINDEX,\r\n            zIndexSubOrder: this.getGroupZIndexSubOrder('data'),\r\n        }));\r\n        this.highlightGroup = new Group({\r\n            name: `${this.id}-highlight`,\r\n            layer: !contentGroupVirtual,\r\n            isVirtual: contentGroupVirtual,\r\n            zIndex: Layers.SERIES_LAYER_ZINDEX,\r\n            zIndexSubOrder: this.getGroupZIndexSubOrder('highlight'),\r\n        });\r\n        this.highlightNode = this.highlightGroup.appendChild(new Group({ name: 'highlightNode', zIndex: 0 }));\r\n        this.highlightLabel = this.highlightGroup.appendChild(new Group({ name: 'highlightLabel', zIndex: 10 }));\r\n        this.pickModes = pickModes;\r\n        this.labelGroup = this.rootGroup.appendChild(new Group({\r\n            name: `${this.id}-series-labels`,\r\n            layer: useLabelLayer,\r\n            zIndex: Layers.SERIES_LABEL_ZINDEX,\r\n        }));\r\n        this.annotationGroup = new Group({\r\n            name: `${this.id}-annotation`,\r\n            layer: !contentGroupVirtual,\r\n            isVirtual: contentGroupVirtual,\r\n            zIndex: Layers.SERIES_LAYER_ZINDEX,\r\n            zIndexSubOrder: this.getGroupZIndexSubOrder('annotation'),\r\n        });\r\n    }\r\n    getGroupZIndexSubOrder(type, subIndex = 0) {\r\n        let mainAdjust = 0;\r\n        switch (type) {\r\n            case 'data':\r\n            case 'paths':\r\n                break;\r\n            case 'labels':\r\n                mainAdjust += 20000;\r\n                break;\r\n            case 'marker':\r\n                mainAdjust += 10000;\r\n                break;\r\n            // Following cases are in their own layer, so need to be careful to respect declarationOrder.\r\n            case 'highlight':\r\n                subIndex += 15000;\r\n                break;\r\n            case 'annotation':\r\n                mainAdjust += 15000;\r\n                break;\r\n        }\r\n        const main = () => this._declarationOrder + mainAdjust;\r\n        return [main, subIndex];\r\n    }\r\n    addListener(type, listener) {\r\n        return this.seriesListeners.addListener(type, listener);\r\n    }\r\n    dispatch(type, event) {\r\n        return this.seriesListeners.dispatch(type, event);\r\n    }\r\n    addChartEventListeners() {\r\n        return;\r\n    }\r\n    destroy() {\r\n        this.ctx.seriesStateManager.deregisterSeries(this);\r\n        this.ctx.seriesLayerManager.releaseGroup(this);\r\n    }\r\n    getDirectionValues(direction, properties) {\r\n        const resolvedDirection = this.resolveKeyDirection(direction);\r\n        const keys = properties === null || properties === void 0 ? void 0 : properties[resolvedDirection];\r\n        const values = [];\r\n        if (!keys)\r\n            return values;\r\n        const addValues = (...items) => {\r\n            for (const value of items) {\r\n                if (Array.isArray(value)) {\r\n                    addValues(...value);\r\n                }\r\n                else if (typeof value === 'object') {\r\n                    addValues(...Object.values(value));\r\n                }\r\n                else {\r\n                    values.push(value);\r\n                }\r\n            }\r\n        };\r\n        addValues(...keys.map((key) => this[key]));\r\n        return values;\r\n    }\r\n    getKeys(direction) {\r\n        return this.getDirectionValues(direction, this.directionKeys);\r\n    }\r\n    getNames(direction) {\r\n        return this.getDirectionValues(direction, this.directionNames);\r\n    }\r\n    resolveKeyDirection(direction) {\r\n        return direction;\r\n    }\r\n    // The union of the series domain ('community') and series-option domains ('enterprise').\r\n    getDomain(direction) {\r\n        var _a;\r\n        const seriesDomain = this.getSeriesDomain(direction);\r\n        const moduleDomains = (_a = this.dispatch('data-getDomain', { direction })) !== null && _a !== void 0 ? _a : [];\r\n        // Flatten the 2D moduleDomains into a 1D array and concatenate it with seriesDomain\r\n        return moduleDomains.reduce((total, current) => total.concat(current), seriesDomain);\r\n    }\r\n    // Indicate that something external changed and we should recalculate nodeData.\r\n    markNodeDataDirty() {\r\n        this.nodeDataRefresh = true;\r\n    }\r\n    visibleChanged() {\r\n        this.ctx.seriesStateManager.registerSeries(this);\r\n    }\r\n    getOpacity() {\r\n        const defaultOpacity = 1;\r\n        const { dimOpacity = 1, enabled = true } = this.highlightStyle.series;\r\n        if (!enabled || dimOpacity === defaultOpacity) {\r\n            return defaultOpacity;\r\n        }\r\n        switch (this.isItemIdHighlighted()) {\r\n            case SeriesHighlight.None:\r\n            case SeriesHighlight.This:\r\n                return defaultOpacity;\r\n            case SeriesHighlight.Other:\r\n            default:\r\n                return dimOpacity;\r\n        }\r\n    }\r\n    getStrokeWidth(defaultStrokeWidth) {\r\n        const { strokeWidth, enabled = true } = this.highlightStyle.series;\r\n        if (!enabled || strokeWidth === undefined) {\r\n            // No change in styling for highlight cases.\r\n            return defaultStrokeWidth;\r\n        }\r\n        switch (this.isItemIdHighlighted()) {\r\n            case SeriesHighlight.This:\r\n                return strokeWidth;\r\n            case SeriesHighlight.None:\r\n            case SeriesHighlight.Other:\r\n                return defaultStrokeWidth;\r\n        }\r\n    }\r\n    isItemIdHighlighted() {\r\n        var _a, _b;\r\n        const { series } = (_b = (_a = this.ctx.highlightManager) === null || _a === void 0 ? void 0 : _a.getActiveHighlight()) !== null && _b !== void 0 ? _b : {};\r\n        // Highlighting not active.\r\n        if (series == null) {\r\n            return SeriesHighlight.None;\r\n        }\r\n        // Highlighting active, this series not highlighted.\r\n        if (series !== this) {\r\n            return SeriesHighlight.Other;\r\n        }\r\n        return SeriesHighlight.This;\r\n    }\r\n    getModuleTooltipParams(datum) {\r\n        var _a;\r\n        const params = (_a = this.dispatch('tooltip-getParams', { datum })) !== null && _a !== void 0 ? _a : [];\r\n        return params.reduce((total, current) => {\r\n            return Object.assign(Object.assign({}, current), total);\r\n        }, {});\r\n    }\r\n    pickNode(point, limitPickModes) {\r\n        const { pickModes, visible, rootGroup } = this;\r\n        if (!visible || !rootGroup.visible) {\r\n            return;\r\n        }\r\n        for (const pickMode of pickModes) {\r\n            if (limitPickModes && !limitPickModes.includes(pickMode)) {\r\n                continue;\r\n            }\r\n            let match;\r\n            switch (pickMode) {\r\n                case SeriesNodePickMode.EXACT_SHAPE_MATCH:\r\n                    match = this.pickNodeExactShape(point);\r\n                    break;\r\n                case SeriesNodePickMode.NEAREST_BY_MAIN_AXIS_FIRST:\r\n                case SeriesNodePickMode.NEAREST_BY_MAIN_CATEGORY_AXIS_FIRST:\r\n                    match = this.pickNodeMainAxisFirst(point, pickMode === SeriesNodePickMode.NEAREST_BY_MAIN_CATEGORY_AXIS_FIRST);\r\n                    break;\r\n                case SeriesNodePickMode.NEAREST_NODE:\r\n                    match = this.pickNodeClosestDatum(point);\r\n                    break;\r\n            }\r\n            if (match) {\r\n                return { pickMode, match: match.datum, distance: match.distance };\r\n            }\r\n        }\r\n    }\r\n    pickNodeExactShape(point) {\r\n        const match = this.contentGroup.pickNode(point.x, point.y);\r\n        return match && { datum: match.datum, distance: 0 };\r\n    }\r\n    pickNodeClosestDatum(_point) {\r\n        // Override point for subclasses - but if this is invoked, the subclass specified it wants\r\n        // to use this feature.\r\n        throw new Error('AG Charts - Series.pickNodeClosestDatum() not implemented');\r\n    }\r\n    pickNodeMainAxisFirst(_point, _requireCategoryAxis) {\r\n        // Override point for subclasses - but if this is invoked, the subclass specified it wants\r\n        // to use this feature.\r\n        throw new Error('AG Charts - Series.pickNodeMainAxisFirst() not implemented');\r\n    }\r\n    fireNodeClickEvent(event, datum) {\r\n        this.fireEvent(new this.NodeClickEvent('nodeClick', event, datum, this));\r\n    }\r\n    fireNodeDoubleClickEvent(event, datum) {\r\n        this.fireEvent(new this.NodeClickEvent('nodeDoubleClick', event, datum, this));\r\n    }\r\n    toggleSeriesItem(itemId, enabled) {\r\n        this.visible = enabled;\r\n        this.nodeDataRefresh = true;\r\n        this.dispatch('visibility-changed', { itemId, enabled });\r\n    }\r\n    isEnabled() {\r\n        return this.visible;\r\n    }\r\n    getModuleMap() {\r\n        return this.moduleMap;\r\n    }\r\n    createModuleContext() {\r\n        return Object.assign(Object.assign({}, this.ctx), { series: this });\r\n    }\r\n    getLabelText(label, params, defaultFormatter = String) {\r\n        var _a;\r\n        if (label.formatter) {\r\n            return ((_a = this.ctx.callbackCache.call(label.formatter, Object.assign({ seriesId: this.id }, params))) !== null && _a !== void 0 ? _a : defaultFormatter(params.value));\r\n        }\r\n        return defaultFormatter(params.value);\r\n    }\r\n    getMarkerStyle(marker, params, defaultStyle = marker.getStyle()) {\r\n        var _a, _b;\r\n        const defaultSize = { size: (_b = (_a = params.datum.point) === null || _a === void 0 ? void 0 : _a.size) !== null && _b !== void 0 ? _b : 0 };\r\n        const markerStyle = mergeDefaults(defaultSize, defaultStyle);\r\n        if (marker.formatter) {\r\n            const style = this.ctx.callbackCache.call(marker.formatter, Object.assign(Object.assign(Object.assign({ seriesId: this.id }, markerStyle), params), { datum: params.datum.datum }));\r\n            return mergeDefaults(style, markerStyle);\r\n        }\r\n        return markerStyle;\r\n    }\r\n    updateMarkerStyle(markerNode, marker, params, defaultStyle = marker.getStyle(), { applyTranslation = true } = {}) {\r\n        const { point } = params.datum;\r\n        const activeStyle = this.getMarkerStyle(marker, params, defaultStyle);\r\n        const visible = this.visible && activeStyle.size > 0 && point && !isNaN(point.x) && !isNaN(point.y);\r\n        if (applyTranslation) {\r\n            markerNode.setProperties(Object.assign(Object.assign({ visible }, activeStyle), { translationX: point === null || point === void 0 ? void 0 : point.x, translationY: point === null || point === void 0 ? void 0 : point.y }));\r\n        }\r\n        else {\r\n            markerNode.setProperties(Object.assign({ visible }, activeStyle));\r\n        }\r\n        // Only for custom marker shapes\r\n        if (typeof marker.shape === 'function' && !markerNode.dirtyPath) {\r\n            markerNode.path.clear({ trackChanges: true });\r\n            markerNode.updatePath();\r\n            markerNode.checkPathDirty();\r\n        }\r\n    }\r\n    getMinRect() {\r\n        return undefined;\r\n    }\r\n    checkResize(newSeriesRect) {\r\n        const newNodeDataDependencies = {\r\n            seriesRectWidth: newSeriesRect === null || newSeriesRect === void 0 ? void 0 : newSeriesRect.width,\r\n            seriesRectHeight: newSeriesRect === null || newSeriesRect === void 0 ? void 0 : newSeriesRect.height,\r\n        };\r\n        const resize = jsonDiff(this.nodeDataDependencies, newNodeDataDependencies) != null;\r\n        if (resize) {\r\n            this.nodeDataDependencies = newNodeDataDependencies;\r\n            this.markNodeDataDirty();\r\n        }\r\n        return resize;\r\n    }\r\n}\r\nSeries.highlightedZIndex = 1000000000000;\r\n__decorate([\r\n    Validate(STRING),\r\n    __metadata(\"design:type\", Object)\r\n], Series.prototype, \"id\", void 0);\r\n__decorate([\r\n    Validate(BOOLEAN),\r\n    __metadata(\"design:type\", Object)\r\n], Series.prototype, \"_visible\", void 0);\r\n__decorate([\r\n    Validate(BOOLEAN),\r\n    __metadata(\"design:type\", Object)\r\n], Series.prototype, \"showInLegend\", void 0);\r\n__decorate([\r\n    Validate(STRING),\r\n    __metadata(\"design:type\", Object)\r\n], Series.prototype, \"cursor\", void 0);\r\n__decorate([\r\n    Validate(INTERACTION_RANGE),\r\n    __metadata(\"design:type\", Object)\r\n], Series.prototype, \"nodeClickRange\", void 0);\r\n__decorate([\r\n    ActionOnSet({\r\n        changeValue: function (newVal, oldVal) {\r\n            this.onSeriesGroupingChange(oldVal, newVal);\r\n        },\r\n    }),\r\n    __metadata(\"design:type\", Object)\r\n], Series.prototype, \"seriesGrouping\", void 0);\n\nfunction seriesLabelFadeInAnimation({ id }, subId, animationManager, labelSelections) {\r\n    staticFromToMotion(id, subId, animationManager, labelSelections, { opacity: 0 }, { opacity: 1 }, LABEL_PHASE);\r\n}\r\nfunction seriesLabelFadeOutAnimation({ id }, subId, animationManager, labelSelections) {\r\n    staticFromToMotion(id, subId, animationManager, labelSelections, { opacity: 1 }, { opacity: 0 }, LABEL_PHASE);\r\n}\r\nfunction resetLabelFn(_node) {\r\n    return { opacity: 1 };\r\n}\n\nconst CONSTANTS = {\r\n    periods: ['AM', 'PM'],\r\n    days: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\r\n    shortDays: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\r\n    months: [\r\n        'January',\r\n        'February',\r\n        'March',\r\n        'April',\r\n        'May',\r\n        'June',\r\n        'July',\r\n        'August',\r\n        'September',\r\n        'October',\r\n        'November',\r\n        'December',\r\n    ],\r\n    shortMonths: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\r\n};\r\nfunction dayOfYear(date, startOfYear = new Date(date.getFullYear(), 0, 1)) {\r\n    const startOffset = date.getTimezoneOffset() - startOfYear.getTimezoneOffset();\r\n    const timeDiff = date.getTime() - startOfYear.getTime() + startOffset * 60000;\r\n    const timeOneDay = 3600000 * 24;\r\n    return Math.floor(timeDiff / timeOneDay);\r\n}\r\nfunction weekOfYear(date, startDay) {\r\n    const startOfYear = new Date(date.getFullYear(), 0, 1);\r\n    const startOfYearDay = startOfYear.getDay();\r\n    const firstWeekStartOffset = (startDay - startOfYearDay + 7) % 7;\r\n    const startOffset = new Date(date.getFullYear(), 0, firstWeekStartOffset + 1);\r\n    if (startOffset <= date) {\r\n        return Math.floor(dayOfYear(date, startOffset) / 7) + 1;\r\n    }\r\n    // Days before week 1 are in week 0.\r\n    return 0;\r\n}\r\nconst SUNDAY = 0;\r\nconst MONDAY = 1;\r\nconst THURSDAY = 4;\r\nfunction isoWeekOfYear(date, year = date.getFullYear()) {\r\n    const firstOfYear = new Date(year, 0, 1);\r\n    const firstOfYearDay = firstOfYear.getDay();\r\n    const firstThursdayOffset = (THURSDAY - firstOfYearDay + 7) % 7;\r\n    const startOffset = new Date(year, 0, firstThursdayOffset - (THURSDAY - MONDAY) + 1);\r\n    if (startOffset <= date) {\r\n        return Math.floor(dayOfYear(date, startOffset) / 7) + 1;\r\n    }\r\n    // Days before week 1 are in week 52/53 of previous year.\r\n    return isoWeekOfYear(date, year - 1);\r\n}\r\nfunction timezone(date) {\r\n    const offset = date.getTimezoneOffset();\r\n    const unsignedOffset = Math.abs(offset);\r\n    const sign = offset > 0 ? '-' : '+';\r\n    return `${sign}${pad(Math.floor(unsignedOffset / 60), 2, '0')}${pad(Math.floor(unsignedOffset % 60), 2, '0')}`;\r\n}\r\nconst FORMATTERS = {\r\n    a: (d) => CONSTANTS.shortDays[d.getDay()],\r\n    A: (d) => CONSTANTS.days[d.getDay()],\r\n    b: (d) => CONSTANTS.shortMonths[d.getMonth()],\r\n    B: (d) => CONSTANTS.months[d.getMonth()],\r\n    c: '%x, %X',\r\n    d: (d, p) => pad(d.getDate(), 2, p !== null && p !== void 0 ? p : '0'),\r\n    e: '%_d',\r\n    f: (d, p) => pad(d.getMilliseconds() * 1000, 6, p !== null && p !== void 0 ? p : '0'),\r\n    H: (d, p) => pad(d.getHours(), 2, p !== null && p !== void 0 ? p : '0'),\r\n    I: (d, p) => {\r\n        const hours = d.getHours() % 12;\r\n        return hours === 0 ? '12' : pad(hours, 2, p !== null && p !== void 0 ? p : '0');\r\n    },\r\n    j: (d, p) => pad(dayOfYear(d) + 1, 3, p !== null && p !== void 0 ? p : '0'),\r\n    m: (d, p) => pad(d.getMonth() + 1, 2, p !== null && p !== void 0 ? p : '0'),\r\n    M: (d, p) => pad(d.getMinutes(), 2, p !== null && p !== void 0 ? p : '0'),\r\n    L: (d, p) => pad(d.getMilliseconds(), 3, p !== null && p !== void 0 ? p : '0'),\r\n    p: (d) => (d.getHours() < 12 ? 'AM' : 'PM'),\r\n    Q: (d) => String(d.getTime()),\r\n    s: (d) => String(Math.floor(d.getTime() / 1000)),\r\n    S: (d, p) => pad(d.getSeconds(), 2, p !== null && p !== void 0 ? p : '0'),\r\n    u: (d) => {\r\n        let day = d.getDay();\r\n        if (day < 1)\r\n            day += 7;\r\n        return String(day % 7);\r\n    },\r\n    U: (d, p) => pad(weekOfYear(d, SUNDAY), 2, p !== null && p !== void 0 ? p : '0'),\r\n    V: (d, p) => pad(isoWeekOfYear(d), 2, p !== null && p !== void 0 ? p : '0'),\r\n    w: (d, p) => pad(d.getDay(), 2, p !== null && p !== void 0 ? p : '0'),\r\n    W: (d, p) => pad(weekOfYear(d, MONDAY), 2, p !== null && p !== void 0 ? p : '0'),\r\n    x: '%-m/%-d/%Y',\r\n    X: '%-I:%M:%S %p',\r\n    y: (d, p) => pad(d.getFullYear() % 100, 2, p !== null && p !== void 0 ? p : '0'),\r\n    Y: (d, p) => pad(d.getFullYear(), 4, p !== null && p !== void 0 ? p : '0'),\r\n    Z: (d) => timezone(d),\r\n    '%': () => '%',\r\n};\r\nconst PADS = {\r\n    _: ' ',\r\n    '0': '0',\r\n    '-': '',\r\n};\r\nfunction pad(value, size, padChar) {\r\n    const output = String(Math.floor(value));\r\n    if (output.length >= size) {\r\n        return output;\r\n    }\r\n    return `${padChar.repeat(size - output.length)}${output}`;\r\n}\r\nfunction buildFormatter(formatString) {\r\n    const formatParts = [];\r\n    while (formatString.length > 0) {\r\n        let nextEscapeIdx = formatString.indexOf('%');\r\n        if (nextEscapeIdx !== 0) {\r\n            const literalPart = nextEscapeIdx > 0 ? formatString.substring(0, nextEscapeIdx) : formatString;\r\n            formatParts.push(literalPart);\r\n        }\r\n        if (nextEscapeIdx < 0)\r\n            break;\r\n        const maybePadSpecifier = formatString[nextEscapeIdx + 1];\r\n        const maybePad = PADS[maybePadSpecifier];\r\n        if (maybePad != null) {\r\n            nextEscapeIdx++;\r\n        }\r\n        const maybeFormatterSpecifier = formatString[nextEscapeIdx + 1];\r\n        const maybeFormatter = FORMATTERS[maybeFormatterSpecifier];\r\n        if (typeof maybeFormatter === 'function') {\r\n            formatParts.push([maybeFormatter, maybePad]);\r\n        }\r\n        else if (typeof maybeFormatter === 'string') {\r\n            const formatter = buildFormatter(maybeFormatter);\r\n            formatParts.push([formatter, maybePad]);\r\n        }\r\n        else {\r\n            formatParts.push(`${maybePad !== null && maybePad !== void 0 ? maybePad : ''}${maybeFormatterSpecifier}`);\r\n        }\r\n        formatString = formatString.substring(nextEscapeIdx + 2);\r\n    }\r\n    return (dateTime) => {\r\n        const dateTimeAsDate = typeof dateTime === 'number' ? new Date(dateTime) : dateTime;\r\n        return formatParts.map((c) => (typeof c === 'string' ? c : c[0](dateTimeAsDate, c[1]))).join('');\r\n    };\r\n}\n\nconst interpolatePattern = /(#\\{(.*?)\\})/g;\r\nfunction interpolate(input, values, formats) {\r\n    return input.replace(interpolatePattern, function (...args) {\r\n        const name = args[2];\r\n        const [valueName, formatName] = name.split(':');\r\n        const value = values[valueName];\r\n        if (typeof value === 'number') {\r\n            const format = formatName && formats && formats[formatName];\r\n            if (format) {\r\n                const { locales, options } = format;\r\n                return value.toLocaleString(locales, options);\r\n            }\r\n            return String(value);\r\n        }\r\n        if (value instanceof Date) {\r\n            const format = formatName && formats && formats[formatName];\r\n            if (typeof format === 'string') {\r\n                const formatter = buildFormatter(format);\r\n                return formatter(value);\r\n            }\r\n            return value.toDateString();\r\n        }\r\n        if (typeof value === 'string' || (value === null || value === void 0 ? void 0 : value.toString)) {\r\n            return String(value);\r\n        }\r\n        return '';\r\n    });\r\n}\n\nfunction injectStyle(document, cssStyle) {\r\n    const styleElement = document.createElement('style');\r\n    styleElement.innerHTML = cssStyle;\r\n    // Make sure these styles are injected before other styles, so it can be overridden.\r\n    document.head.insertBefore(styleElement, document.head.querySelector('style'));\r\n}\n\nconst DEFAULT_TOOLTIP_CLASS = 'ag-chart-tooltip';\r\nconst DEFAULT_TOOLTIP_DARK_CLASS = 'ag-chart-dark-tooltip';\r\nconst defaultTooltipCss = `\n.${DEFAULT_TOOLTIP_CLASS} {\n    transition: transform 0.1s ease;\n    display: table;\n    position: fixed;\n    left: 0px;\n    top: 0px;\n    white-space: nowrap;\n    z-index: 99999;\n    font: 12px Verdana, sans-serif;\n    color: rgb(70, 70, 70);\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.08);\n}\n\n.${DEFAULT_TOOLTIP_CLASS}-no-interaction {\n    pointer-events: none;\n    user-select: none;\n}\n\n.${DEFAULT_TOOLTIP_CLASS}-no-animation {\n    transition: none !important;\n}\n\n.${DEFAULT_TOOLTIP_CLASS}-hidden {\n    visibility: hidden;\n}\n\n.${DEFAULT_TOOLTIP_CLASS}-title {\n    position: relative;\n    padding: 8px 14px;\n    border-top-left-radius: 2px;\n    border-top-right-radius: 2px;\n    color: white;\n    background-color: #888888;\n    z-index: 1;\n}\n\n.${DEFAULT_TOOLTIP_CLASS}-title:only-child {\n    border-bottom-left-radius: 2px;\n    border-bottom-right-radius: 2px;\n}\n\n.${DEFAULT_TOOLTIP_CLASS}-content {\n    padding: 6px 14px;\n    line-height: 1.7em;\n    background: white;\n    border-bottom-left-radius: 2px;\n    border-bottom-right-radius: 2px;\n    border: 1px solid rgba(0, 0, 0, 0.15);\n    overflow: hidden;\n}\n\n.${DEFAULT_TOOLTIP_CLASS}-arrow::before {\n    content: \"\";\n\n    position: absolute;\n    top: 100%;\n    left: 50%;\n    transform: translateX(-50%);\n\n    border: 5px solid #d9d9d9;\n\n    border-left-color: transparent;\n    border-right-color: transparent;\n    border-bottom-color: transparent;\n\n    width: 0;\n    height: 0;\n\n    margin: 0 auto;\n}\n\n.${DEFAULT_TOOLTIP_CLASS}-arrow::after {\n    content: \"\";\n\n    position: absolute;\n    top: calc(100% - 1px);\n    left: 50%;\n    transform: translateX(-50%);\n\n    border: 5px solid white;\n\n    border-left-color: transparent;\n    border-right-color: transparent;\n    border-bottom-color: transparent;\n\n    width: 0;\n    height: 0;\n\n    margin: 0 auto;\n}\n\n.${DEFAULT_TOOLTIP_CLASS}.${DEFAULT_TOOLTIP_DARK_CLASS} {\n    color: white;\n    background: #15181c;\n}\n\n.${DEFAULT_TOOLTIP_CLASS}.${DEFAULT_TOOLTIP_DARK_CLASS} .${DEFAULT_TOOLTIP_CLASS}-content {\n    border-color: rgba(255, 255, 255, 0.15);\n}\n\n.ag-chart-wrapper {\n    box-sizing: border-box;\n    overflow: hidden;\n}\n`;\r\nfunction toTooltipHtml(input, defaults) {\r\n    var _a, _b, _c;\r\n    if (typeof input === 'string') {\r\n        return input;\r\n    }\r\n    const { content = (_a = defaults === null || defaults === void 0 ? void 0 : defaults.content) !== null && _a !== void 0 ? _a : '', title = defaults === null || defaults === void 0 ? void 0 : defaults.title, color = (_b = defaults === null || defaults === void 0 ? void 0 : defaults.color) !== null && _b !== void 0 ? _b : 'white', backgroundColor = (_c = defaults === null || defaults === void 0 ? void 0 : defaults.backgroundColor) !== null && _c !== void 0 ? _c : '#888', } = input;\r\n    const titleHtml = title\r\n        ? `<div class=\"${DEFAULT_TOOLTIP_CLASS}-title\"\n        style=\"color: ${color}; background-color: ${backgroundColor}\">${title}</div>`\r\n        : '';\r\n    const contentHtml = content ? `<div class=\"${DEFAULT_TOOLTIP_CLASS}-content\">${content}</div>` : '';\r\n    return `${titleHtml}${contentHtml}`;\r\n}\r\nconst POSITION_TYPES = ['pointer', 'node'];\r\nconst POSITION_TYPE = predicateWithMessage((v) => POSITION_TYPES.includes(v), `expecting a position type keyword such as 'pointer' or 'node'`);\r\nclass TooltipPosition {\r\n    constructor() {\r\n        /** The type of positioning for the tooltip. By default, the tooltip follows the pointer. */\r\n        this.type = 'pointer';\r\n        /** The horizontal offset in pixels for the position of the tooltip. */\r\n        this.xOffset = 0;\r\n        /** The vertical offset in pixels for the position of the tooltip. */\r\n        this.yOffset = 0;\r\n    }\r\n}\r\n__decorate([\r\n    Validate(POSITION_TYPE)\r\n    /** The type of positioning for the tooltip. By default, the tooltip follows the pointer. */\r\n    ,\r\n    __metadata(\"design:type\", String)\r\n], TooltipPosition.prototype, \"type\", void 0);\r\n__decorate([\r\n    Validate(NUMBER$1())\r\n    /** The horizontal offset in pixels for the position of the tooltip. */\r\n    ,\r\n    __metadata(\"design:type\", Number)\r\n], TooltipPosition.prototype, \"xOffset\", void 0);\r\n__decorate([\r\n    Validate(NUMBER$1())\r\n    /** The vertical offset in pixels for the position of the tooltip. */\r\n    ,\r\n    __metadata(\"design:type\", Number)\r\n], TooltipPosition.prototype, \"yOffset\", void 0);\r\nclass Tooltip {\r\n    constructor(canvasElement, document, window, container) {\r\n        this.enableInteraction = false;\r\n        this.enabled = true;\r\n        this.showArrow = undefined;\r\n        this.class = undefined;\r\n        this.lastClass = undefined;\r\n        this.delay = 0;\r\n        this.range = 'nearest';\r\n        this.lastVisibilityChange = Date.now();\r\n        this.position = new TooltipPosition();\r\n        this.showTimeout = 0;\r\n        this._showArrow = true;\r\n        this.tooltipRoot = container;\r\n        this.window = window;\r\n        const element = document.createElement('div');\r\n        this.element = this.tooltipRoot.appendChild(element);\r\n        this.element.classList.add(DEFAULT_TOOLTIP_CLASS);\r\n        this.canvasElement = canvasElement;\r\n        // Detect when the chart becomes invisible and hide the tooltip as well.\r\n        if (typeof IntersectionObserver !== 'undefined') {\r\n            const observer = new IntersectionObserver((entries) => {\r\n                for (const entry of entries) {\r\n                    if (entry.target === this.canvasElement && entry.intersectionRatio === 0) {\r\n                        this.toggle(false);\r\n                    }\r\n                }\r\n            }, { root: this.tooltipRoot });\r\n            observer.observe(this.canvasElement);\r\n            this.observer = observer;\r\n        }\r\n        if (Tooltip.tooltipDocuments.indexOf(document) < 0) {\r\n            injectStyle(document, defaultTooltipCss);\r\n            Tooltip.tooltipDocuments.push(document);\r\n        }\r\n    }\r\n    destroy() {\r\n        const { parentNode } = this.element;\r\n        if (parentNode) {\r\n            parentNode.removeChild(this.element);\r\n        }\r\n        if (this.observer) {\r\n            this.observer.unobserve(this.canvasElement);\r\n        }\r\n    }\r\n    isVisible() {\r\n        const { element } = this;\r\n        return !element.classList.contains(DEFAULT_TOOLTIP_CLASS + '-hidden');\r\n    }\r\n    updateClass(visible, showArrow) {\r\n        const { element, class: newClass, lastClass, enableInteraction, lastVisibilityChange } = this;\r\n        const wasVisible = this.isVisible();\r\n        const nowVisible = !!visible;\r\n        let timeSinceLastVisibilityChangeMs = Infinity;\r\n        if (wasVisible !== nowVisible) {\r\n            const now = Date.now();\r\n            timeSinceLastVisibilityChangeMs = now - lastVisibilityChange;\r\n            this.lastVisibilityChange = now;\r\n        }\r\n        const toggleClass = (name, include) => {\r\n            const className = `${DEFAULT_TOOLTIP_CLASS}-${name}`;\r\n            if (include) {\r\n                element.classList.add(className);\r\n            }\r\n            else {\r\n                element.classList.remove(className);\r\n            }\r\n        };\r\n        // Time below which an animated move should be used.\r\n        const animatedMoveThresholdMs = 100;\r\n        // Time below which we should treat updates as indistinguishable to users, and we shouldn't\r\n        // adjust the `no-animation` CSS class.\r\n        const thrashingThresholdMs = 5;\r\n        // No animation on first show or if tooltip is disabled for a non-trivial amount of time.\r\n        // Don't change the `no-animation` class on fast update.\r\n        const noAnimation = !wasVisible && nowVisible && timeSinceLastVisibilityChangeMs > animatedMoveThresholdMs;\r\n        if (timeSinceLastVisibilityChangeMs > thrashingThresholdMs) {\r\n            toggleClass('no-animation', noAnimation);\r\n        }\r\n        toggleClass('no-interaction', !enableInteraction); // Prevent interaction.\r\n        toggleClass('hidden', !visible); // Hide if not visible.\r\n        toggleClass('arrow', !!showArrow); // Add arrow if tooltip is constrained.\r\n        if (newClass !== lastClass) {\r\n            if (lastClass) {\r\n                element.classList.remove(lastClass);\r\n            }\r\n            if (newClass) {\r\n                element.classList.add(newClass);\r\n            }\r\n            this.lastClass = newClass;\r\n        }\r\n    }\r\n    /**\r\n     * Shows tooltip at the given event's coordinates.\r\n     * If the `html` parameter is missing, moves the existing tooltip to the new position.\r\n     */\r\n    show(meta, html, instantly = false) {\r\n        var _a, _b, _c, _d, _e, _f, _g;\r\n        const { element, canvasElement } = this;\r\n        if (html !== undefined) {\r\n            element.innerHTML = html;\r\n        }\r\n        else if (!element.innerHTML) {\r\n            this.toggle(false);\r\n            return;\r\n        }\r\n        const limit = (low, actual, high) => {\r\n            return Math.max(Math.min(actual, high), low);\r\n        };\r\n        const xOffset = (_b = (_a = meta.position) === null || _a === void 0 ? void 0 : _a.xOffset) !== null && _b !== void 0 ? _b : 0;\r\n        const yOffset = (_d = (_c = meta.position) === null || _c === void 0 ? void 0 : _c.yOffset) !== null && _d !== void 0 ? _d : 0;\r\n        const canvasRect = canvasElement.getBoundingClientRect();\r\n        const naiveLeft = canvasRect.left + meta.offsetX - element.clientWidth / 2 + xOffset;\r\n        const naiveTop = canvasRect.top + meta.offsetY - element.clientHeight - 8 + yOffset;\r\n        const windowBounds = this.getWindowBoundingBox();\r\n        const maxLeft = windowBounds.x + windowBounds.width - element.clientWidth - 1;\r\n        const maxTop = windowBounds.y + windowBounds.height - element.clientHeight;\r\n        const left = limit(windowBounds.x, naiveLeft, maxLeft);\r\n        const top = limit(windowBounds.y, naiveTop, maxTop);\r\n        const constrained = left !== naiveLeft || top !== naiveTop;\r\n        const defaultShowArrow = !constrained && !xOffset && !yOffset;\r\n        const showArrow = (_f = (_e = meta.showArrow) !== null && _e !== void 0 ? _e : this.showArrow) !== null && _f !== void 0 ? _f : defaultShowArrow;\r\n        this.updateShowArrow(showArrow);\r\n        element.style.transform = `translate(${Math.round(left)}px, ${Math.round(top)}px)`;\r\n        this.enableInteraction = (_g = meta.enableInteraction) !== null && _g !== void 0 ? _g : false;\r\n        if (this.delay > 0 && !instantly) {\r\n            this.toggle(false);\r\n            this.showTimeout = this.window.setTimeout(() => {\r\n                this.toggle(true);\r\n            }, this.delay);\r\n            return;\r\n        }\r\n        this.toggle(true);\r\n    }\r\n    getWindowBoundingBox() {\r\n        return new BBox(0, 0, this.window.innerWidth, this.window.innerHeight);\r\n    }\r\n    toggle(visible) {\r\n        if (!visible) {\r\n            this.window.clearTimeout(this.showTimeout);\r\n        }\r\n        this.updateClass(visible, this._showArrow);\r\n    }\r\n    pointerLeftOntoTooltip(event) {\r\n        var _a;\r\n        if (!this.enableInteraction)\r\n            return false;\r\n        const classList = (_a = event.sourceEvent.relatedTarget) === null || _a === void 0 ? void 0 : _a.classList;\r\n        const classes = ['', '-title', '-content'];\r\n        const classListContains = Boolean(classes.filter((c) => classList === null || classList === void 0 ? void 0 : classList.contains(`${DEFAULT_TOOLTIP_CLASS}${c}`)));\r\n        return classList !== undefined && classListContains;\r\n    }\r\n    updateShowArrow(show) {\r\n        this._showArrow = show;\r\n    }\r\n}\r\nTooltip.tooltipDocuments = [];\r\n__decorate([\r\n    Validate(BOOLEAN),\r\n    __metadata(\"design:type\", Boolean)\r\n], Tooltip.prototype, \"enabled\", void 0);\r\n__decorate([\r\n    Validate(OPT_BOOLEAN),\r\n    __metadata(\"design:type\", Boolean)\r\n], Tooltip.prototype, \"showArrow\", void 0);\r\n__decorate([\r\n    Validate(OPT_STRING),\r\n    __metadata(\"design:type\", String)\r\n], Tooltip.prototype, \"class\", void 0);\r\n__decorate([\r\n    Validate(NUMBER$1(0)),\r\n    __metadata(\"design:type\", Number)\r\n], Tooltip.prototype, \"delay\", void 0);\r\n__decorate([\r\n    Validate(INTERACTION_RANGE),\r\n    __metadata(\"design:type\", Object)\r\n], Tooltip.prototype, \"range\", void 0);\n\nclass SeriesTooltipInteraction {\r\n    constructor() {\r\n        this.enabled = false;\r\n    }\r\n}\r\n__decorate([\r\n    Validate(BOOLEAN),\r\n    __metadata(\"design:type\", Object)\r\n], SeriesTooltipInteraction.prototype, \"enabled\", void 0);\r\nclass SeriesTooltip {\r\n    constructor() {\r\n        this.enabled = true;\r\n        this.showArrow = undefined;\r\n        this.format = undefined;\r\n        this.renderer = undefined;\r\n        this.interaction = new SeriesTooltipInteraction();\r\n        this.position = new TooltipPosition();\r\n    }\r\n    toTooltipHtml(defaults, params, overrides) {\r\n        var _a, _b;\r\n        const formatFn = (_a = overrides === null || overrides === void 0 ? void 0 : overrides.format) !== null && _a !== void 0 ? _a : this.format;\r\n        const rendererFn = (_b = overrides === null || overrides === void 0 ? void 0 : overrides.renderer) !== null && _b !== void 0 ? _b : this.renderer;\r\n        if (formatFn) {\r\n            return toTooltipHtml({ content: interpolate(formatFn, params) }, defaults);\r\n        }\r\n        if (rendererFn) {\r\n            return toTooltipHtml(rendererFn(params), defaults);\r\n        }\r\n        return toTooltipHtml(defaults);\r\n    }\r\n}\r\n__decorate([\r\n    Validate(BOOLEAN),\r\n    __metadata(\"design:type\", Object)\r\n], SeriesTooltip.prototype, \"enabled\", void 0);\r\n__decorate([\r\n    Validate(OPT_BOOLEAN),\r\n    __metadata(\"design:type\", Boolean)\r\n], SeriesTooltip.prototype, \"showArrow\", void 0);\r\n__decorate([\r\n    Validate(OPT_STRING),\r\n    __metadata(\"design:type\", String)\r\n], SeriesTooltip.prototype, \"format\", void 0);\r\n__decorate([\r\n    Validate(OPT_FUNCTION),\r\n    __metadata(\"design:type\", Function)\r\n], SeriesTooltip.prototype, \"renderer\", void 0);\n\nfunction preparePieSeriesAnimationFunctions(initialLoad, rotationDegrees, scaleFn, oldScaleFn) {\r\n    const scale = [scaleFn.convert(0), scaleFn.convert(1)];\r\n    const oldScale = [oldScaleFn.convert(0), oldScaleFn.convert(1)];\r\n    const rotation = Math.PI / -2 + toRadians(rotationDegrees);\r\n    const scaleToNewRadius = ({ radius }) => {\r\n        return { innerRadius: scale[0], outerRadius: scale[0] + (scale[1] - scale[0]) * radius };\r\n    };\r\n    const scaleToOldRadius = ({ radius }) => {\r\n        return { innerRadius: oldScale[0], outerRadius: oldScale[0] + (oldScale[1] - oldScale[0]) * radius };\r\n    };\r\n    const fromFn = (sect, datum, status, { prevFromProps }) => {\r\n        var _a, _b, _c, _d, _e, _f;\r\n        // Default to starting from current state.\r\n        let { startAngle, endAngle, innerRadius, outerRadius } = sect;\r\n        let { fill, stroke } = datum.sectorFormat;\r\n        if (status === 'unknown' || (status === 'added' && !prevFromProps)) {\r\n            // Start of animation (full new data) - sweep in.\r\n            startAngle = rotation;\r\n            endAngle = rotation;\r\n            innerRadius = datum.innerRadius;\r\n            outerRadius = datum.outerRadius;\r\n        }\r\n        else if (status === 'added' && prevFromProps) {\r\n            startAngle = (_a = prevFromProps.endAngle) !== null && _a !== void 0 ? _a : rotation;\r\n            endAngle = (_b = prevFromProps.endAngle) !== null && _b !== void 0 ? _b : rotation;\r\n            innerRadius = (_c = prevFromProps.innerRadius) !== null && _c !== void 0 ? _c : datum.innerRadius;\r\n            outerRadius = (_d = prevFromProps.outerRadius) !== null && _d !== void 0 ? _d : datum.outerRadius;\r\n        }\r\n        if (status === 'added' && !initialLoad) {\r\n            const radii = scaleToOldRadius(datum);\r\n            innerRadius = radii.innerRadius;\r\n            outerRadius = radii.outerRadius;\r\n        }\r\n        if (status === 'updated') {\r\n            fill = (_e = sect.fill) !== null && _e !== void 0 ? _e : fill;\r\n            stroke = (_f = sect.stroke) !== null && _f !== void 0 ? _f : stroke;\r\n        }\r\n        return { startAngle, endAngle, innerRadius, outerRadius, fill, stroke };\r\n    };\r\n    const toFn = (_sect, datum, status, { prevLive }) => {\r\n        var _a, _b;\r\n        // Default to moving to target state.\r\n        let { startAngle, endAngle, innerRadius, outerRadius } = datum;\r\n        const { stroke, fill } = datum.sectorFormat;\r\n        if (status === 'removed' && prevLive) {\r\n            startAngle = (_a = prevLive.datum) === null || _a === void 0 ? void 0 : _a.endAngle;\r\n            endAngle = (_b = prevLive.datum) === null || _b === void 0 ? void 0 : _b.endAngle;\r\n        }\r\n        else if (status === 'removed' && !prevLive) {\r\n            startAngle = rotation;\r\n            endAngle = rotation;\r\n        }\r\n        if (status === 'removed') {\r\n            const radii = scaleToNewRadius(datum);\r\n            innerRadius = radii.innerRadius;\r\n            outerRadius = radii.outerRadius;\r\n        }\r\n        return { startAngle, endAngle, outerRadius, innerRadius, stroke, fill };\r\n    };\r\n    const innerCircle = {\r\n        fromFn: (node, _datum) => {\r\n            var _a, _b, _c;\r\n            return { size: (_c = (_b = (_a = node.previousDatum) === null || _a === void 0 ? void 0 : _a.radius) !== null && _b !== void 0 ? _b : node.size) !== null && _c !== void 0 ? _c : 0 };\r\n        },\r\n        toFn: (_node, datum) => {\r\n            var _a;\r\n            return { size: (_a = datum.radius) !== null && _a !== void 0 ? _a : 0 };\r\n        },\r\n    };\r\n    return { nodes: { toFn, fromFn }, innerCircle };\r\n}\r\nfunction resetPieSelectionsFn(_node, datum) {\r\n    return {\r\n        startAngle: datum.startAngle,\r\n        endAngle: datum.endAngle,\r\n        innerRadius: datum.innerRadius,\r\n        outerRadius: datum.outerRadius,\r\n        fill: datum.sectorFormat.fill,\r\n        stroke: datum.sectorFormat.stroke,\r\n    };\r\n}\n\n/**\r\n * Implements a per-node reset.\r\n *\r\n * @param selections contains nodes to be reset\r\n * @param propsFn callback to determine per-node properties\r\n */\r\nfunction resetMotion(selectionsOrNodes, propsFn) {\r\n    const isNodes = isNodeArray(selectionsOrNodes);\r\n    const nodes = isNodes ? selectionsOrNodes : [];\r\n    const selections = !isNodes ? selectionsOrNodes : [];\r\n    for (const selection of selections) {\r\n        for (const node of selection.nodes()) {\r\n            const from = propsFn(node, node.datum);\r\n            node.setProperties(from);\r\n        }\r\n        selection.cleanup();\r\n    }\r\n    for (const node of nodes) {\r\n        const from = propsFn(node, node.datum);\r\n        node.setProperties(from);\r\n    }\r\n}\n\nvar resetMotion$1 = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    resetMotion: resetMotion\n});\n\nclass StateMachine {\r\n    constructor(initialState, states, preTransitionCb) {\r\n        this.states = states;\r\n        this.preTransitionCb = preTransitionCb;\r\n        this.debug = Debug.create(true, 'animation');\r\n        this.state = initialState;\r\n        this.debug(`%c${this.constructor.name} | init -> ${initialState}`, 'color: green');\r\n    }\r\n    transition(event, data) {\r\n        var _a, _b;\r\n        const currentStateConfig = this.states[this.state];\r\n        const destinationTransition = currentStateConfig === null || currentStateConfig === void 0 ? void 0 : currentStateConfig[event];\r\n        if (!destinationTransition) {\r\n            this.debug(`%c${this.constructor.name} | ${this.state} -> ${event} -> ${this.state}`, 'color: grey');\r\n            return;\r\n        }\r\n        let destinationState = this.state;\r\n        if (typeof destinationTransition === 'string') {\r\n            destinationState = destinationTransition;\r\n        }\r\n        else if (typeof destinationTransition === 'object') {\r\n            destinationState = destinationTransition.target;\r\n        }\r\n        this.debug(`%c${this.constructor.name} | ${this.state} -> ${event} -> ${destinationState}`, 'color: green');\r\n        (_a = this.preTransitionCb) === null || _a === void 0 ? void 0 : _a.call(this, this.state, destinationState);\r\n        // Change the state before calling the transition action to allow the action to trigger a subsequent transition\r\n        this.state = destinationState;\r\n        if (typeof destinationTransition === 'function') {\r\n            destinationTransition(data);\r\n        }\r\n        else if (typeof destinationTransition === 'object') {\r\n            (_b = destinationTransition.action) === null || _b === void 0 ? void 0 : _b.call(destinationTransition, data);\r\n        }\r\n        return this.state;\r\n    }\r\n}\n\nclass DataModelSeries extends Series {\r\n    isContinuous() {\r\n        var _a, _b;\r\n        const isContinuousX = ContinuousScale.is((_a = this.axes[ChartAxisDirection.X]) === null || _a === void 0 ? void 0 : _a.scale);\r\n        const isContinuousY = ContinuousScale.is((_b = this.axes[ChartAxisDirection.Y]) === null || _b === void 0 ? void 0 : _b.scale);\r\n        return { isContinuousX, isContinuousY };\r\n    }\r\n    // Request data, but with message dispatching to series-options (modules).\r\n    requestDataModel(dataController, data, opts) {\r\n        var _a;\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            // Merge properties of this series with properties of all the attached series-options\r\n            const props = opts.props;\r\n            const listenerProps = (_a = this.dispatch('data-prerequest', this.isContinuous())) !== null && _a !== void 0 ? _a : [];\r\n            for (const moreProps of listenerProps) {\r\n                props.push(...moreProps);\r\n            }\r\n            const { dataModel, processedData } = yield dataController.request(this.id, data !== null && data !== void 0 ? data : [], Object.assign(Object.assign({}, opts), { props }));\r\n            this.dataModel = dataModel;\r\n            this.processedData = processedData;\r\n            this.dispatch('data-processed', { dataModel, processedData });\r\n            return { dataModel, processedData };\r\n        });\r\n    }\r\n    isProcessedDataAnimatable() {\r\n        var _a, _b;\r\n        const validationResults = (_b = (_a = this.processedData) === null || _a === void 0 ? void 0 : _a.reduced) === null || _b === void 0 ? void 0 : _b.animationValidation;\r\n        if (!validationResults)\r\n            return true;\r\n        const { orderedKeys, uniqueKeys } = validationResults;\r\n        return !!orderedKeys && !!uniqueKeys;\r\n    }\r\n    checkProcessedDataAnimatable() {\r\n        if (!this.isProcessedDataAnimatable()) {\r\n            this.ctx.animationManager.skipCurrentBatch();\r\n        }\r\n    }\r\n}\n\nclass PolarSeries extends DataModelSeries {\r\n    constructor(_a) {\r\n        var { useLabelLayer = false, pickModes = [SeriesNodePickMode.EXACT_SHAPE_MATCH], canHaveAxes = false, animationResetFns } = _a, opts = __rest(_a, [\"useLabelLayer\", \"pickModes\", \"canHaveAxes\", \"animationResetFns\"]);\r\n        super(Object.assign(Object.assign({}, opts), { useLabelLayer,\r\n            pickModes, contentGroupVirtual: false, directionKeys: {\r\n                [ChartAxisDirection.X]: ['angleKey'],\r\n                [ChartAxisDirection.Y]: ['radiusKey'],\r\n            }, directionNames: {\r\n                [ChartAxisDirection.X]: ['angleName'],\r\n                [ChartAxisDirection.Y]: ['radiusName'],\r\n            }, canHaveAxes }));\r\n        this.sectorGroup = this.contentGroup.appendChild(new Group());\r\n        this.itemSelection = Selection.select(this.sectorGroup, () => this.nodeFactory(), false);\r\n        this.labelSelection = Selection.select(this.labelGroup, Text, false);\r\n        this.highlightSelection = Selection.select(this.highlightGroup, () => this.nodeFactory());\r\n        /**\r\n         * The center of the polar series (for example, the center of a pie).\r\n         * If the polar chart has multiple series, all of them will have their\r\n         * center set to the same value as a result of the polar chart layout.\r\n         * The center coordinates are not supposed to be set by the user.\r\n         */\r\n        this.centerX = 0;\r\n        this.centerY = 0;\r\n        /**\r\n         * The maximum radius the series can use.\r\n         * This value is set automatically as a result of the polar chart layout\r\n         * and is not supposed to be set by the user.\r\n         */\r\n        this.radius = 0;\r\n        this.sectorGroup.zIndexSubOrder = [() => this._declarationOrder, 1];\r\n        this.animationResetFns = animationResetFns;\r\n        this.animationState = new StateMachine('empty', {\r\n            empty: {\r\n                update: {\r\n                    target: 'ready',\r\n                    action: (data) => this.animateEmptyUpdateReady(data),\r\n                },\r\n            },\r\n            ready: {\r\n                updateData: 'waiting',\r\n                clear: 'clearing',\r\n                highlight: (data) => this.animateReadyHighlight(data),\r\n                highlightMarkers: (data) => this.animateReadyHighlightMarkers(data),\r\n                resize: (data) => this.animateReadyResize(data),\r\n            },\r\n            waiting: {\r\n                update: {\r\n                    target: 'ready',\r\n                    action: (data) => this.animateWaitingUpdateReady(data),\r\n                },\r\n            },\r\n            clearing: {\r\n                update: {\r\n                    target: 'empty',\r\n                    action: (data) => this.animateClearingUpdateEmpty(data),\r\n                },\r\n            },\r\n        }, () => this.checkProcessedDataAnimatable());\r\n    }\r\n    getLabelData() {\r\n        return [];\r\n    }\r\n    computeLabelsBBox(_options, _seriesRect) {\r\n        return null;\r\n    }\r\n    resetAllAnimation() {\r\n        var _a;\r\n        const { item, label } = (_a = this.animationResetFns) !== null && _a !== void 0 ? _a : {};\r\n        this.ctx.animationManager.stopByAnimationGroupId(this.id);\r\n        if (item) {\r\n            resetMotion([this.itemSelection, this.highlightSelection], item);\r\n        }\r\n        if (label) {\r\n            resetMotion([this.labelSelection], label);\r\n        }\r\n        this.itemSelection.cleanup();\r\n        this.labelSelection.cleanup();\r\n        this.highlightSelection.cleanup();\r\n    }\r\n    animateEmptyUpdateReady(_data) {\r\n        this.ctx.animationManager.skipCurrentBatch();\r\n        this.resetAllAnimation();\r\n    }\r\n    animateWaitingUpdateReady(_data) {\r\n        this.ctx.animationManager.skipCurrentBatch();\r\n        this.resetAllAnimation();\r\n    }\r\n    animateReadyHighlight(_data) {\r\n        var _a;\r\n        const { item } = (_a = this.animationResetFns) !== null && _a !== void 0 ? _a : {};\r\n        if (item) {\r\n            resetMotion([this.highlightSelection], item);\r\n        }\r\n    }\r\n    animateReadyHighlightMarkers(_data) {\r\n        // Override point for sub-classes.\r\n    }\r\n    animateReadyResize(_data) {\r\n        this.resetAllAnimation();\r\n    }\r\n    animateClearingUpdateEmpty(_data) {\r\n        this.ctx.animationManager.skipCurrentBatch();\r\n        this.resetAllAnimation();\r\n    }\r\n    animationTransitionClear() {\r\n        this.animationState.transition('clear', this.getAnimationData());\r\n    }\r\n    getAnimationData(seriesRect) {\r\n        return { seriesRect };\r\n    }\r\n}\n\nclass PieSeriesNodeClickEvent extends SeriesNodeClickEvent {\r\n    constructor(type, nativeEvent, datum, series) {\r\n        super(type, nativeEvent, datum, series);\r\n        this.angleKey = series.angleKey;\r\n        this.radiusKey = series.radiusKey;\r\n        this.calloutLabelKey = series.calloutLabelKey;\r\n        this.sectorLabelKey = series.sectorLabelKey;\r\n    }\r\n}\r\nvar PieNodeTag;\r\n(function (PieNodeTag) {\r\n    PieNodeTag[PieNodeTag[\"Sector\"] = 0] = \"Sector\";\r\n    PieNodeTag[PieNodeTag[\"Callout\"] = 1] = \"Callout\";\r\n    PieNodeTag[PieNodeTag[\"Label\"] = 2] = \"Label\";\r\n})(PieNodeTag || (PieNodeTag = {}));\r\nclass PieSeriesCalloutLabel extends Label {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.offset = 3; // from the callout line\r\n        this.minAngle = 0; // in degrees\r\n        this.minSpacing = 4;\r\n        this.maxCollisionOffset = 50;\r\n        this.avoidCollisions = true;\r\n    }\r\n}\r\n__decorate([\r\n    Validate(NUMBER$1(0)),\r\n    __metadata(\"design:type\", Object)\r\n], PieSeriesCalloutLabel.prototype, \"offset\", void 0);\r\n__decorate([\r\n    Validate(NUMBER$1(0)),\r\n    __metadata(\"design:type\", Object)\r\n], PieSeriesCalloutLabel.prototype, \"minAngle\", void 0);\r\n__decorate([\r\n    Validate(NUMBER$1(0)),\r\n    __metadata(\"design:type\", Object)\r\n], PieSeriesCalloutLabel.prototype, \"minSpacing\", void 0);\r\n__decorate([\r\n    Validate(NUMBER$1(0)),\r\n    __metadata(\"design:type\", Object)\r\n], PieSeriesCalloutLabel.prototype, \"maxCollisionOffset\", void 0);\r\n__decorate([\r\n    Validate(BOOLEAN),\r\n    __metadata(\"design:type\", Object)\r\n], PieSeriesCalloutLabel.prototype, \"avoidCollisions\", void 0);\r\nclass PieSeriesSectorLabel extends Label {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.positionOffset = 0;\r\n        this.positionRatio = 0.5;\r\n    }\r\n}\r\n__decorate([\r\n    Validate(NUMBER$1()),\r\n    __metadata(\"design:type\", Object)\r\n], PieSeriesSectorLabel.prototype, \"positionOffset\", void 0);\r\n__decorate([\r\n    Validate(NUMBER$1(0, 1)),\r\n    __metadata(\"design:type\", Object)\r\n], PieSeriesSectorLabel.prototype, \"positionRatio\", void 0);\r\nclass PieSeriesCalloutLine {\r\n    constructor() {\r\n        this.length = 10;\r\n        this.strokeWidth = 1;\r\n    }\r\n}\r\n__decorate([\r\n    Validate(OPT_COLOR_STRING_ARRAY),\r\n    __metadata(\"design:type\", Array)\r\n], PieSeriesCalloutLine.prototype, \"colors\", void 0);\r\n__decorate([\r\n    Validate(NUMBER$1(0)),\r\n    __metadata(\"design:type\", Number)\r\n], PieSeriesCalloutLine.prototype, \"length\", void 0);\r\n__decorate([\r\n    Validate(NUMBER$1(0)),\r\n    __metadata(\"design:type\", Number)\r\n], PieSeriesCalloutLine.prototype, \"strokeWidth\", void 0);\r\nclass PieTitle extends Caption {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.showInLegend = false;\r\n    }\r\n}\r\n__decorate([\r\n    Validate(BOOLEAN),\r\n    __metadata(\"design:type\", Object)\r\n], PieTitle.prototype, \"showInLegend\", void 0);\r\nclass DoughnutInnerLabel extends Label {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.text = '';\r\n        this.margin = 2;\r\n    }\r\n}\r\n__decorate([\r\n    Validate(STRING),\r\n    __metadata(\"design:type\", Object)\r\n], DoughnutInnerLabel.prototype, \"text\", void 0);\r\n__decorate([\r\n    Validate(NUMBER$1()),\r\n    __metadata(\"design:type\", Object)\r\n], DoughnutInnerLabel.prototype, \"margin\", void 0);\r\nclass DoughnutInnerCircle {\r\n    constructor() {\r\n        this.fill = 'transparent';\r\n        this.fillOpacity = 1;\r\n    }\r\n}\r\n__decorate([\r\n    Validate(COLOR_STRING),\r\n    __metadata(\"design:type\", Object)\r\n], DoughnutInnerCircle.prototype, \"fill\", void 0);\r\n__decorate([\r\n    Validate(OPT_NUMBER(0, 1)),\r\n    __metadata(\"design:type\", Object)\r\n], DoughnutInnerCircle.prototype, \"fillOpacity\", void 0);\r\nclass PieSeries extends PolarSeries {\r\n    constructor(moduleCtx) {\r\n        super({\r\n            moduleCtx,\r\n            useLabelLayer: true,\r\n            animationResetFns: { item: resetPieSelectionsFn, label: resetLabelFn },\r\n        });\r\n        this.previousRadiusScale = new LinearScale();\r\n        this.radiusScale = new LinearScale();\r\n        // The group node that contains the background graphics.\r\n        this.backgroundGroup = this.rootGroup.appendChild(new Group({\r\n            name: `${this.id}-background`,\r\n            layer: true,\r\n            zIndex: Layers.SERIES_BACKGROUND_ZINDEX,\r\n        }));\r\n        this.innertCircleGroup = this.backgroundGroup.appendChild(new Group({ name: `${this.id}-innerCircle` }));\r\n        this.nodeData = [];\r\n        // When a user toggles a series item (e.g. from the legend), its boolean state is recorded here.\r\n        this.seriesItemEnabled = [];\r\n        this.title = undefined;\r\n        this.calloutLabel = new PieSeriesCalloutLabel();\r\n        this.sectorLabel = new PieSeriesSectorLabel();\r\n        this.calloutLine = new PieSeriesCalloutLine();\r\n        this.tooltip = new SeriesTooltip();\r\n        /**\r\n         * The key of the numeric field to use to determine the angle (for example,\r\n         * a pie sector angle).\r\n         */\r\n        this.angleKey = '';\r\n        this.angleName = '';\r\n        this.innerLabels = [];\r\n        this.innerCircle = undefined;\r\n        /**\r\n         * The key of the numeric field to use to determine the radii of pie sectors.\r\n         * The largest value will correspond to the full radius and smaller values to\r\n         * proportionally smaller radii.\r\n         */\r\n        this.radiusKey = undefined;\r\n        this.radiusName = undefined;\r\n        this.radiusMin = undefined;\r\n        this.radiusMax = undefined;\r\n        this.calloutLabelKey = undefined;\r\n        this.calloutLabelName = undefined;\r\n        this.sectorLabelKey = undefined;\r\n        this.sectorLabelName = undefined;\r\n        this.legendItemKey = undefined;\r\n        this.fills = Object.values(DEFAULT_FILLS);\r\n        this.strokes = Object.values(DEFAULT_STROKES);\r\n        this.fillOpacity = 1;\r\n        this.strokeOpacity = 1;\r\n        this.lineDash = [0];\r\n        this.lineDashOffset = 0;\r\n        this.formatter = undefined;\r\n        /**\r\n         * The series rotation in degrees.\r\n         */\r\n        this.rotation = 0;\r\n        this.outerRadiusOffset = 0;\r\n        this.outerRadiusRatio = 1;\r\n        this.innerRadiusOffset = 0;\r\n        this.innerRadiusRatio = 1;\r\n        this.strokeWidth = 1;\r\n        this.shadow = undefined;\r\n        this.highlightStyle = new HighlightStyle();\r\n        this.surroundingRadius = undefined;\r\n        this.NodeClickEvent = PieSeriesNodeClickEvent;\r\n        this.angleScale = new LinearScale();\r\n        // Each sector is a ratio of the whole, where all ratios add up to 1.\r\n        this.angleScale.domain = [0, 1];\r\n        // Add 90 deg to start the first pie at 12 o'clock.\r\n        this.angleScale.range = [-Math.PI, Math.PI].map((angle) => angle + Math.PI / 2);\r\n        const pieCalloutLabels = new Group({ name: 'pieCalloutLabels' });\r\n        const pieSectorLabels = new Group({ name: 'pieSectorLabels' });\r\n        const innerLabels = new Group({ name: 'innerLabels' });\r\n        this.labelGroup.append(pieCalloutLabels);\r\n        this.labelGroup.append(pieSectorLabels);\r\n        this.labelGroup.append(innerLabels);\r\n        this.calloutLabelSelection = Selection.select(pieCalloutLabels, Group);\r\n        this.sectorLabelSelection = Selection.select(pieSectorLabels, Text);\r\n        this.innerLabelsSelection = Selection.select(innerLabels, Text);\r\n        this.innerCircleSelection = Selection.select(this.innertCircleGroup, Circle);\r\n    }\r\n    addChartEventListeners() {\r\n        var _a;\r\n        (_a = this.ctx.chartEventManager) === null || _a === void 0 ? void 0 : _a.addListener('legend-item-click', (event) => this.onLegendItemClick(event));\r\n    }\r\n    visibleChanged() {\r\n        this.processSeriesItemEnabled();\r\n    }\r\n    processSeriesItemEnabled() {\r\n        var _a;\r\n        const { data, visible } = this;\r\n        this.seriesItemEnabled = (_a = data === null || data === void 0 ? void 0 : data.map(() => visible)) !== null && _a !== void 0 ? _a : [];\r\n    }\r\n    nodeFactory() {\r\n        return new Sector();\r\n    }\r\n    getSeriesDomain(direction) {\r\n        if (direction === ChartAxisDirection.X) {\r\n            return this.angleScale.domain;\r\n        }\r\n        else {\r\n            return this.radiusScale.domain;\r\n        }\r\n    }\r\n    processData(dataController) {\r\n        var _a, _b;\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let { data } = this;\r\n            const { angleKey, radiusKey, calloutLabelKey, sectorLabelKey, legendItemKey, seriesItemEnabled } = this;\r\n            if (angleKey == null || data == null)\r\n                return;\r\n            const animationEnabled = !this.ctx.animationManager.isSkipped();\r\n            const extraKeyProps = [];\r\n            const extraProps = [];\r\n            // Order here should match `getDatumIdFromData()`.\r\n            if (legendItemKey) {\r\n                extraKeyProps.push(keyProperty(this, legendItemKey, false, { id: `legendItemKey` }));\r\n            }\r\n            else if (calloutLabelKey) {\r\n                extraKeyProps.push(keyProperty(this, calloutLabelKey, false, { id: `calloutLabelKey` }));\r\n            }\r\n            else if (sectorLabelKey) {\r\n                extraKeyProps.push(keyProperty(this, sectorLabelKey, false, { id: `sectorLabelKey` }));\r\n            }\r\n            if (radiusKey) {\r\n                extraProps.push(rangedValueProperty(this, radiusKey, {\r\n                    id: 'radiusValue',\r\n                    min: (_a = this.radiusMin) !== null && _a !== void 0 ? _a : 0,\r\n                    max: this.radiusMax,\r\n                }), valueProperty(this, radiusKey, true, { id: `radiusRaw` }), // Raw value pass-through.\r\n                normalisePropertyTo(this, { id: 'radiusValue' }, [0, 1], 1, (_b = this.radiusMin) !== null && _b !== void 0 ? _b : 0, this.radiusMax));\r\n            }\r\n            if (calloutLabelKey) {\r\n                extraProps.push(valueProperty(this, calloutLabelKey, false, { id: `calloutLabelValue` }));\r\n            }\r\n            if (sectorLabelKey) {\r\n                extraProps.push(valueProperty(this, sectorLabelKey, false, { id: `sectorLabelValue` }));\r\n            }\r\n            if (legendItemKey) {\r\n                extraProps.push(valueProperty(this, legendItemKey, false, { id: `legendItemValue` }));\r\n            }\r\n            if (animationEnabled && this.processedData && extraKeyProps.length > 0) {\r\n                extraProps.push(diff(this.processedData));\r\n            }\r\n            extraProps.push(animationValidation(this));\r\n            data = data.map((d, idx) => (seriesItemEnabled[idx] ? d : Object.assign(Object.assign({}, d), { [angleKey]: 0 })));\r\n            yield this.requestDataModel(dataController, data, {\r\n                props: [\r\n                    ...extraKeyProps,\r\n                    accumulativeValueProperty(this, angleKey, true, { id: `angleValue`, onlyPositive: true }),\r\n                    valueProperty(this, angleKey, true, { id: `angleRaw` }),\r\n                    normalisePropertyTo(this, { id: 'angleValue' }, [0, 1], 0, 0),\r\n                    ...extraProps,\r\n                ],\r\n            });\r\n            this.animationState.transition('updateData');\r\n        });\r\n    }\r\n    maybeRefreshNodeData() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (!this.nodeDataRefresh)\r\n                return;\r\n            const [{ nodeData = [] } = {}] = yield this.createNodeData();\r\n            this.nodeData = nodeData;\r\n            this.nodeDataRefresh = false;\r\n        });\r\n    }\r\n    getProcessedDataIndexes(dataModel) {\r\n        const angleIdx = dataModel.resolveProcessedDataIndexById(this, `angleValue`).index;\r\n        const radiusIdx = this.radiusKey ? dataModel.resolveProcessedDataIndexById(this, `radiusValue`).index : -1;\r\n        const calloutLabelIdx = this.calloutLabelKey\r\n            ? dataModel.resolveProcessedDataIndexById(this, `calloutLabelValue`).index\r\n            : -1;\r\n        const sectorLabelIdx = this.sectorLabelKey\r\n            ? dataModel.resolveProcessedDataIndexById(this, `sectorLabelValue`).index\r\n            : -1;\r\n        const legendItemIdx = this.legendItemKey\r\n            ? dataModel.resolveProcessedDataIndexById(this, `legendItemValue`).index\r\n            : -1;\r\n        return { angleIdx, radiusIdx, calloutLabelIdx, sectorLabelIdx, legendItemIdx };\r\n    }\r\n    createNodeData() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const { id: seriesId, processedData, dataModel, rotation, angleScale } = this;\r\n            if (!processedData || !dataModel || processedData.type !== 'ungrouped')\r\n                return [];\r\n            const { angleIdx, radiusIdx, calloutLabelIdx, sectorLabelIdx, legendItemIdx } = this.getProcessedDataIndexes(dataModel);\r\n            let currentStart = 0;\r\n            const nodeData = processedData.data.map((group, index) => {\r\n                var _a;\r\n                const { datum, values } = group;\r\n                const currentValue = values[angleIdx];\r\n                const startAngle = angleScale.convert(currentStart) + toRadians(rotation);\r\n                currentStart = currentValue;\r\n                const endAngle = angleScale.convert(currentStart) + toRadians(rotation);\r\n                const span = Math.abs(endAngle - startAngle);\r\n                const midAngle = startAngle + span / 2;\r\n                const angleValue = values[angleIdx + 1];\r\n                const radius = radiusIdx >= 0 ? (_a = values[radiusIdx]) !== null && _a !== void 0 ? _a : 1 : 1;\r\n                const radiusValue = radiusIdx >= 0 ? values[radiusIdx + 1] : undefined;\r\n                const legendItemValue = legendItemIdx >= 0 ? values[legendItemIdx] : undefined;\r\n                const labels = this.getLabels(datum, midAngle, span, true, values[calloutLabelIdx], values[sectorLabelIdx], legendItemValue);\r\n                const sectorFormat = this.getSectorFormat(datum, index, false);\r\n                return Object.assign({ itemId: index, series: this, datum,\r\n                    index,\r\n                    angleValue,\r\n                    midAngle, midCos: Math.cos(midAngle), midSin: Math.sin(midAngle), startAngle,\r\n                    endAngle,\r\n                    sectorFormat,\r\n                    radiusValue,\r\n                    radius, innerRadius: Math.max(this.radiusScale.convert(0), 0), outerRadius: Math.max(this.radiusScale.convert(radius), 0), legendItemValue }, labels);\r\n            });\r\n            return [{ itemId: seriesId, nodeData, labelData: nodeData }];\r\n        });\r\n    }\r\n    getLabels(datum, midAngle, span, skipDisabled, calloutLabelValue, sectorLabelValue, legendItemValue) {\r\n        const { calloutLabel, sectorLabel, legendItemKey } = this;\r\n        const calloutLabelKey = !skipDisabled || calloutLabel.enabled ? this.calloutLabelKey : undefined;\r\n        const sectorLabelKey = !skipDisabled || sectorLabel.enabled ? this.sectorLabelKey : undefined;\r\n        if (!calloutLabelKey && !sectorLabelKey && !legendItemKey) {\r\n            return {};\r\n        }\r\n        const labelFormatterParams = {\r\n            datum,\r\n            angleKey: this.angleKey,\r\n            angleName: this.angleName,\r\n            radiusKey: this.radiusKey,\r\n            radiusName: this.radiusName,\r\n            calloutLabelKey: this.calloutLabelKey,\r\n            calloutLabelName: this.calloutLabelName,\r\n            sectorLabelKey: this.sectorLabelKey,\r\n            sectorLabelName: this.sectorLabelName,\r\n            legendItemKey: this.legendItemKey,\r\n        };\r\n        const result = {};\r\n        if (calloutLabelKey && span > toRadians(calloutLabel.minAngle)) {\r\n            result.calloutLabel = Object.assign(Object.assign({}, this.getTextAlignment(midAngle)), { text: this.getLabelText(calloutLabel, Object.assign(Object.assign({}, labelFormatterParams), { value: calloutLabelValue })), hidden: false, collisionTextAlign: undefined, collisionOffsetY: 0, box: undefined });\r\n        }\r\n        if (sectorLabelKey) {\r\n            result.sectorLabel = {\r\n                text: this.getLabelText(sectorLabel, Object.assign(Object.assign({}, labelFormatterParams), { value: sectorLabelValue })),\r\n            };\r\n        }\r\n        if (legendItemKey != null && legendItemValue != null) {\r\n            result.legendItem = { key: legendItemKey, text: legendItemValue };\r\n        }\r\n        return result;\r\n    }\r\n    getTextAlignment(midAngle) {\r\n        const quadrantTextOpts = [\r\n            { textAlign: 'center', textBaseline: 'bottom' },\r\n            { textAlign: 'left', textBaseline: 'middle' },\r\n            { textAlign: 'center', textBaseline: 'hanging' },\r\n            { textAlign: 'right', textBaseline: 'middle' },\r\n        ];\r\n        const midAngle180 = normalizeAngle180(midAngle);\r\n        // Split the circle into quadrants like so: ⊗\r\n        const quadrantStart = (-3 * Math.PI) / 4; // same as `normalizeAngle180(toRadians(-135))`\r\n        const quadrantOffset = midAngle180 - quadrantStart;\r\n        const quadrant = Math.floor(quadrantOffset / (Math.PI / 2));\r\n        const quadrantIndex = mod(quadrant, quadrantTextOpts.length);\r\n        return quadrantTextOpts[quadrantIndex];\r\n    }\r\n    getSectorFormat(datum, formatIndex, highlight) {\r\n        var _a, _b, _c, _d, _e;\r\n        const { angleKey, radiusKey, fills, strokes, formatter, id: seriesId, ctx: { callbackCache, highlightManager }, } = this;\r\n        const highlightedDatum = highlightManager.getActiveHighlight();\r\n        const isDatumHighlighted = highlight && (highlightedDatum === null || highlightedDatum === void 0 ? void 0 : highlightedDatum.series) === this && formatIndex === highlightedDatum.itemId;\r\n        const { fill, fillOpacity, stroke, strokeWidth, strokeOpacity } = mergeDefaults(isDatumHighlighted && this.highlightStyle.item, {\r\n            fill: fills[formatIndex % fills.length],\r\n            fillOpacity: this.fillOpacity,\r\n            stroke: strokes[formatIndex % strokes.length],\r\n            strokeWidth: this.getStrokeWidth(this.strokeWidth),\r\n            strokeOpacity: this.getOpacity(),\r\n        });\r\n        let format;\r\n        if (formatter) {\r\n            format = callbackCache.call(formatter, {\r\n                datum,\r\n                angleKey,\r\n                radiusKey,\r\n                fill,\r\n                stroke,\r\n                fills,\r\n                strokes,\r\n                strokeWidth,\r\n                highlighted: isDatumHighlighted,\r\n                seriesId,\r\n            });\r\n        }\r\n        return {\r\n            fill: (_a = format === null || format === void 0 ? void 0 : format.fill) !== null && _a !== void 0 ? _a : fill,\r\n            fillOpacity: (_b = format === null || format === void 0 ? void 0 : format.fillOpacity) !== null && _b !== void 0 ? _b : fillOpacity,\r\n            stroke: (_c = format === null || format === void 0 ? void 0 : format.stroke) !== null && _c !== void 0 ? _c : stroke,\r\n            strokeWidth: (_d = format === null || format === void 0 ? void 0 : format.strokeWidth) !== null && _d !== void 0 ? _d : strokeWidth,\r\n            strokeOpacity: (_e = format === null || format === void 0 ? void 0 : format.strokeOpacity) !== null && _e !== void 0 ? _e : strokeOpacity,\r\n        };\r\n    }\r\n    getInnerRadius() {\r\n        const { radius, innerRadiusRatio, innerRadiusOffset } = this;\r\n        const innerRadius = radius * innerRadiusRatio + innerRadiusOffset;\r\n        if (innerRadius === radius || innerRadius < 0) {\r\n            return 0;\r\n        }\r\n        return innerRadius;\r\n    }\r\n    getOuterRadius() {\r\n        return Math.max(this.radius * this.outerRadiusRatio + this.outerRadiusOffset, 0);\r\n    }\r\n    updateRadiusScale(resize) {\r\n        const newRange = [this.getInnerRadius(), this.getOuterRadius()];\r\n        this.radiusScale.range = newRange;\r\n        if (resize) {\r\n            this.previousRadiusScale.range = newRange;\r\n        }\r\n        this.nodeData = this.nodeData.map((_a) => {\r\n            var { radius } = _a, d = __rest(_a, [\"radius\"]);\r\n            return Object.assign(Object.assign({}, d), { radius, innerRadius: Math.max(this.radiusScale.convert(0), 0), outerRadius: Math.max(this.radiusScale.convert(radius), 0) });\r\n        });\r\n    }\r\n    getTitleTranslationY() {\r\n        var _a, _b;\r\n        const outerRadius = Math.max(0, this.radiusScale.range[1]);\r\n        if (outerRadius === 0) {\r\n            return NaN;\r\n        }\r\n        const spacing = (_b = (_a = this.title) === null || _a === void 0 ? void 0 : _a.spacing) !== null && _b !== void 0 ? _b : 0;\r\n        const titleOffset = 2 + spacing;\r\n        const dy = Math.max(0, -outerRadius);\r\n        return -outerRadius - titleOffset - dy;\r\n    }\r\n    update({ seriesRect }) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const { title } = this;\r\n            const newNodeDataDependencies = {\r\n                seriesRectWidth: seriesRect === null || seriesRect === void 0 ? void 0 : seriesRect.width,\r\n                seriesRectHeight: seriesRect === null || seriesRect === void 0 ? void 0 : seriesRect.height,\r\n            };\r\n            const resize = jsonDiff(this.nodeDataDependencies, newNodeDataDependencies) != null;\r\n            if (resize) {\r\n                this.nodeDataDependencies = newNodeDataDependencies;\r\n            }\r\n            yield this.maybeRefreshNodeData();\r\n            this.updateTitleNodes();\r\n            this.updateRadiusScale(resize);\r\n            this.contentGroup.translationX = this.centerX;\r\n            this.contentGroup.translationY = this.centerY;\r\n            this.highlightGroup.translationX = this.centerX;\r\n            this.highlightGroup.translationY = this.centerY;\r\n            this.backgroundGroup.translationX = this.centerX;\r\n            this.backgroundGroup.translationY = this.centerY;\r\n            if (this.labelGroup) {\r\n                this.labelGroup.translationX = this.centerX;\r\n                this.labelGroup.translationY = this.centerY;\r\n            }\r\n            if (title) {\r\n                const dy = this.getTitleTranslationY();\r\n                const titleBox = title.node.computeBBox();\r\n                title.node.visible =\r\n                    title.enabled && isFinite(dy) && !this.bboxIntersectsSurroundingSeries(titleBox, 0, dy);\r\n                title.node.translationY = isFinite(dy) ? dy : 0;\r\n            }\r\n            this.updateNodeMidPoint();\r\n            yield this.updateSelections();\r\n            yield this.updateNodes(seriesRect);\r\n        });\r\n    }\r\n    updateTitleNodes() {\r\n        var _a, _b;\r\n        const { title, oldTitle } = this;\r\n        if (oldTitle !== title) {\r\n            if (oldTitle) {\r\n                (_a = this.labelGroup) === null || _a === void 0 ? void 0 : _a.removeChild(oldTitle.node);\r\n            }\r\n            if (title) {\r\n                title.node.textBaseline = 'bottom';\r\n                (_b = this.labelGroup) === null || _b === void 0 ? void 0 : _b.appendChild(title.node);\r\n            }\r\n            this.oldTitle = title;\r\n        }\r\n    }\r\n    updateNodeMidPoint() {\r\n        this.nodeData.forEach((d) => {\r\n            const radius = d.innerRadius + (d.outerRadius - d.innerRadius) / 2;\r\n            d.midPoint = {\r\n                x: d.midCos * Math.max(0, radius),\r\n                y: d.midSin * Math.max(0, radius),\r\n            };\r\n        });\r\n    }\r\n    updateSelections() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            yield this.updateGroupSelection();\r\n            this.updateInnerCircleSelection();\r\n        });\r\n    }\r\n    updateGroupSelection() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const { itemSelection, highlightSelection, calloutLabelSelection, sectorLabelSelection, innerLabelsSelection } = this;\r\n            const update = (selection, clone) => {\r\n                let nodeData = this.nodeData;\r\n                if (clone) {\r\n                    // Allow mutable sectorFormat, so formatted sector styles can be updated and varied\r\n                    // between normal and highlighted cases.\r\n                    nodeData = nodeData.map((datum) => (Object.assign(Object.assign({}, datum), { sectorFormat: Object.assign({}, datum.sectorFormat) })));\r\n                }\r\n                selection.update(nodeData);\r\n                if (this.ctx.animationManager.isSkipped()) {\r\n                    selection.cleanup();\r\n                }\r\n            };\r\n            update(itemSelection, false);\r\n            update(highlightSelection, true);\r\n            calloutLabelSelection.update(this.nodeData, (group) => {\r\n                const line = new Line();\r\n                line.tag = PieNodeTag.Callout;\r\n                line.pointerEvents = PointerEvents.None;\r\n                group.appendChild(line);\r\n                const text = new Text();\r\n                text.tag = PieNodeTag.Label;\r\n                text.pointerEvents = PointerEvents.None;\r\n                group.appendChild(text);\r\n            });\r\n            sectorLabelSelection.update(this.nodeData, (node) => {\r\n                node.pointerEvents = PointerEvents.None;\r\n            });\r\n            innerLabelsSelection.update(this.innerLabels, (node) => {\r\n                node.pointerEvents = PointerEvents.None;\r\n            });\r\n        });\r\n    }\r\n    updateInnerCircleSelection() {\r\n        const { innerCircle } = this;\r\n        let radius = 0;\r\n        const innerRadius = this.getInnerRadius();\r\n        if (innerRadius > 0) {\r\n            const circleRadius = Math.min(innerRadius, this.getOuterRadius());\r\n            const antiAliasingPadding = 1;\r\n            radius = Math.ceil(circleRadius * 2 + antiAliasingPadding);\r\n        }\r\n        const datums = innerCircle ? [{ radius }] : [];\r\n        this.innerCircleSelection.update(datums);\r\n    }\r\n    updateNodes(seriesRect) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const highlightedDatum = this.ctx.highlightManager.getActiveHighlight();\r\n            const isVisible = this.seriesItemEnabled.indexOf(true) >= 0;\r\n            this.rootGroup.visible = isVisible;\r\n            this.backgroundGroup.visible = isVisible;\r\n            this.contentGroup.visible = isVisible;\r\n            this.highlightGroup.visible = isVisible && (highlightedDatum === null || highlightedDatum === void 0 ? void 0 : highlightedDatum.series) === this;\r\n            if (this.labelGroup) {\r\n                this.labelGroup.visible = isVisible;\r\n            }\r\n            this.contentGroup.opacity = this.getOpacity();\r\n            this.innerCircleSelection.each((node, { radius }) => {\r\n                var _a, _b;\r\n                node.setProperties({\r\n                    fill: (_a = this.innerCircle) === null || _a === void 0 ? void 0 : _a.fill,\r\n                    opacity: (_b = this.innerCircle) === null || _b === void 0 ? void 0 : _b.fillOpacity,\r\n                    size: radius,\r\n                });\r\n            });\r\n            const updateSectorFn = (sector, datum, _index, isDatumHighlighted) => {\r\n                const format = this.getSectorFormat(datum.datum, datum.itemId, isDatumHighlighted);\r\n                datum.sectorFormat.fill = format.fill;\r\n                datum.sectorFormat.stroke = format.stroke;\r\n                const animationDisabled = this.ctx.animationManager.isSkipped();\r\n                if (animationDisabled) {\r\n                    sector.startAngle = datum.startAngle;\r\n                    sector.endAngle = datum.endAngle;\r\n                    sector.innerRadius = datum.innerRadius;\r\n                    sector.outerRadius = datum.outerRadius;\r\n                }\r\n                if (isDatumHighlighted || animationDisabled) {\r\n                    sector.fill = format.fill;\r\n                    sector.stroke = format.stroke;\r\n                }\r\n                sector.strokeWidth = format.strokeWidth;\r\n                sector.fillOpacity = format.fillOpacity;\r\n                sector.strokeOpacity = this.strokeOpacity;\r\n                sector.lineDash = this.lineDash;\r\n                sector.lineDashOffset = this.lineDashOffset;\r\n                sector.fillShadow = this.shadow;\r\n                sector.lineJoin = 'round';\r\n            };\r\n            this.itemSelection.each((node, datum, index) => updateSectorFn(node, datum, index, false));\r\n            this.highlightSelection.each((node, datum, index) => {\r\n                const isDatumHighlighted = (highlightedDatum === null || highlightedDatum === void 0 ? void 0 : highlightedDatum.series) === this && node.datum.itemId === highlightedDatum.itemId;\r\n                updateSectorFn(node, datum, index, isDatumHighlighted);\r\n                node.visible = isDatumHighlighted;\r\n            });\r\n            this.updateCalloutLineNodes();\r\n            this.updateCalloutLabelNodes(seriesRect);\r\n            this.updateSectorLabelNodes();\r\n            this.updateInnerLabelNodes();\r\n            this.animationState.transition('update');\r\n        });\r\n    }\r\n    updateCalloutLineNodes() {\r\n        var _a;\r\n        const { calloutLine } = this;\r\n        const calloutLength = calloutLine.length;\r\n        const calloutStrokeWidth = calloutLine.strokeWidth;\r\n        const calloutColors = (_a = calloutLine.colors) !== null && _a !== void 0 ? _a : this.strokes;\r\n        const { offset } = this.calloutLabel;\r\n        this.calloutLabelSelection.selectByTag(PieNodeTag.Callout).forEach((line, index) => {\r\n            const datum = line.datum;\r\n            const { calloutLabel: label, outerRadius } = datum;\r\n            if ((label === null || label === void 0 ? void 0 : label.text) && !label.hidden && outerRadius !== 0) {\r\n                line.visible = true;\r\n                line.strokeWidth = calloutStrokeWidth;\r\n                line.stroke = calloutColors[index % calloutColors.length];\r\n                line.fill = undefined;\r\n                const x1 = datum.midCos * outerRadius;\r\n                const y1 = datum.midSin * outerRadius;\r\n                let x2 = datum.midCos * (outerRadius + calloutLength);\r\n                let y2 = datum.midSin * (outerRadius + calloutLength);\r\n                const isMoved = label.collisionTextAlign || label.collisionOffsetY !== 0;\r\n                if (isMoved && label.box != null) {\r\n                    // Get the closest point to the text bounding box\r\n                    const box = label.box;\r\n                    let cx = x2;\r\n                    let cy = y2;\r\n                    if (x2 < box.x) {\r\n                        cx = box.x;\r\n                    }\r\n                    else if (x2 > box.x + box.width) {\r\n                        cx = box.x + box.width;\r\n                    }\r\n                    if (y2 < box.y) {\r\n                        cy = box.y;\r\n                    }\r\n                    else if (y2 > box.y + box.height) {\r\n                        cy = box.y + box.height;\r\n                    }\r\n                    // Apply label offset\r\n                    const dx = cx - x2;\r\n                    const dy = cy - y2;\r\n                    const length = Math.sqrt(Math.pow(dx, 2) + Math.pow(dy, 2));\r\n                    const paddedLength = length - offset;\r\n                    if (paddedLength > 0) {\r\n                        x2 = x2 + (dx * paddedLength) / length;\r\n                        y2 = y2 + (dy * paddedLength) / length;\r\n                    }\r\n                }\r\n                line.x1 = x1;\r\n                line.y1 = y1;\r\n                line.x2 = x2;\r\n                line.y2 = y2;\r\n            }\r\n            else {\r\n                line.visible = false;\r\n            }\r\n        });\r\n    }\r\n    getLabelOverflow(text, box, seriesRect) {\r\n        const seriesLeft = seriesRect.x - this.centerX;\r\n        const seriesRight = seriesRect.x + seriesRect.width - this.centerX;\r\n        const seriesTop = seriesRect.y - this.centerY;\r\n        const seriesBottom = seriesRect.y + seriesRect.height - this.centerY;\r\n        const errPx = 1; // Prevents errors related to floating point calculations\r\n        let visibleTextPart = 1;\r\n        if (box.x + errPx < seriesLeft) {\r\n            visibleTextPart = (box.x + box.width - seriesLeft) / box.width;\r\n        }\r\n        else if (box.x + box.width - errPx > seriesRight) {\r\n            visibleTextPart = (seriesRight - box.x) / box.width;\r\n        }\r\n        const hasVerticalOverflow = box.y + errPx < seriesTop || box.y + box.height - errPx > seriesBottom;\r\n        const textLength = visibleTextPart === 1 ? text.length : Math.floor(text.length * visibleTextPart) - 1;\r\n        const hasSurroundingSeriesOverflow = this.bboxIntersectsSurroundingSeries(box);\r\n        return { textLength, hasVerticalOverflow, hasSurroundingSeriesOverflow };\r\n    }\r\n    bboxIntersectsSurroundingSeries(box, dx = 0, dy = 0) {\r\n        const { surroundingRadius } = this;\r\n        if (surroundingRadius == null) {\r\n            return false;\r\n        }\r\n        const corners = [\r\n            { x: box.x + dx, y: box.y + dy },\r\n            { x: box.x + box.width + dx, y: box.y + dy },\r\n            { x: box.x + box.width + dx, y: box.y + box.height + dy },\r\n            { x: box.x + dx, y: box.y + box.height + dy },\r\n        ];\r\n        const sur2 = Math.pow(surroundingRadius, 2);\r\n        return corners.some((corner) => Math.pow(corner.x, 2) + Math.pow(corner.y, 2) > sur2);\r\n    }\r\n    computeCalloutLabelCollisionOffsets() {\r\n        const { radiusScale, calloutLabel, calloutLine } = this;\r\n        const { offset, minSpacing } = calloutLabel;\r\n        const innerRadius = radiusScale.convert(0);\r\n        const shouldSkip = (datum) => {\r\n            const label = datum.calloutLabel;\r\n            return !label || datum.outerRadius === 0;\r\n        };\r\n        const fullData = this.nodeData;\r\n        const data = this.nodeData.filter((t) => !shouldSkip(t));\r\n        data.forEach((datum) => {\r\n            const label = datum.calloutLabel;\r\n            if (label == null)\r\n                return;\r\n            label.hidden = false;\r\n            label.collisionTextAlign = undefined;\r\n            label.collisionOffsetY = 0;\r\n        });\r\n        if (data.length <= 1) {\r\n            return;\r\n        }\r\n        const leftLabels = data.filter((d) => d.midCos < 0).sort((a, b) => a.midSin - b.midSin);\r\n        const rightLabels = data.filter((d) => d.midCos >= 0).sort((a, b) => a.midSin - b.midSin);\r\n        const topLabels = data\r\n            .filter((d) => { var _a; return d.midSin < 0 && ((_a = d.calloutLabel) === null || _a === void 0 ? void 0 : _a.textAlign) === 'center'; })\r\n            .sort((a, b) => a.midCos - b.midCos);\r\n        const bottomLabels = data\r\n            .filter((d) => { var _a; return d.midSin >= 0 && ((_a = d.calloutLabel) === null || _a === void 0 ? void 0 : _a.textAlign) === 'center'; })\r\n            .sort((a, b) => a.midCos - b.midCos);\r\n        const tempTextNode = new Text();\r\n        const getTextBBox = (datum) => {\r\n            var _a;\r\n            const label = datum.calloutLabel;\r\n            if (label == null)\r\n                return new BBox(0, 0, 0, 0);\r\n            const labelRadius = datum.outerRadius + calloutLine.length + offset;\r\n            const x = datum.midCos * labelRadius;\r\n            const y = datum.midSin * labelRadius + label.collisionOffsetY;\r\n            tempTextNode.text = label.text;\r\n            tempTextNode.x = x;\r\n            tempTextNode.y = y;\r\n            tempTextNode.setFont(this.calloutLabel);\r\n            tempTextNode.setAlign({\r\n                textAlign: (_a = label.collisionTextAlign) !== null && _a !== void 0 ? _a : label.textAlign,\r\n                textBaseline: label.textBaseline,\r\n            });\r\n            return tempTextNode.computeBBox();\r\n        };\r\n        const avoidNeighbourYCollision = (label, next, direction) => {\r\n            const box = getTextBBox(label).grow(minSpacing / 2);\r\n            const other = getTextBBox(next).grow(minSpacing / 2);\r\n            // The full collision is not detected, because sometimes\r\n            // the next label can appear behind the label with offset\r\n            const collidesOrBehind = box.x < other.x + other.width &&\r\n                box.x + box.width > other.x &&\r\n                (direction === 'to-top' ? box.y < other.y + other.height : box.y + box.height > other.y);\r\n            if (collidesOrBehind) {\r\n                const dy = direction === 'to-top' ? box.y - other.y - other.height : box.y + box.height - other.y;\r\n                next.calloutLabel.collisionOffsetY = dy;\r\n            }\r\n        };\r\n        const avoidYCollisions = (labels) => {\r\n            const midLabel = labels.slice().sort((a, b) => Math.abs(a.midSin) - Math.abs(b.midSin))[0];\r\n            const midIndex = labels.indexOf(midLabel);\r\n            for (let i = midIndex - 1; i >= 0; i--) {\r\n                const prev = labels[i + 1];\r\n                const next = labels[i];\r\n                avoidNeighbourYCollision(prev, next, 'to-top');\r\n            }\r\n            for (let i = midIndex + 1; i < labels.length; i++) {\r\n                const prev = labels[i - 1];\r\n                const next = labels[i];\r\n                avoidNeighbourYCollision(prev, next, 'to-bottom');\r\n            }\r\n        };\r\n        const avoidXCollisions = (labels) => {\r\n            const labelsCollideLabelsByY = data.some((datum) => datum.calloutLabel.collisionOffsetY !== 0);\r\n            const boxes = labels.map((label) => getTextBBox(label));\r\n            const paddedBoxes = boxes.map((box) => box.clone().grow(minSpacing / 2));\r\n            let labelsCollideLabelsByX = false;\r\n            for (let i = 0; i < paddedBoxes.length && !labelsCollideLabelsByX; i++) {\r\n                const box = paddedBoxes[i];\r\n                for (let j = i + 1; j < labels.length; j++) {\r\n                    const other = paddedBoxes[j];\r\n                    if (box.collidesBBox(other)) {\r\n                        labelsCollideLabelsByX = true;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            const sectors = fullData.map((datum) => {\r\n                const { startAngle, endAngle, outerRadius } = datum;\r\n                return { startAngle, endAngle, innerRadius, outerRadius };\r\n            });\r\n            const labelsCollideSectors = boxes.some((box) => {\r\n                return sectors.some((sector) => boxCollidesSector(box, sector));\r\n            });\r\n            if (!labelsCollideLabelsByX && !labelsCollideLabelsByY && !labelsCollideSectors) {\r\n                return;\r\n            }\r\n            labels\r\n                .filter((d) => d.calloutLabel.textAlign === 'center')\r\n                .forEach((d) => {\r\n                const label = d.calloutLabel;\r\n                if (d.midCos < 0) {\r\n                    label.collisionTextAlign = 'right';\r\n                }\r\n                else if (d.midCos > 0) {\r\n                    label.collisionTextAlign = 'left';\r\n                }\r\n                else {\r\n                    label.collisionTextAlign = 'center';\r\n                }\r\n            });\r\n        };\r\n        avoidYCollisions(leftLabels);\r\n        avoidYCollisions(rightLabels);\r\n        avoidXCollisions(topLabels);\r\n        avoidXCollisions(bottomLabels);\r\n    }\r\n    updateCalloutLabelNodes(seriesRect) {\r\n        const { radiusScale, calloutLabel, calloutLine } = this;\r\n        const calloutLength = calloutLine.length;\r\n        const { offset, color } = calloutLabel;\r\n        const tempTextNode = new Text();\r\n        this.calloutLabelSelection.selectByTag(PieNodeTag.Label).forEach((text) => {\r\n            var _a;\r\n            const { datum } = text;\r\n            const label = datum.calloutLabel;\r\n            const radius = radiusScale.convert(datum.radius);\r\n            const outerRadius = Math.max(0, radius);\r\n            if (!(label === null || label === void 0 ? void 0 : label.text) || outerRadius === 0 || label.hidden) {\r\n                text.visible = false;\r\n                return;\r\n            }\r\n            const labelRadius = outerRadius + calloutLength + offset;\r\n            const x = datum.midCos * labelRadius;\r\n            const y = datum.midSin * labelRadius + label.collisionOffsetY;\r\n            // Detect text overflow\r\n            const align = {\r\n                textAlign: (_a = label.collisionTextAlign) !== null && _a !== void 0 ? _a : label.textAlign,\r\n                textBaseline: label.textBaseline,\r\n            };\r\n            tempTextNode.text = label.text;\r\n            tempTextNode.x = x;\r\n            tempTextNode.y = y;\r\n            tempTextNode.setFont(this.calloutLabel);\r\n            tempTextNode.setAlign(align);\r\n            const box = tempTextNode.computeBBox();\r\n            let displayText = label.text;\r\n            let visible = true;\r\n            if (calloutLabel.avoidCollisions) {\r\n                const { textLength, hasVerticalOverflow } = this.getLabelOverflow(label.text, box, seriesRect);\r\n                displayText = label.text.length === textLength ? label.text : `${label.text.substring(0, textLength)}…`;\r\n                visible = !hasVerticalOverflow;\r\n            }\r\n            text.text = displayText;\r\n            text.x = x;\r\n            text.y = y;\r\n            text.setFont(this.calloutLabel);\r\n            text.setAlign(align);\r\n            text.fill = color;\r\n            text.visible = visible;\r\n        });\r\n    }\r\n    computeLabelsBBox(options, seriesRect) {\r\n        var _a;\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const { calloutLabel, calloutLine } = this;\r\n            const calloutLength = calloutLine.length;\r\n            const { offset, maxCollisionOffset, minSpacing } = calloutLabel;\r\n            if (!calloutLabel.avoidCollisions) {\r\n                return null;\r\n            }\r\n            yield this.maybeRefreshNodeData();\r\n            this.updateRadiusScale(false);\r\n            this.computeCalloutLabelCollisionOffsets();\r\n            const textBoxes = [];\r\n            const text = new Text();\r\n            let titleBox;\r\n            if (((_a = this.title) === null || _a === void 0 ? void 0 : _a.text) && this.title.enabled) {\r\n                const dy = this.getTitleTranslationY();\r\n                if (isFinite(dy)) {\r\n                    text.text = this.title.text;\r\n                    text.x = 0;\r\n                    text.y = dy;\r\n                    text.setFont(this.title);\r\n                    text.setAlign({\r\n                        textBaseline: 'bottom',\r\n                        textAlign: 'center',\r\n                    });\r\n                    titleBox = text.computeBBox();\r\n                    textBoxes.push(titleBox);\r\n                }\r\n            }\r\n            this.nodeData.forEach((datum) => {\r\n                var _a;\r\n                const label = datum.calloutLabel;\r\n                if (!label || datum.outerRadius === 0) {\r\n                    return null;\r\n                }\r\n                const labelRadius = datum.outerRadius + calloutLength + offset;\r\n                const x = datum.midCos * labelRadius;\r\n                const y = datum.midSin * labelRadius + label.collisionOffsetY;\r\n                text.text = label.text;\r\n                text.x = x;\r\n                text.y = y;\r\n                text.setFont(this.calloutLabel);\r\n                text.setAlign({\r\n                    textAlign: (_a = label.collisionTextAlign) !== null && _a !== void 0 ? _a : label.textAlign,\r\n                    textBaseline: label.textBaseline,\r\n                });\r\n                const box = text.computeBBox();\r\n                label.box = box;\r\n                // Hide labels that where pushed too far by the collision avoidance algorithm\r\n                if (Math.abs(label.collisionOffsetY) > maxCollisionOffset) {\r\n                    label.hidden = true;\r\n                    return;\r\n                }\r\n                // Hide labels intersecting or above the title\r\n                if (titleBox) {\r\n                    const seriesTop = seriesRect.y - this.centerY;\r\n                    const titleCleanArea = new BBox(titleBox.x - minSpacing, seriesTop, titleBox.width + 2 * minSpacing, titleBox.y + titleBox.height + minSpacing - seriesTop);\r\n                    if (box.collidesBBox(titleCleanArea)) {\r\n                        label.hidden = true;\r\n                        return;\r\n                    }\r\n                }\r\n                if (options.hideWhenNecessary) {\r\n                    const { textLength, hasVerticalOverflow, hasSurroundingSeriesOverflow } = this.getLabelOverflow(label.text, box, seriesRect);\r\n                    const isTooShort = label.text.length > 2 && textLength < 2;\r\n                    if (hasVerticalOverflow || isTooShort || hasSurroundingSeriesOverflow) {\r\n                        label.hidden = true;\r\n                        return;\r\n                    }\r\n                }\r\n                label.hidden = false;\r\n                textBoxes.push(box);\r\n            });\r\n            if (textBoxes.length === 0) {\r\n                return null;\r\n            }\r\n            return BBox.merge(textBoxes);\r\n        });\r\n    }\r\n    updateSectorLabelNodes() {\r\n        const { radiusScale } = this;\r\n        const innerRadius = radiusScale.convert(0);\r\n        const { fontSize, fontStyle, fontWeight, fontFamily, positionOffset, positionRatio, color } = this.sectorLabel;\r\n        const isDoughnut = innerRadius > 0;\r\n        const singleVisibleSector = this.seriesItemEnabled.filter(Boolean).length === 1;\r\n        this.sectorLabelSelection.each((text, datum) => {\r\n            const { sectorLabel, outerRadius } = datum;\r\n            let isTextVisible = false;\r\n            if (sectorLabel && outerRadius !== 0) {\r\n                const labelRadius = innerRadius * (1 - positionRatio) + outerRadius * positionRatio + positionOffset;\r\n                text.fill = color;\r\n                text.fontStyle = fontStyle;\r\n                text.fontWeight = fontWeight;\r\n                text.fontSize = fontSize;\r\n                text.fontFamily = fontFamily;\r\n                text.text = sectorLabel.text;\r\n                const shouldPutTextInCenter = !isDoughnut && singleVisibleSector;\r\n                if (shouldPutTextInCenter) {\r\n                    text.x = 0;\r\n                    text.y = 0;\r\n                }\r\n                else {\r\n                    text.x = datum.midCos * labelRadius;\r\n                    text.y = datum.midSin * labelRadius;\r\n                }\r\n                text.textAlign = 'center';\r\n                text.textBaseline = 'middle';\r\n                const bbox = text.computeBBox();\r\n                const corners = [\r\n                    [bbox.x, bbox.y],\r\n                    [bbox.x + bbox.width, bbox.y],\r\n                    [bbox.x + bbox.width, bbox.y + bbox.height],\r\n                    [bbox.x, bbox.y + bbox.height],\r\n                ];\r\n                const { startAngle, endAngle } = datum;\r\n                const sectorBounds = { startAngle, endAngle, innerRadius, outerRadius };\r\n                if (corners.every(([x, y]) => isPointInSector(x, y, sectorBounds))) {\r\n                    isTextVisible = true;\r\n                }\r\n            }\r\n            text.visible = isTextVisible;\r\n        });\r\n    }\r\n    updateInnerLabelNodes() {\r\n        const textBBoxes = [];\r\n        const margins = [];\r\n        this.innerLabelsSelection.each((text, datum) => {\r\n            const { fontStyle, fontWeight, fontSize, fontFamily, color } = datum;\r\n            text.fontStyle = fontStyle;\r\n            text.fontWeight = fontWeight;\r\n            text.fontSize = fontSize;\r\n            text.fontFamily = fontFamily;\r\n            text.text = datum.text;\r\n            text.x = 0;\r\n            text.y = 0;\r\n            text.fill = color;\r\n            text.textAlign = 'center';\r\n            text.textBaseline = 'alphabetic';\r\n            textBBoxes.push(text.computeBBox());\r\n            margins.push(datum.margin);\r\n        });\r\n        const getMarginTop = (index) => (index === 0 ? 0 : margins[index]);\r\n        const getMarginBottom = (index) => (index === margins.length - 1 ? 0 : margins[index]);\r\n        const totalHeight = textBBoxes.reduce((sum, bbox, i) => {\r\n            return sum + bbox.height + getMarginTop(i) + getMarginBottom(i);\r\n        }, 0);\r\n        const totalWidth = Math.max(...textBBoxes.map((bbox) => bbox.width));\r\n        const innerRadius = this.getInnerRadius();\r\n        const labelRadius = Math.sqrt(Math.pow(totalWidth / 2, 2) + Math.pow(totalHeight / 2, 2));\r\n        const labelsVisible = labelRadius <= (innerRadius > 0 ? innerRadius : this.getOuterRadius());\r\n        const textBottoms = [];\r\n        for (let i = 0, prev = -totalHeight / 2; i < textBBoxes.length; i++) {\r\n            const bbox = textBBoxes[i];\r\n            const bottom = bbox.height + prev + getMarginTop(i);\r\n            textBottoms.push(bottom);\r\n            prev = bottom + getMarginBottom(i);\r\n        }\r\n        this.innerLabelsSelection.each((text, _datum, index) => {\r\n            text.y = textBottoms[index];\r\n            text.visible = labelsVisible;\r\n        });\r\n    }\r\n    getDatumLegendName(nodeDatum) {\r\n        const { angleKey, calloutLabelKey, sectorLabelKey, legendItemKey } = this;\r\n        const { sectorLabel, calloutLabel, legendItem } = nodeDatum;\r\n        if (legendItemKey && legendItem !== undefined) {\r\n            return legendItem.text;\r\n        }\r\n        else if (calloutLabelKey && calloutLabelKey !== angleKey && (calloutLabel === null || calloutLabel === void 0 ? void 0 : calloutLabel.text) !== undefined) {\r\n            return calloutLabel.text;\r\n        }\r\n        else if (sectorLabelKey && sectorLabelKey !== angleKey && (sectorLabel === null || sectorLabel === void 0 ? void 0 : sectorLabel.text) !== undefined) {\r\n            return sectorLabel.text;\r\n        }\r\n    }\r\n    getTooltipHtml(nodeDatum) {\r\n        var _a;\r\n        if (!this.angleKey) {\r\n            return '';\r\n        }\r\n        const { datum, angleValue, sectorFormat: { fill: color }, } = nodeDatum;\r\n        const title = sanitizeHtml((_a = this.title) === null || _a === void 0 ? void 0 : _a.text);\r\n        const content = isNumber(angleValue) ? toFixed(angleValue) : String(angleValue);\r\n        const labelText = this.getDatumLegendName(nodeDatum);\r\n        return this.tooltip.toTooltipHtml({\r\n            title: title !== null && title !== void 0 ? title : labelText,\r\n            content: title && labelText ? `${labelText}: ${content}` : content,\r\n            backgroundColor: color,\r\n        }, {\r\n            datum,\r\n            title,\r\n            color,\r\n            seriesId: this.id,\r\n            angleKey: this.angleKey,\r\n            angleName: this.angleName,\r\n            radiusKey: this.radiusKey,\r\n            radiusName: this.radiusName,\r\n            calloutLabelKey: this.calloutLabelKey,\r\n            calloutLabelName: this.calloutLabelName,\r\n            sectorLabelKey: this.sectorLabelKey,\r\n            sectorLabelName: this.sectorLabelName,\r\n        });\r\n    }\r\n    getLegendData(legendType) {\r\n        var _a, _b, _c, _d, _e;\r\n        const { processedData, angleKey, calloutLabelKey, sectorLabelKey, legendItemKey, id, dataModel } = this;\r\n        if (!dataModel || !processedData || processedData.data.length === 0 || legendType !== 'category')\r\n            return [];\r\n        if (!legendItemKey &&\r\n            (!calloutLabelKey || calloutLabelKey === angleKey) &&\r\n            (!sectorLabelKey || sectorLabelKey === angleKey))\r\n            return [];\r\n        const { calloutLabelIdx, sectorLabelIdx, legendItemIdx } = this.getProcessedDataIndexes(dataModel);\r\n        const titleText = ((_a = this.title) === null || _a === void 0 ? void 0 : _a.showInLegend) && this.title.text;\r\n        const legendData = [];\r\n        for (let index = 0; index < processedData.data.length; index++) {\r\n            const { datum, values } = processedData.data[index];\r\n            const labelParts = [];\r\n            if (titleText) {\r\n                labelParts.push(titleText);\r\n            }\r\n            const labels = this.getLabels(datum, 2 * Math.PI, 2 * Math.PI, false, values[calloutLabelIdx], values[sectorLabelIdx], values[legendItemIdx]);\r\n            if (legendItemKey && labels.legendItem !== undefined) {\r\n                labelParts.push(labels.legendItem.text);\r\n            }\r\n            else if (calloutLabelKey && calloutLabelKey !== angleKey && ((_b = labels.calloutLabel) === null || _b === void 0 ? void 0 : _b.text) !== undefined) {\r\n                labelParts.push((_c = labels.calloutLabel) === null || _c === void 0 ? void 0 : _c.text);\r\n            }\r\n            else if (sectorLabelKey && sectorLabelKey !== angleKey && ((_d = labels.sectorLabel) === null || _d === void 0 ? void 0 : _d.text) !== undefined) {\r\n                labelParts.push((_e = labels.sectorLabel) === null || _e === void 0 ? void 0 : _e.text);\r\n            }\r\n            if (labelParts.length === 0)\r\n                continue;\r\n            const sectorFormat = this.getSectorFormat(datum, index, false);\r\n            legendData.push({\r\n                legendType: 'category',\r\n                id,\r\n                itemId: index,\r\n                seriesId: id,\r\n                enabled: this.seriesItemEnabled[index],\r\n                label: {\r\n                    text: labelParts.join(' - '),\r\n                },\r\n                marker: {\r\n                    fill: sectorFormat.fill,\r\n                    stroke: sectorFormat.stroke,\r\n                    fillOpacity: this.fillOpacity,\r\n                    strokeOpacity: this.strokeOpacity,\r\n                    strokeWidth: this.strokeWidth,\r\n                },\r\n            });\r\n        }\r\n        return legendData;\r\n    }\r\n    onLegendItemClick(event) {\r\n        const { enabled, itemId, series } = event;\r\n        if (series.id === this.id) {\r\n            this.toggleSeriesItem(itemId, enabled);\r\n        }\r\n        else if (series.type === 'pie') {\r\n            this.toggleOtherSeriesItems(series, itemId, enabled);\r\n        }\r\n    }\r\n    toggleSeriesItem(itemId, enabled) {\r\n        this.seriesItemEnabled[itemId] = enabled;\r\n        this.nodeDataRefresh = true;\r\n    }\r\n    toggleOtherSeriesItems(series, itemId, enabled) {\r\n        var _a, _b;\r\n        const { legendItemKey, dataModel } = this;\r\n        if (!legendItemKey || !dataModel)\r\n            return;\r\n        const datumToggledLegendItemValue = series.legendItemKey && ((_a = series.data) === null || _a === void 0 ? void 0 : _a.find((_, index) => index === itemId)[series.legendItemKey]);\r\n        if (!datumToggledLegendItemValue)\r\n            return;\r\n        const legendItemIdx = dataModel.resolveProcessedDataIndexById(this, `legendItemValue`).index;\r\n        (_b = this.processedData) === null || _b === void 0 ? void 0 : _b.data.forEach(({ values }, datumItemId) => {\r\n            if (values[legendItemIdx] === datumToggledLegendItemValue) {\r\n                this.toggleSeriesItem(datumItemId, enabled);\r\n            }\r\n        });\r\n    }\r\n    animateEmptyUpdateReady(_data) {\r\n        const { animationManager } = this.ctx;\r\n        const fns = preparePieSeriesAnimationFunctions(true, this.rotation, this.radiusScale, this.previousRadiusScale);\r\n        fromToMotion(this.id, 'nodes', animationManager, [this.itemSelection, this.highlightSelection], fns.nodes);\r\n        fromToMotion(this.id, `innerCircle`, animationManager, [this.innerCircleSelection], fns.innerCircle);\r\n        seriesLabelFadeInAnimation(this, 'callout', animationManager, [this.calloutLabelSelection]);\r\n        seriesLabelFadeInAnimation(this, 'sector', animationManager, [this.sectorLabelSelection]);\r\n        seriesLabelFadeInAnimation(this, 'inner', animationManager, [this.innerLabelsSelection]);\r\n        this.previousRadiusScale.range = this.radiusScale.range;\r\n    }\r\n    animateWaitingUpdateReady() {\r\n        var _a, _b, _c, _d, _e, _f;\r\n        const { itemSelection, highlightSelection, processedData, radiusScale, previousRadiusScale } = this;\r\n        const { animationManager } = this.ctx;\r\n        const diff = (_a = processedData === null || processedData === void 0 ? void 0 : processedData.reduced) === null || _a === void 0 ? void 0 : _a.diff;\r\n        this.ctx.animationManager.stopByAnimationGroupId(this.id);\r\n        const supportedDiff = ((_b = diff === null || diff === void 0 ? void 0 : diff.moved.length) !== null && _b !== void 0 ? _b : 0) === 0 && (diff === null || diff === void 0 ? void 0 : diff.addedIndices.every((i) => !diff.removedIndices.includes(i)));\r\n        const hasKeys = ((_c = processedData === null || processedData === void 0 ? void 0 : processedData.defs.keys.length) !== null && _c !== void 0 ? _c : 0) > 0;\r\n        const hasUniqueKeys = (_f = (_e = (_d = processedData === null || processedData === void 0 ? void 0 : processedData.reduced) === null || _d === void 0 ? void 0 : _d.animationValidation) === null || _e === void 0 ? void 0 : _e.uniqueKeys) !== null && _f !== void 0 ? _f : true;\r\n        if (!supportedDiff || !hasKeys || !hasUniqueKeys) {\r\n            this.ctx.animationManager.skipCurrentBatch();\r\n        }\r\n        const fns = preparePieSeriesAnimationFunctions(false, this.rotation, radiusScale, previousRadiusScale);\r\n        fromToMotion(this.id, 'nodes', animationManager, [itemSelection, highlightSelection], fns.nodes, (_, datum) => this.getDatumId(datum), diff);\r\n        fromToMotion(this.id, `innerCircle`, animationManager, [this.innerCircleSelection], fns.innerCircle);\r\n        seriesLabelFadeInAnimation(this, 'callout', this.ctx.animationManager, [this.calloutLabelSelection]);\r\n        seriesLabelFadeInAnimation(this, 'sector', this.ctx.animationManager, [this.sectorLabelSelection]);\r\n        seriesLabelFadeInAnimation(this, 'inner', this.ctx.animationManager, [this.innerLabelsSelection]);\r\n        this.previousRadiusScale.range = this.radiusScale.range;\r\n    }\r\n    animateClearingUpdateEmpty() {\r\n        const { itemSelection, highlightSelection, radiusScale, previousRadiusScale } = this;\r\n        const { animationManager } = this.ctx;\r\n        const fns = preparePieSeriesAnimationFunctions(false, this.rotation, radiusScale, previousRadiusScale);\r\n        fromToMotion(this.id, 'nodes', animationManager, [itemSelection, highlightSelection], fns.nodes);\r\n        fromToMotion(this.id, `innerCircle`, animationManager, [this.innerCircleSelection], fns.innerCircle);\r\n        seriesLabelFadeOutAnimation(this, 'callout', this.ctx.animationManager, [this.calloutLabelSelection]);\r\n        seriesLabelFadeOutAnimation(this, 'sector', this.ctx.animationManager, [this.sectorLabelSelection]);\r\n        seriesLabelFadeOutAnimation(this, 'inner', this.ctx.animationManager, [this.innerLabelsSelection]);\r\n        this.previousRadiusScale.range = this.radiusScale.range;\r\n    }\r\n    getDatumIdFromData(datum) {\r\n        var _a, _b, _c;\r\n        const { calloutLabelKey, sectorLabelKey, legendItemKey } = this;\r\n        if (!((_c = (_b = (_a = this.processedData) === null || _a === void 0 ? void 0 : _a.reduced) === null || _b === void 0 ? void 0 : _b.animationValidation) === null || _c === void 0 ? void 0 : _c.uniqueKeys)) {\r\n            return undefined;\r\n        }\r\n        if (legendItemKey) {\r\n            return datum[legendItemKey];\r\n        }\r\n        else if (calloutLabelKey) {\r\n            return datum[calloutLabelKey];\r\n        }\r\n        else if (sectorLabelKey) {\r\n            return datum[sectorLabelKey];\r\n        }\r\n    }\r\n    getDatumId(datum) {\r\n        var _a;\r\n        const { index } = datum;\r\n        return (_a = this.getDatumIdFromData(datum.datum)) !== null && _a !== void 0 ? _a : `${index}`;\r\n    }\r\n    onDataChange() {\r\n        this.processSeriesItemEnabled();\r\n    }\r\n}\r\nPieSeries.className = 'PieSeries';\r\nPieSeries.type = 'pie';\r\n__decorate([\r\n    Validate(STRING),\r\n    __metadata(\"design:type\", Object)\r\n], PieSeries.prototype, \"angleKey\", void 0);\r\n__decorate([\r\n    Validate(STRING),\r\n    __metadata(\"design:type\", Object)\r\n], PieSeries.prototype, \"angleName\", void 0);\r\n__decorate([\r\n    Validate(OPT_STRING),\r\n    __metadata(\"design:type\", String)\r\n], PieSeries.prototype, \"radiusKey\", void 0);\r\n__decorate([\r\n    Validate(OPT_STRING),\r\n    __metadata(\"design:type\", String)\r\n], PieSeries.prototype, \"radiusName\", void 0);\r\n__decorate([\r\n    Validate(OPT_NUMBER(0)),\r\n    __metadata(\"design:type\", Number)\r\n], PieSeries.prototype, \"radiusMin\", void 0);\r\n__decorate([\r\n    Validate(OPT_NUMBER(0)),\r\n    __metadata(\"design:type\", Number)\r\n], PieSeries.prototype, \"radiusMax\", void 0);\r\n__decorate([\r\n    Validate(OPT_STRING),\r\n    __metadata(\"design:type\", String)\r\n], PieSeries.prototype, \"calloutLabelKey\", void 0);\r\n__decorate([\r\n    Validate(OPT_STRING),\r\n    __metadata(\"design:type\", String)\r\n], PieSeries.prototype, \"calloutLabelName\", void 0);\r\n__decorate([\r\n    Validate(OPT_STRING),\r\n    __metadata(\"design:type\", String)\r\n], PieSeries.prototype, \"sectorLabelKey\", void 0);\r\n__decorate([\r\n    Validate(OPT_STRING),\r\n    __metadata(\"design:type\", String)\r\n], PieSeries.prototype, \"sectorLabelName\", void 0);\r\n__decorate([\r\n    Validate(OPT_STRING),\r\n    __metadata(\"design:type\", String)\r\n], PieSeries.prototype, \"legendItemKey\", void 0);\r\n__decorate([\r\n    Validate(COLOR_STRING_ARRAY),\r\n    __metadata(\"design:type\", Array)\r\n], PieSeries.prototype, \"fills\", void 0);\r\n__decorate([\r\n    Validate(COLOR_STRING_ARRAY),\r\n    __metadata(\"design:type\", Array)\r\n], PieSeries.prototype, \"strokes\", void 0);\r\n__decorate([\r\n    Validate(NUMBER$1(0, 1)),\r\n    __metadata(\"design:type\", Object)\r\n], PieSeries.prototype, \"fillOpacity\", void 0);\r\n__decorate([\r\n    Validate(NUMBER$1(0, 1)),\r\n    __metadata(\"design:type\", Object)\r\n], PieSeries.prototype, \"strokeOpacity\", void 0);\r\n__decorate([\r\n    Validate(OPT_LINE_DASH),\r\n    __metadata(\"design:type\", Array)\r\n], PieSeries.prototype, \"lineDash\", void 0);\r\n__decorate([\r\n    Validate(NUMBER$1(0)),\r\n    __metadata(\"design:type\", Number)\r\n], PieSeries.prototype, \"lineDashOffset\", void 0);\r\n__decorate([\r\n    Validate(OPT_FUNCTION),\r\n    __metadata(\"design:type\", Function)\r\n], PieSeries.prototype, \"formatter\", void 0);\r\n__decorate([\r\n    Validate(NUMBER$1(-360, 360)),\r\n    __metadata(\"design:type\", Object)\r\n], PieSeries.prototype, \"rotation\", void 0);\r\n__decorate([\r\n    Validate(NUMBER$1()),\r\n    __metadata(\"design:type\", Object)\r\n], PieSeries.prototype, \"outerRadiusOffset\", void 0);\r\n__decorate([\r\n    Validate(NUMBER$1(0)),\r\n    __metadata(\"design:type\", Object)\r\n], PieSeries.prototype, \"outerRadiusRatio\", void 0);\r\n__decorate([\r\n    Validate(NUMBER$1()),\r\n    __metadata(\"design:type\", Object)\r\n], PieSeries.prototype, \"innerRadiusOffset\", void 0);\r\n__decorate([\r\n    Validate(NUMBER$1(0)),\r\n    __metadata(\"design:type\", Object)\r\n], PieSeries.prototype, \"innerRadiusRatio\", void 0);\r\n__decorate([\r\n    Validate(NUMBER$1(0)),\r\n    __metadata(\"design:type\", Object)\r\n], PieSeries.prototype, \"strokeWidth\", void 0);\n\nconst JSON_APPLY_PLUGINS = {\r\n    constructors: {},\r\n    constructedArrays: new WeakMap(),\r\n};\r\nfunction assignJsonApplyConstructedArray(array, ctor) {\r\n    var _a;\r\n    (_a = JSON_APPLY_PLUGINS.constructedArrays) === null || _a === void 0 ? void 0 : _a.set(array, ctor);\r\n}\r\nconst JSON_APPLY_OPTIONS = {\r\n    constructors: {\r\n        title: Caption,\r\n        subtitle: Caption,\r\n        footnote: Caption,\r\n        shadow: DropShadow,\r\n        innerCircle: DoughnutInnerCircle,\r\n        'axes[].title': AxisTitle,\r\n        'series[].innerLabels[]': DoughnutInnerLabel,\r\n    },\r\n    allowedTypes: {\r\n        'legend.pagination.marker.shape': ['primitive', 'function'],\r\n        'series[].marker.shape': ['primitive', 'function'],\r\n        'axis[].tick.count': ['primitive', 'class-instance'],\r\n    },\r\n};\r\nfunction getJsonApplyOptions() {\r\n    return {\r\n        constructors: Object.assign(Object.assign({}, JSON_APPLY_OPTIONS.constructors), JSON_APPLY_PLUGINS.constructors),\r\n        constructedArrays: JSON_APPLY_PLUGINS.constructedArrays,\r\n        allowedTypes: Object.assign({}, JSON_APPLY_OPTIONS.allowedTypes),\r\n    };\r\n}\n\nclass Range extends Shape {\r\n    constructor(opts = {}) {\r\n        super(opts);\r\n        this.x1 = 0;\r\n        this.y1 = 0;\r\n        this.x2 = 0;\r\n        this.y2 = 0;\r\n        this.startLine = false;\r\n        this.endLine = false;\r\n        this.isRange = false;\r\n        this.restoreOwnStyles();\r\n    }\r\n    computeBBox() {\r\n        return new BBox(this.x1, this.y1, this.x2 - this.x1, this.y2 - this.y1);\r\n    }\r\n    isPointInPath(_x, _y) {\r\n        return false;\r\n    }\r\n    render(renderCtx) {\r\n        var _a;\r\n        const { ctx, forceRender, stats } = renderCtx;\r\n        if (this.dirty === RedrawType.NONE && !forceRender) {\r\n            if (stats)\r\n                stats.nodesSkipped += this.nodeCount.count;\r\n            return;\r\n        }\r\n        this.computeTransformMatrix();\r\n        this.matrix.toContext(ctx);\r\n        let { x1, y1, x2, y2 } = this;\r\n        x1 = this.align(x1);\r\n        y1 = this.align(y1);\r\n        x2 = this.align(x2);\r\n        y2 = this.align(y2);\r\n        const { fill, opacity, isRange } = this;\r\n        const fillActive = !!(isRange && fill);\r\n        if (fillActive) {\r\n            const { fillOpacity } = this;\r\n            ctx.fillStyle = fill;\r\n            ctx.globalAlpha = opacity * fillOpacity;\r\n            ctx.beginPath();\r\n            ctx.moveTo(x1, y1);\r\n            ctx.lineTo(x2, y1);\r\n            ctx.lineTo(x2, y2);\r\n            ctx.lineTo(x1, y2);\r\n            ctx.closePath();\r\n            ctx.fill();\r\n        }\r\n        const { stroke, strokeWidth, startLine, endLine } = this;\r\n        const strokeActive = !!((startLine || endLine) && stroke && strokeWidth);\r\n        if (strokeActive) {\r\n            const { strokeOpacity, lineDash, lineDashOffset, lineCap, lineJoin } = this;\r\n            ctx.strokeStyle = stroke;\r\n            ctx.globalAlpha = opacity * strokeOpacity;\r\n            ctx.lineWidth = strokeWidth;\r\n            if (lineDash) {\r\n                ctx.setLineDash(lineDash);\r\n            }\r\n            if (lineDashOffset) {\r\n                ctx.lineDashOffset = lineDashOffset;\r\n            }\r\n            if (lineCap) {\r\n                ctx.lineCap = lineCap;\r\n            }\r\n            if (lineJoin) {\r\n                ctx.lineJoin = lineJoin;\r\n            }\r\n            ctx.beginPath();\r\n            if (startLine) {\r\n                ctx.moveTo(x1, y1);\r\n                ctx.lineTo(x2, y1);\r\n            }\r\n            if (endLine) {\r\n                ctx.moveTo(x2, y2);\r\n                ctx.lineTo(x1, y2);\r\n            }\r\n            ctx.stroke();\r\n        }\r\n        (_a = this.fillShadow) === null || _a === void 0 ? void 0 : _a.markClean();\r\n        super.render(renderCtx);\r\n    }\r\n}\r\nRange.className = 'Range';\r\nRange.defaultStyles = Object.assign(Object.assign({}, Shape.defaultStyles), { strokeWidth: 1 });\r\n__decorate([\r\n    SceneChangeDetection({ redraw: RedrawType.MINOR }),\r\n    __metadata(\"design:type\", Number)\r\n], Range.prototype, \"x1\", void 0);\r\n__decorate([\r\n    SceneChangeDetection({ redraw: RedrawType.MINOR }),\r\n    __metadata(\"design:type\", Number)\r\n], Range.prototype, \"y1\", void 0);\r\n__decorate([\r\n    SceneChangeDetection({ redraw: RedrawType.MINOR }),\r\n    __metadata(\"design:type\", Number)\r\n], Range.prototype, \"x2\", void 0);\r\n__decorate([\r\n    SceneChangeDetection({ redraw: RedrawType.MINOR }),\r\n    __metadata(\"design:type\", Number)\r\n], Range.prototype, \"y2\", void 0);\r\n__decorate([\r\n    SceneChangeDetection({ redraw: RedrawType.MINOR }),\r\n    __metadata(\"design:type\", Boolean)\r\n], Range.prototype, \"startLine\", void 0);\r\n__decorate([\r\n    SceneChangeDetection({ redraw: RedrawType.MINOR }),\r\n    __metadata(\"design:type\", Boolean)\r\n], Range.prototype, \"endLine\", void 0);\r\n__decorate([\r\n    SceneChangeDetection({ redraw: RedrawType.MINOR }),\r\n    __metadata(\"design:type\", Boolean)\r\n], Range.prototype, \"isRange\", void 0);\n\nconst horizontalCrosslineTranslationDirections = {\r\n    top: { xTranslationDirection: 0, yTranslationDirection: -1 },\r\n    bottom: { xTranslationDirection: 0, yTranslationDirection: 1 },\r\n    left: { xTranslationDirection: -1, yTranslationDirection: 0 },\r\n    right: { xTranslationDirection: 1, yTranslationDirection: 0 },\r\n    topLeft: { xTranslationDirection: 1, yTranslationDirection: -1 },\r\n    topRight: { xTranslationDirection: -1, yTranslationDirection: -1 },\r\n    bottomLeft: { xTranslationDirection: 1, yTranslationDirection: 1 },\r\n    bottomRight: { xTranslationDirection: -1, yTranslationDirection: 1 },\r\n    inside: { xTranslationDirection: 0, yTranslationDirection: 0 },\r\n    insideLeft: { xTranslationDirection: 1, yTranslationDirection: 0 },\r\n    insideRight: { xTranslationDirection: -1, yTranslationDirection: 0 },\r\n    insideTop: { xTranslationDirection: 0, yTranslationDirection: 1 },\r\n    insideBottom: { xTranslationDirection: 0, yTranslationDirection: -1 },\r\n    insideTopLeft: { xTranslationDirection: 1, yTranslationDirection: 1 },\r\n    insideBottomLeft: { xTranslationDirection: 1, yTranslationDirection: -1 },\r\n    insideTopRight: { xTranslationDirection: -1, yTranslationDirection: 1 },\r\n    insideBottomRight: { xTranslationDirection: -1, yTranslationDirection: -1 },\r\n};\r\nconst verticalCrossLineTranslationDirections = {\r\n    top: { xTranslationDirection: 1, yTranslationDirection: 0 },\r\n    bottom: { xTranslationDirection: -1, yTranslationDirection: 0 },\r\n    left: { xTranslationDirection: 0, yTranslationDirection: -1 },\r\n    right: { xTranslationDirection: 0, yTranslationDirection: 1 },\r\n    topLeft: { xTranslationDirection: -1, yTranslationDirection: -1 },\r\n    topRight: { xTranslationDirection: -1, yTranslationDirection: 1 },\r\n    bottomLeft: { xTranslationDirection: 1, yTranslationDirection: -1 },\r\n    bottomRight: { xTranslationDirection: 1, yTranslationDirection: 1 },\r\n    inside: { xTranslationDirection: 0, yTranslationDirection: 0 },\r\n    insideLeft: { xTranslationDirection: 0, yTranslationDirection: 1 },\r\n    insideRight: { xTranslationDirection: 0, yTranslationDirection: -1 },\r\n    insideTop: { xTranslationDirection: -1, yTranslationDirection: 0 },\r\n    insideBottom: { xTranslationDirection: 1, yTranslationDirection: 0 },\r\n    insideTopLeft: { xTranslationDirection: -1, yTranslationDirection: 1 },\r\n    insideBottomLeft: { xTranslationDirection: 1, yTranslationDirection: 1 },\r\n    insideTopRight: { xTranslationDirection: -1, yTranslationDirection: -1 },\r\n    insideBottomRight: { xTranslationDirection: 1, yTranslationDirection: -1 },\r\n};\r\nfunction calculateLabelTranslation({ yDirection, padding = 0, position = 'top', bbox, }) {\r\n    const crossLineTranslationDirections = yDirection\r\n        ? horizontalCrosslineTranslationDirections\r\n        : verticalCrossLineTranslationDirections;\r\n    const { xTranslationDirection, yTranslationDirection } = crossLineTranslationDirections[position];\r\n    const w = yDirection ? bbox.width : bbox.height;\r\n    const h = yDirection ? bbox.height : bbox.width;\r\n    const xTranslation = xTranslationDirection * (padding + w / 2);\r\n    const yTranslation = yTranslationDirection * (padding + h / 2);\r\n    return {\r\n        xTranslation,\r\n        yTranslation,\r\n    };\r\n}\r\nfunction calculateLabelChartPadding({ yDirection, bbox, padding = 0, position = 'top', }) {\r\n    const chartPadding = {};\r\n    if (position.startsWith('inside'))\r\n        return chartPadding;\r\n    if (position === 'top' && !yDirection) {\r\n        chartPadding.top = padding + bbox.height;\r\n    }\r\n    else if (position === 'bottom' && !yDirection) {\r\n        chartPadding.bottom = padding + bbox.height;\r\n    }\r\n    else if (position === 'left' && yDirection) {\r\n        chartPadding.left = padding + bbox.width;\r\n    }\r\n    else if (position === 'right' && yDirection) {\r\n        chartPadding.right = padding + bbox.width;\r\n    }\r\n    return chartPadding;\r\n}\r\nconst POSITION_TOP_COORDINATES = ({ yDirection, xEnd, yStart, yEnd }) => {\r\n    if (yDirection) {\r\n        return { x: xEnd / 2, y: yStart };\r\n    }\r\n    else {\r\n        return { x: xEnd, y: !isNaN(yEnd) ? (yStart + yEnd) / 2 : yStart };\r\n    }\r\n};\r\nconst POSITION_LEFT_COORDINATES = ({ yDirection, xStart, xEnd, yStart, yEnd }) => {\r\n    if (yDirection) {\r\n        return { x: xStart, y: !isNaN(yEnd) ? (yStart + yEnd) / 2 : yStart };\r\n    }\r\n    else {\r\n        return { x: xEnd / 2, y: yStart };\r\n    }\r\n};\r\nconst POSITION_RIGHT_COORDINATES = ({ yDirection, xEnd, yStart, yEnd }) => {\r\n    if (yDirection) {\r\n        return { x: xEnd, y: !isNaN(yEnd) ? (yStart + yEnd) / 2 : yStart };\r\n    }\r\n    else {\r\n        return { x: xEnd / 2, y: !isNaN(yEnd) ? yEnd : yStart };\r\n    }\r\n};\r\nconst POSITION_BOTTOM_COORDINATES = ({ yDirection, xStart, xEnd, yStart, yEnd }) => {\r\n    if (yDirection) {\r\n        return { x: xEnd / 2, y: !isNaN(yEnd) ? yEnd : yStart };\r\n    }\r\n    else {\r\n        return { x: xStart, y: !isNaN(yEnd) ? (yStart + yEnd) / 2 : yStart };\r\n    }\r\n};\r\nconst POSITION_INSIDE_COORDINATES = ({ xEnd, yStart, yEnd }) => {\r\n    return { x: xEnd / 2, y: !isNaN(yEnd) ? (yStart + yEnd) / 2 : yStart };\r\n};\r\nconst POSITION_TOP_LEFT_COORDINATES = ({ yDirection, xStart, xEnd, yStart }) => {\r\n    if (yDirection) {\r\n        return { x: xStart / 2, y: yStart };\r\n    }\r\n    else {\r\n        return { x: xEnd, y: yStart };\r\n    }\r\n};\r\nconst POSITION_BOTTOM_LEFT_COORDINATES = ({ yDirection, xStart, yStart, yEnd }) => {\r\n    if (yDirection) {\r\n        return { x: xStart, y: !isNaN(yEnd) ? yEnd : yStart };\r\n    }\r\n    else {\r\n        return { x: xStart, y: yStart };\r\n    }\r\n};\r\nconst POSITION_TOP_RIGHT_COORDINATES = ({ yDirection, xEnd, yStart, yEnd }) => {\r\n    if (yDirection) {\r\n        return { x: xEnd, y: yStart };\r\n    }\r\n    else {\r\n        return { x: xEnd, y: !isNaN(yEnd) ? yEnd : yStart };\r\n    }\r\n};\r\nconst POSITION_BOTTOM_RIGHT_COORDINATES = ({ yDirection, xStart, xEnd, yStart, yEnd }) => {\r\n    if (yDirection) {\r\n        return { x: xEnd, y: !isNaN(yEnd) ? yEnd : yStart };\r\n    }\r\n    else {\r\n        return { x: xStart, y: !isNaN(yEnd) ? yEnd : yStart };\r\n    }\r\n};\r\nconst labeldDirectionHandling = {\r\n    top: { c: POSITION_TOP_COORDINATES },\r\n    bottom: { c: POSITION_BOTTOM_COORDINATES },\r\n    left: { c: POSITION_LEFT_COORDINATES },\r\n    right: { c: POSITION_RIGHT_COORDINATES },\r\n    topLeft: { c: POSITION_TOP_LEFT_COORDINATES },\r\n    topRight: { c: POSITION_TOP_RIGHT_COORDINATES },\r\n    bottomLeft: { c: POSITION_BOTTOM_LEFT_COORDINATES },\r\n    bottomRight: { c: POSITION_BOTTOM_RIGHT_COORDINATES },\r\n    inside: { c: POSITION_INSIDE_COORDINATES },\r\n    insideLeft: { c: POSITION_LEFT_COORDINATES },\r\n    insideRight: { c: POSITION_RIGHT_COORDINATES },\r\n    insideTop: { c: POSITION_TOP_COORDINATES },\r\n    insideBottom: { c: POSITION_BOTTOM_COORDINATES },\r\n    insideTopLeft: { c: POSITION_TOP_LEFT_COORDINATES },\r\n    insideBottomLeft: { c: POSITION_BOTTOM_LEFT_COORDINATES },\r\n    insideTopRight: { c: POSITION_TOP_RIGHT_COORDINATES },\r\n    insideBottomRight: { c: POSITION_BOTTOM_RIGHT_COORDINATES },\r\n};\n\nconst CROSSLINE_LABEL_POSITIONS = [\r\n    'top',\r\n    'left',\r\n    'right',\r\n    'bottom',\r\n    'topLeft',\r\n    'topRight',\r\n    'bottomLeft',\r\n    'bottomRight',\r\n    'inside',\r\n    'insideLeft',\r\n    'insideRight',\r\n    'insideTop',\r\n    'insideBottom',\r\n    'insideTopLeft',\r\n    'insideBottomLeft',\r\n    'insideTopRight',\r\n    'insideBottomRight',\r\n];\r\nconst OPT_CROSSLINE_LABEL_POSITION = predicateWithMessage((v, ctx) => OPTIONAL(v, ctx, (v) => CROSSLINE_LABEL_POSITIONS.includes(v)), `expecting an optional crossLine label position keyword such as 'topLeft', 'topRight' or 'inside'`);\r\nconst OPT_CROSSLINE_TYPE = predicateWithMessage((v, ctx) => OPTIONAL(v, ctx, (v) => v === 'range' || v === 'line'), `expecting a crossLine type keyword such as 'range' or 'line'`);\r\nclass CartesianCrossLineLabel {\r\n    constructor() {\r\n        this.enabled = undefined;\r\n        this.text = undefined;\r\n        this.fontStyle = undefined;\r\n        this.fontWeight = undefined;\r\n        this.fontSize = 14;\r\n        this.fontFamily = 'Verdana, sans-serif';\r\n        /**\r\n         * The padding between the label and the line.\r\n         */\r\n        this.padding = 5;\r\n        /**\r\n         * The color of the labels.\r\n         */\r\n        this.color = 'rgba(87, 87, 87, 1)';\r\n        this.position = undefined;\r\n        this.rotation = undefined;\r\n        this.parallel = undefined;\r\n    }\r\n}\r\n__decorate([\r\n    Validate(OPT_BOOLEAN),\r\n    __metadata(\"design:type\", Boolean)\r\n], CartesianCrossLineLabel.prototype, \"enabled\", void 0);\r\n__decorate([\r\n    Validate(OPT_STRING),\r\n    __metadata(\"design:type\", String)\r\n], CartesianCrossLineLabel.prototype, \"text\", void 0);\r\n__decorate([\r\n    Validate(OPT_FONT_STYLE),\r\n    __metadata(\"design:type\", String)\r\n], CartesianCrossLineLabel.prototype, \"fontStyle\", void 0);\r\n__decorate([\r\n    Validate(OPT_FONT_WEIGHT),\r\n    __metadata(\"design:type\", String)\r\n], CartesianCrossLineLabel.prototype, \"fontWeight\", void 0);\r\n__decorate([\r\n    Validate(NUMBER$1(0)),\r\n    __metadata(\"design:type\", Number)\r\n], CartesianCrossLineLabel.prototype, \"fontSize\", void 0);\r\n__decorate([\r\n    Validate(STRING),\r\n    __metadata(\"design:type\", String)\r\n], CartesianCrossLineLabel.prototype, \"fontFamily\", void 0);\r\n__decorate([\r\n    Validate(NUMBER$1()),\r\n    __metadata(\"design:type\", Number)\r\n], CartesianCrossLineLabel.prototype, \"padding\", void 0);\r\n__decorate([\r\n    Validate(OPT_COLOR_STRING),\r\n    __metadata(\"design:type\", String)\r\n], CartesianCrossLineLabel.prototype, \"color\", void 0);\r\n__decorate([\r\n    Validate(OPT_CROSSLINE_LABEL_POSITION),\r\n    __metadata(\"design:type\", String)\r\n], CartesianCrossLineLabel.prototype, \"position\", void 0);\r\n__decorate([\r\n    Validate(OPT_NUMBER(-360, 360)),\r\n    __metadata(\"design:type\", Number)\r\n], CartesianCrossLineLabel.prototype, \"rotation\", void 0);\r\n__decorate([\r\n    Validate(OPT_BOOLEAN),\r\n    __metadata(\"design:type\", Boolean)\r\n], CartesianCrossLineLabel.prototype, \"parallel\", void 0);\r\nclass CartesianCrossLine {\r\n    constructor() {\r\n        this.id = createId(this);\r\n        this.enabled = undefined;\r\n        this.type = undefined;\r\n        this.range = undefined;\r\n        this.value = undefined;\r\n        this.fill = undefined;\r\n        this.fillOpacity = undefined;\r\n        this.stroke = undefined;\r\n        this.strokeWidth = undefined;\r\n        this.strokeOpacity = undefined;\r\n        this.lineDash = undefined;\r\n        this.label = new CartesianCrossLineLabel();\r\n        this.scale = undefined;\r\n        this.clippedRange = [-Infinity, Infinity];\r\n        this.gridLength = 0;\r\n        this.sideFlag = -1;\r\n        this.parallelFlipRotation = 0;\r\n        this.regularFlipRotation = 0;\r\n        this.direction = ChartAxisDirection.X;\r\n        this.group = new Group({ name: `${this.id}`, layer: true, zIndex: CartesianCrossLine.LINE_LAYER_ZINDEX });\r\n        this.crossLineRange = new Range();\r\n        this.crossLineLabel = new Text();\r\n        this.labelPoint = undefined;\r\n        this.data = [];\r\n        this.startLine = false;\r\n        this.endLine = false;\r\n        this.isRange = false;\r\n        const { group, crossLineRange, crossLineLabel } = this;\r\n        group.append([crossLineRange, crossLineLabel]);\r\n        crossLineRange.pointerEvents = PointerEvents.None;\r\n    }\r\n    update(visible) {\r\n        if (!this.enabled || !visible || this.data.length === 0) {\r\n            this.group.visible = false;\r\n            return;\r\n        }\r\n        this.group.visible = true;\r\n        this.group.zIndex = this.getZIndex(this.isRange);\r\n        this.updateNodes();\r\n    }\r\n    calculateLayout(visible) {\r\n        if (!visible) {\r\n            return;\r\n        }\r\n        const dataCreated = this.createNodeData();\r\n        if (!dataCreated) {\r\n            return;\r\n        }\r\n        const { sideFlag, gridLength, data } = this;\r\n        const boxes = [];\r\n        const x1 = 0;\r\n        const x2 = sideFlag * gridLength;\r\n        const y1 = data[0];\r\n        const y2 = data[1];\r\n        const crossLineBox = new BBox(Math.min(x1, x2), Math.min(y1, y2), Math.abs(x1 - x2), Math.abs(y1 - y2));\r\n        boxes.push(crossLineBox);\r\n        const labelBox = this.computeLabelBBox();\r\n        if (labelBox) {\r\n            boxes.push(labelBox);\r\n        }\r\n        return BBox.merge(boxes);\r\n    }\r\n    updateNodes() {\r\n        this.updateRangeNode();\r\n        if (this.label.enabled) {\r\n            this.updateLabel();\r\n            this.positionLabel();\r\n        }\r\n    }\r\n    createNodeData() {\r\n        var _a, _b;\r\n        const { scale, gridLength, sideFlag, direction, label: { position = 'top' }, clippedRange, strokeWidth = 0, } = this;\r\n        this.data = [];\r\n        if (!scale) {\r\n            return false;\r\n        }\r\n        const bandwidth = (_a = scale.bandwidth) !== null && _a !== void 0 ? _a : 0;\r\n        const clippedRangeClamper = (x) => Math.max(Math.min(...clippedRange), Math.min(Math.max(...clippedRange), x));\r\n        const [xStart, xEnd] = [0, sideFlag * gridLength];\r\n        let [yStart, yEnd] = this.getRange();\r\n        let [clampedYStart, clampedYEnd] = [\r\n            Number(scale.convert(yStart, { clampMode: 'clamped' })),\r\n            scale.convert(yEnd, { clampMode: 'clamped' }) + bandwidth,\r\n        ];\r\n        clampedYStart = clippedRangeClamper(clampedYStart);\r\n        clampedYEnd = clippedRangeClamper(clampedYEnd);\r\n        [yStart, yEnd] = [Number(scale.convert(yStart)), scale.convert(yEnd) + bandwidth];\r\n        const validRange = !isNaN(clampedYStart) &&\r\n            !isNaN(clampedYEnd) &&\r\n            (yStart === clampedYStart || yEnd === clampedYEnd || clampedYStart !== clampedYEnd) &&\r\n            Math.abs(clampedYEnd - clampedYStart) > 0;\r\n        if (validRange) {\r\n            const reverse = clampedYStart !== Math.min(clampedYStart, clampedYEnd);\r\n            if (reverse) {\r\n                [clampedYStart, clampedYEnd] = [\r\n                    Math.min(clampedYStart, clampedYEnd),\r\n                    Math.max(clampedYStart, clampedYEnd),\r\n                ];\r\n                [yStart, yEnd] = [yEnd, yStart];\r\n            }\r\n        }\r\n        this.isRange = validRange;\r\n        this.startLine = !isNaN(yStart) && strokeWidth > 0 && yStart === clampedYStart;\r\n        this.endLine = !isNaN(yEnd) && strokeWidth > 0 && yEnd === clampedYEnd;\r\n        if (!validRange && !this.startLine && !this.endLine) {\r\n            return false;\r\n        }\r\n        this.data = [clampedYStart, clampedYEnd];\r\n        if (this.label.enabled) {\r\n            const yDirection = direction === ChartAxisDirection.Y;\r\n            const { c = POSITION_TOP_COORDINATES } = (_b = labeldDirectionHandling[position]) !== null && _b !== void 0 ? _b : {};\r\n            const { x: labelX, y: labelY } = c({\r\n                yDirection,\r\n                xStart,\r\n                xEnd,\r\n                yStart: clampedYStart,\r\n                yEnd: clampedYEnd,\r\n            });\r\n            this.labelPoint = {\r\n                x: labelX,\r\n                y: labelY,\r\n            };\r\n        }\r\n        return true;\r\n    }\r\n    updateRangeNode() {\r\n        var _a;\r\n        const { crossLineRange, sideFlag, gridLength, data, startLine, endLine, isRange, fill, fillOpacity, stroke, strokeWidth, lineDash, } = this;\r\n        crossLineRange.x1 = 0;\r\n        crossLineRange.x2 = sideFlag * gridLength;\r\n        crossLineRange.y1 = data[0];\r\n        crossLineRange.y2 = data[1];\r\n        crossLineRange.startLine = startLine;\r\n        crossLineRange.endLine = endLine;\r\n        crossLineRange.isRange = isRange;\r\n        crossLineRange.fill = fill;\r\n        crossLineRange.fillOpacity = fillOpacity !== null && fillOpacity !== void 0 ? fillOpacity : 1;\r\n        crossLineRange.stroke = stroke;\r\n        crossLineRange.strokeWidth = strokeWidth !== null && strokeWidth !== void 0 ? strokeWidth : 1;\r\n        crossLineRange.strokeOpacity = (_a = this.strokeOpacity) !== null && _a !== void 0 ? _a : 1;\r\n        crossLineRange.lineDash = lineDash;\r\n    }\r\n    updateLabel() {\r\n        const { crossLineLabel, label } = this;\r\n        if (!label.text) {\r\n            return;\r\n        }\r\n        crossLineLabel.fontStyle = label.fontStyle;\r\n        crossLineLabel.fontWeight = label.fontWeight;\r\n        crossLineLabel.fontSize = label.fontSize;\r\n        crossLineLabel.fontFamily = label.fontFamily;\r\n        crossLineLabel.fill = label.color;\r\n        crossLineLabel.text = label.text;\r\n    }\r\n    positionLabel() {\r\n        const { crossLineLabel, labelPoint: { x = undefined, y = undefined } = {}, label: { parallel, rotation, position = 'top', padding = 0 }, direction, parallelFlipRotation, regularFlipRotation, } = this;\r\n        if (x === undefined || y === undefined) {\r\n            return;\r\n        }\r\n        const { defaultRotation, configuredRotation } = calculateLabelRotation({\r\n            rotation,\r\n            parallel,\r\n            regularFlipRotation,\r\n            parallelFlipRotation,\r\n        });\r\n        crossLineLabel.rotation = defaultRotation + configuredRotation;\r\n        crossLineLabel.textBaseline = 'middle';\r\n        crossLineLabel.textAlign = 'center';\r\n        const bbox = crossLineLabel.computeTransformedBBox();\r\n        if (!bbox) {\r\n            return;\r\n        }\r\n        const yDirection = direction === ChartAxisDirection.Y;\r\n        const { xTranslation, yTranslation } = calculateLabelTranslation({\r\n            yDirection,\r\n            padding,\r\n            position,\r\n            bbox,\r\n        });\r\n        crossLineLabel.translationX = x + xTranslation;\r\n        crossLineLabel.translationY = y + yTranslation;\r\n    }\r\n    getZIndex(isRange = false) {\r\n        if (isRange) {\r\n            return CartesianCrossLine.RANGE_LAYER_ZINDEX;\r\n        }\r\n        return CartesianCrossLine.LINE_LAYER_ZINDEX;\r\n    }\r\n    getRange() {\r\n        const { value, range, scale } = this;\r\n        const isContinuous = ContinuousScale.is(scale);\r\n        let [start, end] = range !== null && range !== void 0 ? range : [value, undefined];\r\n        if (!isContinuous && end === undefined) {\r\n            end = start;\r\n        }\r\n        start = checkDatum(start, isContinuous) != null ? start : undefined;\r\n        end = checkDatum(end, isContinuous) != null ? end : undefined;\r\n        if (isContinuous && start === end) {\r\n            end = undefined;\r\n        }\r\n        if (start === undefined && end !== undefined) {\r\n            start = end;\r\n            end = undefined;\r\n        }\r\n        return [start, end];\r\n    }\r\n    computeLabelBBox() {\r\n        const { label } = this;\r\n        if (!label.enabled) {\r\n            return undefined;\r\n        }\r\n        const tempText = new Text();\r\n        tempText.fontFamily = label.fontFamily;\r\n        tempText.fontSize = label.fontSize;\r\n        tempText.fontStyle = label.fontStyle;\r\n        tempText.fontWeight = label.fontWeight;\r\n        tempText.text = label.text;\r\n        const { labelPoint: { x = undefined, y = undefined } = {}, label: { parallel, rotation, position = 'top', padding = 0 }, direction, parallelFlipRotation, regularFlipRotation, } = this;\r\n        if (x === undefined || y === undefined) {\r\n            return undefined;\r\n        }\r\n        const { configuredRotation } = calculateLabelRotation({\r\n            rotation,\r\n            parallel,\r\n            regularFlipRotation,\r\n            parallelFlipRotation,\r\n        });\r\n        tempText.rotation = configuredRotation;\r\n        tempText.textBaseline = 'middle';\r\n        tempText.textAlign = 'center';\r\n        const bbox = tempText.computeTransformedBBox();\r\n        if (!bbox) {\r\n            return undefined;\r\n        }\r\n        const yDirection = direction === ChartAxisDirection.Y;\r\n        const { xTranslation, yTranslation } = calculateLabelTranslation({\r\n            yDirection,\r\n            padding,\r\n            position,\r\n            bbox,\r\n        });\r\n        tempText.translationX = x + xTranslation;\r\n        tempText.translationY = y + yTranslation;\r\n        return tempText.computeTransformedBBox();\r\n    }\r\n    calculatePadding(padding) {\r\n        var _a, _b, _c, _d, _e, _f, _g, _h;\r\n        const { isRange, startLine, endLine, direction, label: { padding: labelPadding = 0, position = 'top' }, } = this;\r\n        if (!isRange && !startLine && !endLine) {\r\n            return;\r\n        }\r\n        const crossLineLabelBBox = this.computeLabelBBox();\r\n        const labelX = crossLineLabelBBox === null || crossLineLabelBBox === void 0 ? void 0 : crossLineLabelBBox.x;\r\n        const labelY = crossLineLabelBBox === null || crossLineLabelBBox === void 0 ? void 0 : crossLineLabelBBox.y;\r\n        if (!crossLineLabelBBox || labelX == undefined || labelY == undefined) {\r\n            return;\r\n        }\r\n        const chartPadding = calculateLabelChartPadding({\r\n            yDirection: direction === ChartAxisDirection.Y,\r\n            padding: labelPadding,\r\n            position,\r\n            bbox: crossLineLabelBBox,\r\n        });\r\n        padding.left = Math.max((_a = padding.left) !== null && _a !== void 0 ? _a : 0, (_b = chartPadding.left) !== null && _b !== void 0 ? _b : 0);\r\n        padding.right = Math.max((_c = padding.right) !== null && _c !== void 0 ? _c : 0, (_d = chartPadding.right) !== null && _d !== void 0 ? _d : 0);\r\n        padding.top = Math.max((_e = padding.top) !== null && _e !== void 0 ? _e : 0, (_f = chartPadding.top) !== null && _f !== void 0 ? _f : 0);\r\n        padding.bottom = Math.max((_g = padding.bottom) !== null && _g !== void 0 ? _g : 0, (_h = chartPadding.bottom) !== null && _h !== void 0 ? _h : 0);\r\n    }\r\n}\r\nCartesianCrossLine.LINE_LAYER_ZINDEX = Layers.SERIES_CROSSLINE_LINE_ZINDEX;\r\nCartesianCrossLine.RANGE_LAYER_ZINDEX = Layers.SERIES_CROSSLINE_RANGE_ZINDEX;\r\nCartesianCrossLine.className = 'CrossLine';\r\n__decorate([\r\n    Validate(OPT_BOOLEAN),\r\n    __metadata(\"design:type\", Boolean)\r\n], CartesianCrossLine.prototype, \"enabled\", void 0);\r\n__decorate([\r\n    Validate(OPT_CROSSLINE_TYPE),\r\n    __metadata(\"design:type\", String)\r\n], CartesianCrossLine.prototype, \"type\", void 0);\r\n__decorate([\r\n    Validate(OPT_ARRAY(2)),\r\n    __metadata(\"design:type\", Array)\r\n], CartesianCrossLine.prototype, \"range\", void 0);\r\n__decorate([\r\n    Validate(OPT_COLOR_STRING),\r\n    __metadata(\"design:type\", String)\r\n], CartesianCrossLine.prototype, \"fill\", void 0);\r\n__decorate([\r\n    Validate(OPT_NUMBER(0, 1)),\r\n    __metadata(\"design:type\", Number)\r\n], CartesianCrossLine.prototype, \"fillOpacity\", void 0);\r\n__decorate([\r\n    Validate(OPT_COLOR_STRING),\r\n    __metadata(\"design:type\", String)\r\n], CartesianCrossLine.prototype, \"stroke\", void 0);\r\n__decorate([\r\n    Validate(OPT_NUMBER()),\r\n    __metadata(\"design:type\", Number)\r\n], CartesianCrossLine.prototype, \"strokeWidth\", void 0);\r\n__decorate([\r\n    Validate(OPT_NUMBER(0, 1)),\r\n    __metadata(\"design:type\", Number)\r\n], CartesianCrossLine.prototype, \"strokeOpacity\", void 0);\r\n__decorate([\r\n    Validate(OPT_LINE_DASH),\r\n    __metadata(\"design:type\", Array)\r\n], CartesianCrossLine.prototype, \"lineDash\", void 0);\n\nconst identity = (x) => x;\r\nclass LogScale extends ContinuousScale {\r\n    constructor() {\r\n        super([1, 10], [0, 1]);\r\n        this.type = 'log';\r\n        this.base = 10;\r\n        this.cacheProps = ['domain', 'range', 'nice', 'tickCount', 'base'];\r\n        this.baseLog = identity;\r\n        this.basePow = identity;\r\n        this.log = (x) => {\r\n            return this.domain[0] >= 0 ? this.baseLog(x) : -this.baseLog(-x);\r\n        };\r\n        this.pow = (x) => {\r\n            return this.domain[0] >= 0 ? this.basePow(x) : -this.basePow(-x);\r\n        };\r\n        // Handling <1 and crossing 0 cases is tricky, easiest solution is to default to clamping.\r\n        this.defaultClampMode = 'clamped';\r\n    }\r\n    toDomain(d) {\r\n        return d;\r\n    }\r\n    transform(x) {\r\n        return this.domain[0] >= 0 ? Math.log(x) : -Math.log(-x);\r\n    }\r\n    transformInvert(x) {\r\n        return this.domain[0] >= 0 ? Math.exp(x) : -Math.exp(-x);\r\n    }\r\n    update() {\r\n        if (!this.domain || this.domain.length < 2) {\r\n            return;\r\n        }\r\n        this.updateLogFn();\r\n        this.updatePowFn();\r\n        if (this.nice) {\r\n            this.updateNiceDomain();\r\n        }\r\n    }\r\n    updateLogFn() {\r\n        const { base } = this;\r\n        let log;\r\n        if (base === 10) {\r\n            log = Math.log10;\r\n        }\r\n        else if (base === Math.E) {\r\n            log = Math.log;\r\n        }\r\n        else if (base === 2) {\r\n            log = Math.log2;\r\n        }\r\n        else {\r\n            const logBase = Math.log(base);\r\n            log = (x) => Math.log(x) / logBase;\r\n        }\r\n        this.baseLog = log;\r\n    }\r\n    updatePowFn() {\r\n        const { base } = this;\r\n        let pow;\r\n        if (base === 10) {\r\n            pow = LogScale.pow10;\r\n        }\r\n        else if (base === Math.E) {\r\n            pow = Math.exp;\r\n        }\r\n        else {\r\n            pow = (x) => Math.pow(base, x);\r\n        }\r\n        this.basePow = pow;\r\n    }\r\n    updateNiceDomain() {\r\n        const [d0, d1] = this.domain;\r\n        const n0 = this.pow(Math.floor(this.log(d0)));\r\n        const n1 = this.pow(Math.ceil(this.log(d1)));\r\n        this.niceDomain = [n0, n1];\r\n    }\r\n    static pow10(x) {\r\n        return x >= 0 ? Math.pow(10, x) : 1 / Math.pow(10, -x);\r\n    }\r\n    ticks() {\r\n        var _a;\r\n        const count = (_a = this.tickCount) !== null && _a !== void 0 ? _a : 10;\r\n        if (!this.domain || this.domain.length < 2 || count < 1) {\r\n            return [];\r\n        }\r\n        this.refresh();\r\n        const base = this.base;\r\n        const [d0, d1] = this.getDomain();\r\n        let p0 = this.log(d0);\r\n        let p1 = this.log(d1);\r\n        if (this.interval) {\r\n            const step = Math.abs(this.interval);\r\n            const absDiff = Math.abs(p1 - p0);\r\n            const ticks = range$1(p0, p1, Math.min(absDiff, step))\r\n                .map((x) => this.pow(x))\r\n                .filter((t) => t >= d0 && t <= d1);\r\n            if (!this.isDenseInterval({ start: d0, stop: d1, interval: step, count: ticks.length })) {\r\n                return ticks;\r\n            }\r\n        }\r\n        const isBaseInteger = base % 1 === 0;\r\n        const isDiffLarge = p1 - p0 >= count;\r\n        if (!isBaseInteger || isDiffLarge) {\r\n            // Returns [10^1, 10^2, 10^3, 10^4, ...]\r\n            return ticks(p0, p1, Math.min(p1 - p0, count)).map((x) => this.pow(x));\r\n        }\r\n        const ticks$1 = [];\r\n        const isPositive = d0 > 0;\r\n        p0 = Math.floor(p0) - 1;\r\n        p1 = Math.round(p1) + 1;\r\n        const min = Math.min(...this.range);\r\n        const max = Math.max(...this.range);\r\n        const availableSpacing = (max - min) / count;\r\n        let lastTickPosition = Infinity;\r\n        for (let p = p0; p <= p1; p++) {\r\n            const nextMagnitudeTickPosition = this.convert(this.pow(p + 1));\r\n            for (let k = 1; k < base; k++) {\r\n                const q = isPositive ? k : base - k + 1;\r\n                const t = this.pow(p) * q;\r\n                const tickPosition = this.convert(t);\r\n                const prevSpacing = Math.abs(lastTickPosition - tickPosition);\r\n                const nextSpacing = Math.abs(tickPosition - nextMagnitudeTickPosition);\r\n                const fits = prevSpacing >= availableSpacing && nextSpacing >= availableSpacing;\r\n                if (t >= d0 && t <= d1 && (k === 1 || fits)) {\r\n                    ticks$1.push(t);\r\n                    lastTickPosition = tickPosition;\r\n                }\r\n            }\r\n        }\r\n        return ticks$1;\r\n    }\r\n    tickFormat({ count, ticks, specifier, }) {\r\n        const { base } = this;\r\n        if (specifier == null) {\r\n            specifier = base === 10 ? '.0e' : ',';\r\n        }\r\n        if (typeof specifier === 'string') {\r\n            specifier = format(specifier);\r\n        }\r\n        if (count === Infinity) {\r\n            return specifier;\r\n        }\r\n        if (ticks == null) {\r\n            this.ticks();\r\n        }\r\n        return (d) => {\r\n            return specifier(d);\r\n        };\r\n    }\r\n}\r\n__decorate([\r\n    Validate(NUMBER$1(0)),\r\n    __metadata(\"design:type\", Object)\r\n], LogScale.prototype, \"base\", void 0);\n\nvar DefaultTimeFormats;\r\n(function (DefaultTimeFormats) {\r\n    DefaultTimeFormats[DefaultTimeFormats[\"MILLISECOND\"] = 0] = \"MILLISECOND\";\r\n    DefaultTimeFormats[DefaultTimeFormats[\"SECOND\"] = 1] = \"SECOND\";\r\n    DefaultTimeFormats[DefaultTimeFormats[\"MINUTE\"] = 2] = \"MINUTE\";\r\n    DefaultTimeFormats[DefaultTimeFormats[\"HOUR\"] = 3] = \"HOUR\";\r\n    DefaultTimeFormats[DefaultTimeFormats[\"WEEK_DAY\"] = 4] = \"WEEK_DAY\";\r\n    DefaultTimeFormats[DefaultTimeFormats[\"SHORT_MONTH\"] = 5] = \"SHORT_MONTH\";\r\n    DefaultTimeFormats[DefaultTimeFormats[\"MONTH\"] = 6] = \"MONTH\";\r\n    DefaultTimeFormats[DefaultTimeFormats[\"SHORT_YEAR\"] = 7] = \"SHORT_YEAR\";\r\n    DefaultTimeFormats[DefaultTimeFormats[\"YEAR\"] = 8] = \"YEAR\";\r\n})(DefaultTimeFormats || (DefaultTimeFormats = {}));\r\nconst formatStrings = {\r\n    [DefaultTimeFormats.MILLISECOND]: '.%L',\r\n    [DefaultTimeFormats.SECOND]: ':%S',\r\n    [DefaultTimeFormats.MINUTE]: '%I:%M',\r\n    [DefaultTimeFormats.HOUR]: '%I %p',\r\n    [DefaultTimeFormats.WEEK_DAY]: '%a',\r\n    [DefaultTimeFormats.SHORT_MONTH]: '%b %d',\r\n    [DefaultTimeFormats.MONTH]: '%B',\r\n    [DefaultTimeFormats.SHORT_YEAR]: '%y',\r\n    [DefaultTimeFormats.YEAR]: '%Y',\r\n};\r\nfunction toNumber(x) {\r\n    return x instanceof Date ? x.getTime() : x;\r\n}\r\nclass TimeScale extends ContinuousScale {\r\n    constructor() {\r\n        super([new Date(2022, 11, 7), new Date(2022, 11, 8)], [0, 1]);\r\n        this.type = 'time';\r\n        this.cacheProps = [\r\n            'domain',\r\n            'range',\r\n            'nice',\r\n            'tickCount',\r\n            'interval',\r\n            'minTickCount',\r\n            'maxTickCount',\r\n        ];\r\n        this.year = year;\r\n        this.month = month;\r\n        this.week = sunday;\r\n        this.day = day;\r\n        this.hour = hour;\r\n        this.minute = minute;\r\n        this.second = second;\r\n        this.millisecond = millisecond;\r\n        /**\r\n         * Array of default tick intervals in the following format:\r\n         *\r\n         *     [\r\n         *         interval (unit of time),\r\n         *         number of units (step),\r\n         *         the length of that number of units in milliseconds\r\n         *     ]\r\n         */\r\n        this.tickIntervals = [\r\n            [this.second, 1, durationSecond],\r\n            [this.second, 5, 5 * durationSecond],\r\n            [this.second, 15, 15 * durationSecond],\r\n            [this.second, 30, 30 * durationSecond],\r\n            [this.minute, 1, durationMinute],\r\n            [this.minute, 5, 5 * durationMinute],\r\n            [this.minute, 15, 15 * durationMinute],\r\n            [this.minute, 30, 30 * durationMinute],\r\n            [this.hour, 1, durationHour],\r\n            [this.hour, 3, 3 * durationHour],\r\n            [this.hour, 6, 6 * durationHour],\r\n            [this.hour, 12, 12 * durationHour],\r\n            [this.day, 1, durationDay],\r\n            [this.day, 2, 2 * durationDay],\r\n            [this.week, 1, durationWeek],\r\n            [this.week, 2, 2 * durationWeek],\r\n            [this.week, 3, 3 * durationWeek],\r\n            [this.month, 1, durationMonth],\r\n            [this.month, 2, 2 * durationMonth],\r\n            [this.month, 3, 3 * durationMonth],\r\n            [this.month, 4, 4 * durationMonth],\r\n            [this.month, 6, 6 * durationMonth],\r\n            [this.year, 1, durationYear],\r\n        ];\r\n    }\r\n    toDomain(d) {\r\n        return new Date(d);\r\n    }\r\n    calculateDefaultTickFormat(ticks = []) {\r\n        let defaultTimeFormat = DefaultTimeFormats.YEAR;\r\n        const updateFormat = (format) => {\r\n            if (format < defaultTimeFormat) {\r\n                defaultTimeFormat = format;\r\n            }\r\n        };\r\n        for (const value of ticks) {\r\n            const format = this.getLowestGranularityFormat(value);\r\n            updateFormat(format);\r\n        }\r\n        const firstTick = toNumber(ticks[0]);\r\n        const lastTick = toNumber(ticks[ticks.length - 1]);\r\n        const startYear = new Date(firstTick).getFullYear();\r\n        const stopYear = new Date(lastTick).getFullYear();\r\n        const yearChange = stopYear - startYear > 0;\r\n        return this.buildFormatString(defaultTimeFormat, yearChange);\r\n    }\r\n    buildFormatString(defaultTimeFormat, yearChange) {\r\n        let formatStringArray = [formatStrings[defaultTimeFormat]];\r\n        let timeEndIndex = 0;\r\n        const domain = this.getDomain();\r\n        const start = Math.min(...domain.map(toNumber));\r\n        const stop = Math.max(...domain.map(toNumber));\r\n        const extent = stop - start;\r\n        switch (defaultTimeFormat) {\r\n            case DefaultTimeFormats.SECOND:\r\n                if (extent / durationMinute > 1) {\r\n                    formatStringArray.push(formatStrings[DefaultTimeFormats.MINUTE]);\r\n                }\r\n            // fall through deliberately\r\n            case DefaultTimeFormats.MINUTE:\r\n                if (extent / durationHour > 1) {\r\n                    formatStringArray.push(formatStrings[DefaultTimeFormats.HOUR]);\r\n                }\r\n            // fall through deliberately\r\n            case DefaultTimeFormats.HOUR:\r\n                timeEndIndex = formatStringArray.length;\r\n                if (extent / durationDay > 1) {\r\n                    formatStringArray.push(formatStrings[DefaultTimeFormats.WEEK_DAY]);\r\n                }\r\n            // fall through deliberately\r\n            case DefaultTimeFormats.WEEK_DAY:\r\n                if (extent / durationWeek > 1 || yearChange) {\r\n                    // if it's more than a week or there is a year change, don't show week day\r\n                    const weekDayIndex = formatStringArray.indexOf(formatStrings[DefaultTimeFormats.WEEK_DAY]);\r\n                    if (weekDayIndex > -1) {\r\n                        formatStringArray.splice(weekDayIndex, 1, formatStrings[DefaultTimeFormats.SHORT_MONTH]);\r\n                    }\r\n                }\r\n            // fall through deliberately\r\n            case DefaultTimeFormats.SHORT_MONTH:\r\n            case DefaultTimeFormats.MONTH:\r\n                if (extent / durationYear > 1 || yearChange) {\r\n                    formatStringArray.push(formatStrings[DefaultTimeFormats.YEAR]);\r\n                }\r\n        }\r\n        if (timeEndIndex < formatStringArray.length) {\r\n            // Insert a gap between all date components.\r\n            formatStringArray = [\r\n                ...formatStringArray.slice(0, timeEndIndex),\r\n                formatStringArray.slice(timeEndIndex).join(' '),\r\n            ];\r\n        }\r\n        if (timeEndIndex > 0) {\r\n            // Reverse order of time components, since they should be displayed in descending\r\n            // granularity.\r\n            formatStringArray = [\r\n                ...formatStringArray.slice(0, timeEndIndex).reverse(),\r\n                ...formatStringArray.slice(timeEndIndex),\r\n            ];\r\n            if (timeEndIndex < formatStringArray.length) {\r\n                // Insert a gap between time and date components.\r\n                formatStringArray.splice(timeEndIndex, 0, ' ');\r\n            }\r\n        }\r\n        return formatStringArray.join('');\r\n    }\r\n    getLowestGranularityFormat(value) {\r\n        if (this.second.floor(value) < value) {\r\n            return DefaultTimeFormats.MILLISECOND;\r\n        }\r\n        else if (this.minute.floor(value) < value) {\r\n            return DefaultTimeFormats.SECOND;\r\n        }\r\n        else if (this.hour.floor(value) < value) {\r\n            return DefaultTimeFormats.MINUTE;\r\n        }\r\n        else if (this.day.floor(value) < value) {\r\n            return DefaultTimeFormats.HOUR;\r\n        }\r\n        else if (this.month.floor(value) < value) {\r\n            if (this.week.floor(value) < value) {\r\n                return DefaultTimeFormats.WEEK_DAY;\r\n            }\r\n            return DefaultTimeFormats.SHORT_MONTH;\r\n        }\r\n        else if (this.year.floor(value) < value) {\r\n            return DefaultTimeFormats.MONTH;\r\n        }\r\n        return DefaultTimeFormats.YEAR;\r\n    }\r\n    defaultTickFormat(ticks) {\r\n        const formatString = this.calculateDefaultTickFormat(ticks);\r\n        return (date) => buildFormatter(formatString)(date);\r\n    }\r\n    /**\r\n     * @param options Tick interval options.\r\n     * @param options.start The start time (timestamp).\r\n     * @param options.stop The end time (timestamp).\r\n     * @param options.count Number of intervals between ticks.\r\n     */\r\n    getTickInterval({ start, stop, count, minCount, maxCount, }) {\r\n        const { tickIntervals } = this;\r\n        let countableTimeInterval;\r\n        let step;\r\n        const tickCount = count !== null && count !== void 0 ? count : ContinuousScale.defaultTickCount;\r\n        const target = Math.abs(stop - start) / Math.max(tickCount, 1);\r\n        let i = 0;\r\n        while (i < tickIntervals.length && target > tickIntervals[i][2]) {\r\n            i++;\r\n        }\r\n        if (i === 0) {\r\n            step = Math.max(tickStep(start, stop, tickCount, minCount, maxCount), 1);\r\n            countableTimeInterval = this.millisecond;\r\n        }\r\n        else if (i === tickIntervals.length) {\r\n            const y0 = start / durationYear;\r\n            const y1 = stop / durationYear;\r\n            step = tickStep(y0, y1, tickCount, minCount, maxCount);\r\n            countableTimeInterval = this.year;\r\n        }\r\n        else {\r\n            const diff0 = target - tickIntervals[i - 1][2];\r\n            const diff1 = tickIntervals[i][2] - target;\r\n            const index = diff0 < diff1 ? i - 1 : i;\r\n            [countableTimeInterval, step] = tickIntervals[index];\r\n        }\r\n        return countableTimeInterval.every(step);\r\n    }\r\n    invert(y) {\r\n        return new Date(super.invert(y));\r\n    }\r\n    /**\r\n     * Returns uniformly-spaced dates that represent the scale's domain.\r\n     */\r\n    ticks() {\r\n        if (!this.domain || this.domain.length < 2) {\r\n            return [];\r\n        }\r\n        this.refresh();\r\n        const [t0, t1] = this.getDomain().map(toNumber);\r\n        if (this.interval !== undefined) {\r\n            return this.getTicksForInterval({ start: t0, stop: t1 });\r\n        }\r\n        if (this.nice) {\r\n            const { tickCount } = this;\r\n            if (tickCount === 2) {\r\n                return this.niceDomain;\r\n            }\r\n            if (tickCount === 1) {\r\n                return this.niceDomain.slice(0, 1);\r\n            }\r\n        }\r\n        return this.getDefaultTicks({ start: t0, stop: t1 });\r\n    }\r\n    getDefaultTicks({ start, stop }) {\r\n        const t = this.getTickInterval({\r\n            start,\r\n            stop,\r\n            count: this.tickCount,\r\n            minCount: this.minTickCount,\r\n            maxCount: this.maxTickCount,\r\n        });\r\n        return t ? t.range(new Date(start), new Date(stop)) : []; // inclusive stop\r\n    }\r\n    getTicksForInterval({ start, stop }) {\r\n        const { interval, tickIntervals } = this;\r\n        if (!interval) {\r\n            return [];\r\n        }\r\n        if (interval instanceof TimeInterval) {\r\n            const ticks = interval.range(new Date(start), new Date(stop));\r\n            if (this.isDenseInterval({ start, stop, interval, count: ticks.length })) {\r\n                return this.getDefaultTicks({ start, stop });\r\n            }\r\n            return ticks;\r\n        }\r\n        const absInterval = Math.abs(interval);\r\n        if (this.isDenseInterval({ start, stop, interval: absInterval })) {\r\n            return this.getDefaultTicks({ start, stop });\r\n        }\r\n        const reversedInterval = [...tickIntervals];\r\n        reversedInterval.reverse();\r\n        const timeInterval = reversedInterval.find((tickInterval) => absInterval % tickInterval[2] === 0);\r\n        if (timeInterval) {\r\n            const i = timeInterval[0].every(absInterval / (timeInterval[2] / timeInterval[1]));\r\n            return i.range(new Date(start), new Date(stop));\r\n        }\r\n        let date = new Date(start);\r\n        const stopDate = new Date(stop);\r\n        const ticks = [];\r\n        while (date <= stopDate) {\r\n            ticks.push(date);\r\n            date = new Date(date);\r\n            date.setMilliseconds(date.getMilliseconds() + absInterval);\r\n        }\r\n        return ticks;\r\n    }\r\n    /**\r\n     * Returns a time format function suitable for displaying tick values.\r\n     * @param specifier If the specifier string is provided, this method is equivalent to\r\n     * the {@link TimeLocaleObject.format} method.\r\n     * If no specifier is provided, this method returns the default time format function.\r\n     */\r\n    tickFormat({ ticks, specifier }) {\r\n        return specifier == undefined ? this.defaultTickFormat(ticks) : buildFormatter(specifier);\r\n    }\r\n    update() {\r\n        if (!this.domain || this.domain.length < 2) {\r\n            return;\r\n        }\r\n        if (this.nice) {\r\n            this.updateNiceDomain();\r\n        }\r\n    }\r\n    /**\r\n     * Extends the domain so that it starts and ends on nice round values.\r\n     * This method typically modifies the scale’s domain, and may only extend the bounds to the nearest round value.\r\n     */\r\n    updateNiceDomain() {\r\n        const maxAttempts = 4;\r\n        let [d0, d1] = this.domain;\r\n        for (let i = 0; i < maxAttempts; i++) {\r\n            this.updateNiceDomainIteration(d0, d1);\r\n            const [n0, n1] = this.niceDomain;\r\n            if (toNumber(d0) === toNumber(n0) && toNumber(d1) === toNumber(n1)) {\r\n                break;\r\n            }\r\n            d0 = n0;\r\n            d1 = n1;\r\n        }\r\n    }\r\n    updateNiceDomainIteration(d0, d1) {\r\n        const start = toNumber(d0);\r\n        const stop = toNumber(d1);\r\n        const { interval } = this;\r\n        let i;\r\n        if (interval instanceof TimeInterval) {\r\n            i = interval;\r\n        }\r\n        else {\r\n            const tickCount = typeof interval === 'number' ? (stop - start) / Math.max(interval, 1) : this.tickCount;\r\n            i = this.getTickInterval({\r\n                start,\r\n                stop,\r\n                count: tickCount,\r\n                minCount: this.minTickCount,\r\n                maxCount: this.maxTickCount,\r\n            });\r\n        }\r\n        if (i) {\r\n            const intervalRange = i.range(d0, d1, true);\r\n            const n0 = intervalRange[0];\r\n            const n1 = intervalRange[intervalRange.length - 1];\r\n            this.niceDomain = [n0, n1];\r\n        }\r\n    }\r\n}\n\nclass Padding {\r\n    constructor(top = 0, right = top, bottom = top, left = right) {\r\n        this.top = top;\r\n        this.right = right;\r\n        this.bottom = bottom;\r\n        this.left = left;\r\n    }\r\n    clear() {\r\n        this.top = this.right = this.bottom = this.left = 0;\r\n    }\r\n}\r\n__decorate([\r\n    Validate(NUMBER$1(0)),\r\n    __metadata(\"design:type\", Number)\r\n], Padding.prototype, \"top\", void 0);\r\n__decorate([\r\n    Validate(NUMBER$1(0)),\r\n    __metadata(\"design:type\", Number)\r\n], Padding.prototype, \"right\", void 0);\r\n__decorate([\r\n    Validate(NUMBER$1(0)),\r\n    __metadata(\"design:type\", Number)\r\n], Padding.prototype, \"bottom\", void 0);\r\n__decorate([\r\n    Validate(NUMBER$1(0)),\r\n    __metadata(\"design:type\", Number)\r\n], Padding.prototype, \"left\", void 0);\n\nvar sparklinesUtil = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    extent: extent,\n    normalisedExtent: normalisedExtent,\n    normalisedExtentWithMetadata: normalisedExtentWithMetadata,\n    toFixed: toFixed,\n    isNumberEqual: isEqual,\n    tickFormat: tickFormat,\n    interpolateString: interpolate,\n    ticks: ticks,\n    tickStep: tickStep,\n    range: range$1,\n    Color: Color,\n    isString: isString,\n    isStringObject: isStringObject,\n    isDate: isDate,\n    isDiscrete: isDiscrete,\n    isContinuous: isContinuous,\n    checkDatum: checkDatum,\n    isNumber: isNumber,\n    resetIds: resetIds,\n    createId: createId,\n    Padding: Padding,\n    jsonDiff: jsonDiff,\n    DELETE: DELETE,\n    jsonMerge: jsonMerge,\n    jsonApply: jsonApply,\n    jsonWalk: jsonWalk,\n    normalizeAngle360: normalizeAngle360,\n    normalizeAngle360Inclusive: normalizeAngle360Inclusive,\n    normalizeAngle180: normalizeAngle180,\n    toRadians: toRadians,\n    toDegrees: toDegrees,\n    angleBetween: angleBetween,\n    zipObject: zipObject,\n    clamp: clamp,\n    isEqual: isEqual,\n    isNegative: isNegative,\n    round: round$1,\n    mod: mod,\n    sanitizeHtml: sanitizeHtml,\n    Logger: Logger\n});\n\nfunction areArrayNumbersEqual(arrA, arrB) {\r\n    return arrA.length === arrB.length && arrA.every((item, i) => Number(item) === Number(arrB[i]));\r\n}\n\nfunction circleRectOverlap(c, x, y, w, h) {\r\n    // Find closest horizontal and vertical edges.\r\n    let edgeX = c.x;\r\n    if (c.x < x) {\r\n        edgeX = x;\r\n    }\r\n    else if (c.x > x + w) {\r\n        edgeX = x + w;\r\n    }\r\n    let edgeY = c.y;\r\n    if (c.y < y) {\r\n        edgeY = y;\r\n    }\r\n    else if (c.y > y + h) {\r\n        edgeY = y + h;\r\n    }\r\n    // Find distance to closest edges.\r\n    const dx = c.x - edgeX;\r\n    const dy = c.y - edgeY;\r\n    const d = Math.sqrt(dx * dx + dy * dy);\r\n    return d <= c.size * 0.5;\r\n}\r\nfunction rectRectOverlap(r1, x2, y2, w2, h2) {\r\n    const xOverlap = r1.x + r1.width > x2 && r1.x < x2 + w2;\r\n    const yOverlap = r1.y + r1.height > y2 && r1.y < y2 + h2;\r\n    return xOverlap && yOverlap;\r\n}\r\nfunction rectContainsRect(r1, r2x, r2y, r2w, r2h) {\r\n    return r2x + r2w < r1.x + r1.width && r2x > r1.x && r2y > r1.y && r2y + r2h < r1.y + r1.height;\r\n}\r\nfunction isPointLabelDatum(x) {\r\n    return x != null && typeof x.point === 'object' && typeof x.label === 'object';\r\n}\r\n/**\r\n * @param data Points and labels for one or more series. The order of series determines label placement precedence.\r\n * @param bounds Bounds to fit the labels into. If a label can't be fully contained, it doesn't fit.\r\n * @returns Placed labels for the given series (in the given order).\r\n */\r\nfunction placeLabels(data, bounds, padding = 5) {\r\n    const result = [];\r\n    data = data.map((d) => d.slice().sort((a, b) => b.point.size - a.point.size));\r\n    for (let j = 0; j < data.length; j++) {\r\n        const labels = (result[j] = []);\r\n        const datum = data[j];\r\n        if (!((datum === null || datum === void 0 ? void 0 : datum.length) && datum[0].label)) {\r\n            continue;\r\n        }\r\n        for (let i = 0, ln = datum.length; i < ln; i++) {\r\n            const d = datum[i];\r\n            const l = d.label;\r\n            const r = d.point.size * 0.5;\r\n            const x = d.point.x - l.width * 0.5;\r\n            const y = d.point.y - r - l.height - padding;\r\n            const { width, height } = l;\r\n            const withinBounds = !bounds || rectContainsRect(bounds, x, y, width, height);\r\n            if (!withinBounds) {\r\n                continue;\r\n            }\r\n            const overlapPoints = data.some((datum) => datum.some((d) => circleRectOverlap(d.point, x, y, width, height)));\r\n            if (overlapPoints) {\r\n                continue;\r\n            }\r\n            const overlapLabels = result.some((labels) => labels.some((l) => rectRectOverlap(l, x, y, width, height)));\r\n            if (overlapLabels) {\r\n                continue;\r\n            }\r\n            labels.push({\r\n                index: i,\r\n                text: l.text,\r\n                x,\r\n                y,\r\n                width,\r\n                height,\r\n                datum: d,\r\n            });\r\n        }\r\n    }\r\n    return result;\r\n}\r\nfunction axisLabelsOverlap(data, padding) {\r\n    const result = [];\r\n    for (let i = 0; i < data.length; i++) {\r\n        const datum = data[i];\r\n        const { point: { x, y }, label: { text }, } = datum;\r\n        let { label: { width, height }, } = datum;\r\n        width += padding !== null && padding !== void 0 ? padding : 0;\r\n        height += padding !== null && padding !== void 0 ? padding : 0;\r\n        const overlapLabels = result.some((l) => {\r\n            return rectRectOverlap(l, x, y, width, height);\r\n        });\r\n        if (overlapLabels) {\r\n            return true;\r\n        }\r\n        result.push({\r\n            index: i,\r\n            text,\r\n            x,\r\n            y,\r\n            width,\r\n            height,\r\n            datum,\r\n        });\r\n    }\r\n    return false;\r\n}\n\nconst GRID_STYLE_KEYS = ['stroke', 'lineDash'];\r\nconst GRID_STYLE = predicateWithMessage(ARRAY(undefined, (o) => {\r\n    for (const key in o) {\r\n        if (!GRID_STYLE_KEYS.includes(key)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}), `expecting an Array of objects with gridline style properties such as 'stroke' and 'lineDash'`);\r\nclass AxisGridLine {\r\n    constructor() {\r\n        this.enabled = true;\r\n        this.width = 1;\r\n        this.style = [\r\n            {\r\n                stroke: undefined,\r\n                lineDash: [],\r\n            },\r\n        ];\r\n    }\r\n}\r\n__decorate([\r\n    Validate(BOOLEAN),\r\n    __metadata(\"design:type\", Object)\r\n], AxisGridLine.prototype, \"enabled\", void 0);\r\n__decorate([\r\n    Validate(NUMBER$1(0)),\r\n    __metadata(\"design:type\", Number)\r\n], AxisGridLine.prototype, \"width\", void 0);\r\n__decorate([\r\n    Validate(GRID_STYLE),\r\n    __metadata(\"design:type\", Array)\r\n], AxisGridLine.prototype, \"style\", void 0);\n\nfunction Default(defaultValue, replaces = [undefined]) {\r\n    return addTransformToInstanceProperty((_, __, v) => {\r\n        if (replaces.includes(v)) {\r\n            return defaultValue;\r\n        }\r\n        return v;\r\n    });\r\n}\n\nclass AxisLabel {\r\n    constructor() {\r\n        this.enabled = true;\r\n        /** If set to `false`, axis labels will not be wrapped on multiple lines. */\r\n        this.autoWrap = false;\r\n        /** Used to constrain the width of the label when `autoWrap` is `true`, if the label text width exceeds the `maxWidth`, it will be wrapped on multiple lines automatically. If `maxWidth` is omitted, a default width constraint will be applied. */\r\n        this.maxWidth = undefined;\r\n        /** Used to constrain the height of the multiline label, if the label text height exceeds the `maxHeight`, it will be truncated automatically. If `maxHeight` is omitted, a default height constraint will be applied. */\r\n        this.maxHeight = undefined;\r\n        this.fontStyle = undefined;\r\n        this.fontWeight = undefined;\r\n        this.fontSize = 12;\r\n        this.fontFamily = 'Verdana, sans-serif';\r\n        /**\r\n         * The padding between the labels and the ticks.\r\n         */\r\n        this.padding = 5;\r\n        /**\r\n         * Minimum gap in pixels between the axis labels before being removed to avoid collisions.\r\n         */\r\n        this.minSpacing = NaN;\r\n        /**\r\n         * The color of the labels.\r\n         * Use `undefined` rather than `rgba(0, 0, 0, 0)` to make labels invisible.\r\n         */\r\n        this.color = 'rgba(87, 87, 87, 1)';\r\n        /**\r\n         * Custom label rotation in degrees.\r\n         * Labels are rendered perpendicular to the axis line by default.\r\n         * Or parallel to the axis line, if the {@link parallel} is set to `true`.\r\n         * The value of this config is used as the angular offset/deflection\r\n         * from the default rotation.\r\n         */\r\n        this.rotation = undefined;\r\n        /**\r\n         * Avoid axis label collision by automatically reducing the number of ticks displayed. If set to `false`, axis labels may collide.\r\n         */\r\n        this.avoidCollisions = true;\r\n        /**\r\n         * By default, labels and ticks are positioned to the left of the axis line.\r\n         * `true` positions the labels to the right of the axis line.\r\n         * However, if the axis is rotated, it's easier to think in terms\r\n         * of this side or the opposite side, rather than left and right.\r\n         * We use the term `mirror` for conciseness, although it's not\r\n         * true mirroring - for example, when a label is rotated, so that\r\n         * it is inclined at the 45 degree angle, text flowing from north-west\r\n         * to south-east, ending at the tick to the left of the axis line,\r\n         * and then we set this config to `true`, the text will still be flowing\r\n         * from north-west to south-east, _starting_ at the tick to the right\r\n         * of the axis line.\r\n         */\r\n        this.mirrored = false;\r\n        /**\r\n         * Labels are rendered perpendicular to the axis line by default.\r\n         * Setting this config to `true` makes labels render parallel to the axis line\r\n         * and center aligns labels' text at the ticks.\r\n         */\r\n        this.parallel = false;\r\n        /**\r\n         * In case {@param value} is a number, the {@param fractionDigits} parameter will\r\n         * be provided as well. The `fractionDigits` corresponds to the number of fraction\r\n         * digits used by the tick step. For example, if the tick step is `0.0005`,\r\n         * the `fractionDigits` is 4.\r\n         */\r\n        this.formatter = undefined;\r\n    }\r\n    /**\r\n     * The side of the axis line to position the labels on.\r\n     * -1 = left (default)\r\n     * 1 = right\r\n     */\r\n    getSideFlag() {\r\n        return this.mirrored ? 1 : -1;\r\n    }\r\n    getFont() {\r\n        return getFont(this);\r\n    }\r\n}\r\n__decorate([\r\n    Validate(BOOLEAN),\r\n    __metadata(\"design:type\", Object)\r\n], AxisLabel.prototype, \"enabled\", void 0);\r\n__decorate([\r\n    Validate(OPT_BOOLEAN),\r\n    __metadata(\"design:type\", Boolean)\r\n], AxisLabel.prototype, \"autoWrap\", void 0);\r\n__decorate([\r\n    Validate(OPT_NUMBER(0)),\r\n    __metadata(\"design:type\", Number)\r\n], AxisLabel.prototype, \"maxWidth\", void 0);\r\n__decorate([\r\n    Validate(OPT_NUMBER(0)),\r\n    __metadata(\"design:type\", Number)\r\n], AxisLabel.prototype, \"maxHeight\", void 0);\r\n__decorate([\r\n    Validate(OPT_FONT_STYLE),\r\n    __metadata(\"design:type\", String)\r\n], AxisLabel.prototype, \"fontStyle\", void 0);\r\n__decorate([\r\n    Validate(OPT_FONT_WEIGHT),\r\n    __metadata(\"design:type\", String)\r\n], AxisLabel.prototype, \"fontWeight\", void 0);\r\n__decorate([\r\n    Validate(NUMBER$1(1)),\r\n    __metadata(\"design:type\", Number)\r\n], AxisLabel.prototype, \"fontSize\", void 0);\r\n__decorate([\r\n    Validate(STRING),\r\n    __metadata(\"design:type\", String)\r\n], AxisLabel.prototype, \"fontFamily\", void 0);\r\n__decorate([\r\n    Validate(NUMBER$1(0)),\r\n    __metadata(\"design:type\", Number)\r\n], AxisLabel.prototype, \"padding\", void 0);\r\n__decorate([\r\n    Validate(NUMBER_OR_NAN()),\r\n    Default(NaN),\r\n    __metadata(\"design:type\", Number)\r\n], AxisLabel.prototype, \"minSpacing\", void 0);\r\n__decorate([\r\n    Validate(OPT_COLOR_STRING),\r\n    __metadata(\"design:type\", String)\r\n], AxisLabel.prototype, \"color\", void 0);\r\n__decorate([\r\n    Validate(OPT_NUMBER(-360, 360)),\r\n    __metadata(\"design:type\", Number)\r\n], AxisLabel.prototype, \"rotation\", void 0);\r\n__decorate([\r\n    Validate(BOOLEAN),\r\n    __metadata(\"design:type\", Boolean)\r\n], AxisLabel.prototype, \"avoidCollisions\", void 0);\r\n__decorate([\r\n    Validate(BOOLEAN),\r\n    __metadata(\"design:type\", Boolean)\r\n], AxisLabel.prototype, \"mirrored\", void 0);\r\n__decorate([\r\n    Validate(BOOLEAN),\r\n    __metadata(\"design:type\", Boolean)\r\n], AxisLabel.prototype, \"parallel\", void 0);\r\n__decorate([\r\n    Validate(OPT_STRING),\r\n    __metadata(\"design:type\", String)\r\n], AxisLabel.prototype, \"format\", void 0);\n\nclass AxisLine {\r\n    constructor() {\r\n        this.enabled = true;\r\n        this.width = 1;\r\n        this.color = undefined;\r\n    }\r\n}\r\n__decorate([\r\n    Validate(BOOLEAN),\r\n    __metadata(\"design:type\", Object)\r\n], AxisLine.prototype, \"enabled\", void 0);\r\n__decorate([\r\n    Validate(NUMBER$1(0)),\r\n    __metadata(\"design:type\", Number)\r\n], AxisLine.prototype, \"width\", void 0);\r\n__decorate([\r\n    Validate(OPT_COLOR_STRING),\r\n    __metadata(\"design:type\", String)\r\n], AxisLine.prototype, \"color\", void 0);\n\nconst OPT_TICK_INTERVAL = predicateWithMessage((v, ctx) => OPTIONAL(v, ctx, (v, ctx) => (v !== 0 && NUMBER$1(0)(v, ctx)) || v instanceof TimeInterval), `expecting an optional non-zero positive Number value or, for a time axis, a Time Interval such as 'agCharts.time.month'`);\r\nclass AxisTick {\r\n    constructor() {\r\n        this.enabled = true;\r\n        /**\r\n         * The line width to be used by axis ticks.\r\n         */\r\n        this.width = 1;\r\n        /**\r\n         * The line length to be used by axis ticks.\r\n         */\r\n        this.size = 6;\r\n        /**\r\n         * The color of the axis ticks.\r\n         * Use `undefined` rather than `rgba(0, 0, 0, 0)` to make the ticks invisible.\r\n         */\r\n        this.color = undefined;\r\n        this.interval = undefined;\r\n        this.values = undefined;\r\n        this.minSpacing = NaN;\r\n    }\r\n}\r\n__decorate([\r\n    Validate(BOOLEAN),\r\n    __metadata(\"design:type\", Object)\r\n], AxisTick.prototype, \"enabled\", void 0);\r\n__decorate([\r\n    Validate(NUMBER$1(0)),\r\n    __metadata(\"design:type\", Number)\r\n], AxisTick.prototype, \"width\", void 0);\r\n__decorate([\r\n    Validate(NUMBER$1(0)),\r\n    __metadata(\"design:type\", Number)\r\n], AxisTick.prototype, \"size\", void 0);\r\n__decorate([\r\n    Validate(OPT_COLOR_STRING),\r\n    __metadata(\"design:type\", String)\r\n], AxisTick.prototype, \"color\", void 0);\r\n__decorate([\r\n    Validate(OPT_TICK_INTERVAL),\r\n    __metadata(\"design:type\", Object)\r\n], AxisTick.prototype, \"interval\", void 0);\r\n__decorate([\r\n    Validate(OPT_ARRAY()),\r\n    __metadata(\"design:type\", Array)\r\n], AxisTick.prototype, \"values\", void 0);\r\n__decorate([\r\n    Validate(AND(NUMBER_OR_NAN(1), LESS_THAN('maxSpacing'))),\r\n    Default(NaN),\r\n    __metadata(\"design:type\", Number)\r\n], AxisTick.prototype, \"minSpacing\", void 0);\n\nfunction prepareAxisAnimationContext(axis) {\r\n    const requestedRangeMin = Math.min(...axis.range);\r\n    const requestedRangeMax = Math.max(...axis.range);\r\n    const min = Math.floor(requestedRangeMin);\r\n    const max = Math.ceil(requestedRangeMax);\r\n    const visible = min !== max;\r\n    return { min, max, visible };\r\n}\r\nconst fullCircle = Math.PI * 2;\r\nconst halfCircle = fullCircle / 2;\r\nfunction normaliseEndRotation(start, end) {\r\n    const directDistance = Math.abs(end - start);\r\n    if (directDistance < halfCircle)\r\n        return end;\r\n    if (start > end)\r\n        return end + fullCircle;\r\n    return end - fullCircle;\r\n}\r\nfunction prepareAxisAnimationFunctions(ctx) {\r\n    const outOfBounds = (datum) => {\r\n        var _a, _b;\r\n        const min = Math.min(...((_a = datum.range) !== null && _a !== void 0 ? _a : [ctx.min]));\r\n        const max = Math.max(...((_b = datum.range) !== null && _b !== void 0 ? _b : [ctx.max]));\r\n        const translationY = Math.round(datum.translationY);\r\n        return translationY < min || translationY > max;\r\n    };\r\n    const calculateStatus = (datum, nodeDatum, status) => {\r\n        if (status !== 'removed' && outOfBounds(datum)) {\r\n            return 'removed';\r\n        }\r\n        else if (status !== 'added' && outOfBounds(nodeDatum)) {\r\n            return 'added';\r\n        }\r\n        return status;\r\n    };\r\n    const fromBase = (node, datum, status) => {\r\n        // Default to starting at the same position that the node is currently in.\r\n        const source = { translationY: Math.round(node.translationY), opacity: node.opacity };\r\n        status = calculateStatus(datum, node.datum, status);\r\n        if (status === 'added') {\r\n            source.translationY = Math.round(datum.translationY);\r\n            source.opacity = 0;\r\n        }\r\n        return Object.assign(Object.assign({}, source), FROM_TO_MIXINS[status]);\r\n    };\r\n    const toBase = (_node, datum, status) => {\r\n        const target = { translationY: Math.round(datum.translationY), opacity: 1 };\r\n        if (status === 'removed') {\r\n            target.opacity = 0;\r\n        }\r\n        return target;\r\n    };\r\n    const tick = {\r\n        fromFn: fromBase,\r\n        toFn: toBase,\r\n        intermediateFn: (node, _datum, _status) => {\r\n            return { visible: !outOfBounds(node) };\r\n        },\r\n    };\r\n    const label = {\r\n        fromFn: ((node, newDatum, status) => {\r\n            var _a;\r\n            const datum = (_a = node.previousDatum) !== null && _a !== void 0 ? _a : newDatum;\r\n            let rotation = datum.rotation;\r\n            if (status === 'added' || status === 'removed') {\r\n                rotation = newDatum.rotation;\r\n            }\r\n            return Object.assign(Object.assign({}, fromBase(node, newDatum, status)), { x: datum.x, y: datum.y, rotation, rotationCenterX: datum.rotationCenterX });\r\n        }),\r\n        toFn: ((node, datum, status) => {\r\n            var _a, _b;\r\n            let rotation;\r\n            if (status === 'added' || status === 'removed') {\r\n                rotation = datum.rotation;\r\n            }\r\n            else {\r\n                rotation = normaliseEndRotation((_b = (_a = node.previousDatum) === null || _a === void 0 ? void 0 : _a.rotation) !== null && _b !== void 0 ? _b : datum.rotation, datum.rotation);\r\n            }\r\n            return Object.assign(Object.assign({}, toBase(node, datum, status)), { x: datum.x, y: datum.y, rotation, rotationCenterX: datum.rotationCenterX, finish: { rotation: datum.rotation } });\r\n        }),\r\n    };\r\n    const line = {\r\n        fromFn: (node, datum) => {\r\n            var _a, _b;\r\n            return Object.assign(Object.assign({}, ((_b = (_a = node.previousDatum) !== null && _a !== void 0 ? _a : datum) !== null && _b !== void 0 ? _b : { y: node.y, x1: node.x1, x2: node.x2 })), FROM_TO_MIXINS['updated']);\r\n        },\r\n        toFn: (_node, datum) => {\r\n            return Object.assign({}, datum);\r\n        },\r\n    };\r\n    const group = {\r\n        fromFn: (group, _datum) => {\r\n            const { rotation, translationX, translationY } = group;\r\n            return Object.assign({ rotation,\r\n                translationX,\r\n                translationY }, FROM_TO_MIXINS['updated']);\r\n        },\r\n        toFn: (_group, datum) => {\r\n            const { rotation, translationX, translationY } = datum;\r\n            return {\r\n                rotation,\r\n                translationX,\r\n                translationY,\r\n            };\r\n        },\r\n    };\r\n    return { tick, line, label, group };\r\n}\r\nfunction resetAxisGroupFn() {\r\n    return (_node, datum) => {\r\n        return {\r\n            rotation: datum.rotation,\r\n            rotationCenterX: datum.rotationCenterX,\r\n            rotationCenterY: datum.rotationCenterY,\r\n            translationX: datum.translationX,\r\n            translationY: datum.translationY,\r\n        };\r\n    };\r\n}\r\nfunction resetAxisSelectionFn(ctx) {\r\n    const { visible: rangeVisible, min, max } = ctx;\r\n    return (_node, datum) => {\r\n        const translationY = Math.round(datum.translationY);\r\n        const visible = rangeVisible && translationY >= min && translationY <= max;\r\n        return {\r\n            translationY,\r\n            opacity: 1,\r\n            visible,\r\n        };\r\n    };\r\n}\r\nfunction resetAxisLabelSelectionFn() {\r\n    return (_node, datum) => {\r\n        return {\r\n            x: datum.x,\r\n            y: datum.y,\r\n            translationY: datum.translationY,\r\n            rotation: datum.rotation,\r\n            rotationCenterX: datum.rotationCenterX,\r\n        };\r\n    };\r\n}\r\nfunction resetAxisLineSelectionFn() {\r\n    return (_node, datum) => {\r\n        return Object.assign({}, datum);\r\n    };\r\n}\n\nvar Tags;\r\n(function (Tags) {\r\n    Tags[Tags[\"TickLine\"] = 0] = \"TickLine\";\r\n    Tags[Tags[\"TickLabel\"] = 1] = \"TickLabel\";\r\n    Tags[Tags[\"GridLine\"] = 2] = \"GridLine\";\r\n    Tags[Tags[\"GridArc\"] = 3] = \"GridArc\";\r\n    Tags[Tags[\"AxisLine\"] = 4] = \"AxisLine\";\r\n})(Tags || (Tags = {}));\r\nvar TickGenerationType;\r\n(function (TickGenerationType) {\r\n    TickGenerationType[TickGenerationType[\"CREATE\"] = 0] = \"CREATE\";\r\n    TickGenerationType[TickGenerationType[\"CREATE_SECONDARY\"] = 1] = \"CREATE_SECONDARY\";\r\n    TickGenerationType[TickGenerationType[\"FILTER\"] = 2] = \"FILTER\";\r\n    TickGenerationType[TickGenerationType[\"VALUES\"] = 3] = \"VALUES\";\r\n})(TickGenerationType || (TickGenerationType = {}));\r\n/**\r\n * A general purpose linear axis with no notion of orientation.\r\n * The axis is always rendered vertically, with horizontal labels positioned to the left\r\n * of the axis line by default. The axis can be {@link rotation | rotated} by an arbitrary angle,\r\n * so that it can be used as a top, right, bottom, left, radial or any other kind\r\n * of linear axis.\r\n * The generic `D` parameter is the type of the domain of the axis' scale.\r\n * The output range of the axis' scale is always numeric (screen coordinates).\r\n */\r\nclass Axis {\r\n    get type() {\r\n        var _a;\r\n        return (_a = this.constructor.type) !== null && _a !== void 0 ? _a : '';\r\n    }\r\n    set crossLines(value) {\r\n        var _a, _b;\r\n        (_a = this._crossLines) === null || _a === void 0 ? void 0 : _a.forEach((crossLine) => this.detachCrossLine(crossLine));\r\n        if (value) {\r\n            this.assignCrossLineArrayConstructor(value);\r\n        }\r\n        this._crossLines = value;\r\n        (_b = this._crossLines) === null || _b === void 0 ? void 0 : _b.forEach((crossLine) => {\r\n            this.attachCrossLine(crossLine);\r\n            this.initCrossLine(crossLine);\r\n        });\r\n    }\r\n    get crossLines() {\r\n        return this._crossLines;\r\n    }\r\n    constructor(moduleCtx, scale) {\r\n        this.moduleCtx = moduleCtx;\r\n        this.scale = scale;\r\n        this.id = createId(this);\r\n        this.nice = true;\r\n        this.dataDomain = { domain: [], clipped: false };\r\n        this.keys = [];\r\n        this.boundSeries = [];\r\n        this.includeInvisibleDomains = false;\r\n        this.axisGroup = new Group({ name: `${this.id}-axis`, zIndex: Layers.AXIS_ZINDEX });\r\n        this.lineNode = this.axisGroup.appendChild(new Line());\r\n        this.tickLineGroup = this.axisGroup.appendChild(new Group({ name: `${this.id}-Axis-tick-lines`, zIndex: Layers.AXIS_ZINDEX }));\r\n        this.tickLabelGroup = this.axisGroup.appendChild(new Group({ name: `${this.id}-Axis-tick-labels`, zIndex: Layers.AXIS_ZINDEX }));\r\n        this.crossLineGroup = new Group({ name: `${this.id}-CrossLines` });\r\n        this.gridGroup = new Group({ name: `${this.id}-Axis-grid` });\r\n        this.gridLineGroup = this.gridGroup.appendChild(new Group({\r\n            name: `${this.id}-gridLines`,\r\n            zIndex: Layers.AXIS_GRID_ZINDEX,\r\n        }));\r\n        this.tickLineGroupSelection = Selection.select(this.tickLineGroup, Line, false);\r\n        this.tickLabelGroupSelection = Selection.select(this.tickLabelGroup, Text, false);\r\n        this.gridLineGroupSelection = Selection.select(this.gridLineGroup, Line, false);\r\n        this.line = new AxisLine();\r\n        this.tick = this.createTick();\r\n        this.gridLine = new AxisGridLine();\r\n        this.label = this.createLabel();\r\n        this.defaultTickMinSpacing = Axis.defaultTickMinSpacing;\r\n        this.translation = { x: 0, y: 0 };\r\n        this.rotation = 0; // axis rotation angle in degrees\r\n        this.layout = {\r\n            label: {\r\n                fractionDigits: 0,\r\n                padding: this.label.padding,\r\n                format: this.label.format,\r\n            },\r\n        };\r\n        this.destroyFns = [];\r\n        this.range = [0, 1];\r\n        this.visibleRange = [0, 1];\r\n        this.title = undefined;\r\n        this._titleCaption = new Caption();\r\n        /**\r\n         * The length of the grid. The grid is only visible in case of a non-zero value.\r\n         * In case {@link radialGrid} is `true`, the value is interpreted as an angle\r\n         * (in degrees).\r\n         */\r\n        this._gridLength = 0;\r\n        this.fractionDigits = 0;\r\n        /**\r\n         * The distance between the grid ticks and the axis ticks.\r\n         */\r\n        this.gridPadding = 0;\r\n        /**\r\n         * Is used to avoid collisions between axis labels and series.\r\n         */\r\n        this.seriesAreaPadding = 0;\r\n        this.tickGenerationResult = undefined;\r\n        this.maxThickness = Infinity;\r\n        this.moduleMap = new ModuleMap(this);\r\n        this.refreshScale();\r\n        this._titleCaption.node.rotation = -Math.PI / 2;\r\n        this.axisGroup.appendChild(this._titleCaption.node);\r\n        this.destroyFns.push(moduleCtx.interactionManager.addListener('hover', (e) => this.checkAxisHover(e)));\r\n        this.animationManager = moduleCtx.animationManager;\r\n        this.animationState = new StateMachine('empty', {\r\n            empty: {\r\n                update: {\r\n                    target: 'ready',\r\n                    action: () => this.resetSelectionNodes(),\r\n                },\r\n            },\r\n            ready: {\r\n                update: (data) => this.animateReadyUpdate(data),\r\n                resize: () => this.resetSelectionNodes(),\r\n            },\r\n        });\r\n        this._crossLines = [];\r\n        this.assignCrossLineArrayConstructor(this._crossLines);\r\n        let previousSize = undefined;\r\n        this.destroyFns.push(moduleCtx.layoutService.addListener('layout-complete', (e) => {\r\n            // Fire resize animation action if chart canvas size changes.\r\n            if (previousSize != null && jsonDiff(e.chart, previousSize) != null) {\r\n                this.animationState.transition('resize');\r\n            }\r\n            previousSize = Object.assign({}, e.chart);\r\n        }));\r\n        this.destroyFns.push(moduleCtx.updateService.addListener('update-complete', (e) => {\r\n            this.minRect = e.minRect;\r\n        }));\r\n    }\r\n    attachCrossLine(crossLine) {\r\n        this.crossLineGroup.appendChild(crossLine.group);\r\n    }\r\n    detachCrossLine(crossLine) {\r\n        this.crossLineGroup.removeChild(crossLine.group);\r\n    }\r\n    destroy() {\r\n        this.moduleMap.destroy();\r\n        this.destroyFns.forEach((f) => f());\r\n    }\r\n    refreshScale() {\r\n        var _a;\r\n        this.range = this.scale.range.slice();\r\n        (_a = this.crossLines) === null || _a === void 0 ? void 0 : _a.forEach((crossLine) => {\r\n            this.initCrossLine(crossLine);\r\n        });\r\n    }\r\n    updateRange() {\r\n        var _a;\r\n        const { range: rr, visibleRange: vr, scale } = this;\r\n        const span = (rr[1] - rr[0]) / (vr[1] - vr[0]);\r\n        const shift = span * vr[0];\r\n        const start = rr[0] - shift;\r\n        scale.range = [start, start + span];\r\n        (_a = this.crossLines) === null || _a === void 0 ? void 0 : _a.forEach((crossLine) => {\r\n            crossLine.clippedRange = [rr[0], rr[1]];\r\n        });\r\n    }\r\n    setCrossLinesVisible(visible) {\r\n        this.crossLineGroup.visible = visible;\r\n    }\r\n    attachAxis(axisNode, gridNode) {\r\n        gridNode.appendChild(this.gridGroup);\r\n        axisNode.appendChild(this.axisGroup);\r\n        axisNode.appendChild(this.crossLineGroup);\r\n    }\r\n    detachAxis(axisNode, gridNode) {\r\n        gridNode.removeChild(this.gridGroup);\r\n        axisNode.removeChild(this.axisGroup);\r\n        axisNode.removeChild(this.crossLineGroup);\r\n    }\r\n    /**\r\n     * Checks if a point or an object is in range.\r\n     * @param x A point (or object's starting point).\r\n     * @param width Object's width.\r\n     * @param tolerance Expands the range on both ends by this amount.\r\n     */\r\n    inRange(x, width = 0, tolerance = 0) {\r\n        const min = Math.min(...this.range);\r\n        const max = Math.max(...this.range);\r\n        return x + width >= min - tolerance && x <= max + tolerance;\r\n    }\r\n    onLabelFormatChange(ticks, format) {\r\n        const { scale, fractionDigits } = this;\r\n        const logScale = scale instanceof LogScale;\r\n        const defaultLabelFormatter = !logScale && fractionDigits > 0\r\n            ? (x) => (typeof x === 'number' ? x.toFixed(fractionDigits) : String(x))\r\n            : (x) => String(x);\r\n        if (format && scale && scale.tickFormat) {\r\n            try {\r\n                this.labelFormatter = scale.tickFormat({ ticks, specifier: format });\r\n            }\r\n            catch (e) {\r\n                this.labelFormatter = defaultLabelFormatter;\r\n                Logger.warnOnce(`the axis label format string ${format} is invalid. No formatting will be applied`);\r\n            }\r\n        }\r\n        else {\r\n            this.labelFormatter = defaultLabelFormatter;\r\n        }\r\n    }\r\n    setDomain() {\r\n        var _a;\r\n        const { scale, dataDomain: { domain }, tick: { values: tickValues }, } = this;\r\n        if (tickValues && ContinuousScale.is(scale)) {\r\n            const [tickMin, tickMax] = (_a = extent(tickValues)) !== null && _a !== void 0 ? _a : [Infinity, -Infinity];\r\n            const min = Math.min(scale.fromDomain(domain[0]), tickMin);\r\n            const max = Math.max(scale.fromDomain(domain[1]), tickMax);\r\n            scale.domain = [scale.toDomain(min), scale.toDomain(max)];\r\n        }\r\n        else {\r\n            scale.domain = domain;\r\n        }\r\n    }\r\n    setTickInterval(interval) {\r\n        var _a;\r\n        this.scale.interval = (_a = this.tick.interval) !== null && _a !== void 0 ? _a : interval;\r\n    }\r\n    setTickCount(count, minTickCount, maxTickCount) {\r\n        const { scale } = this;\r\n        if (!(count && ContinuousScale.is(scale))) {\r\n            return;\r\n        }\r\n        if (typeof count === 'number') {\r\n            scale.tickCount = count;\r\n            scale.minTickCount = minTickCount !== null && minTickCount !== void 0 ? minTickCount : 0;\r\n            scale.maxTickCount = maxTickCount !== null && maxTickCount !== void 0 ? maxTickCount : Infinity;\r\n            return;\r\n        }\r\n        if (scale instanceof TimeScale) {\r\n            this.setTickInterval(count);\r\n        }\r\n    }\r\n    set gridLength(value) {\r\n        var _a;\r\n        // Was visible and now invisible, or was invisible and now visible.\r\n        if ((this._gridLength && !value) || (!this._gridLength && value)) {\r\n            this.gridLineGroupSelection.clear();\r\n        }\r\n        this._gridLength = value;\r\n        (_a = this.crossLines) === null || _a === void 0 ? void 0 : _a.forEach((crossLine) => {\r\n            this.initCrossLine(crossLine);\r\n        });\r\n    }\r\n    get gridLength() {\r\n        return this._gridLength;\r\n    }\r\n    createTick() {\r\n        return new AxisTick();\r\n    }\r\n    createLabel() {\r\n        return new AxisLabel();\r\n    }\r\n    checkAxisHover(event) {\r\n        const bbox = this.computeBBox();\r\n        const isInAxis = bbox.containsPoint(event.offsetX, event.offsetY);\r\n        if (!isInAxis)\r\n            return;\r\n        this.moduleCtx.chartEventManager.axisHover(this.id, this.direction);\r\n    }\r\n    /**\r\n     * Creates/removes/updates the scene graph nodes that constitute the axis.\r\n     */\r\n    update(primaryTickCount) {\r\n        if (!this.tickGenerationResult) {\r\n            return;\r\n        }\r\n        const { rotation, parallelFlipRotation, regularFlipRotation } = this.calculateRotations();\r\n        const sideFlag = this.label.getSideFlag();\r\n        this.updatePosition();\r\n        const lineData = this.getAxisLineCoordinates();\r\n        const _a = this.tickGenerationResult, { tickData, combinedRotation, textBaseline, textAlign } = _a, ticksResult = __rest(_a, [\"tickData\", \"combinedRotation\", \"textBaseline\", \"textAlign\"]);\r\n        const previousTicks = this.tickLabelGroupSelection.nodes().map((node) => node.datum.tickId);\r\n        this.updateSelections(lineData, tickData.ticks, {\r\n            combinedRotation,\r\n            textAlign,\r\n            textBaseline,\r\n            range: this.scale.range,\r\n        });\r\n        if (this.animationManager.isSkipped()) {\r\n            this.resetSelectionNodes();\r\n        }\r\n        else {\r\n            const diff = this.calculateUpdateDiff(previousTicks, tickData);\r\n            this.animationState.transition('update', diff);\r\n        }\r\n        this.updateAxisLine();\r\n        this.updateLabels();\r\n        this.updateVisibility();\r\n        this.updateGridLines(sideFlag);\r\n        this.updateTickLines();\r\n        this.updateTitle({ anyTickVisible: tickData.ticks.length > 0 });\r\n        this.updateCrossLines({ rotation, parallelFlipRotation, regularFlipRotation });\r\n        this.updateLayoutState();\r\n        primaryTickCount = ticksResult.primaryTickCount;\r\n        return primaryTickCount;\r\n    }\r\n    getAxisLineCoordinates() {\r\n        const { range: [start, end], } = this;\r\n        const x = 0;\r\n        const y1 = Math.min(start, end);\r\n        const y2 = Math.max(start, end);\r\n        return { x, y1, y2 };\r\n    }\r\n    getTickLineCoordinates(datum) {\r\n        const { tick, label } = this;\r\n        const sideFlag = label.getSideFlag();\r\n        const x = sideFlag * tick.size;\r\n        const x1 = Math.min(0, x);\r\n        const x2 = x1 + Math.abs(x);\r\n        const y = Math.round(datum.translationY);\r\n        return { x1, x2, y };\r\n    }\r\n    getTickLabelProps(datum, params) {\r\n        const { label } = this;\r\n        const { combinedRotation, textBaseline, textAlign, range } = params;\r\n        const text = datum.tickLabel;\r\n        const sideFlag = label.getSideFlag();\r\n        const tickSize = this.tick.size;\r\n        const labelX = sideFlag * (tickSize + label.padding + this.seriesAreaPadding);\r\n        const visible = text !== '' && text != undefined;\r\n        return {\r\n            tickId: datum.tickId,\r\n            translationY: datum.translationY,\r\n            fill: label.color,\r\n            fontFamily: label.fontFamily,\r\n            fontSize: label.fontSize,\r\n            fontStyle: label.fontStyle,\r\n            fontWeight: label.fontWeight,\r\n            rotation: combinedRotation,\r\n            rotationCenterX: labelX,\r\n            text,\r\n            textAlign,\r\n            textBaseline,\r\n            visible,\r\n            x: labelX,\r\n            y: 0,\r\n            range,\r\n        };\r\n    }\r\n    setTitleProps(caption, params) {\r\n        var _a;\r\n        const { title } = this;\r\n        if (!title) {\r\n            caption.enabled = false;\r\n            return;\r\n        }\r\n        caption.color = title.color;\r\n        caption.fontFamily = title.fontFamily;\r\n        caption.fontSize = title.fontSize;\r\n        caption.fontStyle = title.fontStyle;\r\n        caption.fontWeight = title.fontWeight;\r\n        caption.enabled = title.enabled;\r\n        caption.wrapping = title.wrapping;\r\n        if (title.enabled) {\r\n            const titleNode = caption.node;\r\n            const { tickSpace } = params;\r\n            const padding = ((_a = title.spacing) !== null && _a !== void 0 ? _a : 0) + tickSpace;\r\n            const sideFlag = this.label.getSideFlag();\r\n            const parallelFlipRotation = normalizeAngle360(this.rotation);\r\n            const titleRotationFlag = sideFlag === -1 && parallelFlipRotation > Math.PI && parallelFlipRotation < Math.PI * 2 ? -1 : 1;\r\n            const rotation = (titleRotationFlag * sideFlag * Math.PI) / 2;\r\n            const textBaseline = titleRotationFlag === 1 ? 'bottom' : 'top';\r\n            const { range } = this;\r\n            const x = Math.floor((titleRotationFlag * sideFlag * (range[0] + range[1])) / 2);\r\n            const y = sideFlag === -1 ? Math.floor(titleRotationFlag * -padding) : Math.floor(-padding);\r\n            const { callbackCache } = this.moduleCtx;\r\n            const { formatter = (params) => params.defaultValue } = title;\r\n            const text = callbackCache.call(formatter, this.getTitleFormatterParams());\r\n            titleNode.setProperties({\r\n                rotation,\r\n                text,\r\n                textBaseline,\r\n                visible: true,\r\n                x,\r\n                y,\r\n            });\r\n        }\r\n    }\r\n    calculateLayout(primaryTickCount) {\r\n        var _a;\r\n        const { rotation, parallelFlipRotation, regularFlipRotation } = this.calculateRotations();\r\n        const sideFlag = this.label.getSideFlag();\r\n        const labelX = sideFlag * (this.tick.size + this.label.padding + this.seriesAreaPadding);\r\n        this.updateScale();\r\n        this.tickGenerationResult = this.generateTicks({\r\n            primaryTickCount,\r\n            parallelFlipRotation,\r\n            regularFlipRotation,\r\n            labelX,\r\n            sideFlag,\r\n        });\r\n        const _b = this.tickGenerationResult, { tickData, combinedRotation, textBaseline, textAlign } = _b, ticksResult = __rest(_b, [\"tickData\", \"combinedRotation\", \"textBaseline\", \"textAlign\"]);\r\n        const boxes = [];\r\n        const { x, y1, y2 } = this.getAxisLineCoordinates();\r\n        const lineBox = new BBox(x, y1, 0, y2 - y1);\r\n        boxes.push(lineBox);\r\n        const { tick } = this;\r\n        if (tick.enabled) {\r\n            tickData.ticks.forEach((datum) => {\r\n                const { x1, x2, y } = this.getTickLineCoordinates(datum);\r\n                const tickLineBox = new BBox(x1, y, x2 - x1, 0);\r\n                boxes.push(tickLineBox);\r\n            });\r\n        }\r\n        const { label } = this;\r\n        if (label.enabled) {\r\n            const tempText = new Text();\r\n            tickData.ticks.forEach((datum) => {\r\n                const labelProps = this.getTickLabelProps(datum, {\r\n                    combinedRotation,\r\n                    textAlign,\r\n                    textBaseline,\r\n                    range: this.scale.range,\r\n                });\r\n                if (!labelProps.visible) {\r\n                    return;\r\n                }\r\n                tempText.setProperties(Object.assign(Object.assign({}, labelProps), { translationY: Math.round(datum.translationY) }));\r\n                const box = tempText.computeTransformedBBox();\r\n                if (box) {\r\n                    boxes.push(box);\r\n                }\r\n            });\r\n        }\r\n        const getTransformBox = (bbox) => {\r\n            const matrix = new Matrix();\r\n            const { rotation: axisRotation, translationX, translationY, rotationCenterX, rotationCenterY, } = this.getAxisTransform();\r\n            Matrix.updateTransformMatrix(matrix, 1, 1, axisRotation, translationX, translationY, {\r\n                scalingCenterX: 0,\r\n                scalingCenterY: 0,\r\n                rotationCenterX,\r\n                rotationCenterY,\r\n            });\r\n            return matrix.transformBBox(bbox);\r\n        };\r\n        const { title } = this;\r\n        if (title === null || title === void 0 ? void 0 : title.enabled) {\r\n            const caption = new Caption();\r\n            let tickSpace = 0;\r\n            if (tickData.ticks.length > 0) {\r\n                const contentBox = BBox.merge(boxes);\r\n                const tickWidth = contentBox.width;\r\n                if (isFinite(tickWidth)) {\r\n                    tickSpace += tickWidth;\r\n                }\r\n            }\r\n            this.setTitleProps(caption, { tickSpace });\r\n            const titleNode = caption.node;\r\n            const titleBox = titleNode.computeTransformedBBox();\r\n            if (titleBox) {\r\n                boxes.push(titleBox);\r\n            }\r\n        }\r\n        const bbox = BBox.merge(boxes);\r\n        const transformedBBox = getTransformBox(bbox);\r\n        const anySeriesActive = this.isAnySeriesActive();\r\n        (_a = this.crossLines) === null || _a === void 0 ? void 0 : _a.forEach((crossLine) => {\r\n            var _a;\r\n            crossLine.sideFlag = -sideFlag;\r\n            crossLine.direction = rotation === -Math.PI / 2 ? ChartAxisDirection.X : ChartAxisDirection.Y;\r\n            if (crossLine instanceof CartesianCrossLine) {\r\n                crossLine.label.parallel = (_a = crossLine.label.parallel) !== null && _a !== void 0 ? _a : this.label.parallel;\r\n            }\r\n            crossLine.parallelFlipRotation = parallelFlipRotation;\r\n            crossLine.regularFlipRotation = regularFlipRotation;\r\n            crossLine.calculateLayout(anySeriesActive);\r\n        });\r\n        this.updateLayoutState();\r\n        primaryTickCount = ticksResult.primaryTickCount;\r\n        return { primaryTickCount, bbox: transformedBBox };\r\n    }\r\n    updateLayoutState() {\r\n        this.layout.label = {\r\n            fractionDigits: this.fractionDigits,\r\n            padding: this.label.padding,\r\n            format: this.label.format,\r\n        };\r\n    }\r\n    updateScale() {\r\n        this.updateRange();\r\n        this.calculateDomain();\r\n        this.setDomain();\r\n        this.setTickInterval(this.tick.interval);\r\n        const { scale, nice } = this;\r\n        if (!ContinuousScale.is(scale)) {\r\n            return;\r\n        }\r\n        scale.nice = nice;\r\n        scale.update();\r\n    }\r\n    calculateRotations() {\r\n        const rotation = toRadians(this.rotation);\r\n        // When labels are parallel to the axis line, the `parallelFlipFlag` is used to\r\n        // flip the labels to avoid upside-down text, when the axis is rotated\r\n        // such that it is in the right hemisphere, i.e. the angle of rotation\r\n        // is in the [0, π] interval.\r\n        // The rotation angle is normalized, so that we have an easier time checking\r\n        // if it's in the said interval. Since the axis is always rendered vertically\r\n        // and then rotated, zero rotation means 12 (not 3) o-clock.\r\n        // -1 = flip\r\n        //  1 = don't flip (default)\r\n        const parallelFlipRotation = normalizeAngle360(rotation);\r\n        const regularFlipRotation = normalizeAngle360(rotation - Math.PI / 2);\r\n        return { rotation, parallelFlipRotation, regularFlipRotation };\r\n    }\r\n    generateTicks({ primaryTickCount, parallelFlipRotation, regularFlipRotation, labelX, sideFlag, }) {\r\n        var _a;\r\n        const { scale, tick, label: { parallel, rotation, fontFamily, fontSize, fontStyle, fontWeight }, } = this;\r\n        const secondaryAxis = primaryTickCount !== undefined;\r\n        const { defaultRotation, configuredRotation, parallelFlipFlag, regularFlipFlag } = calculateLabelRotation({\r\n            rotation,\r\n            parallel,\r\n            regularFlipRotation,\r\n            parallelFlipRotation,\r\n        });\r\n        const initialRotation = configuredRotation + defaultRotation;\r\n        const labelMatrix = new Matrix();\r\n        const { maxTickCount } = this.estimateTickCount({\r\n            minSpacing: tick.minSpacing,\r\n            maxSpacing: (_a = tick.maxSpacing) !== null && _a !== void 0 ? _a : NaN,\r\n        });\r\n        const continuous = ContinuousScale.is(scale);\r\n        const maxIterations = !continuous || isNaN(maxTickCount) ? 10 : maxTickCount;\r\n        let textAlign = getTextAlign(parallel, configuredRotation, 0, sideFlag, regularFlipFlag);\r\n        const textBaseline = getTextBaseline(parallel, configuredRotation, sideFlag, parallelFlipFlag);\r\n        const textProps = {\r\n            fontFamily,\r\n            fontSize,\r\n            fontStyle,\r\n            fontWeight,\r\n            textBaseline,\r\n            textAlign,\r\n        };\r\n        let tickData = {\r\n            rawTicks: [],\r\n            ticks: [],\r\n            labelCount: 0,\r\n        };\r\n        let index = 0;\r\n        let autoRotation = 0;\r\n        let labelOverlap = true;\r\n        let terminate = false;\r\n        while (labelOverlap && index <= maxIterations) {\r\n            if (terminate) {\r\n                break;\r\n            }\r\n            autoRotation = 0;\r\n            textAlign = getTextAlign(parallel, configuredRotation, 0, sideFlag, regularFlipFlag);\r\n            const tickStrategies = this.getTickStrategies({ secondaryAxis, index });\r\n            for (const strategy of tickStrategies) {\r\n                ({ tickData, index, autoRotation, terminate } = strategy({\r\n                    index,\r\n                    tickData,\r\n                    textProps,\r\n                    labelOverlap,\r\n                    terminate,\r\n                    primaryTickCount,\r\n                }));\r\n                const rotated = configuredRotation !== 0 || autoRotation !== 0;\r\n                const rotation = initialRotation + autoRotation;\r\n                textAlign = getTextAlign(parallel, configuredRotation, autoRotation, sideFlag, regularFlipFlag);\r\n                labelOverlap = this.checkLabelOverlap(rotation, rotated, labelMatrix, tickData.ticks, labelX, Object.assign(Object.assign({}, textProps), { textAlign }));\r\n            }\r\n        }\r\n        const combinedRotation = defaultRotation + configuredRotation + autoRotation;\r\n        if (!secondaryAxis && tickData.rawTicks.length > 0) {\r\n            primaryTickCount = tickData.rawTicks.length;\r\n        }\r\n        return { tickData, primaryTickCount, combinedRotation, textBaseline, textAlign };\r\n    }\r\n    getTickStrategies({ index, secondaryAxis }) {\r\n        const { scale, label, tick } = this;\r\n        const continuous = ContinuousScale.is(scale);\r\n        const avoidLabelCollisions = label.enabled && label.avoidCollisions;\r\n        const filterTicks = !continuous && index !== 0 && avoidLabelCollisions;\r\n        const autoRotate = label.autoRotate === true && label.rotation === undefined;\r\n        const strategies = [];\r\n        let tickGenerationType;\r\n        if (this.tick.values) {\r\n            tickGenerationType = TickGenerationType.VALUES;\r\n        }\r\n        else if (secondaryAxis) {\r\n            tickGenerationType = TickGenerationType.CREATE_SECONDARY;\r\n        }\r\n        else if (filterTicks) {\r\n            tickGenerationType = TickGenerationType.FILTER;\r\n        }\r\n        else {\r\n            tickGenerationType = TickGenerationType.CREATE;\r\n        }\r\n        const tickGenerationStrategy = ({ index, tickData, primaryTickCount, terminate }) => this.createTickData(tickGenerationType, index, tickData, terminate, primaryTickCount);\r\n        strategies.push(tickGenerationStrategy);\r\n        if (!continuous && !isNaN(tick.minSpacing)) {\r\n            const tickFilterStrategy = ({ index, tickData, primaryTickCount, terminate }) => this.createTickData(TickGenerationType.FILTER, index, tickData, terminate, primaryTickCount);\r\n            strategies.push(tickFilterStrategy);\r\n        }\r\n        if (!avoidLabelCollisions) {\r\n            return strategies;\r\n        }\r\n        if (label.autoWrap) {\r\n            const autoWrapStrategy = ({ index, tickData, textProps }) => this.wrapLabels(tickData, index, textProps);\r\n            strategies.push(autoWrapStrategy);\r\n        }\r\n        else if (autoRotate) {\r\n            const autoRotateStrategy = ({ index, tickData, labelOverlap, terminate }) => ({\r\n                index,\r\n                tickData,\r\n                autoRotation: this.getAutoRotation(labelOverlap),\r\n                terminate,\r\n            });\r\n            strategies.push(autoRotateStrategy);\r\n        }\r\n        return strategies;\r\n    }\r\n    createTickData(tickGenerationType, index, tickData, terminate, primaryTickCount) {\r\n        var _a;\r\n        const { scale, tick } = this;\r\n        const { maxTickCount, minTickCount, defaultTickCount } = this.estimateTickCount({\r\n            minSpacing: tick.minSpacing,\r\n            maxSpacing: (_a = tick.maxSpacing) !== null && _a !== void 0 ? _a : NaN,\r\n        });\r\n        const continuous = ContinuousScale.is(scale);\r\n        const maxIterations = !continuous || isNaN(maxTickCount) ? 10 : maxTickCount;\r\n        let tickCount = continuous ? Math.max(defaultTickCount - index, minTickCount) : maxTickCount;\r\n        const regenerateTicks = tick.interval === undefined &&\r\n            tick.values === undefined &&\r\n            tickCount > minTickCount &&\r\n            (continuous || tickGenerationType === TickGenerationType.FILTER);\r\n        let unchanged = true;\r\n        while (unchanged && index <= maxIterations) {\r\n            const prevTicks = tickData.rawTicks;\r\n            tickCount = continuous ? Math.max(defaultTickCount - index, minTickCount) : maxTickCount;\r\n            const { rawTicks, ticks, labelCount } = this.getTicks({\r\n                tickGenerationType,\r\n                previousTicks: prevTicks,\r\n                tickCount,\r\n                minTickCount,\r\n                maxTickCount,\r\n                primaryTickCount,\r\n            });\r\n            tickData.rawTicks = rawTicks;\r\n            tickData.ticks = ticks;\r\n            tickData.labelCount = labelCount;\r\n            unchanged = regenerateTicks ? areArrayNumbersEqual(rawTicks, prevTicks) : false;\r\n            index++;\r\n        }\r\n        const shouldTerminate = tick.interval !== undefined || tick.values !== undefined;\r\n        terminate || (terminate = shouldTerminate);\r\n        return { tickData, index, autoRotation: 0, terminate };\r\n    }\r\n    checkLabelOverlap(rotation, rotated, labelMatrix, tickData, labelX, textProps) {\r\n        Matrix.updateTransformMatrix(labelMatrix, 1, 1, rotation, 0, 0);\r\n        const labelData = this.createLabelData(tickData, labelX, textProps, labelMatrix);\r\n        const labelSpacing = getLabelSpacing(this.label.minSpacing, rotated);\r\n        return axisLabelsOverlap(labelData, labelSpacing);\r\n    }\r\n    createLabelData(tickData, labelX, textProps, labelMatrix) {\r\n        const labelData = [];\r\n        for (const tickDatum of tickData) {\r\n            const { tickLabel, translationY } = tickDatum;\r\n            if (tickLabel === '' || tickLabel == undefined) {\r\n                // skip user hidden ticks\r\n                continue;\r\n            }\r\n            const lines = splitText(tickLabel);\r\n            const { width, height } = measureText(lines, labelX, translationY, textProps);\r\n            const bbox = new BBox(labelX, translationY, width, height);\r\n            const labelDatum = calculateLabelBBox(tickLabel, bbox, labelX, translationY, labelMatrix);\r\n            labelData.push(labelDatum);\r\n        }\r\n        return labelData;\r\n    }\r\n    getAutoRotation(labelOverlap) {\r\n        var _a;\r\n        return labelOverlap ? normalizeAngle360(toRadians((_a = this.label.autoRotateAngle) !== null && _a !== void 0 ? _a : 0)) : 0;\r\n    }\r\n    getTicks({ tickGenerationType, previousTicks, tickCount, minTickCount, maxTickCount, primaryTickCount, }) {\r\n        var _a;\r\n        const { range, scale, visibleRange } = this;\r\n        let rawTicks = [];\r\n        switch (tickGenerationType) {\r\n            case TickGenerationType.VALUES:\r\n                rawTicks = this.tick.values;\r\n                break;\r\n            case TickGenerationType.CREATE_SECONDARY:\r\n                // `updateSecondaryAxisTicks` mutates `scale.domain` based on `primaryTickCount`\r\n                rawTicks = this.updateSecondaryAxisTicks(primaryTickCount);\r\n                break;\r\n            case TickGenerationType.FILTER:\r\n                rawTicks = this.filterTicks(previousTicks, tickCount);\r\n                break;\r\n            default:\r\n                rawTicks = this.createTicks(tickCount, minTickCount, maxTickCount);\r\n                break;\r\n        }\r\n        // When the scale domain or the ticks change, the label format may change\r\n        this.onLabelFormatChange(rawTicks, this.label.format);\r\n        // `ticks instanceof NumericTicks` doesn't work here, so we feature detect.\r\n        this.fractionDigits = rawTicks.fractionDigits >= 0 ? rawTicks.fractionDigits : 0;\r\n        const halfBandwidth = ((_a = scale.bandwidth) !== null && _a !== void 0 ? _a : 0) / 2;\r\n        const ticks = [];\r\n        let labelCount = 0;\r\n        const tickIdCounts = new Map();\r\n        // Only get the ticks within a sliding window of the visible range to improve performance\r\n        const start = Math.max(0, Math.floor(visibleRange[0] * rawTicks.length));\r\n        const end = Math.min(rawTicks.length, Math.ceil(visibleRange[1] * rawTicks.length));\r\n        for (let i = start; i < end; i++) {\r\n            const rawTick = rawTicks[i];\r\n            const translationY = scale.convert(rawTick) + halfBandwidth;\r\n            // Do not render ticks outside the range with a small tolerance. A clip rect would trim long labels, so\r\n            // instead hide ticks based on their translation.\r\n            if (range.length > 0 && !this.inRange(translationY, 0, 0.001))\r\n                continue;\r\n            const tickLabel = this.formatTick(rawTick, i);\r\n            // Create a tick id from the label, or as an increment of the last label if this tick label is blank\r\n            let tickId = tickLabel;\r\n            if (tickIdCounts.has(tickId)) {\r\n                const count = tickIdCounts.get(tickId);\r\n                tickIdCounts.set(tickId, count + 1);\r\n                tickId = `${tickId}_${count}`;\r\n            }\r\n            else {\r\n                tickIdCounts.set(tickId, 1);\r\n            }\r\n            ticks.push({ tick: rawTick, tickId, tickLabel, translationY });\r\n            if (tickLabel === '' || tickLabel == undefined) {\r\n                continue;\r\n            }\r\n            labelCount++;\r\n        }\r\n        return { rawTicks, ticks, labelCount };\r\n    }\r\n    filterTicks(ticks, tickCount) {\r\n        var _a;\r\n        const tickSpacing = !isNaN(this.tick.minSpacing) || !isNaN((_a = this.tick.maxSpacing) !== null && _a !== void 0 ? _a : NaN);\r\n        const keepEvery = tickSpacing ? Math.ceil(ticks.length / tickCount) : 2;\r\n        return ticks.filter((_, i) => i % keepEvery === 0);\r\n    }\r\n    createTicks(tickCount, minTickCount, maxTickCount) {\r\n        var _a, _b, _c;\r\n        this.setTickCount(tickCount, minTickCount, maxTickCount);\r\n        return (_c = (_b = (_a = this.scale).ticks) === null || _b === void 0 ? void 0 : _b.call(_a)) !== null && _c !== void 0 ? _c : [];\r\n    }\r\n    estimateTickCount({ minSpacing, maxSpacing }) {\r\n        const { minRect } = this;\r\n        const rangeWithBleed = this.calculateRangeWithBleed();\r\n        const defaultMinSpacing = Math.max(this.defaultTickMinSpacing, rangeWithBleed / ContinuousScale.defaultMaxTickCount);\r\n        let clampMaxTickCount = !isNaN(maxSpacing);\r\n        if (isNaN(minSpacing)) {\r\n            minSpacing = defaultMinSpacing;\r\n        }\r\n        if (isNaN(maxSpacing)) {\r\n            maxSpacing = rangeWithBleed;\r\n        }\r\n        if (minSpacing > maxSpacing) {\r\n            if (minSpacing === defaultMinSpacing) {\r\n                minSpacing = maxSpacing;\r\n            }\r\n            else {\r\n                maxSpacing = minSpacing;\r\n            }\r\n        }\r\n        // Clamps the min spacing between ticks to be no more than the min distance between datums\r\n        const minRectDistance = minRect\r\n            ? this.direction === ChartAxisDirection.X\r\n                ? minRect.width\r\n                : minRect.height\r\n            : 1;\r\n        clampMaxTickCount && (clampMaxTickCount = minRectDistance < defaultMinSpacing);\r\n        const maxTickCount = clamp(1, Math.floor(rangeWithBleed / minSpacing), clampMaxTickCount ? Math.floor(rangeWithBleed / minRectDistance) : Infinity);\r\n        const minTickCount = Math.min(maxTickCount, Math.ceil(rangeWithBleed / maxSpacing));\r\n        const defaultTickCount = clamp(minTickCount, ContinuousScale.defaultTickCount, maxTickCount);\r\n        return { minTickCount, maxTickCount, defaultTickCount };\r\n    }\r\n    updateVisibility() {\r\n        if (this.moduleCtx.animationManager.isSkipped()) {\r\n            this.resetSelectionNodes();\r\n        }\r\n        this.tickLineGroup.visible = this.tick.enabled;\r\n        this.gridLineGroup.visible = this.gridLine.enabled;\r\n        this.tickLabelGroup.visible = this.label.enabled;\r\n    }\r\n    updateCrossLines({ rotation, parallelFlipRotation, regularFlipRotation, }) {\r\n        var _a;\r\n        const sideFlag = this.label.getSideFlag();\r\n        const anySeriesActive = this.isAnySeriesActive();\r\n        (_a = this.crossLines) === null || _a === void 0 ? void 0 : _a.forEach((crossLine) => {\r\n            var _a;\r\n            crossLine.sideFlag = -sideFlag;\r\n            crossLine.direction = rotation === -Math.PI / 2 ? ChartAxisDirection.X : ChartAxisDirection.Y;\r\n            if (crossLine instanceof CartesianCrossLine) {\r\n                crossLine.label.parallel = (_a = crossLine.label.parallel) !== null && _a !== void 0 ? _a : this.label.parallel;\r\n            }\r\n            crossLine.parallelFlipRotation = parallelFlipRotation;\r\n            crossLine.regularFlipRotation = regularFlipRotation;\r\n            crossLine.update(anySeriesActive);\r\n        });\r\n    }\r\n    updateTickLines() {\r\n        const { tick, label } = this;\r\n        const sideFlag = label.getSideFlag();\r\n        this.tickLineGroupSelection.each((line) => {\r\n            line.strokeWidth = tick.width;\r\n            line.stroke = tick.color;\r\n            line.x1 = sideFlag * tick.size;\r\n            line.x2 = 0;\r\n            line.y1 = 0;\r\n            line.y2 = 0;\r\n        });\r\n    }\r\n    calculateAvailableRange() {\r\n        const { range } = this;\r\n        const min = Math.min(...range);\r\n        const max = Math.max(...range);\r\n        return max - min;\r\n    }\r\n    /**\r\n     * Calculates the available range with an additional \"bleed\" beyond the canvas that encompasses the full axis when\r\n     * the visible range is only a portion of the axis.\r\n     */\r\n    calculateRangeWithBleed() {\r\n        const { visibleRange } = this;\r\n        const visibleScale = 1 / (visibleRange[1] - visibleRange[0]);\r\n        return round$1(this.calculateAvailableRange() * visibleScale, 2);\r\n    }\r\n    calculateDomain() {\r\n        if (this.linkedTo) {\r\n            this.dataDomain = this.linkedTo.dataDomain;\r\n        }\r\n        else {\r\n            const visibleSeries = this.boundSeries.filter((s) => this.includeInvisibleDomains || s.isEnabled());\r\n            const domains = visibleSeries.flatMap((series) => series.getDomain(this.direction));\r\n            this.dataDomain = this.normaliseDataDomain(domains);\r\n        }\r\n    }\r\n    getAxisTransform() {\r\n        return {\r\n            rotation: toRadians(this.rotation),\r\n            rotationCenterX: 0,\r\n            rotationCenterY: 0,\r\n            translationX: this.translation.x,\r\n            translationY: this.translation.y,\r\n        };\r\n    }\r\n    updatePosition() {\r\n        const { crossLineGroup, axisGroup, gridGroup, translation, gridLineGroupSelection, gridPadding, gridLength } = this;\r\n        const { rotation } = this.calculateRotations();\r\n        const sideFlag = this.label.getSideFlag();\r\n        const translationX = Math.floor(translation.x);\r\n        const translationY = Math.floor(translation.y);\r\n        crossLineGroup.setProperties({ rotation, translationX, translationY });\r\n        axisGroup.datum = this.getAxisTransform();\r\n        gridGroup.setProperties({ rotation, translationX, translationY });\r\n        gridLineGroupSelection.each((line) => {\r\n            line.x1 = gridPadding;\r\n            line.x2 = -sideFlag * gridLength + gridPadding;\r\n            line.y = 0;\r\n        });\r\n    }\r\n    updateSecondaryAxisTicks(_primaryTickCount) {\r\n        throw new Error('AG Charts - unexpected call to updateSecondaryAxisTicks() - check axes configuration.');\r\n    }\r\n    updateSelections(lineData, data, params) {\r\n        this.lineNode.datum = lineData;\r\n        this.gridLineGroupSelection.update(this.gridLength ? data : [], (group) => group.append(new Line({ tag: Tags.GridLine })), (datum) => datum.tickId);\r\n        this.tickLineGroupSelection.update(data, (group) => group.appendChild(new Line({ tag: Tags.TickLine })), (datum) => datum.tickId);\r\n        this.tickLabelGroupSelection.update(data.map((d) => this.getTickLabelProps(d, params)), (group) => group.appendChild(new Text({ tag: Tags.TickLabel })), (datum) => datum.tickId);\r\n    }\r\n    updateAxisLine() {\r\n        const { line } = this;\r\n        // Without this the layout isn't consistent when enabling/disabling the line, padding configurations are not respected.\r\n        const strokeWidth = line.enabled ? line.width : 0;\r\n        this.lineNode.setProperties({\r\n            stroke: line.color,\r\n            strokeWidth,\r\n        });\r\n    }\r\n    updateGridLines(sideFlag) {\r\n        const { gridLine: { style, width }, gridPadding, gridLength, } = this;\r\n        if (gridLength === 0 || style.length === 0) {\r\n            return;\r\n        }\r\n        this.gridLineGroupSelection.each((line, _, index) => {\r\n            const { stroke, lineDash } = style[index % style.length];\r\n            line.setProperties({\r\n                x1: gridPadding,\r\n                x2: -sideFlag * gridLength + gridPadding,\r\n                y: 0,\r\n                fill: undefined,\r\n                stroke,\r\n                strokeWidth: width,\r\n                lineDash,\r\n            });\r\n        });\r\n    }\r\n    updateLabels() {\r\n        const { label } = this;\r\n        if (!label.enabled) {\r\n            return;\r\n        }\r\n        // Apply label option values\r\n        this.tickLabelGroupSelection.each((node, datum) => {\r\n            node.setProperties(datum, [\r\n                'fill',\r\n                'fontFamily',\r\n                'fontSize',\r\n                'fontStyle',\r\n                'fontWeight',\r\n                'text',\r\n                'textAlign',\r\n                'textBaseline',\r\n            ]);\r\n        });\r\n    }\r\n    wrapLabels(tickData, index, labelProps) {\r\n        const { parallel, maxWidth, maxHeight } = this.label;\r\n        let defaultMaxWidth = this.maxThickness;\r\n        let defaultMaxHeight = Math.round(this.calculateAvailableRange() / tickData.labelCount);\r\n        if (parallel) {\r\n            [defaultMaxWidth, defaultMaxHeight] = [defaultMaxHeight, defaultMaxWidth];\r\n        }\r\n        tickData.ticks.forEach((tickDatum) => {\r\n            tickDatum.tickLabel = Text.wrap(tickDatum.tickLabel, maxWidth !== null && maxWidth !== void 0 ? maxWidth : defaultMaxWidth, maxHeight !== null && maxHeight !== void 0 ? maxHeight : defaultMaxHeight, labelProps, 'hyphenate');\r\n        });\r\n        return { tickData, index, autoRotation: 0, terminate: true };\r\n    }\r\n    updateTitle(params) {\r\n        const { rotation, title, _titleCaption, lineNode, tickLineGroup, tickLabelGroup } = this;\r\n        if (!title) {\r\n            _titleCaption.enabled = false;\r\n            return;\r\n        }\r\n        let tickSpace = 0;\r\n        const { anyTickVisible } = params;\r\n        if (title.enabled && anyTickVisible) {\r\n            const tickBBox = Group.computeBBox([tickLineGroup, tickLabelGroup, lineNode]);\r\n            const tickWidth = rotation === 0 ? tickBBox.width : tickBBox.height;\r\n            if (Math.abs(tickWidth) < Infinity) {\r\n                tickSpace += tickWidth;\r\n            }\r\n        }\r\n        this.setTitleProps(_titleCaption, { tickSpace });\r\n    }\r\n    // For formatting (nice rounded) tick values.\r\n    formatTick(datum, index) {\r\n        var _a, _b;\r\n        const { label, labelFormatter, fractionDigits, moduleCtx: { callbackCache }, } = this;\r\n        if (label.formatter) {\r\n            const value = fractionDigits > 0 ? datum : String(datum);\r\n            return ((_a = callbackCache.call(label.formatter, {\r\n                value,\r\n                index,\r\n                fractionDigits,\r\n                formatter: labelFormatter,\r\n            })) !== null && _a !== void 0 ? _a : value);\r\n        }\r\n        else if (labelFormatter) {\r\n            return (_b = callbackCache.call(labelFormatter, datum)) !== null && _b !== void 0 ? _b : String(datum);\r\n        }\r\n        // The axis is using a logScale or the`datum` is an integer, a string or an object\r\n        return String(datum);\r\n    }\r\n    // For formatting arbitrary values between the ticks.\r\n    formatDatum(datum) {\r\n        return String(datum);\r\n    }\r\n    computeBBox() {\r\n        return this.axisGroup.computeBBox();\r\n    }\r\n    initCrossLine(crossLine) {\r\n        crossLine.scale = this.scale;\r\n        crossLine.gridLength = this.gridLength;\r\n    }\r\n    isAnySeriesActive() {\r\n        return this.boundSeries.some((s) => this.includeInvisibleDomains || s.isEnabled());\r\n    }\r\n    clipTickLines(x, y, width, height) {\r\n        this.tickLineGroup.setClipRectInGroupCoordinateSpace(new BBox(x, y, width, height));\r\n    }\r\n    clipGrid(x, y, width, height) {\r\n        this.gridGroup.setClipRectInGroupCoordinateSpace(new BBox(x, y, width, height));\r\n    }\r\n    calculatePadding(min, _max) {\r\n        return [Math.abs(min * 0.01), Math.abs(min * 0.01)];\r\n    }\r\n    getTitleFormatterParams() {\r\n        var _a;\r\n        const boundSeries = this.boundSeries.reduce((acc, next) => {\r\n            const keys = next.getKeys(this.direction);\r\n            const names = next.getNames(this.direction);\r\n            for (let idx = 0; idx < keys.length; idx++) {\r\n                acc.push({ key: keys[idx], name: names[idx] });\r\n            }\r\n            return acc;\r\n        }, []);\r\n        return {\r\n            direction: this.direction,\r\n            boundSeries,\r\n            defaultValue: (_a = this.title) === null || _a === void 0 ? void 0 : _a.text,\r\n        };\r\n    }\r\n    normaliseDataDomain(d) {\r\n        return { domain: d, clipped: false };\r\n    }\r\n    getLayoutState() {\r\n        return Object.assign({ rect: this.computeBBox(), gridPadding: this.gridPadding, seriesAreaPadding: this.seriesAreaPadding, tickSize: this.tick.size }, this.layout);\r\n    }\r\n    getModuleMap() {\r\n        return this.moduleMap;\r\n    }\r\n    createModuleContext() {\r\n        var _a;\r\n        (_a = this.axisContext) !== null && _a !== void 0 ? _a : (this.axisContext = this.createAxisContext());\r\n        return Object.assign(Object.assign({}, this.moduleCtx), { parent: this.axisContext });\r\n    }\r\n    createAxisContext() {\r\n        return {\r\n            axisId: this.id,\r\n            direction: this.direction,\r\n            continuous: ContinuousScale.is(this.scale),\r\n            keys: () => this.boundSeries.flatMap((s) => s.getKeys(this.direction)),\r\n            scaleValueFormatter: (specifier) => { var _a, _b; return (_b = (_a = this.scale).tickFormat) === null || _b === void 0 ? void 0 : _b.call(_a, { specifier }); },\r\n            scaleBandwidth: () => { var _a; return (_a = this.scale.bandwidth) !== null && _a !== void 0 ? _a : 0; },\r\n            scaleConvert: (val) => this.scale.convert(val),\r\n            scaleInvert: (val) => { var _a, _b; return (_b = (_a = this.scale).invert) === null || _b === void 0 ? void 0 : _b.call(_a, val); },\r\n        };\r\n    }\r\n    animateReadyUpdate(diff) {\r\n        const { animationManager } = this.moduleCtx;\r\n        const selectionCtx = prepareAxisAnimationContext(this);\r\n        const fns = prepareAxisAnimationFunctions(selectionCtx);\r\n        fromToMotion(this.id, 'axis-group', animationManager, [this.axisGroup], fns.group);\r\n        fromToMotion(this.id, 'line', animationManager, [this.lineNode], fns.line);\r\n        fromToMotion(this.id, 'line-paths', animationManager, [this.gridLineGroupSelection, this.tickLineGroupSelection], fns.tick, (_, d) => d.tickId, diff);\r\n        fromToMotion(this.id, 'tick-labels', animationManager, [this.tickLabelGroupSelection], fns.label, (_, d) => d.tickId, diff);\r\n    }\r\n    resetSelectionNodes() {\r\n        const { gridLineGroupSelection, tickLineGroupSelection, tickLabelGroupSelection, lineNode } = this;\r\n        const selectionCtx = prepareAxisAnimationContext(this);\r\n        resetMotion([this.axisGroup], resetAxisGroupFn());\r\n        resetMotion([gridLineGroupSelection, tickLineGroupSelection], resetAxisSelectionFn(selectionCtx));\r\n        resetMotion([tickLabelGroupSelection], resetAxisLabelSelectionFn());\r\n        resetMotion([lineNode], resetAxisLineSelectionFn());\r\n    }\r\n    calculateUpdateDiff(previous, tickData) {\r\n        const added = new Set();\r\n        const removed = new Set();\r\n        const tickCount = Math.max(previous.length, tickData.ticks.length);\r\n        for (let i = 0; i < tickCount; i++) {\r\n            const tickDatum = tickData.ticks[i];\r\n            const prev = previous[i];\r\n            const tick = tickDatum === null || tickDatum === void 0 ? void 0 : tickDatum.tickId;\r\n            if (prev === tick) {\r\n                continue;\r\n            }\r\n            if (removed.has(tick)) {\r\n                removed.delete(tick);\r\n            }\r\n            else if (tick) {\r\n                added.add(tick);\r\n            }\r\n            if (added.has(prev)) {\r\n                added.delete(prev);\r\n            }\r\n            else if (prev) {\r\n                removed.add(prev);\r\n            }\r\n        }\r\n        return {\r\n            changed: added.size > 0 || removed.size > 0,\r\n            added: [...added.values()],\r\n            removed: [...removed.values()],\r\n        };\r\n    }\r\n}\r\nAxis.defaultTickMinSpacing = 50;\r\n__decorate([\r\n    Validate(BOOLEAN),\r\n    __metadata(\"design:type\", Boolean)\r\n], Axis.prototype, \"nice\", void 0);\r\n__decorate([\r\n    Validate(STRING_ARRAY),\r\n    __metadata(\"design:type\", Array)\r\n], Axis.prototype, \"keys\", void 0);\n\nclass CartesianAxisLabel extends AxisLabel {\r\n    constructor() {\r\n        super(...arguments);\r\n        /**\r\n         * Rotation angle to use when autoRotate is applied.\r\n         */\r\n        this.autoRotateAngle = 335;\r\n    }\r\n}\r\n__decorate([\r\n    Validate(OPT_BOOLEAN),\r\n    __metadata(\"design:type\", Boolean)\r\n], CartesianAxisLabel.prototype, \"autoRotate\", void 0);\r\n__decorate([\r\n    Validate(NUMBER$1(-360, 360)),\r\n    __metadata(\"design:type\", Number)\r\n], CartesianAxisLabel.prototype, \"autoRotateAngle\", void 0);\n\nclass CartesianAxis extends Axis {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.thickness = 0;\r\n        this.position = 'left';\r\n    }\r\n    get direction() {\r\n        return ['top', 'bottom'].includes(this.position) ? ChartAxisDirection.X : ChartAxisDirection.Y;\r\n    }\r\n    updateDirection() {\r\n        switch (this.position) {\r\n            case 'top':\r\n                this.rotation = -90;\r\n                this.label.mirrored = true;\r\n                this.label.parallel = true;\r\n                break;\r\n            case 'right':\r\n                this.rotation = 0;\r\n                this.label.mirrored = true;\r\n                this.label.parallel = false;\r\n                break;\r\n            case 'bottom':\r\n                this.rotation = -90;\r\n                this.label.mirrored = false;\r\n                this.label.parallel = true;\r\n                break;\r\n            case 'left':\r\n                this.rotation = 0;\r\n                this.label.mirrored = false;\r\n                this.label.parallel = false;\r\n                break;\r\n        }\r\n        if (this.axisContext) {\r\n            this.axisContext.position = this.position;\r\n            this.axisContext.direction = this.direction;\r\n        }\r\n    }\r\n    update(primaryTickCount) {\r\n        this.updateDirection();\r\n        return super.update(primaryTickCount);\r\n    }\r\n    calculateLayout(primaryTickCount) {\r\n        this.updateDirection();\r\n        return super.calculateLayout(primaryTickCount);\r\n    }\r\n    createAxisContext() {\r\n        return Object.assign(Object.assign({}, super.createAxisContext()), { position: this.position });\r\n    }\r\n    assignCrossLineArrayConstructor(crossLines) {\r\n        assignJsonApplyConstructedArray(crossLines, CartesianCrossLine);\r\n    }\r\n    createLabel() {\r\n        return new CartesianAxisLabel();\r\n    }\r\n}\r\n__decorate([\r\n    Validate(NUMBER$1(0)),\r\n    __metadata(\"design:type\", Number)\r\n], CartesianAxis.prototype, \"thickness\", void 0);\r\n__decorate([\r\n    Validate(POSITION),\r\n    __metadata(\"design:type\", String)\r\n], CartesianAxis.prototype, \"position\", void 0);\n\nclass CategoryAxis extends CartesianAxis {\r\n    constructor(moduleCtx) {\r\n        super(moduleCtx, new BandScale());\r\n        this._paddingOverrideEnabled = false;\r\n        this.groupPaddingInner = 0.1;\r\n        this.includeInvisibleDomains = true;\r\n    }\r\n    set paddingInner(value) {\r\n        this._paddingOverrideEnabled = true;\r\n        this.scale.paddingInner = value;\r\n    }\r\n    get paddingInner() {\r\n        this._paddingOverrideEnabled = true;\r\n        return this.scale.paddingInner;\r\n    }\r\n    set paddingOuter(value) {\r\n        this.scale.paddingOuter = value;\r\n    }\r\n    get paddingOuter() {\r\n        return this.scale.paddingOuter;\r\n    }\r\n    normaliseDataDomain(d) {\r\n        const domain = [];\r\n        const uniqueValues = new Set();\r\n        for (const v of d) {\r\n            const key = v instanceof Date ? v.getTime() : v;\r\n            if (!uniqueValues.has(key)) {\r\n                uniqueValues.add(key);\r\n                // Only add unique values\r\n                domain.push(v);\r\n            }\r\n        }\r\n        return { domain, clipped: false };\r\n    }\r\n    calculateDomain() {\r\n        if (!this._paddingOverrideEnabled) {\r\n            const paddings = this.boundSeries.map((s) => { var _a; return (_a = s.getBandScalePadding) === null || _a === void 0 ? void 0 : _a.call(s); }).filter((p) => p != null);\r\n            if (paddings.length > 0) {\r\n                this.scale.paddingInner = Math.min(...paddings.map((p) => p.inner));\r\n                this.scale.paddingOuter = Math.max(...paddings.map((p) => p.outer));\r\n            }\r\n        }\r\n        return super.calculateDomain();\r\n    }\r\n}\r\nCategoryAxis.className = 'CategoryAxis';\r\nCategoryAxis.type = 'category';\r\n__decorate([\r\n    Validate(NUMBER$1(0, 1)),\r\n    __metadata(\"design:type\", Number)\r\n], CategoryAxis.prototype, \"groupPaddingInner\", void 0);\n\n/**\r\n * The tree layout is calculated in abstract x/y coordinates, where the root is at (0, 0)\r\n * and the tree grows downward from the root.\r\n */\r\nclass TreeNode {\r\n    constructor(label = '', parent, number = 0) {\r\n        this.x = 0;\r\n        this.y = 0;\r\n        this.subtreeLeft = NaN;\r\n        this.subtreeRight = NaN;\r\n        this.screenX = 0;\r\n        this.screenY = 0;\r\n        this.children = [];\r\n        this.leafCount = 0;\r\n        this.prelim = 0;\r\n        this.mod = 0;\r\n        this.ancestor = this;\r\n        this.change = 0;\r\n        this.shift = 0;\r\n        this.label = label;\r\n        // screenX and screenY are meant to be recomputed from (layout) x and y\r\n        // when the tree is resized (without performing another layout)\r\n        this.parent = parent;\r\n        this.depth = parent ? parent.depth + 1 : 0;\r\n        this.number = number;\r\n    }\r\n    getLeftSibling() {\r\n        return this.number > 0 && this.parent ? this.parent.children[this.number - 1] : undefined;\r\n    }\r\n    getLeftmostSibling() {\r\n        return this.number > 0 && this.parent ? this.parent.children[0] : undefined;\r\n    }\r\n    // traverse the left contour of a subtree, return the successor of v on this contour\r\n    nextLeft() {\r\n        return this.children ? this.children[0] : this.thread;\r\n    }\r\n    // traverse the right contour of a subtree, return the successor of v on this contour\r\n    nextRight() {\r\n        return this.children ? this.children[this.children.length - 1] : this.thread;\r\n    }\r\n    getSiblings() {\r\n        return this.parent ? this.parent.children.filter((_, i) => i !== this.number) : [];\r\n    }\r\n}\r\n/**\r\n * Converts an array of ticks, where each tick has an array of labels, to a label tree.\r\n * If `pad` is `true`, will ensure that every branch matches the depth of the tree by\r\n * creating empty labels.\r\n */\r\nfunction ticksToTree(ticks, pad = true) {\r\n    const root = new TreeNode();\r\n    let depth = 0;\r\n    if (pad) {\r\n        ticks.forEach((tick) => (depth = Math.max(depth, tick.labels.length)));\r\n    }\r\n    ticks.forEach((tick) => {\r\n        if (pad) {\r\n            while (tick.labels.length < depth) {\r\n                tick.labels.unshift('');\r\n            }\r\n        }\r\n        insertTick(root, tick);\r\n    });\r\n    return root;\r\n}\r\nfunction insertTick(root, tick) {\r\n    const pathParts = tick.labels.slice().reverse(); // path elements from root to leaf label\r\n    const lastPartIndex = pathParts.length - 1;\r\n    pathParts.forEach((pathPart, partIndex) => {\r\n        const children = root.children;\r\n        const existingNode = children.find((child) => child.label === pathPart);\r\n        const isNotLeaf = partIndex !== lastPartIndex;\r\n        if (existingNode && isNotLeaf) {\r\n            // the isNotLeaf check is to allow duplicate leafs\r\n            root = existingNode;\r\n        }\r\n        else {\r\n            const node = new TreeNode(pathPart, root);\r\n            node.number = children.length;\r\n            children.push(node);\r\n            if (isNotLeaf) {\r\n                root = node;\r\n            }\r\n        }\r\n    });\r\n}\r\n// Shift the subtree.\r\nfunction moveSubtree(wm, wp, shift) {\r\n    const subtrees = wp.number - wm.number;\r\n    const ratio = shift / subtrees;\r\n    wp.change -= ratio;\r\n    wp.shift += shift;\r\n    wm.change += ratio;\r\n    wp.prelim += shift;\r\n    wp.mod += shift;\r\n}\r\nfunction ancestor(vim, v, defaultAncestor) {\r\n    return v.getSiblings().indexOf(vim.ancestor) >= 0 ? vim.ancestor : defaultAncestor;\r\n}\r\n// Spaces out the children.\r\nfunction executeShifts(v) {\r\n    const children = v.children;\r\n    if (children) {\r\n        let shift = 0;\r\n        let change = 0;\r\n        for (let i = children.length - 1; i >= 0; i--) {\r\n            const w = children[i];\r\n            w.prelim += shift;\r\n            w.mod += shift;\r\n            change += w.change;\r\n            shift += w.shift + change;\r\n        }\r\n    }\r\n}\r\n// Moves current subtree with v as the root if some nodes are conflicting in space.\r\nfunction apportion(v, defaultAncestor, distance) {\r\n    const w = v.getLeftSibling();\r\n    if (w) {\r\n        let vop = v;\r\n        let vip = v;\r\n        let vim = w;\r\n        let vom = vip.getLeftmostSibling();\r\n        let sip = vip.mod;\r\n        let sop = vop.mod;\r\n        let sim = vim.mod;\r\n        let som = vom.mod;\r\n        while (vim.nextRight() && vip.nextLeft()) {\r\n            vim = vim.nextRight();\r\n            vip = vip.nextLeft();\r\n            vom = vom.nextLeft();\r\n            vop = vop.nextRight();\r\n            vop.ancestor = v;\r\n            const shift = vim.prelim + sim - (vip.prelim + sip) + distance;\r\n            if (shift > 0) {\r\n                moveSubtree(ancestor(vim, v, defaultAncestor), v, shift);\r\n                sip += shift;\r\n                sop += shift;\r\n            }\r\n            sim += vim.mod;\r\n            sip += vip.mod;\r\n            som += vom.mod;\r\n            sop += vop.mod;\r\n        }\r\n        if (vim.nextRight() && !vop.nextRight()) {\r\n            vop.thread = vim.nextRight();\r\n            vop.mod += sim - sop;\r\n        }\r\n        else {\r\n            if (vip.nextLeft() && !vom.nextLeft()) {\r\n                vom.thread = vip.nextLeft();\r\n                vom.mod += sip - som;\r\n            }\r\n            defaultAncestor = v;\r\n        }\r\n    }\r\n    return defaultAncestor;\r\n}\r\n// Compute the preliminary x-coordinate of node and its children (recursively).\r\nfunction firstWalk(node, distance) {\r\n    const children = node.children;\r\n    if (children.length) {\r\n        let defaultAncestor = children[0];\r\n        children.forEach((child) => {\r\n            firstWalk(child, distance);\r\n            defaultAncestor = apportion(child, defaultAncestor, distance);\r\n        });\r\n        executeShifts(node);\r\n        const midpoint = (children[0].prelim + children[children.length - 1].prelim) / 2;\r\n        const leftSibling = node.getLeftSibling();\r\n        if (leftSibling) {\r\n            node.prelim = leftSibling.prelim + distance;\r\n            node.mod = node.prelim - midpoint;\r\n        }\r\n        else {\r\n            node.prelim = midpoint;\r\n        }\r\n    }\r\n    else {\r\n        const leftSibling = node.getLeftSibling();\r\n        node.prelim = leftSibling ? leftSibling.prelim + distance : 0;\r\n    }\r\n}\r\nclass Dimensions {\r\n    constructor() {\r\n        this.top = Infinity;\r\n        this.right = -Infinity;\r\n        this.bottom = -Infinity;\r\n        this.left = Infinity;\r\n    }\r\n    update(node, xy) {\r\n        const { x, y } = xy(node);\r\n        if (x > this.right) {\r\n            this.right = x;\r\n        }\r\n        if (x < this.left) {\r\n            this.left = x;\r\n        }\r\n        if (y > this.bottom) {\r\n            this.bottom = y;\r\n        }\r\n        if (y < this.top) {\r\n            this.top = y;\r\n        }\r\n    }\r\n}\r\nfunction secondWalk(v, m, layout) {\r\n    v.x = v.prelim + m;\r\n    v.y = v.depth;\r\n    layout.update(v);\r\n    v.children.forEach((w) => secondWalk(w, m + v.mod, layout));\r\n}\r\n// After the second walk the parent nodes are positioned at the center of their immediate children.\r\n// If we want the parent nodes to be positioned at the center of the subtree for which they are roots,\r\n// we need a third walk to adjust the positions.\r\nfunction thirdWalk(v) {\r\n    const children = v.children;\r\n    let leafCount = 0;\r\n    children.forEach((w) => {\r\n        thirdWalk(w);\r\n        if (w.children.length) {\r\n            leafCount += w.leafCount;\r\n        }\r\n        else {\r\n            leafCount++;\r\n        }\r\n    });\r\n    v.leafCount = leafCount;\r\n    if (children.length) {\r\n        v.subtreeLeft = children[0].subtreeLeft;\r\n        v.subtreeRight = children[v.children.length - 1].subtreeRight;\r\n        v.x = (v.subtreeLeft + v.subtreeRight) / 2;\r\n    }\r\n    else {\r\n        v.subtreeLeft = v.x;\r\n        v.subtreeRight = v.x;\r\n    }\r\n}\r\nfunction treeLayout(root) {\r\n    const layout = new TreeLayout();\r\n    firstWalk(root, 1);\r\n    secondWalk(root, -root.prelim, layout);\r\n    thirdWalk(root);\r\n    return layout;\r\n}\r\nclass TreeLayout {\r\n    constructor() {\r\n        this.dimensions = new Dimensions();\r\n        this.leafCount = 0;\r\n        this.nodes = [];\r\n        // One might want to process leaf nodes separately from the rest of the tree.\r\n        // For example, position labels corresponding to leafs vertically, rather than horizontally.\r\n        this.leafNodes = [];\r\n        this.nonLeafNodes = [];\r\n        this.depth = 0;\r\n    }\r\n    update(node) {\r\n        this.dimensions.update(node, (node) => ({ x: node.x, y: node.y }));\r\n        if (!node.children.length) {\r\n            this.leafCount++;\r\n            this.leafNodes.push(node);\r\n        }\r\n        else {\r\n            this.nonLeafNodes.push(node);\r\n        }\r\n        if (node.depth > this.depth) {\r\n            this.depth = node.depth;\r\n        }\r\n        this.nodes.push(node);\r\n    }\r\n    resize(width, height, shiftX = 0, shiftY = 0, flipX = false) {\r\n        const xSteps = this.leafCount - 1;\r\n        const ySteps = this.depth;\r\n        const dimensions = this.dimensions;\r\n        let scalingX = 1;\r\n        let scalingY = 1;\r\n        if (width > 0 && xSteps) {\r\n            const existingSpacingX = (dimensions.right - dimensions.left) / xSteps;\r\n            const desiredSpacingX = width / xSteps;\r\n            scalingX = desiredSpacingX / existingSpacingX;\r\n            if (flipX) {\r\n                scalingX = -scalingX;\r\n            }\r\n        }\r\n        if (height > 0 && ySteps) {\r\n            const existingSpacingY = (dimensions.bottom - dimensions.top) / ySteps;\r\n            const desiredSpacingY = height / ySteps;\r\n            scalingY = desiredSpacingY / existingSpacingY;\r\n        }\r\n        const screenDimensions = new Dimensions();\r\n        this.nodes.forEach((node) => {\r\n            node.screenX = node.x * scalingX;\r\n            node.screenY = node.y * scalingY;\r\n            screenDimensions.update(node, (node) => ({ x: node.screenX, y: node.screenY }));\r\n        });\r\n        // Normalize so that root top and leftmost leaf left start at zero.\r\n        const offsetX = -screenDimensions.left;\r\n        const offsetY = -screenDimensions.top;\r\n        this.nodes.forEach((node) => {\r\n            node.screenX += offsetX + shiftX;\r\n            node.screenY += offsetY + shiftY;\r\n        });\r\n    }\r\n}\n\nclass GroupedCategoryAxisLabel extends AxisLabel {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.grid = false;\r\n    }\r\n}\r\n__decorate([\r\n    Validate(BOOLEAN),\r\n    __metadata(\"design:type\", Boolean)\r\n], GroupedCategoryAxisLabel.prototype, \"grid\", void 0);\r\nclass GroupedCategoryAxis extends CartesianAxis {\r\n    constructor(moduleCtx) {\r\n        super(moduleCtx, new BandScale());\r\n        // Label scale (labels are positioned between ticks, tick count = label count + 1).\r\n        // We don't call is `labelScale` for consistency with other axes.\r\n        this.tickScale = new BandScale();\r\n        this.line = new AxisLine();\r\n        this.label = new GroupedCategoryAxisLabel();\r\n        /**\r\n         * The color of the labels.\r\n         * Use `undefined` rather than `rgba(0, 0, 0, 0)` to make labels invisible.\r\n         */\r\n        this.labelColor = 'rgba(87, 87, 87, 1)';\r\n        this.includeInvisibleDomains = true;\r\n        const { tickLineGroup, tickLabelGroup, gridLineGroup, tickScale, scale } = this;\r\n        scale.paddingOuter = 0.1;\r\n        scale.paddingInner = scale.paddingOuter * 2;\r\n        this.range = scale.range.slice();\r\n        this.refreshScale();\r\n        tickScale.paddingInner = 1;\r\n        tickScale.paddingOuter = 0;\r\n        this.gridLineSelection = Selection.select(gridLineGroup, Line);\r\n        this.axisLineSelection = Selection.select(tickLineGroup, Line);\r\n        this.separatorSelection = Selection.select(tickLineGroup, Line);\r\n        this.labelSelection = Selection.select(tickLabelGroup, Text);\r\n    }\r\n    updateRange() {\r\n        const { range: rr, visibleRange: vr, scale } = this;\r\n        const span = (rr[1] - rr[0]) / (vr[1] - vr[0]);\r\n        const shift = span * vr[0];\r\n        const start = rr[0] - shift;\r\n        this.tickScale.range = scale.range = [start, start + span];\r\n        this.resizeTickTree();\r\n    }\r\n    resizeTickTree() {\r\n        var _a;\r\n        const s = this.scale;\r\n        const range = s.domain.length ? [s.convert(s.domain[0]), s.convert(s.domain[s.domain.length - 1])] : s.range;\r\n        const layout = this.tickTreeLayout;\r\n        const lineHeight = this.lineHeight;\r\n        if (layout) {\r\n            layout.resize(Math.abs(range[1] - range[0]), layout.depth * lineHeight, (Math.min(range[0], range[1]) || 0) + ((_a = s.bandwidth) !== null && _a !== void 0 ? _a : 0) / 2, -layout.depth * lineHeight, range[1] - range[0] < 0);\r\n        }\r\n    }\r\n    get lineHeight() {\r\n        return this.label.fontSize * 1.5;\r\n    }\r\n    /**\r\n     * The length of the grid. The grid is only visible in case of a non-zero value.\r\n     */\r\n    set gridLength(value) {\r\n        // Was visible and now invisible, or was invisible and now visible.\r\n        if ((this._gridLength && !value) || (!this._gridLength && value)) {\r\n            this.gridLineSelection.clear();\r\n            this.labelSelection.clear();\r\n        }\r\n        this._gridLength = value;\r\n    }\r\n    get gridLength() {\r\n        return this._gridLength;\r\n    }\r\n    calculateDomain() {\r\n        var _a;\r\n        const { direction } = this;\r\n        const domains = [];\r\n        let isNumericX;\r\n        this.boundSeries\r\n            .filter((s) => s.visible)\r\n            .forEach((series) => {\r\n            if (direction === ChartAxisDirection.X) {\r\n                if (isNumericX === undefined) {\r\n                    // always add first X domain\r\n                    const domain = series.getDomain(direction);\r\n                    domains.push(domain);\r\n                    isNumericX = typeof domain[0] === 'number';\r\n                }\r\n                else if (isNumericX) {\r\n                    // only add further X domains if the axis is numeric\r\n                    domains.push(series.getDomain(direction));\r\n                }\r\n            }\r\n            else {\r\n                domains.push(series.getDomain(direction));\r\n            }\r\n        });\r\n        const domain = new Array().concat(...domains);\r\n        const values = (_a = extent(domain)) !== null && _a !== void 0 ? _a : domain;\r\n        this.dataDomain = this.normaliseDataDomain(values);\r\n        this.scale.domain = this.dataDomain.domain;\r\n    }\r\n    normaliseDataDomain(d) {\r\n        // Prevent duplicate categories.\r\n        const values = d.filter((s, i, arr) => arr.indexOf(s) === i);\r\n        const tickTree = ticksToTree(values);\r\n        this.tickTreeLayout = treeLayout(tickTree);\r\n        const tickScaleDomain = values.slice();\r\n        tickScaleDomain.push('');\r\n        this.tickScale.domain = tickScaleDomain;\r\n        this.resizeTickTree();\r\n        return { domain: values, clipped: false };\r\n    }\r\n    /**\r\n     * Creates/removes/updates the scene graph nodes that constitute the axis.\r\n     * Supposed to be called _manually_ after changing _any_ of the axis properties.\r\n     * This allows to bulk set axis properties before updating the nodes.\r\n     * The node changes made by this method are rendered on the next animation frame.\r\n     * We could schedule this method call automatically on the next animation frame\r\n     * when any of the axis properties change (the way we do when properties of scene graph's\r\n     * nodes change), but this will mean that we first wait for the next animation\r\n     * frame to make changes to the nodes of the axis, then wait for another animation\r\n     * frame to render those changes. It's nice to have everything update automatically,\r\n     * but this extra level of async indirection will not just introduce an unwanted delay,\r\n     * it will also make it harder to reason about the program.\r\n     */\r\n    update() {\r\n        if (!this.computedLayout) {\r\n            return;\r\n        }\r\n        this.updatePosition();\r\n        this.updateTitleCaption();\r\n        this.updateCategoryLabels();\r\n        this.updateSeparators();\r\n        this.updateAxisLines();\r\n        this.updateCategoryGridLines();\r\n        this.resetSelectionNodes();\r\n        return undefined;\r\n    }\r\n    updateTitleCaption() {\r\n        // The Text `node` of the Caption is not used to render the title of the grouped category axis.\r\n        // The phantom root of the tree layout is used instead.\r\n        const { _titleCaption } = this;\r\n        _titleCaption.node.visible = false;\r\n    }\r\n    updateCategoryLabels() {\r\n        if (!this.computedLayout)\r\n            return;\r\n        const { tickLabelLayout } = this.computedLayout;\r\n        const labelSelection = this.labelSelection.update(tickLabelLayout);\r\n        labelSelection.each((node, datum) => {\r\n            node.setProperties(datum);\r\n        });\r\n    }\r\n    updateSeparators() {\r\n        if (!this.computedLayout)\r\n            return;\r\n        const { separatorLayout } = this.computedLayout;\r\n        const { range } = this;\r\n        const epsilon = 0.0000001;\r\n        const separatorSelection = this.separatorSelection.update(separatorLayout);\r\n        separatorSelection.each((line, datum) => {\r\n            line.x1 = datum.x1;\r\n            line.x2 = datum.x2;\r\n            line.y1 = datum.y;\r\n            line.y2 = datum.y;\r\n            line.visible = datum.y >= range[0] - epsilon && datum.y <= range[1] + epsilon;\r\n            line.stroke = this.tick.color;\r\n            line.fill = undefined;\r\n            line.strokeWidth = 1;\r\n        });\r\n    }\r\n    updateAxisLines() {\r\n        if (!this.computedLayout)\r\n            return;\r\n        const { axisLineLayout } = this.computedLayout;\r\n        const axisLineSelection = this.axisLineSelection.update(axisLineLayout);\r\n        axisLineSelection.each((line, datum) => {\r\n            line.setProperties(Object.assign(Object.assign({}, datum), { stroke: this.line.color, strokeWidth: this.line.width }));\r\n            line.x1 = datum.x;\r\n            line.x2 = datum.x;\r\n            line.y1 = datum.y1;\r\n            line.y2 = datum.y2;\r\n            line.strokeWidth = this.line.width;\r\n            line.stroke = this.line.color;\r\n        });\r\n    }\r\n    updateCategoryGridLines() {\r\n        const { gridLength, gridLine, label, range, tickScale } = this;\r\n        const ticks = tickScale.ticks();\r\n        const sideFlag = label.getSideFlag();\r\n        const gridSelection = this.gridLineSelection.update(gridLength ? ticks : []);\r\n        if (gridLength) {\r\n            const { width, style } = gridLine;\r\n            const styleCount = style.length;\r\n            gridSelection.each((line, datum, index) => {\r\n                const y = Math.round(tickScale.convert(datum));\r\n                line.x1 = 0;\r\n                line.x2 = -sideFlag * gridLength;\r\n                line.y1 = y;\r\n                line.y2 = y;\r\n                line.visible = y >= range[0] && y <= range[1];\r\n                const { stroke, lineDash } = style[index % styleCount];\r\n                line.stroke = stroke;\r\n                line.strokeWidth = width;\r\n                line.lineDash = lineDash;\r\n                line.fill = undefined;\r\n            });\r\n        }\r\n    }\r\n    computeLayout() {\r\n        this.updateDirection();\r\n        this.calculateDomain();\r\n        this.updateRange();\r\n        const { scale, label, label: { parallel }, moduleCtx: { callbackCache }, range, title, title: { formatter = (p) => p.defaultValue } = {}, } = this;\r\n        const rangeStart = scale.range[0];\r\n        const rangeEnd = scale.range[1];\r\n        const rangeLength = Math.abs(rangeEnd - rangeStart);\r\n        const bandwidth = rangeLength / scale.domain.length || 0;\r\n        const rotation = toRadians(this.rotation);\r\n        const isHorizontal = Math.abs(Math.cos(rotation)) < 1e-8;\r\n        const sideFlag = label.getSideFlag();\r\n        // The Text `node` of the Caption is not used to render the title of the grouped category axis.\r\n        // The phantom root of the tree layout is used instead.\r\n        const lineHeight = this.lineHeight;\r\n        // Render ticks and labels.\r\n        const tickTreeLayout = this.tickTreeLayout;\r\n        const labels = scale.ticks();\r\n        const treeLabels = tickTreeLayout ? tickTreeLayout.nodes : [];\r\n        const isLabelTree = tickTreeLayout ? tickTreeLayout.depth > 1 : false;\r\n        // When labels are parallel to the axis line, the `parallelFlipFlag` is used to\r\n        // flip the labels to avoid upside-down text, when the axis is rotated\r\n        // such that it is in the right hemisphere, i.e. the angle of rotation\r\n        // is in the [0, π] interval.\r\n        // The rotation angle is normalized, so that we have an easier time checking\r\n        // if it's in the said interval. Since the axis is always rendered vertically\r\n        // and then rotated, zero rotation means 12 (not 3) o-clock.\r\n        // -1 = flip\r\n        //  1 = don't flip (default)\r\n        const { defaultRotation, configuredRotation, parallelFlipFlag } = calculateLabelRotation({\r\n            rotation: label.rotation,\r\n            parallel,\r\n            regularFlipRotation: normalizeAngle360(rotation - Math.PI / 2),\r\n            parallelFlipRotation: normalizeAngle360(rotation),\r\n        });\r\n        const tickLabelLayout = [];\r\n        const copyLabelProps = (node) => {\r\n            return {\r\n                fill: node.fill,\r\n                fontFamily: node.fontFamily,\r\n                fontSize: node.fontSize,\r\n                fontStyle: node.fontStyle,\r\n                fontWeight: node.fontWeight,\r\n                rotation: node.rotation,\r\n                rotationCenterX: node.rotationCenterX,\r\n                rotationCenterY: node.rotationCenterY,\r\n                text: node.text,\r\n                textAlign: node.textAlign,\r\n                textBaseline: node.textBaseline,\r\n                translationX: node.translationX,\r\n                translationY: node.translationY,\r\n                visible: node.visible,\r\n                x: node.x,\r\n                y: node.y,\r\n            };\r\n        };\r\n        const labelBBoxes = new Map();\r\n        let maxLeafLabelWidth = 0;\r\n        const tempText = new Text();\r\n        const setLabelProps = (datum, index) => {\r\n            var _a;\r\n            tempText.setProperties({\r\n                fill: label.color,\r\n                fontFamily: label.fontFamily,\r\n                fontSize: label.fontSize,\r\n                fontStyle: label.fontStyle,\r\n                fontWeight: label.fontWeight,\r\n                textAlign: 'center',\r\n                textBaseline: parallelFlipFlag === -1 ? 'bottom' : 'hanging',\r\n                translationX: datum.screenY - label.fontSize * 0.25,\r\n                translationY: datum.screenX,\r\n            });\r\n            if (index === 0) {\r\n                const isCaptionEnabled = (title === null || title === void 0 ? void 0 : title.enabled) && labels.length > 0;\r\n                if (!isCaptionEnabled) {\r\n                    return false;\r\n                }\r\n                const text = callbackCache.call(formatter, this.getTitleFormatterParams());\r\n                tempText.setProperties({\r\n                    fill: title.color,\r\n                    fontFamily: title.fontFamily,\r\n                    fontSize: title.fontSize,\r\n                    fontStyle: title.fontStyle,\r\n                    fontWeight: title.fontWeight,\r\n                    text,\r\n                    textBaseline: 'hanging',\r\n                    translationX: datum.screenY - label.fontSize * 0.25,\r\n                    translationY: datum.screenX,\r\n                });\r\n            }\r\n            else {\r\n                const isInRange = datum.screenX >= range[0] && datum.screenX <= range[1];\r\n                if (!isInRange) {\r\n                    return false;\r\n                }\r\n                if (label.formatter) {\r\n                    tempText.text =\r\n                        (_a = callbackCache.call(label.formatter, {\r\n                            value: String(datum.label),\r\n                            index,\r\n                        })) !== null && _a !== void 0 ? _a : String(datum.label);\r\n                }\r\n                else {\r\n                    tempText.text = String(datum.label);\r\n                }\r\n            }\r\n            return true;\r\n        };\r\n        treeLabels.forEach((datum, index) => {\r\n            const isVisible = setLabelProps(datum, index);\r\n            if (isVisible) {\r\n                const bbox = tempText.computeTransformedBBox();\r\n                if (bbox) {\r\n                    labelBBoxes.set(index, bbox);\r\n                    if (bbox.width > maxLeafLabelWidth) {\r\n                        maxLeafLabelWidth = bbox.width;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        const labelX = sideFlag * label.padding;\r\n        const labelGrid = this.label.grid;\r\n        const separatorData = [];\r\n        treeLabels.forEach((datum, index) => {\r\n            let visible = setLabelProps(datum, index);\r\n            const id = index;\r\n            tempText.x = labelX;\r\n            tempText.rotationCenterX = labelX;\r\n            const isLeaf = !datum.children.length;\r\n            if (isLeaf) {\r\n                tempText.rotation = configuredRotation;\r\n                tempText.textAlign = 'end';\r\n                tempText.textBaseline = 'middle';\r\n                const bbox = labelBBoxes.get(id);\r\n                if (bbox && bbox.height > bandwidth) {\r\n                    visible = false;\r\n                    labelBBoxes.delete(id);\r\n                }\r\n            }\r\n            else {\r\n                tempText.translationX -= maxLeafLabelWidth - lineHeight + this.label.padding;\r\n                const availableRange = datum.leafCount * bandwidth;\r\n                const bbox = labelBBoxes.get(id);\r\n                if (bbox && bbox.width > availableRange) {\r\n                    visible = false;\r\n                    labelBBoxes.delete(id);\r\n                }\r\n                else if (isHorizontal) {\r\n                    tempText.rotation = defaultRotation;\r\n                }\r\n                else {\r\n                    tempText.rotation = -Math.PI / 2;\r\n                }\r\n            }\r\n            // Calculate positions of label separators for all nodes except the root.\r\n            // Each separator is placed to the top of the current label.\r\n            if (datum.parent && isLabelTree) {\r\n                const y = isLeaf ? datum.screenX - bandwidth / 2 : datum.screenX - (datum.leafCount * bandwidth) / 2;\r\n                if (isLeaf) {\r\n                    if (datum.number !== datum.children.length - 1 || labelGrid) {\r\n                        separatorData.push({\r\n                            y,\r\n                            x1: 0,\r\n                            x2: -maxLeafLabelWidth - this.label.padding * 2,\r\n                        });\r\n                    }\r\n                }\r\n                else {\r\n                    const x = -maxLeafLabelWidth - this.label.padding * 2 + datum.screenY;\r\n                    separatorData.push({\r\n                        y,\r\n                        x1: x + lineHeight,\r\n                        x2: x,\r\n                    });\r\n                }\r\n            }\r\n            let props;\r\n            if (visible) {\r\n                const bbox = tempText.computeTransformedBBox();\r\n                if (bbox) {\r\n                    labelBBoxes.set(index, bbox);\r\n                }\r\n                props = Object.assign(Object.assign({}, copyLabelProps(tempText)), { visible });\r\n            }\r\n            else {\r\n                labelBBoxes.delete(index);\r\n                props = { visible };\r\n            }\r\n            tickLabelLayout.push(props);\r\n        });\r\n        // Calculate the position of the long separator on the far bottom of the axis.\r\n        let minX = 0;\r\n        separatorData.forEach((d) => (minX = Math.min(minX, d.x2)));\r\n        separatorData.push({\r\n            y: Math.max(rangeStart, rangeEnd),\r\n            x1: 0,\r\n            x2: minX,\r\n        });\r\n        const separatorLayout = [];\r\n        const separatorBoxes = [];\r\n        const epsilon = 0.0000001;\r\n        separatorData.forEach((datum) => {\r\n            if (datum.y >= range[0] - epsilon && datum.y <= range[1] + epsilon) {\r\n                const { x1, x2, y } = datum;\r\n                const separatorBox = new BBox(Math.min(x1, x2), y, Math.abs(x1 - x2), 0);\r\n                separatorBoxes.push(separatorBox);\r\n                separatorLayout.push({ x1, x2, y });\r\n            }\r\n        });\r\n        const axisLineLayout = [];\r\n        const axisLineBoxes = [];\r\n        const lineCount = tickTreeLayout ? tickTreeLayout.depth + 1 : 1;\r\n        for (let i = 0; i < lineCount; i++) {\r\n            const visible = labels.length > 0 && (i === 0 || (labelGrid && isLabelTree));\r\n            const x = i > 0 ? -maxLeafLabelWidth - this.label.padding * 2 - (i - 1) * lineHeight : 0;\r\n            const lineBox = new BBox(x, Math.min(...range), 0, Math.abs(range[1] - range[0]));\r\n            axisLineBoxes.push(lineBox);\r\n            axisLineLayout.push({ x, y1: range[0], y2: range[1], visible });\r\n        }\r\n        const getTransformBox = (bbox) => {\r\n            const matrix = new Matrix();\r\n            const { rotation: axisRotation, translationX, translationY, rotationCenterX, rotationCenterY, } = this.getAxisTransform();\r\n            Matrix.updateTransformMatrix(matrix, 1, 1, axisRotation, translationX, translationY, {\r\n                scalingCenterX: 0,\r\n                scalingCenterY: 0,\r\n                rotationCenterX,\r\n                rotationCenterY,\r\n            });\r\n            return matrix.transformBBox(bbox);\r\n        };\r\n        const bbox = BBox.merge([...labelBBoxes.values(), ...separatorBoxes, ...axisLineBoxes]);\r\n        const transformedBBox = getTransformBox(bbox);\r\n        return {\r\n            bbox: transformedBBox,\r\n            tickLabelLayout,\r\n            separatorLayout,\r\n            axisLineLayout,\r\n        };\r\n    }\r\n    calculateLayout() {\r\n        const { axisLineLayout, separatorLayout, tickLabelLayout, bbox } = this.computeLayout();\r\n        this.computedLayout = {\r\n            axisLineLayout,\r\n            separatorLayout,\r\n            tickLabelLayout,\r\n        };\r\n        return { bbox, primaryTickCount: undefined };\r\n    }\r\n}\r\nGroupedCategoryAxis.className = 'GroupedCategoryAxis';\r\nGroupedCategoryAxis.type = 'grouped-category';\r\n__decorate([\r\n    Validate(OPT_COLOR_STRING),\r\n    __metadata(\"design:type\", String)\r\n], GroupedCategoryAxis.prototype, \"labelColor\", void 0);\n\n/**\r\n * Wraps a native OffscreenCanvas and overrides its OffscreenCanvasRenderingContext2D to\r\n * provide resolution independent rendering based on `window.devicePixelRatio`.\r\n */\r\nclass HdpiOffscreenCanvas {\r\n    static isSupported() {\r\n        return typeof OffscreenCanvas !== 'undefined' && OffscreenCanvas.prototype.transferToImageBitmap != null;\r\n    }\r\n    // The width/height attributes of the Canvas element default to\r\n    // 300/150 according to w3.org.\r\n    constructor({ width = 600, height = 300, overrideDevicePixelRatio }) {\r\n        this.enabled = true;\r\n        // `NaN` is deliberate here, so that overrides are always applied\r\n        // and the `resetTransform` inside the `resize` method works in IE11.\r\n        this._pixelRatio = NaN;\r\n        this._width = 0;\r\n        this._height = 0;\r\n        this.canvas = new OffscreenCanvas(width, height);\r\n        this.realContext = this.canvas.getContext('2d');\r\n        this.imageSource = this.canvas.transferToImageBitmap();\r\n        this.context = this.setPixelRatio(overrideDevicePixelRatio);\r\n        this.resize(width, height);\r\n    }\r\n    snapshot() {\r\n        this.imageSource.close();\r\n        this.imageSource = this.canvas.transferToImageBitmap();\r\n    }\r\n    destroy() {\r\n        this.imageSource.close();\r\n        // Workaround memory allocation quirks in iOS Safari by resizing to 0x0 and clearing.\r\n        // See https://bugs.webkit.org/show_bug.cgi?id=195325.\r\n        this.canvas.width = 0;\r\n        this.canvas.height = 0;\r\n        this.context.clearRect(0, 0, 0, 0);\r\n    }\r\n    clear() {\r\n        this.context.save();\r\n        this.context.resetTransform();\r\n        this.context.clearRect(0, 0, this.width, this.height);\r\n        this.context.restore();\r\n    }\r\n    get pixelRatio() {\r\n        return this._pixelRatio;\r\n    }\r\n    /**\r\n     * Changes the pixel ratio of the Canvas element to the given value,\r\n     * or uses the window.devicePixelRatio (default), then resizes the Canvas\r\n     * element accordingly (default).\r\n     */\r\n    setPixelRatio(ratio) {\r\n        let pixelRatio = ratio !== null && ratio !== void 0 ? ratio : window.devicePixelRatio;\r\n        if (!isDesktop()) {\r\n            // Mobile browsers have stricter memory limits, we reduce rendering resolution to\r\n            // improve stability on mobile browsers. iOS Safari 12->16 are pain-points since they\r\n            // have memory allocation quirks - see https://bugs.webkit.org/show_bug.cgi?id=195325.\r\n            pixelRatio = 1;\r\n        }\r\n        this._pixelRatio = pixelRatio;\r\n        return HdpiCanvas.overrideScale(this.realContext, pixelRatio);\r\n    }\r\n    get width() {\r\n        return this._width;\r\n    }\r\n    get height() {\r\n        return this._height;\r\n    }\r\n    resize(width, height) {\r\n        if (!(width > 0 && height > 0)) {\r\n            return;\r\n        }\r\n        const { canvas, context, pixelRatio } = this;\r\n        canvas.width = Math.round(width * pixelRatio);\r\n        canvas.height = Math.round(height * pixelRatio);\r\n        context.resetTransform();\r\n        this._width = width;\r\n        this._height = height;\r\n    }\r\n}\n\nvar DebugSelectors;\r\n(function (DebugSelectors) {\r\n    DebugSelectors[\"SCENE\"] = \"scene\";\r\n    DebugSelectors[\"SCENE_STATS\"] = \"scene:stats\";\r\n    DebugSelectors[\"SCENE_STATS_VERBOSE\"] = \"scene:stats:verbose\";\r\n    DebugSelectors[\"SCENE_DIRTY_TREE\"] = \"scene:dirtyTree\";\r\n})(DebugSelectors || (DebugSelectors = {}));\r\nconst advancedCompositeIdentifier = 'adv-composite';\r\nconst domCompositeIdentifier = 'dom-composite';\r\nclass Scene {\r\n    constructor(opts) {\r\n        var _a;\r\n        this.id = createId(this);\r\n        this.layers = [];\r\n        this._nextZIndex = 0;\r\n        this._nextLayerId = 0;\r\n        this._dirty = false;\r\n        this._root = null;\r\n        this.debug = Debug.create(true, DebugSelectors.SCENE);\r\n        const { document, window, mode = (_a = windowValue('agChartsSceneRenderModel')) !== null && _a !== void 0 ? _a : advancedCompositeIdentifier, width, height, overrideDevicePixelRatio = undefined, } = opts;\r\n        this.overrideDevicePixelRatio = overrideDevicePixelRatio;\r\n        this.opts = { document, window, mode };\r\n        this.canvas = new HdpiCanvas({ document, window, width, height, overrideDevicePixelRatio });\r\n    }\r\n    set container(value) {\r\n        this.canvas.container = value;\r\n    }\r\n    get container() {\r\n        return this.canvas.container;\r\n    }\r\n    download(fileName, fileFormat) {\r\n        this.canvas.download(fileName, fileFormat);\r\n    }\r\n    getDataURL(type) {\r\n        return this.canvas.getDataURL(type);\r\n    }\r\n    get width() {\r\n        return this.pendingSize ? this.pendingSize[0] : this.canvas.width;\r\n    }\r\n    get height() {\r\n        return this.pendingSize ? this.pendingSize[1] : this.canvas.height;\r\n    }\r\n    resize(width, height) {\r\n        width = Math.round(width);\r\n        height = Math.round(height);\r\n        // HdpiCanvas doesn't allow width/height <= 0.\r\n        const lessThanZero = width <= 0 || height <= 0;\r\n        const nan = isNaN(width) || isNaN(height);\r\n        const unchanged = width === this.width && height === this.height;\r\n        if (unchanged || nan || lessThanZero) {\r\n            return false;\r\n        }\r\n        this.pendingSize = [width, height];\r\n        this.markDirty();\r\n        return true;\r\n    }\r\n    addLayer(opts) {\r\n        var _a;\r\n        const { mode } = this.opts;\r\n        const layeredModes = ['composite', domCompositeIdentifier, advancedCompositeIdentifier];\r\n        if (!layeredModes.includes(mode)) {\r\n            return undefined;\r\n        }\r\n        const { zIndex = this._nextZIndex++, name, zIndexSubOrder, getComputedOpacity, getVisibility } = opts;\r\n        const { width, height, overrideDevicePixelRatio } = this;\r\n        const domLayer = mode === domCompositeIdentifier;\r\n        const advLayer = mode === advancedCompositeIdentifier;\r\n        const canvas = !advLayer || !HdpiOffscreenCanvas.isSupported()\r\n            ? new HdpiCanvas({\r\n                document: this.opts.document,\r\n                window: this.opts.window,\r\n                width,\r\n                height,\r\n                domLayer,\r\n                zIndex,\r\n                name,\r\n                overrideDevicePixelRatio,\r\n            })\r\n            : new HdpiOffscreenCanvas({\r\n                width,\r\n                height,\r\n                overrideDevicePixelRatio,\r\n            });\r\n        const newLayer = {\r\n            id: this._nextLayerId++,\r\n            name,\r\n            zIndex,\r\n            zIndexSubOrder,\r\n            canvas,\r\n            getComputedOpacity,\r\n            getVisibility,\r\n        };\r\n        if (zIndex >= this._nextZIndex) {\r\n            this._nextZIndex = zIndex + 1;\r\n        }\r\n        this.layers.push(newLayer);\r\n        this.sortLayers();\r\n        if (domLayer) {\r\n            const domCanvases = this.layers\r\n                .map((v) => v.canvas)\r\n                .filter((v) => v instanceof HdpiCanvas);\r\n            const newLayerIndex = domCanvases.findIndex((v) => v === canvas);\r\n            const lastLayer = (_a = domCanvases[newLayerIndex - 1]) !== null && _a !== void 0 ? _a : this.canvas;\r\n            lastLayer.element.insertAdjacentElement('afterend', canvas.element);\r\n        }\r\n        this.debug('Scene.addLayer() - layers', this.layers);\r\n        return newLayer.canvas;\r\n    }\r\n    removeLayer(canvas) {\r\n        const index = this.layers.findIndex((l) => l.canvas === canvas);\r\n        if (index >= 0) {\r\n            this.layers.splice(index, 1);\r\n            canvas.destroy();\r\n            this.markDirty();\r\n            this.debug('Scene.removeLayer() -  layers', this.layers);\r\n        }\r\n    }\r\n    moveLayer(canvas, newZIndex, newZIndexSubOrder) {\r\n        const layer = this.layers.find((l) => l.canvas === canvas);\r\n        if (layer) {\r\n            layer.zIndex = newZIndex;\r\n            layer.zIndexSubOrder = newZIndexSubOrder;\r\n            this.sortLayers();\r\n            this.markDirty();\r\n            this.debug('Scene.moveLayer() -  layers', this.layers);\r\n        }\r\n    }\r\n    sortLayers() {\r\n        this.layers.sort((a, b) => {\r\n            var _a, _b;\r\n            return compoundAscending([a.zIndex, ...((_a = a.zIndexSubOrder) !== null && _a !== void 0 ? _a : [undefined, undefined]), a.id], [b.zIndex, ...((_b = b.zIndexSubOrder) !== null && _b !== void 0 ? _b : [undefined, undefined]), b.id], ascendingStringNumberUndefined);\r\n        });\r\n    }\r\n    markDirty() {\r\n        this._dirty = true;\r\n    }\r\n    get dirty() {\r\n        return this._dirty;\r\n    }\r\n    set root(node) {\r\n        var _a;\r\n        if (node === this._root) {\r\n            return;\r\n        }\r\n        (_a = this._root) === null || _a === void 0 ? void 0 : _a._setLayerManager();\r\n        this._root = node;\r\n        if (node) {\r\n            node._setLayerManager({\r\n                addLayer: (opts) => this.addLayer(opts),\r\n                moveLayer: (...opts) => this.moveLayer(...opts),\r\n                removeLayer: (...opts) => this.removeLayer(...opts),\r\n                markDirty: () => this.markDirty(),\r\n                canvas: this.canvas,\r\n                debug: Debug.create(DebugSelectors.SCENE),\r\n            });\r\n        }\r\n        this.markDirty();\r\n    }\r\n    get root() {\r\n        return this._root;\r\n    }\r\n    /** Alternative to destroy() that preserves re-usable resources. */\r\n    strip() {\r\n        const { layers } = this;\r\n        for (const layer of layers) {\r\n            layer.canvas.destroy();\r\n            delete layer['canvas'];\r\n        }\r\n        layers.splice(0, layers.length);\r\n        this.root = null;\r\n        this._dirty = false;\r\n        this.canvas.context.resetTransform();\r\n    }\r\n    destroy() {\r\n        this.container = undefined;\r\n        this.strip();\r\n        this.canvas.destroy();\r\n        Object.assign(this, { canvas: undefined, ctx: undefined });\r\n    }\r\n    render(opts) {\r\n        var _a, _b;\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const { debugSplitTimes = { start: performance.now() }, extraDebugStats = {} } = opts !== null && opts !== void 0 ? opts : {};\r\n            const { canvas, canvas: { context: ctx }, root, layers, pendingSize, opts: { mode }, } = this;\r\n            if (pendingSize) {\r\n                this.canvas.resize(...pendingSize);\r\n                this.layers.forEach((layer) => layer.canvas.resize(...pendingSize));\r\n                this.pendingSize = undefined;\r\n            }\r\n            if (root && !root.visible) {\r\n                this._dirty = false;\r\n                return;\r\n            }\r\n            if (root && !this.dirty) {\r\n                this.debug('Scene.render() - no-op', {\r\n                    redrawType: RedrawType[root.dirty],\r\n                    tree: this.buildTree(root),\r\n                });\r\n                this.debugStats(debugSplitTimes, ctx, undefined, extraDebugStats);\r\n                return;\r\n            }\r\n            const renderCtx = {\r\n                ctx,\r\n                devicePixelRatio: (_a = this.canvas.pixelRatio) !== null && _a !== void 0 ? _a : 1,\r\n                forceRender: true,\r\n                resized: !!pendingSize,\r\n                debugNodes: {},\r\n            };\r\n            if (Debug.check(DebugSelectors.SCENE_STATS_VERBOSE)) {\r\n                renderCtx.stats = { layersRendered: 0, layersSkipped: 0, nodesRendered: 0, nodesSkipped: 0 };\r\n            }\r\n            let canvasCleared = false;\r\n            if (!root || root.dirty >= RedrawType.TRIVIAL) {\r\n                // start with a blank canvas, clear previous drawing\r\n                canvasCleared = true;\r\n                canvas.clear();\r\n            }\r\n            if (root) {\r\n                const { dirtyTree, paths } = this.buildDirtyTree(root);\r\n                Debug.create(DebugSelectors.SCENE_DIRTY_TREE)('Scene.render() - dirtyTree', {\r\n                    dirtyTree,\r\n                    paths,\r\n                });\r\n            }\r\n            if (root && canvasCleared) {\r\n                this.debug('Scene.render() - before', {\r\n                    redrawType: RedrawType[root.dirty],\r\n                    canvasCleared,\r\n                    tree: this.buildTree(root),\r\n                });\r\n                if (root.visible) {\r\n                    ctx.save();\r\n                    root.render(renderCtx);\r\n                    ctx.restore();\r\n                }\r\n            }\r\n            debugSplitTimes['✍️'] = performance.now();\r\n            if (mode !== domCompositeIdentifier && layers.length > 0 && canvasCleared) {\r\n                this.sortLayers();\r\n                ctx.save();\r\n                ctx.setTransform(1 / canvas.pixelRatio, 0, 0, 1 / canvas.pixelRatio, 0, 0);\r\n                layers.forEach(({ canvas: { imageSource, enabled }, getComputedOpacity, getVisibility }) => {\r\n                    if (!enabled || !getVisibility()) {\r\n                        return;\r\n                    }\r\n                    ctx.globalAlpha = getComputedOpacity();\r\n                    ctx.drawImage(imageSource, 0, 0);\r\n                });\r\n                ctx.restore();\r\n                debugSplitTimes['⛙'] = performance.now();\r\n            }\r\n            // Check for save/restore depth of zero!\r\n            (_b = ctx.verifyDepthZero) === null || _b === void 0 ? void 0 : _b.call(ctx);\r\n            this._dirty = false;\r\n            this.debugStats(debugSplitTimes, ctx, renderCtx.stats, extraDebugStats);\r\n            this.debugSceneNodeHighlight(ctx, renderCtx.debugNodes);\r\n            if (root) {\r\n                this.debug('Scene.render() - after', {\r\n                    redrawType: RedrawType[root.dirty],\r\n                    canvasCleared,\r\n                    tree: this.buildTree(root),\r\n                });\r\n            }\r\n        });\r\n    }\r\n    debugStats(debugSplitTimes, ctx, renderCtxStats, extraDebugStats = {}) {\r\n        if (Debug.check(DebugSelectors.SCENE_STATS, DebugSelectors.SCENE_STATS_VERBOSE)) {\r\n            const end = performance.now();\r\n            const start = debugSplitTimes['start'];\r\n            debugSplitTimes['end'] = performance.now();\r\n            const pct = (rendered, skipped) => {\r\n                const total = rendered + skipped;\r\n                return `${rendered} / ${total} (${Math.round((100 * rendered) / total)}%)`;\r\n            };\r\n            const time = (name, start, end) => {\r\n                return `${name}: ${Math.round((end - start) * 100) / 100}ms`;\r\n            };\r\n            const { layersRendered = 0, layersSkipped = 0, nodesRendered = 0, nodesSkipped = 0 } = renderCtxStats !== null && renderCtxStats !== void 0 ? renderCtxStats : {};\r\n            let lastSplit = 0;\r\n            const splits = Object.entries(debugSplitTimes)\r\n                .filter(([n]) => n !== 'end')\r\n                .map(([n, t], i) => {\r\n                const result = i > 0 ? time(n, lastSplit, t) : null;\r\n                lastSplit = t;\r\n                return result;\r\n            })\r\n                .filter((v) => v != null)\r\n                .join(' + ');\r\n            const extras = Object.entries(extraDebugStats)\r\n                .map(([k, v]) => `${k}: ${v}`)\r\n                .join(' ; ');\r\n            const detailedStats = Debug.check(DebugSelectors.SCENE_STATS_VERBOSE);\r\n            const stats = [\r\n                `${time('⏱️', start, end)} (${splits})`,\r\n                `${extras}`,\r\n                `Layers: ${detailedStats ? pct(layersRendered, layersSkipped) : this.layers.length}`,\r\n                detailedStats ? `Nodes: ${pct(nodesRendered, nodesSkipped)}` : null,\r\n            ].filter((v) => v != null);\r\n            const statsSize = stats.map((t) => [t, HdpiCanvas.getTextSize(t, ctx.font)]);\r\n            const width = Math.max(...statsSize.map(([, { width }]) => width));\r\n            const height = statsSize.reduce((total, [, { height }]) => total + height, 0);\r\n            ctx.save();\r\n            ctx.fillStyle = 'white';\r\n            ctx.fillRect(0, 0, width, height);\r\n            ctx.fillStyle = 'black';\r\n            let y = 0;\r\n            for (const [stat, size] of statsSize) {\r\n                y += size.height;\r\n                ctx.fillText(stat, 2, y);\r\n            }\r\n            ctx.restore();\r\n        }\r\n    }\r\n    debugSceneNodeHighlight(ctx, debugNodes) {\r\n        var _a;\r\n        const regexpPredicate = (matcher) => (n) => {\r\n            if (matcher.test(n.id)) {\r\n                return true;\r\n            }\r\n            return n instanceof Group && n.name != null && matcher.test(n.name);\r\n        };\r\n        const stringPredicate = (match) => (n) => {\r\n            if (match === n.id) {\r\n                return true;\r\n            }\r\n            return n instanceof Group && n.name != null && match === n.name;\r\n        };\r\n        const sceneNodeHighlight = toArray(windowValue('agChartsSceneDebug')).flatMap((name) => name === 'layout' ? ['seriesRoot', 'legend', 'root', /.*Axis-\\d+-axis.*/] : name);\r\n        for (const next of sceneNodeHighlight) {\r\n            if (typeof next === 'string' && debugNodes[next] != null)\r\n                continue;\r\n            const predicate = typeof next === 'string' ? stringPredicate(next) : regexpPredicate(next);\r\n            const nodes = (_a = this.root) === null || _a === void 0 ? void 0 : _a.findNodes(predicate);\r\n            if (!nodes || nodes.length === 0) {\r\n                Logger.log(`Scene.render() - no debugging node with id [${next}] in scene graph.`);\r\n                continue;\r\n            }\r\n            for (const node of nodes) {\r\n                if (node instanceof Group && node.name) {\r\n                    debugNodes[node.name] = node;\r\n                }\r\n                else {\r\n                    debugNodes[node.id] = node;\r\n                }\r\n            }\r\n        }\r\n        ctx.save();\r\n        for (const [name, node] of Object.entries(debugNodes)) {\r\n            const bbox = node.computeTransformedBBox();\r\n            if (!bbox) {\r\n                Logger.log(`Scene.render() - no bbox for debugged node [${name}].`);\r\n                continue;\r\n            }\r\n            ctx.globalAlpha = 0.8;\r\n            ctx.strokeStyle = 'red';\r\n            ctx.lineWidth = 1;\r\n            ctx.strokeRect(bbox.x, bbox.y, bbox.width, bbox.height);\r\n            ctx.fillStyle = 'red';\r\n            ctx.strokeStyle = 'white';\r\n            ctx.font = '16px sans-serif';\r\n            ctx.textBaseline = 'top';\r\n            ctx.textAlign = 'left';\r\n            ctx.lineWidth = 2;\r\n            ctx.strokeText(name, bbox.x, bbox.y, bbox.width);\r\n            ctx.fillText(name, bbox.x, bbox.y, bbox.width);\r\n        }\r\n        ctx.restore();\r\n    }\r\n    buildTree(node) {\r\n        var _a, _b;\r\n        const name = (_a = (node instanceof Group ? node.name : null)) !== null && _a !== void 0 ? _a : node.id;\r\n        return Object.assign(Object.assign({ name,\r\n            node, dirty: RedrawType[node.dirty] }, (((_b = node.parent) === null || _b === void 0 ? void 0 : _b.isVirtual)\r\n            ? {\r\n                virtualParentDirty: RedrawType[node.parent.dirty],\r\n                virtualParent: node.parent,\r\n            }\r\n            : {})), node.children\r\n            .map((c) => this.buildTree(c))\r\n            .reduce((result, childTree) => {\r\n            let { name: treeNodeName } = childTree;\r\n            const { node: { visible, opacity, zIndex, zIndexSubOrder }, node: childNode, virtualParent, } = childTree;\r\n            if (!visible || opacity <= 0) {\r\n                treeNodeName = `(${treeNodeName})`;\r\n            }\r\n            if (childNode instanceof Group && childNode.isLayer()) {\r\n                treeNodeName = `*${treeNodeName}*`;\r\n            }\r\n            const key = [\r\n                `${treeNodeName !== null && treeNodeName !== void 0 ? treeNodeName : '<unknown>'}`,\r\n                `z: ${zIndex}`,\r\n                zIndexSubOrder &&\r\n                    `zo: ${zIndexSubOrder\r\n                        .map((v) => (typeof v === 'function' ? `${v()} (fn)` : v))\r\n                        .join(' / ')}`,\r\n                virtualParent && `(virtual parent)`,\r\n            ]\r\n                .filter((v) => !!v)\r\n                .join(' ');\r\n            let selectedKey = key;\r\n            let index = 1;\r\n            while (result[selectedKey] != null && index < 100) {\r\n                selectedKey = `${key} (${index++})`;\r\n            }\r\n            result[selectedKey] = childTree;\r\n            return result;\r\n        }, {}));\r\n    }\r\n    buildDirtyTree(node) {\r\n        var _a;\r\n        if (node.dirty === RedrawType.NONE) {\r\n            return { dirtyTree: {}, paths: [] };\r\n        }\r\n        const childrenDirtyTree = node.children.map((c) => this.buildDirtyTree(c)).filter((c) => c.paths.length > 0);\r\n        const name = (_a = (node instanceof Group ? node.name : null)) !== null && _a !== void 0 ? _a : node.id;\r\n        const paths = childrenDirtyTree.length === 0\r\n            ? [name]\r\n            : childrenDirtyTree\r\n                .map((c) => c.paths)\r\n                .reduce((r, p) => r.concat(p), [])\r\n                .map((p) => `${name}.${p}`);\r\n        return {\r\n            dirtyTree: Object.assign({ name,\r\n                node, dirty: RedrawType[node.dirty] }, childrenDirtyTree\r\n                .map((c) => c.dirtyTree)\r\n                .filter((t) => t.dirty !== undefined)\r\n                .reduce((result, childTree) => {\r\n                var _a;\r\n                result[(_a = childTree.name) !== null && _a !== void 0 ? _a : '<unknown>'] = childTree;\r\n                return result;\r\n            }, {})),\r\n            paths,\r\n        };\r\n    }\r\n}\r\nScene.className = 'Scene';\n\nfunction sleep(sleepTimeoutMs) {\r\n    return new Promise((resolve) => {\r\n        setTimeout(() => resolve(undefined), sleepTimeoutMs);\r\n    });\r\n}\n\nclass CallbackCache {\r\n    constructor() {\r\n        this.cache = new WeakMap();\r\n    }\r\n    call(fn, ...params) {\r\n        let serialisedParams;\r\n        let paramCache = this.cache.get(fn);\r\n        const invoke = () => {\r\n            try {\r\n                const result = fn(...params);\r\n                if (paramCache && serialisedParams != null) {\r\n                    paramCache.set(serialisedParams, result);\r\n                }\r\n                return result;\r\n            }\r\n            catch (e) {\r\n                Logger.warnOnce(`User callback errored, ignoring`, e);\r\n                return undefined;\r\n            }\r\n        };\r\n        try {\r\n            serialisedParams = JSON.stringify(params);\r\n        }\r\n        catch (e) {\r\n            // Unable to serialise params!\r\n            // No caching possible.\r\n            return invoke();\r\n        }\r\n        if (paramCache == null) {\r\n            paramCache = new Map();\r\n            this.cache.set(fn, paramCache);\r\n        }\r\n        if (!paramCache.has(serialisedParams)) {\r\n            return invoke();\r\n        }\r\n        return paramCache.get(serialisedParams);\r\n    }\r\n    invalidateCache() {\r\n        this.cache = new WeakMap();\r\n    }\r\n}\n\nclass Mutex {\r\n    constructor() {\r\n        this.available = true;\r\n        this.acquireQueue = [];\r\n    }\r\n    acquire(cb) {\r\n        return new Promise((resolve) => {\r\n            this.acquireQueue.push([cb, resolve]);\r\n            if (this.available) {\r\n                this.dispatchNext();\r\n            }\r\n        });\r\n    }\r\n    acquireImmediately(cb) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (!this.available) {\r\n                return false;\r\n            }\r\n            yield this.acquire(cb);\r\n            return true;\r\n        });\r\n    }\r\n    waitForClearAcquireQueue() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return this.acquire(() => __awaiter(this, void 0, void 0, function* () { return undefined; }));\r\n        });\r\n    }\r\n    dispatchNext() {\r\n        var _a, _b;\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            this.available = false;\r\n            let [next, done] = (_a = this.acquireQueue.shift()) !== null && _a !== void 0 ? _a : [];\r\n            while (next) {\r\n                try {\r\n                    yield next();\r\n                    done === null || done === void 0 ? void 0 : done();\r\n                }\r\n                catch (error) {\r\n                    Logger.error('mutex callback error', error);\r\n                    done === null || done === void 0 ? void 0 : done();\r\n                }\r\n                [next, done] = (_b = this.acquireQueue.shift()) !== null && _b !== void 0 ? _b : [];\r\n            }\r\n            this.available = true;\r\n        });\r\n    }\r\n}\n\n/**\r\n * Wrap a function in debouncing trigger function. A requestAnimationFrame() is scheduled\r\n * after the first schedule() call, and subsequent schedule() calls will be ignored until the\r\n * animation callback executes.\r\n */\r\nfunction debouncedAnimationFrame(cb) {\r\n    return buildScheduler((cb, _delayMs) => requestAnimationFrame(cb), cb);\r\n}\r\nfunction debouncedCallback(cb) {\r\n    return buildScheduler((cb, delayMs = 0) => setTimeout(cb, delayMs), cb);\r\n}\r\nfunction buildScheduler(scheduleFn, cb) {\r\n    let scheduleCount = 0;\r\n    let promiseRunning = false;\r\n    let awaitingPromise;\r\n    let awaitingDone;\r\n    const busy = () => {\r\n        return promiseRunning;\r\n    };\r\n    const done = () => {\r\n        promiseRunning = false;\r\n        awaitingDone === null || awaitingDone === void 0 ? void 0 : awaitingDone();\r\n        awaitingDone = undefined;\r\n        awaitingPromise = undefined;\r\n        if (scheduleCount > 0) {\r\n            scheduleFn(scheduleCb);\r\n        }\r\n    };\r\n    const scheduleCb = () => {\r\n        const count = scheduleCount;\r\n        scheduleCount = 0;\r\n        promiseRunning = true;\r\n        const maybePromise = cb({ count });\r\n        if (!maybePromise) {\r\n            done();\r\n            return;\r\n        }\r\n        maybePromise.then(done).catch(done);\r\n    };\r\n    return {\r\n        schedule(delayMs) {\r\n            if (scheduleCount === 0 && !busy()) {\r\n                scheduleFn(scheduleCb, delayMs);\r\n            }\r\n            scheduleCount++;\r\n        },\r\n        await() {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                if (!busy()) {\r\n                    return;\r\n                }\r\n                if (awaitingPromise == null) {\r\n                    awaitingPromise = new Promise((resolve) => {\r\n                        awaitingDone = resolve;\r\n                    });\r\n                }\r\n                while (busy()) {\r\n                    yield awaitingPromise;\r\n                }\r\n            });\r\n        },\r\n    };\r\n}\n\nclass SizeMonitor {\r\n    static init(document) {\r\n        if (typeof ResizeObserver !== 'undefined') {\r\n            this.resizeObserver = new ResizeObserver((entries) => {\r\n                for (const entry of entries) {\r\n                    const { width, height } = entry.contentRect;\r\n                    this.checkSize(this.elements.get(entry.target), entry.target, width, height);\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            // polyfill (more reliable even in browsers that support ResizeObserver)\r\n            const step = () => {\r\n                this.elements.forEach((entry, element) => {\r\n                    this.checkClientSize(element, entry);\r\n                });\r\n            };\r\n            this.pollerHandler = window.setInterval(step, 100);\r\n        }\r\n        this.ready = true;\r\n        this.documentReady = document.readyState !== 'loading';\r\n        if (this.documentReady)\r\n            return;\r\n        // Add DOMContentLoaded listener so we can check if the main document is ready again, and\r\n        // if it is then attach any queued requests for resize monitoring.\r\n        //\r\n        // If we attach before ent.readyState !== 'loading', then additional incorrect resize events\r\n        // are fired, leading to multiple re-renderings on chart initial load. Waiting for the\r\n        // document to be loaded irons out this browser quirk.\r\n        this.readyEventFn = () => {\r\n            const newState = document.readyState !== 'loading';\r\n            const oldState = this.documentReady;\r\n            this.documentReady = newState;\r\n            if (!newState)\r\n                return;\r\n            if (newState === oldState)\r\n                return;\r\n            for (const [el, cb] of this.queuedObserveRequests) {\r\n                this.observe(el, cb);\r\n            }\r\n            this.queuedObserveRequests.length = 0;\r\n        };\r\n        document.addEventListener('DOMContentLoaded', this.readyEventFn);\r\n    }\r\n    static destroy() {\r\n        var _a;\r\n        if (this.pollerHandler != null) {\r\n            clearInterval(this.pollerHandler);\r\n            this.pollerHandler = undefined;\r\n        }\r\n        if (this.readyEventFn) {\r\n            document.removeEventListener('DOMContentLoaded', this.readyEventFn);\r\n            this.readyEventFn = undefined;\r\n        }\r\n        (_a = this.resizeObserver) === null || _a === void 0 ? void 0 : _a.disconnect();\r\n        this.resizeObserver = undefined;\r\n        this.ready = false;\r\n    }\r\n    static checkSize(entry, element, width, height) {\r\n        if (!entry)\r\n            return;\r\n        if (!entry.size || width !== entry.size.width || height !== entry.size.height) {\r\n            entry.size = { width, height };\r\n            entry.cb(entry.size, element);\r\n        }\r\n    }\r\n    // Only a single callback is supported.\r\n    static observe(element, cb) {\r\n        if (!this.ready) {\r\n            this.init(element.ownerDocument);\r\n        }\r\n        if (!this.documentReady) {\r\n            this.queuedObserveRequests.push([element, cb]);\r\n            return;\r\n        }\r\n        this.unobserve(element, false);\r\n        if (this.resizeObserver) {\r\n            this.resizeObserver.observe(element);\r\n        }\r\n        this.elements.set(element, { cb });\r\n    }\r\n    static unobserve(element, cleanup = true) {\r\n        if (this.resizeObserver) {\r\n            this.resizeObserver.unobserve(element);\r\n        }\r\n        this.elements.delete(element);\r\n        this.queuedObserveRequests = this.queuedObserveRequests.filter(([el]) => el === element);\r\n        if (cleanup && this.elements.size === 0) {\r\n            this.destroy();\r\n        }\r\n    }\r\n    static checkClientSize(element, entry) {\r\n        const width = element.clientWidth ? element.clientWidth : 0;\r\n        const height = element.clientHeight ? element.clientHeight : 0;\r\n        this.checkSize(entry, element, width, height);\r\n    }\r\n}\r\nSizeMonitor.elements = new Map();\r\nSizeMonitor.ready = false;\r\nSizeMonitor.documentReady = false;\r\nSizeMonitor.queuedObserveRequests = [];\n\nclass ChartHighlight {\r\n    constructor() {\r\n        this.range = 'tooltip';\r\n    }\r\n}\r\n__decorate([\r\n    Validate(STRING_UNION('tooltip', 'node')),\r\n    __metadata(\"design:type\", String)\r\n], ChartHighlight.prototype, \"range\", void 0);\n\n/** Types of chart-update, in pipeline execution order. */\r\nvar ChartUpdateType;\r\n(function (ChartUpdateType) {\r\n    ChartUpdateType[ChartUpdateType[\"FULL\"] = 0] = \"FULL\";\r\n    ChartUpdateType[ChartUpdateType[\"PROCESS_DATA\"] = 1] = \"PROCESS_DATA\";\r\n    ChartUpdateType[ChartUpdateType[\"PERFORM_LAYOUT\"] = 2] = \"PERFORM_LAYOUT\";\r\n    ChartUpdateType[ChartUpdateType[\"SERIES_UPDATE\"] = 3] = \"SERIES_UPDATE\";\r\n    ChartUpdateType[ChartUpdateType[\"TOOLTIP_RECALCULATION\"] = 4] = \"TOOLTIP_RECALCULATION\";\r\n    ChartUpdateType[ChartUpdateType[\"SCENE_RENDER\"] = 5] = \"SCENE_RENDER\";\r\n    ChartUpdateType[ChartUpdateType[\"NONE\"] = 6] = \"NONE\";\r\n})(ChartUpdateType || (ChartUpdateType = {}));\n\nclass DataDomain {\r\n    constructor(type) {\r\n        this.type = type;\r\n        this.continuousDomain = [Infinity, -Infinity];\r\n        this.discreteDomain = new Set();\r\n    }\r\n    extend(val) {\r\n        if (this.type === 'discrete') {\r\n            this.discreteDomain.add(val);\r\n        }\r\n        else if (this.type === 'continuous') {\r\n            if (this.continuousDomain[0] > val) {\r\n                this.continuousDomain[0] = val;\r\n            }\r\n            if (this.continuousDomain[1] < val) {\r\n                this.continuousDomain[1] = val;\r\n            }\r\n        }\r\n    }\r\n    getDomain() {\r\n        if (this.type === 'discrete') {\r\n            return this.discreteDomain;\r\n        }\r\n        else if (this.type === 'continuous') {\r\n            return this.continuousDomain;\r\n        }\r\n        throw new Error('AG Charts - Unsupported data domain type: ' + this.type);\r\n    }\r\n}\n\nfunction toKeyString(keys) {\r\n    return keys\r\n        .map((v) => {\r\n        if (v == null) {\r\n            return v;\r\n        }\r\n        else if (typeof v === 'number' || typeof v === 'string' || typeof v === 'boolean') {\r\n            return v;\r\n        }\r\n        else if (typeof v === 'object') {\r\n            return JSON.stringify(v);\r\n        }\r\n        return v;\r\n    })\r\n        .join('-');\r\n}\r\nfunction round(val) {\r\n    const accuracy = 10000;\r\n    if (Number.isInteger(val)) {\r\n        return val;\r\n    }\r\n    else if (Math.abs(val) > accuracy) {\r\n        return Math.trunc(val);\r\n    }\r\n    return Math.round(val * accuracy) / accuracy;\r\n}\r\nfunction fixNumericExtentInternal(extent) {\r\n    if (extent === undefined) {\r\n        // Don't return a range, there is no range.\r\n        return [];\r\n    }\r\n    let [min, max] = extent;\r\n    min = +min;\r\n    max = +max;\r\n    if (min === 0 && max === 0) {\r\n        // domain has zero length and the single valid value is 0. Use the default of [0, 1].\r\n        return [0, 1];\r\n    }\r\n    if (min === Infinity && max === -Infinity) {\r\n        // There's no data in the domain.\r\n        return [];\r\n    }\r\n    if (min === Infinity) {\r\n        min = 0;\r\n    }\r\n    if (max === -Infinity) {\r\n        max = 0;\r\n    }\r\n    if (!(isNumber(min) && isNumber(max))) {\r\n        return [];\r\n    }\r\n    return [min, max];\r\n}\r\nfunction fixNumericExtent(extent, axis) {\r\n    var _a;\r\n    const fixedExtent = fixNumericExtentInternal(extent);\r\n    if (fixedExtent.length === 0) {\r\n        return fixedExtent;\r\n    }\r\n    let [min, max] = fixedExtent;\r\n    if (min === max) {\r\n        // domain has zero length, there is only a single valid value in data\r\n        const [paddingMin, paddingMax] = (_a = axis === null || axis === void 0 ? void 0 : axis.calculatePadding(min, max)) !== null && _a !== void 0 ? _a : [1, 1];\r\n        min -= paddingMin;\r\n        max += paddingMax;\r\n    }\r\n    return [min, max];\r\n}\r\nconst INVALID_VALUE = Symbol('invalid');\r\nclass DataModel {\r\n    constructor(opts) {\r\n        const { props, mode = 'standalone' } = opts;\r\n        this.mode = mode;\r\n        // Validate that keys appear before values in the definitions, as output ordering depends\r\n        // on configuration ordering, but we process keys before values.\r\n        let keys = true;\r\n        for (const next of props) {\r\n            if (next.type === 'key' && !keys) {\r\n                throw new Error('AG Charts - internal config error: keys must come before values.');\r\n            }\r\n            if (next.type === 'value' && keys) {\r\n                keys = false;\r\n            }\r\n        }\r\n        this.opts = Object.assign({ dataVisible: true }, opts);\r\n        this.keys = props\r\n            .filter((def) => def.type === 'key')\r\n            .map((def, index) => (Object.assign(Object.assign({}, def), { index, missing: 0 })));\r\n        this.values = props\r\n            .filter((def) => def.type === 'value')\r\n            .map((def, index) => (Object.assign(Object.assign({}, def), { index, missing: 0 })));\r\n        this.aggregates = props\r\n            .filter((def) => def.type === 'aggregate')\r\n            .map((def, index) => (Object.assign(Object.assign({}, def), { index })));\r\n        this.groupProcessors = props\r\n            .filter((def) => def.type === 'group-value-processor')\r\n            .map((def, index) => (Object.assign(Object.assign({}, def), { index })));\r\n        this.propertyProcessors = props\r\n            .filter((def) => def.type === 'property-value-processor')\r\n            .map((def, index) => (Object.assign(Object.assign({}, def), { index })));\r\n        this.reducers = props\r\n            .filter((def) => def.type === 'reducer')\r\n            .map((def, index) => (Object.assign(Object.assign({}, def), { index })));\r\n        this.processors = props\r\n            .filter((def) => def.type === 'processor')\r\n            .map((def, index) => (Object.assign(Object.assign({}, def), { index })));\r\n        for (const def of this.values) {\r\n            if (def.property == null) {\r\n                throw new Error(`AG Charts - internal config error: no properties specified for value definitions: ${JSON.stringify(def)}`);\r\n            }\r\n        }\r\n        const verifyMatchGroupId = ({ matchGroupIds }) => {\r\n            for (const matchGroupId of matchGroupIds !== null && matchGroupIds !== void 0 ? matchGroupIds : []) {\r\n                if (!this.values.some((def) => def.groupId === matchGroupId)) {\r\n                    throw new Error(`AG Charts - internal config error: matchGroupIds properties must match defined groups (${matchGroupId}).`);\r\n                }\r\n            }\r\n        };\r\n        const verifyMatchIds = ({ matchIds }) => {\r\n            for (const matchId of matchIds !== null && matchIds !== void 0 ? matchIds : []) {\r\n                if (!this.values.some((def) => { var _a; return (_a = def.ids) === null || _a === void 0 ? void 0 : _a.some(([scope, id]) => scope === matchId[0] && id === matchId[1]); })) {\r\n                    throw new Error(`AG Charts - internal config error: matchGroupIds properties must match defined groups (${matchId}).`);\r\n                }\r\n            }\r\n        };\r\n        for (const def of [...this.groupProcessors, ...this.aggregates]) {\r\n            verifyMatchIds(def);\r\n            verifyMatchGroupId(def);\r\n        }\r\n    }\r\n    resolveProcessedDataIndexById(scope, searchId) {\r\n        var _a;\r\n        const { index, def } = (_a = this.resolveProcessedDataDefById(scope, searchId)) !== null && _a !== void 0 ? _a : {};\r\n        return { index, def };\r\n    }\r\n    resolveProcessedDataIndicesById(scope, searchId) {\r\n        return this.resolveProcessedDataDefsById(scope, searchId).map(({ index, def }) => ({ index, def }));\r\n    }\r\n    resolveProcessedDataDefById(scope, searchId) {\r\n        return this.resolveProcessedDataDefsById(scope, searchId)[0];\r\n    }\r\n    resolveProcessedDataDefsByIds(scope, searchIds) {\r\n        const defs = [];\r\n        for (const searchId of searchIds) {\r\n            defs.push([searchId, this.resolveProcessedDataDefsById(scope, searchId)]);\r\n        }\r\n        return defs;\r\n    }\r\n    resolveProcessedDataDefsValues(defs, { keys, values }) {\r\n        const result = {};\r\n        for (const [searchId, [{ index, def }]] of defs) {\r\n            const processedData = def.type === 'key' ? keys : values;\r\n            result[searchId] = processedData[index];\r\n        }\r\n        return result;\r\n    }\r\n    resolveProcessedDataDefsById(searchScope, searchId) {\r\n        const { keys, values, aggregates, groupProcessors, reducers } = this;\r\n        const match = (prop) => {\r\n            const { ids, scopes } = prop;\r\n            if (ids == null)\r\n                return false;\r\n            if (searchScope != null && !(scopes === null || scopes === void 0 ? void 0 : scopes.some((scope) => scope === searchScope.id)))\r\n                return false;\r\n            return ids.some(([scope, id]) => scope === searchScope.id && (typeof searchId === 'string' ? id === searchId : searchId.test(id)));\r\n        };\r\n        const allDefs = [\r\n            keys,\r\n            values,\r\n            aggregates,\r\n            groupProcessors,\r\n            reducers,\r\n        ];\r\n        const result = [];\r\n        for (const defs of allDefs) {\r\n            result.push(...defs.filter(match).map((def) => ({ index: def.index, def })));\r\n        }\r\n        if (result.length > 0) {\r\n            return result;\r\n        }\r\n        throw new Error(`AG Charts - didn't find property definition for [${searchId}, ${searchScope.id}]`);\r\n    }\r\n    getDomain(scope, searchId, type = 'value', processedData) {\r\n        var _a, _b, _c, _d;\r\n        let matches;\r\n        try {\r\n            matches = this.resolveProcessedDataIndicesById(scope, searchId);\r\n        }\r\n        catch (e) {\r\n            if (typeof searchId !== 'string' && /didn't find property definition/.test(e.message))\r\n                return [];\r\n            throw e;\r\n        }\r\n        let domainProp;\r\n        switch (type) {\r\n            case 'key':\r\n                domainProp = 'keys';\r\n                break;\r\n            case 'value':\r\n                domainProp = 'values';\r\n                break;\r\n            case 'aggregate':\r\n                domainProp = 'aggValues';\r\n                break;\r\n            case 'group-value-processor':\r\n                domainProp = 'groups';\r\n                break;\r\n            default:\r\n                return [];\r\n        }\r\n        const firstMatch = (_b = (_a = processedData.domain[domainProp]) === null || _a === void 0 ? void 0 : _a[matches[0].index]) !== null && _b !== void 0 ? _b : [];\r\n        if (matches.length === 1) {\r\n            return firstMatch;\r\n        }\r\n        const result = [...firstMatch];\r\n        for (const idx of matches.slice(1)) {\r\n            extendDomain((_d = (_c = processedData.domain[domainProp]) === null || _c === void 0 ? void 0 : _c[idx.index]) !== null && _d !== void 0 ? _d : [], result);\r\n        }\r\n        return result;\r\n    }\r\n    processData(data) {\r\n        const { opts: { groupByKeys, groupByFn }, aggregates, groupProcessors, reducers, processors, propertyProcessors, } = this;\r\n        const start = performance.now();\r\n        for (const def of [...this.keys, ...this.values]) {\r\n            def.missing = 0;\r\n        }\r\n        if (groupByKeys && this.keys.length === 0) {\r\n            return undefined;\r\n        }\r\n        let processedData = this.extractData(data);\r\n        if (groupByKeys) {\r\n            processedData = this.groupData(processedData);\r\n        }\r\n        else if (groupByFn) {\r\n            processedData = this.groupData(processedData, groupByFn(processedData));\r\n        }\r\n        if (groupProcessors.length > 0) {\r\n            this.postProcessGroups(processedData);\r\n        }\r\n        if (aggregates.length > 0) {\r\n            this.aggregateData(processedData);\r\n        }\r\n        if (propertyProcessors.length > 0) {\r\n            this.postProcessProperties(processedData);\r\n        }\r\n        if (reducers.length > 0) {\r\n            this.reduceData(processedData);\r\n        }\r\n        if (processors.length > 0) {\r\n            this.postProcessData(processedData);\r\n        }\r\n        for (const def of [...this.keys, ...this.values]) {\r\n            if (data.length > 0 && def.missing >= data.length) {\r\n                Logger.warnOnce(`the key '${def.property}' was not found in any data element.`);\r\n            }\r\n        }\r\n        const end = performance.now();\r\n        processedData.time = end - start;\r\n        if (Debug.check(true, 'data-model')) {\r\n            logProcessedData(processedData);\r\n        }\r\n        return processedData;\r\n    }\r\n    valueGroupIdxLookup({ matchGroupIds, matchIds }) {\r\n        return this.values\r\n            .map((def, index) => ({ def, index }))\r\n            .filter(({ def }) => {\r\n            if (matchGroupIds && (def.groupId == null || !matchGroupIds.includes(def.groupId))) {\r\n                return false;\r\n            }\r\n            if (!matchIds)\r\n                return true;\r\n            if (def.ids == null)\r\n                return false;\r\n            return matchIds.some(([matchScope, matchId]) => { var _a; return (_a = def.ids) === null || _a === void 0 ? void 0 : _a.some(([defScope, defId]) => defScope === matchScope && defId === matchId); });\r\n        })\r\n            .map(({ index }) => index);\r\n    }\r\n    valueIdxLookup(scopes, prop) {\r\n        const noScopesToMatch = scopes == null || scopes.length === 0;\r\n        const scopeMatch = (compareTo) => {\r\n            const anyScope = compareTo == null;\r\n            if (anyScope)\r\n                return true;\r\n            const noScopes = compareTo == null || compareTo.length === 0;\r\n            if (noScopesToMatch === noScopes)\r\n                return true;\r\n            return compareTo === null || compareTo === void 0 ? void 0 : compareTo.some((s) => scopes.includes(s));\r\n        };\r\n        const propId = typeof prop === 'string' ? prop : prop.id;\r\n        const idMatch = ([scope, id]) => {\r\n            return scopeMatch([scope]) && id === propId;\r\n        };\r\n        const result = this.values.findIndex((def) => {\r\n            var _a;\r\n            return (scopeMatch(def.scopes) &&\r\n                (((_a = def.ids) === null || _a === void 0 ? void 0 : _a.some((id) => idMatch(id))) || def.property === propId || def.id === propId));\r\n        });\r\n        if (result >= 0) {\r\n            return result;\r\n        }\r\n        throw new Error(`AG Charts - configuration error, unknown property ${JSON.stringify(prop)} in scope(s) ${JSON.stringify(scopes)}`);\r\n    }\r\n    extractData(data) {\r\n        var _a;\r\n        const { keys: keyDefs, values: valueDefs, opts: { dataVisible }, } = this;\r\n        const { dataDomain, processValue, scopes, allScopesHaveSameDefs } = this.initDataDomainProcessor();\r\n        const resultData = new Array(dataVisible ? data.length : 0);\r\n        let resultDataIdx = 0;\r\n        let partialValidDataCount = 0;\r\n        for (const datum of data) {\r\n            const validScopes = scopes.size > 0 ? new Set(scopes) : undefined;\r\n            const keys = dataVisible ? new Array(keyDefs.length) : undefined;\r\n            let keyIdx = 0;\r\n            let key;\r\n            for (const def of keyDefs) {\r\n                key = processValue(def, datum, key);\r\n                if (key === INVALID_VALUE)\r\n                    break;\r\n                if (keys) {\r\n                    keys[keyIdx++] = key;\r\n                }\r\n            }\r\n            if (key === INVALID_VALUE)\r\n                continue;\r\n            const values = dataVisible && valueDefs.length > 0 ? new Array(valueDefs.length) : undefined;\r\n            let valueIdx = 0;\r\n            let value;\r\n            for (const def of valueDefs) {\r\n                value = processValue(def, datum, value);\r\n                if (value === INVALID_VALUE) {\r\n                    if (allScopesHaveSameDefs)\r\n                        break;\r\n                    for (const scope of (_a = def.scopes) !== null && _a !== void 0 ? _a : scopes) {\r\n                        validScopes === null || validScopes === void 0 ? void 0 : validScopes.delete(scope);\r\n                    }\r\n                    valueIdx++;\r\n                    if ((validScopes === null || validScopes === void 0 ? void 0 : validScopes.size) === 0)\r\n                        break;\r\n                }\r\n                else if (values) {\r\n                    values[valueIdx++] = value;\r\n                }\r\n            }\r\n            if (value === INVALID_VALUE && allScopesHaveSameDefs)\r\n                continue;\r\n            if ((validScopes === null || validScopes === void 0 ? void 0 : validScopes.size) === 0)\r\n                continue;\r\n            if (dataVisible) {\r\n                const result = {\r\n                    datum,\r\n                    keys: keys,\r\n                    values,\r\n                };\r\n                if (!allScopesHaveSameDefs && validScopes && validScopes.size < scopes.size) {\r\n                    partialValidDataCount++;\r\n                    result.validScopes = [...validScopes];\r\n                }\r\n                resultData[resultDataIdx++] = result;\r\n            }\r\n        }\r\n        resultData.length = resultDataIdx;\r\n        const propertyDomain = (def) => {\r\n            const result = dataDomain.get(def).getDomain();\r\n            if (Array.isArray(result) && result[0] > result[1]) {\r\n                // Ignore starting values.\r\n                return [];\r\n            }\r\n            return [...result];\r\n        };\r\n        return {\r\n            type: 'ungrouped',\r\n            input: { count: data.length },\r\n            data: resultData,\r\n            domain: {\r\n                keys: keyDefs.map((def) => propertyDomain(def)),\r\n                values: valueDefs.map((def) => propertyDomain(def)),\r\n            },\r\n            defs: {\r\n                allScopesHaveSameDefs,\r\n                keys: keyDefs,\r\n                values: valueDefs,\r\n            },\r\n            partialValidDataCount,\r\n            time: 0,\r\n        };\r\n    }\r\n    groupData(data, groupingFn) {\r\n        var _a, _b, _c, _d;\r\n        const processedData = new Map();\r\n        for (const dataEntry of data.data) {\r\n            const { keys, values, datum, validScopes } = dataEntry;\r\n            const group = groupingFn ? groupingFn(dataEntry) : keys;\r\n            const groupStr = toKeyString(group);\r\n            if (processedData.has(groupStr)) {\r\n                const existingData = processedData.get(groupStr);\r\n                existingData.values.push(values);\r\n                existingData.datum.push(datum);\r\n                if (validScopes != null) {\r\n                    // Intersection of existing validScopes with new validScopes.\r\n                    for (let index = 0; index < ((_b = (_a = existingData.validScopes) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0); index++) {\r\n                        const scope = (_c = existingData.validScopes) === null || _c === void 0 ? void 0 : _c[index];\r\n                        if (validScopes.some((s) => s === scope))\r\n                            continue;\r\n                        (_d = existingData.validScopes) === null || _d === void 0 ? void 0 : _d.splice(index, 1);\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                processedData.set(groupStr, {\r\n                    keys: group,\r\n                    values: [values],\r\n                    datum: [datum],\r\n                    validScopes,\r\n                });\r\n            }\r\n        }\r\n        const resultData = new Array(processedData.size);\r\n        const resultGroups = new Array(processedData.size);\r\n        let dataIndex = 0;\r\n        for (const [, { keys, values, datum, validScopes }] of processedData.entries()) {\r\n            if ((validScopes === null || validScopes === void 0 ? void 0 : validScopes.length) === 0)\r\n                continue;\r\n            resultGroups[dataIndex] = keys;\r\n            resultData[dataIndex++] = {\r\n                keys,\r\n                values,\r\n                datum,\r\n                validScopes,\r\n            };\r\n        }\r\n        return Object.assign(Object.assign({}, data), { type: 'grouped', data: resultData, domain: Object.assign(Object.assign({}, data.domain), { groups: resultGroups }) });\r\n    }\r\n    aggregateData(processedData) {\r\n        var _a, _b, _c, _d, _e, _f, _g, _h;\r\n        const { aggregates: aggDefs } = this;\r\n        if (!aggDefs)\r\n            return;\r\n        const resultAggValues = aggDefs.map(() => [Infinity, -Infinity]);\r\n        const resultAggValueIndices = aggDefs.map((def) => this.valueGroupIdxLookup(def));\r\n        const resultAggFns = aggDefs.map((def) => def.aggregateFunction);\r\n        const resultGroupAggFns = aggDefs.map((def) => def.groupAggregateFunction);\r\n        const resultFinalFns = aggDefs.map((def) => def.finalFunction);\r\n        for (const group of processedData.data) {\r\n            let { values } = group;\r\n            const { validScopes } = group;\r\n            (_a = group.aggValues) !== null && _a !== void 0 ? _a : (group.aggValues = new Array(resultAggValueIndices.length));\r\n            if (processedData.type === 'ungrouped') {\r\n                values = [values];\r\n            }\r\n            let resultIdx = 0;\r\n            for (const indices of resultAggValueIndices) {\r\n                const scopeValid = (_b = validScopes === null || validScopes === void 0 ? void 0 : validScopes.some((s) => { var _a; return (_a = aggDefs[resultIdx].matchScopes) === null || _a === void 0 ? void 0 : _a.some((as) => s === as); })) !== null && _b !== void 0 ? _b : true;\r\n                if (!scopeValid) {\r\n                    resultIdx++;\r\n                    continue;\r\n                }\r\n                let groupAggValues = (_d = (_c = resultGroupAggFns[resultIdx]) === null || _c === void 0 ? void 0 : _c.call(resultGroupAggFns)) !== null && _d !== void 0 ? _d : extendDomain([]);\r\n                for (const distinctValues of values) {\r\n                    const valuesToAgg = indices.map((valueIdx) => distinctValues[valueIdx]);\r\n                    const valuesAgg = resultAggFns[resultIdx](valuesToAgg, group.keys);\r\n                    if (valuesAgg) {\r\n                        groupAggValues =\r\n                            (_f = (_e = resultGroupAggFns[resultIdx]) === null || _e === void 0 ? void 0 : _e.call(resultGroupAggFns, valuesAgg, groupAggValues)) !== null && _f !== void 0 ? _f : extendDomain(valuesAgg, groupAggValues);\r\n                    }\r\n                }\r\n                const finalValues = ((_h = (_g = resultFinalFns[resultIdx]) === null || _g === void 0 ? void 0 : _g.call(resultFinalFns, groupAggValues)) !== null && _h !== void 0 ? _h : groupAggValues).map((v) => round(v));\r\n                extendDomain(finalValues, resultAggValues[resultIdx]);\r\n                group.aggValues[resultIdx++] = finalValues;\r\n            }\r\n        }\r\n        processedData.domain.aggValues = resultAggValues;\r\n    }\r\n    postProcessGroups(processedData) {\r\n        var _a, _b, _c, _d, _e;\r\n        const { groupProcessors } = this;\r\n        if (!groupProcessors)\r\n            return;\r\n        const affectedIndices = new Set();\r\n        const updatedDomains = new Map();\r\n        const groupProcessorIndices = new Map();\r\n        const groupProcessorInitFns = new Map();\r\n        for (const processor of groupProcessors) {\r\n            const indices = this.valueGroupIdxLookup(processor);\r\n            groupProcessorIndices.set(processor, indices);\r\n            groupProcessorInitFns.set(processor, processor.adjust());\r\n            for (const idx of indices) {\r\n                const valueDef = this.values[idx];\r\n                affectedIndices.add(idx);\r\n                updatedDomains.set(idx, new DataDomain(valueDef.valueType === 'category' ? 'discrete' : 'continuous'));\r\n            }\r\n        }\r\n        const updateDomains = (values) => {\r\n            var _a;\r\n            for (const valueIndex of affectedIndices) {\r\n                (_a = updatedDomains.get(valueIndex)) === null || _a === void 0 ? void 0 : _a.extend(values[valueIndex]);\r\n            }\r\n        };\r\n        for (const group of processedData.data) {\r\n            for (const processor of groupProcessors) {\r\n                const scopeValid = (_b = (_a = group.validScopes) === null || _a === void 0 ? void 0 : _a.some((s) => { var _a; return (_a = processor.matchScopes) === null || _a === void 0 ? void 0 : _a.some((as) => s === as); })) !== null && _b !== void 0 ? _b : true;\r\n                if (!scopeValid) {\r\n                    continue;\r\n                }\r\n                const valueIndexes = (_c = groupProcessorIndices.get(processor)) !== null && _c !== void 0 ? _c : [];\r\n                const adjustFn = (_e = (_d = groupProcessorInitFns.get(processor)) === null || _d === void 0 ? void 0 : _d()) !== null && _e !== void 0 ? _e : (() => undefined);\r\n                if (processedData.type === 'grouped') {\r\n                    for (const values of group.values) {\r\n                        if (values) {\r\n                            adjustFn(values, valueIndexes);\r\n                        }\r\n                    }\r\n                    continue;\r\n                }\r\n                if (group.values) {\r\n                    adjustFn(group.values, valueIndexes);\r\n                }\r\n            }\r\n            if (processedData.type === 'grouped') {\r\n                for (const values of group.values) {\r\n                    updateDomains(values);\r\n                }\r\n            }\r\n            else {\r\n                updateDomains(group.values);\r\n            }\r\n        }\r\n        for (const [idx, dataDomain] of updatedDomains) {\r\n            processedData.domain.values[idx] = [...dataDomain.getDomain()];\r\n        }\r\n    }\r\n    postProcessProperties(processedData) {\r\n        const { propertyProcessors } = this;\r\n        if (!propertyProcessors)\r\n            return;\r\n        for (const { adjust, property, scopes } of propertyProcessors) {\r\n            adjust()(processedData, this.valueIdxLookup(scopes !== null && scopes !== void 0 ? scopes : [], property));\r\n        }\r\n    }\r\n    reduceData(processedData) {\r\n        var _a, _b, _c;\r\n        const { reducers: reducerDefs } = this;\r\n        const scopes = reducerDefs.map((def) => def.scopes);\r\n        const reducers = reducerDefs.map((def) => def.reducer());\r\n        const accValues = reducerDefs.map((def) => def.initialValue);\r\n        for (const group of processedData.data) {\r\n            let reducerIndex = 0;\r\n            for (const reducer of reducers) {\r\n                const scopeValid = (_b = (_a = group.validScopes) === null || _a === void 0 ? void 0 : _a.some((s) => { var _a; return (_a = scopes[reducerIndex]) === null || _a === void 0 ? void 0 : _a.some((as) => s === as); })) !== null && _b !== void 0 ? _b : true;\r\n                if (!scopeValid) {\r\n                    reducerIndex++;\r\n                    continue;\r\n                }\r\n                accValues[reducerIndex] = reducer(accValues[reducerIndex], group);\r\n                reducerIndex++;\r\n            }\r\n        }\r\n        for (let accIdx = 0; accIdx < accValues.length; accIdx++) {\r\n            (_c = processedData.reduced) !== null && _c !== void 0 ? _c : (processedData.reduced = {});\r\n            processedData.reduced[reducerDefs[accIdx].property] = accValues[accIdx];\r\n        }\r\n    }\r\n    postProcessData(processedData) {\r\n        var _a;\r\n        const { processors: processorDefs } = this;\r\n        for (const def of processorDefs) {\r\n            (_a = processedData.reduced) !== null && _a !== void 0 ? _a : (processedData.reduced = {});\r\n            processedData.reduced[def.property] = def.calculate(processedData);\r\n        }\r\n    }\r\n    initDataDomainProcessor() {\r\n        var _a;\r\n        const { keys: keyDefs, values: valueDefs } = this;\r\n        const scopes = new Set();\r\n        for (const valueDef of valueDefs) {\r\n            for (const scope of (_a = valueDef.scopes) !== null && _a !== void 0 ? _a : []) {\r\n                scopes.add(scope);\r\n            }\r\n        }\r\n        const scopesCount = scopes.size;\r\n        const dataDomain = new Map();\r\n        const processorFns = new Map();\r\n        let allScopesHaveSameDefs = true;\r\n        const initDataDomainKey = (key, type, updateDataDomain = dataDomain) => {\r\n            var _a;\r\n            if (type === 'category') {\r\n                updateDataDomain.set(key, new DataDomain('discrete'));\r\n            }\r\n            else {\r\n                updateDataDomain.set(key, new DataDomain('continuous'));\r\n                allScopesHaveSameDefs && (allScopesHaveSameDefs = ((_a = key.scopes) !== null && _a !== void 0 ? _a : []).length === scopesCount);\r\n            }\r\n        };\r\n        const initDataDomain = () => {\r\n            keyDefs.forEach((def) => initDataDomainKey(def, def.valueType));\r\n            valueDefs.forEach((def) => initDataDomainKey(def, def.valueType));\r\n        };\r\n        initDataDomain();\r\n        const accessors = this.buildAccessors(...keyDefs, ...valueDefs);\r\n        const processValue = (def, datum, previousDatum) => {\r\n            var _a, _b, _c, _d;\r\n            const hasAccessor = def.property in accessors;\r\n            let valueInDatum = false;\r\n            let value;\r\n            if (hasAccessor) {\r\n                try {\r\n                    value = accessors[def.property](datum);\r\n                }\r\n                catch (error) {\r\n                    // Swallow errors - these get reported as missing values to the user later.\r\n                }\r\n                valueInDatum = value !== undefined;\r\n            }\r\n            else {\r\n                valueInDatum = def.property in datum;\r\n                value = valueInDatum ? datum[def.property] : def.missingValue;\r\n            }\r\n            if (def.forceValue != null) {\r\n                // Maintain sign of forceValue from actual value, this maybe significant later when\r\n                // we account fo the value falling into positive/negative buckets.\r\n                const valueNegative = valueInDatum && isNegative(value);\r\n                value = valueNegative ? -1 * def.forceValue : def.forceValue;\r\n                valueInDatum = true;\r\n            }\r\n            const missingValueDef = 'missingValue' in def;\r\n            if (!valueInDatum && !missingValueDef) {\r\n                def.missing++;\r\n            }\r\n            if (!dataDomain.has(def)) {\r\n                initDataDomain();\r\n            }\r\n            if (valueInDatum) {\r\n                const valid = (_b = (_a = def.validation) === null || _a === void 0 ? void 0 : _a.call(def, value, datum)) !== null && _b !== void 0 ? _b : true;\r\n                if (!valid) {\r\n                    if ('invalidValue' in def) {\r\n                        value = def.invalidValue;\r\n                    }\r\n                    else {\r\n                        return INVALID_VALUE;\r\n                    }\r\n                }\r\n            }\r\n            if (def.processor) {\r\n                if (!processorFns.has(def)) {\r\n                    processorFns.set(def, def.processor());\r\n                }\r\n                value = (_c = processorFns.get(def)) === null || _c === void 0 ? void 0 : _c(value, previousDatum !== INVALID_VALUE ? previousDatum : undefined);\r\n            }\r\n            (_d = dataDomain.get(def)) === null || _d === void 0 ? void 0 : _d.extend(value);\r\n            return value;\r\n        };\r\n        return { dataDomain, processValue, initDataDomain, scopes, allScopesHaveSameDefs };\r\n    }\r\n    buildAccessors(...defs) {\r\n        const result = {};\r\n        if (this.mode === 'integrated')\r\n            return result;\r\n        for (const def of defs) {\r\n            const isPath = def.property.indexOf('.') >= 0 || def.property.indexOf('[') >= 0;\r\n            if (!isPath)\r\n                continue;\r\n            let fnBody;\r\n            if (def.property.startsWith('[')) {\r\n                fnBody = `return datum${def.property};`;\r\n            }\r\n            else {\r\n                fnBody = `return datum.${def.property};`;\r\n            }\r\n            result[def.property] = new Function('datum', fnBody);\r\n        }\r\n        return result;\r\n    }\r\n}\r\nfunction logProcessedData(processedData) {\r\n    var _a, _b;\r\n    const logValues = (name, data) => {\r\n        if (data.length > 0) {\r\n            Logger.log(`DataModel.processData() - ${name}`);\r\n            Logger.table(data);\r\n        }\r\n    };\r\n    Logger.log('DataModel.processData() - processedData', processedData);\r\n    logValues('Key Domains', processedData.domain.keys);\r\n    logValues('Group Domains', (_a = processedData.domain.groups) !== null && _a !== void 0 ? _a : []);\r\n    logValues('Value Domains', processedData.domain.values);\r\n    logValues('Aggregate Domains', (_b = processedData.domain.aggValues) !== null && _b !== void 0 ? _b : []);\r\n    if (processedData.type === 'grouped') {\r\n        const flattenedValues = processedData.data.reduce((acc, next) => {\r\n            var _a, _b;\r\n            const keys = (_a = next.keys) !== null && _a !== void 0 ? _a : [];\r\n            const aggValues = (_b = next.aggValues) !== null && _b !== void 0 ? _b : [];\r\n            const skipKeys = next.keys.map(() => undefined);\r\n            const skipAggValues = aggValues === null || aggValues === void 0 ? void 0 : aggValues.map(() => undefined);\r\n            acc.push(...next.values.map((v, i) => [\r\n                ...(i === 0 ? keys : skipKeys),\r\n                ...(v !== null && v !== void 0 ? v : []),\r\n                ...(i == 0 ? aggValues : skipAggValues),\r\n            ]));\r\n            return acc;\r\n        }, []);\r\n        logValues('Values', flattenedValues);\r\n    }\r\n    else {\r\n        const flattenedValues = processedData.data.reduce((acc, next) => {\r\n            var _a;\r\n            const aggValues = (_a = next.aggValues) !== null && _a !== void 0 ? _a : [];\r\n            acc.push([...next.keys, ...next.values, ...aggValues]);\r\n            return acc;\r\n        }, []);\r\n        logValues('Values', flattenedValues);\r\n    }\r\n}\n\n/** Implements cross-series data model coordination. */\r\nclass DataController {\r\n    constructor(mode) {\r\n        this.mode = mode;\r\n        this.debug = Debug.create(true, 'data-model');\r\n        this.requested = [];\r\n        this.status = 'setup';\r\n    }\r\n    request(id, data, opts) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (this.status !== 'setup')\r\n                throw new Error(`AG Charts - data request after data setup phase.`);\r\n            return new Promise((resolve, reject) => {\r\n                this.requested.push({\r\n                    id,\r\n                    opts,\r\n                    data,\r\n                    resultCb: resolve,\r\n                    reject,\r\n                });\r\n            });\r\n        });\r\n    }\r\n    execute() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (this.status !== 'setup')\r\n                throw new Error(`AG Charts - data request after data setup phase.`);\r\n            this.status = 'executed';\r\n            this.debug('DataController.execute() - requested', this.requested);\r\n            const merged = this.mergeRequested();\r\n            this.debug('DataController.execute() - merged', merged);\r\n            const debugMode = Debug.check(true, 'data-model');\r\n            if (debugMode) {\r\n                window.processedData = [];\r\n            }\r\n            for (const { opts, data, resultCbs, rejects, ids } of merged) {\r\n                try {\r\n                    const dataModel = new DataModel(Object.assign(Object.assign({}, opts), { mode: this.mode }));\r\n                    const processedData = dataModel.processData(data);\r\n                    if (debugMode) {\r\n                        window.processedData.push(processedData);\r\n                    }\r\n                    if (processedData && processedData.partialValidDataCount === 0) {\r\n                        resultCbs.forEach((cb) => cb({ dataModel, processedData }));\r\n                    }\r\n                    else if (processedData) {\r\n                        this.splitResult(dataModel, processedData, ids, resultCbs);\r\n                    }\r\n                    else {\r\n                        rejects.forEach((cb) => cb(new Error(`AG Charts - no processed data generated`)));\r\n                    }\r\n                }\r\n                catch (error) {\r\n                    rejects.forEach((cb) => cb(error));\r\n                }\r\n            }\r\n        });\r\n    }\r\n    mergeRequested() {\r\n        const grouped = [];\r\n        const keys = (props) => {\r\n            return props\r\n                .filter((p) => p.type === 'key')\r\n                .map((p) => p.property)\r\n                .join(';');\r\n        };\r\n        const groupMatch = ({ opts, data }) => (gr) => {\r\n            return (gr[0].data === data &&\r\n                gr[0].opts.groupByKeys === opts.groupByKeys &&\r\n                gr[0].opts.dataVisible === opts.dataVisible &&\r\n                gr[0].opts.groupByFn === opts.groupByFn &&\r\n                keys(gr[0].opts.props) === keys(opts.props));\r\n        };\r\n        const propMatch = (prop) => (existing) => {\r\n            var _a;\r\n            if (existing.type !== prop.type)\r\n                return false;\r\n            const diff = (_a = jsonDiff(existing, prop)) !== null && _a !== void 0 ? _a : {};\r\n            delete diff['scopes'];\r\n            delete diff['id'];\r\n            delete diff['ids'];\r\n            return Object.keys(diff).length === 0;\r\n        };\r\n        const mergeOpts = (opts) => {\r\n            return Object.assign(Object.assign({}, opts[0]), { props: opts.reduce((result, next) => {\r\n                    var _a, _b, _c, _d, _e, _f;\r\n                    for (const prop of next.props) {\r\n                        if (prop.id != null) {\r\n                            (_a = prop.ids) !== null && _a !== void 0 ? _a : (prop.ids = []);\r\n                            (_b = prop.scopes) === null || _b === void 0 ? void 0 : _b.forEach((scope) => { var _a; return (_a = prop.ids) === null || _a === void 0 ? void 0 : _a.push([scope, prop.id]); });\r\n                        }\r\n                        const match = result.find(propMatch(prop));\r\n                        if (!match) {\r\n                            result.push(prop);\r\n                            continue;\r\n                        }\r\n                        (_c = match.scopes) !== null && _c !== void 0 ? _c : (match.scopes = []);\r\n                        match.scopes.push(...((_d = prop.scopes) !== null && _d !== void 0 ? _d : []));\r\n                        if (match.type !== 'key' && match.type !== 'value')\r\n                            continue;\r\n                        (_e = match.ids) === null || _e === void 0 ? void 0 : _e.push(...((_f = prop.ids) !== null && _f !== void 0 ? _f : []));\r\n                    }\r\n                    return result;\r\n                }, []) });\r\n        };\r\n        const merge = (props) => {\r\n            return {\r\n                ids: props.map(({ id }) => id),\r\n                resultCbs: props.map(({ resultCb }) => resultCb),\r\n                rejects: props.map(({ reject }) => reject),\r\n                data: props[0].data,\r\n                opts: mergeOpts(props.map(({ opts }) => opts)),\r\n            };\r\n        };\r\n        for (const request of this.requested) {\r\n            const match = grouped.find(groupMatch(request));\r\n            if (match) {\r\n                match.push(request);\r\n            }\r\n            else {\r\n                grouped.push([request]);\r\n            }\r\n        }\r\n        return grouped.map(merge);\r\n    }\r\n    splitResult(dataModel, processedData, scopes, resultCbs) {\r\n        for (let index = 0; index < scopes.length; index++) {\r\n            const scope = scopes[index];\r\n            const resultCb = resultCbs[index];\r\n            resultCb({\r\n                dataModel,\r\n                processedData: Object.assign(Object.assign({}, processedData), { data: processedData.data.filter(({ validScopes }) => {\r\n                        return validScopes == null || validScopes.some((s) => s === scope);\r\n                    }) }),\r\n            });\r\n        }\r\n    }\r\n}\n\nclass DataService {\r\n    constructor(getSeries) {\r\n        this.getSeries = getSeries;\r\n    }\r\n}\n\nclass BaseManager {\r\n    constructor() {\r\n        this.listeners = new Listeners();\r\n    }\r\n    addListener(type, handler, meta) {\r\n        return this.listeners.addListener(type, handler, meta);\r\n    }\r\n    removeListener(listenerSymbol) {\r\n        this.listeners.removeListener(listenerSymbol);\r\n    }\r\n}\n\nconst DEBUG_SELECTORS = [true, 'animation'];\r\n/**\r\n * Manage animations across a chart, running all animations through only one `requestAnimationFrame` callback,\r\n * preventing duplicate animations and handling their lifecycle.\r\n */\r\nclass AnimationManager extends BaseManager {\r\n    constructor(interactionManager, chartUpdateMutex) {\r\n        super();\r\n        this.interactionManager = interactionManager;\r\n        this.chartUpdateMutex = chartUpdateMutex;\r\n        this.defaultDuration = 1000;\r\n        this.batch = new AnimationBatch();\r\n        this.debug = Debug.create(...DEBUG_SELECTORS);\r\n        this.isPlaying = false;\r\n        this.requestId = null;\r\n        this.skipAnimations = false;\r\n    }\r\n    /**\r\n     * Create an animation to tween a value between the `from` and `to` properties. If an animation already exists\r\n     * with the same `id`, immediately stop it.\r\n     */\r\n    animate(_a) {\r\n        var _b, _c;\r\n        var { disableInteractions = true, immutable = true } = _a, opts = __rest(_a, [\"disableInteractions\", \"immutable\"]);\r\n        const { batch } = this;\r\n        try {\r\n            if (opts.id != null && batch.controllers.has(opts.id)) {\r\n                if (!immutable) {\r\n                    return batch.controllers.get(opts.id).reset(opts);\r\n                }\r\n                batch.controllers.get(opts.id).stop();\r\n                this.debug(`Skipping animation batch due to update of existing animation: ${opts.id}`);\r\n                this.batch.skip();\r\n            }\r\n        }\r\n        catch (error) {\r\n            this.failsafeOnError(error);\r\n            return;\r\n        }\r\n        const id = (_b = opts.id) !== null && _b !== void 0 ? _b : Math.random().toString();\r\n        const skip = this.isSkipped();\r\n        if (skip) {\r\n            this.debug('AnimationManager - skipping animation');\r\n        }\r\n        return new Animation(Object.assign(Object.assign({}, opts), { id,\r\n            skip, autoplay: this.isPlaying ? opts.autoplay : false, duration: (_c = opts.duration) !== null && _c !== void 0 ? _c : this.defaultDuration, onPlay: (controller) => {\r\n                var _a;\r\n                batch.controllers.set(id, controller);\r\n                this.requestAnimation();\r\n                if (disableInteractions) {\r\n                    this.interactionManager.pause('animation');\r\n                }\r\n                (_a = opts.onPlay) === null || _a === void 0 ? void 0 : _a.call(controller, controller);\r\n            }, onStop: (controller) => {\r\n                var _a;\r\n                batch.controllers.delete(id);\r\n                if (disableInteractions) {\r\n                    this.interactionManager.resume('animation');\r\n                }\r\n                (_a = opts.onStop) === null || _a === void 0 ? void 0 : _a.call(controller, controller);\r\n            } }));\r\n    }\r\n    play() {\r\n        if (this.isPlaying) {\r\n            return;\r\n        }\r\n        this.isPlaying = true;\r\n        this.debug('AnimationManager.play()');\r\n        for (const controller of this.batch.controllers.values()) {\r\n            try {\r\n                controller.play();\r\n            }\r\n            catch (error) {\r\n                this.failsafeOnError(error);\r\n            }\r\n        }\r\n        this.requestAnimation();\r\n    }\r\n    pause() {\r\n        if (!this.isPlaying) {\r\n            return;\r\n        }\r\n        this.isPlaying = false;\r\n        this.cancelAnimation();\r\n        this.debug('AnimationManager.pause()');\r\n        for (const controller of this.batch.controllers.values()) {\r\n            try {\r\n                controller.pause();\r\n            }\r\n            catch (error) {\r\n                this.failsafeOnError(error);\r\n            }\r\n        }\r\n    }\r\n    stop() {\r\n        this.isPlaying = false;\r\n        this.cancelAnimation();\r\n        this.debug('AnimationManager.stop()');\r\n        for (const controller of this.batch.controllers.values()) {\r\n            try {\r\n                controller.stop();\r\n            }\r\n            catch (error) {\r\n                this.failsafeOnError(error, false);\r\n            }\r\n        }\r\n    }\r\n    stopByAnimationId(id) {\r\n        var _a;\r\n        try {\r\n            if (id != null && this.batch.controllers.has(id)) {\r\n                (_a = this.batch.controllers.get(id)) === null || _a === void 0 ? void 0 : _a.stop();\r\n            }\r\n        }\r\n        catch (error) {\r\n            this.failsafeOnError(error);\r\n            return;\r\n        }\r\n    }\r\n    stopByAnimationGroupId(id) {\r\n        for (const controller of this.batch.controllers.values()) {\r\n            if (controller.groupId === id) {\r\n                this.stopByAnimationId(controller.id);\r\n            }\r\n        }\r\n    }\r\n    reset() {\r\n        if (this.isPlaying) {\r\n            this.stop();\r\n            this.play();\r\n        }\r\n        else {\r\n            this.stop();\r\n        }\r\n    }\r\n    skip(skip = true) {\r\n        this.skipAnimations = skip;\r\n    }\r\n    isSkipped() {\r\n        return this.skipAnimations || this.batch.isSkipped();\r\n    }\r\n    isActive() {\r\n        return this.isPlaying && this.batch.isActive();\r\n    }\r\n    skipCurrentBatch() {\r\n        if (Debug.check(...DEBUG_SELECTORS)) {\r\n            this.debug(`AnimationManager - skipCurrentBatch()`, { stack: new Error().stack });\r\n        }\r\n        this.batch.skip();\r\n    }\r\n    /** Mocking point for tests to guarantee that animation updates happen. */\r\n    isSkippingFrames() {\r\n        return true;\r\n    }\r\n    /** Mocking point for tests to capture requestAnimationFrame callbacks. */\r\n    scheduleAnimationFrame(cb) {\r\n        this.requestId = requestAnimationFrame(cb);\r\n    }\r\n    requestAnimation() {\r\n        if (!this.batch.isActive() || this.requestId !== null)\r\n            return;\r\n        let prevTime;\r\n        const onAnimationFrame = (time) => __awaiter(this, void 0, void 0, function* () {\r\n            const executeAnimationFrame = () => __awaiter(this, void 0, void 0, function* () {\r\n                const deltaTime = time - (prevTime !== null && prevTime !== void 0 ? prevTime : time);\r\n                prevTime = time;\r\n                this.debug('AnimationManager - onAnimationFrame()', {\r\n                    controllersCount: this.batch.controllers.size,\r\n                });\r\n                for (const controller of this.batch.controllers.values()) {\r\n                    try {\r\n                        controller.update(deltaTime);\r\n                    }\r\n                    catch (error) {\r\n                        this.failsafeOnError(error);\r\n                    }\r\n                }\r\n                this.listeners.dispatch('animation-frame', {\r\n                    type: 'animation-frame',\r\n                    deltaMs: deltaTime,\r\n                });\r\n            });\r\n            if (this.isSkippingFrames()) {\r\n                // Only run the animation frame if we can acquire the chart update mutex immediately.\r\n                yield this.chartUpdateMutex.acquireImmediately(executeAnimationFrame);\r\n            }\r\n            else {\r\n                // Wait for the next available point we can execute.\r\n                yield this.chartUpdateMutex.acquire(executeAnimationFrame);\r\n            }\r\n            if (this.batch.isActive()) {\r\n                this.scheduleAnimationFrame(onAnimationFrame);\r\n            }\r\n        });\r\n        this.scheduleAnimationFrame(onAnimationFrame);\r\n    }\r\n    cancelAnimation() {\r\n        if (this.requestId === null)\r\n            return;\r\n        cancelAnimationFrame(this.requestId);\r\n        this.requestId = null;\r\n        this.startBatch();\r\n    }\r\n    failsafeOnError(error, cancelAnimation = true) {\r\n        Logger.error('Error during animation, skipping animations', error);\r\n        if (cancelAnimation) {\r\n            this.cancelAnimation();\r\n        }\r\n    }\r\n    startBatch(skipAnimations) {\r\n        this.debug(`AnimationManager - startBatch() with skipAnimations=${skipAnimations}.`);\r\n        this.reset();\r\n        this.batch.destroy();\r\n        this.batch = new AnimationBatch();\r\n        if (skipAnimations === true) {\r\n            this.batch.skip();\r\n        }\r\n    }\r\n    endBatch() {\r\n        this.debug(`AnimationManager - endBatch() with ${this.batch.controllers.size} animations; skipped: ${this.batch.isSkipped()}.`);\r\n        if (this.batch.isSkipped() && !this.batch.isActive()) {\r\n            this.batch.skip(false);\r\n        }\r\n    }\r\n}\r\n/**\r\n * A batch of animations that are synchronised together. Can be skipped independently of other batches and the main\r\n * animation skipping status.\r\n */\r\nclass AnimationBatch {\r\n    constructor() {\r\n        this.controllers = new Map();\r\n        this.skipAnimations = false;\r\n    }\r\n    // private phase?: 'initial-load' | 'remove' | 'update' | 'add';\r\n    isActive() {\r\n        return this.controllers.size > 0;\r\n    }\r\n    skip(skip = true) {\r\n        if (this.skipAnimations === false && skip === true) {\r\n            for (const controller of this.controllers.values()) {\r\n                controller.stop();\r\n            }\r\n            this.controllers.clear();\r\n        }\r\n        this.skipAnimations = skip;\r\n    }\r\n    isSkipped() {\r\n        return this.skipAnimations;\r\n    }\r\n    destroy() { }\r\n}\n\nclass ChartEventManager extends BaseManager {\r\n    legendItemClick(series, itemId, enabled, legendItemName) {\r\n        const event = {\r\n            type: 'legend-item-click',\r\n            series,\r\n            itemId,\r\n            enabled,\r\n            legendItemName,\r\n        };\r\n        this.listeners.dispatch('legend-item-click', event);\r\n    }\r\n    legendItemDoubleClick(series, itemId, enabled, numVisibleItems, legendItemName) {\r\n        const event = {\r\n            type: 'legend-item-double-click',\r\n            series,\r\n            itemId,\r\n            enabled,\r\n            legendItemName,\r\n            numVisibleItems,\r\n        };\r\n        this.listeners.dispatch('legend-item-double-click', event);\r\n    }\r\n    axisHover(axisId, direction) {\r\n        const event = {\r\n            type: 'axis-hover',\r\n            axisId,\r\n            direction,\r\n        };\r\n        this.listeners.dispatch('axis-hover', event);\r\n    }\r\n}\n\n/**\r\n * Manages the cursor styling for an element. Tracks the requested styling from distinct\r\n * dependents and handles conflicting styling requests.\r\n */\r\nclass CursorManager {\r\n    constructor(element) {\r\n        this.states = {};\r\n        this.element = element;\r\n    }\r\n    updateCursor(callerId, style) {\r\n        delete this.states[callerId];\r\n        if (style != null) {\r\n            this.states[callerId] = { style };\r\n        }\r\n        this.applyStates();\r\n    }\r\n    applyStates() {\r\n        let styleToApply = 'default';\r\n        // Last added entry wins.\r\n        Object.entries(this.states)\r\n            .reverse()\r\n            .slice(0, 1)\r\n            .forEach(([_, { style }]) => (styleToApply = style));\r\n        this.element.style.cursor = styleToApply;\r\n    }\r\n    getCursor() {\r\n        return this.element.style.cursor;\r\n    }\r\n}\n\n/**\r\n * Manages the actively highlighted series/datum for a chart. Tracks the requested highlights from\r\n * distinct dependents and handles conflicting highlight requests.\r\n */\r\nclass HighlightManager extends BaseManager {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.highlightStates = new Map();\r\n        this.pickedStates = new Map();\r\n    }\r\n    updateHighlight(callerId, highlightedDatum) {\r\n        this.highlightStates.delete(callerId);\r\n        if (highlightedDatum != null) {\r\n            this.highlightStates.set(callerId, highlightedDatum);\r\n        }\r\n        this.applyHighlightStates();\r\n    }\r\n    getActiveHighlight() {\r\n        return this.activeHighlight;\r\n    }\r\n    updatePicked(callerId, clickableDatum) {\r\n        this.pickedStates.delete(callerId);\r\n        if (clickableDatum != null) {\r\n            this.pickedStates.set(callerId, clickableDatum);\r\n        }\r\n        this.applyPickedStates();\r\n    }\r\n    getActivePicked() {\r\n        return this.activePicked;\r\n    }\r\n    applyHighlightStates() {\r\n        // Last added entry wins.\r\n        const { activeHighlight: previousHighlight } = this;\r\n        this.activeHighlight = Array.from(this.highlightStates.values()).pop();\r\n        if (!this.isEqual(this.activeHighlight, previousHighlight)) {\r\n            this.listeners.dispatch('highlight-change', {\r\n                type: 'highlight-change',\r\n                currentHighlight: this.activeHighlight,\r\n                previousHighlight,\r\n            });\r\n        }\r\n    }\r\n    applyPickedStates() {\r\n        this.activePicked = Array.from(this.pickedStates.values()).pop();\r\n    }\r\n    isEqual(a, b) {\r\n        return a === b || ((a === null || a === void 0 ? void 0 : a.series) === (b === null || b === void 0 ? void 0 : b.series) && (a === null || a === void 0 ? void 0 : a.itemId) === (b === null || b === void 0 ? void 0 : b.itemId) && (a === null || a === void 0 ? void 0 : a.datum) === (b === null || b === void 0 ? void 0 : b.datum));\r\n    }\r\n}\n\nconst WINDOW_EVENT_HANDLERS = ['pagehide', 'mousemove', 'mouseup'];\r\nconst EVENT_HANDLERS = [\r\n    'click',\r\n    'dblclick',\r\n    'contextmenu',\r\n    'mousedown',\r\n    'mouseout',\r\n    'mouseenter',\r\n    'touchstart',\r\n    'touchmove',\r\n    'touchend',\r\n    'touchcancel',\r\n    'wheel',\r\n];\r\nconst CSS = `\n.ag-chart-wrapper {\n    touch-action: none;\n}\n`;\r\n/**\r\n * Manages user interactions with a specific HTMLElement (or interactions that bubble from it's\r\n * children)\r\n */\r\nclass InteractionManager extends BaseManager {\r\n    constructor(element, document, window) {\r\n        super();\r\n        this.eventHandler = (event) => this.processEvent(event);\r\n        this.mouseDown = false;\r\n        this.touchDown = false;\r\n        this.pausers = { animation: 0, 'context-menu': 0 };\r\n        this.rootElement = document.body;\r\n        this.element = element;\r\n        this.window = window;\r\n        for (const type of EVENT_HANDLERS) {\r\n            if (type.startsWith('touch')) {\r\n                element.addEventListener(type, this.eventHandler, { passive: true });\r\n            }\r\n            else if (type === 'wheel') {\r\n                element.addEventListener(type, this.eventHandler, { passive: false });\r\n            }\r\n            else {\r\n                element.addEventListener(type, this.eventHandler);\r\n            }\r\n        }\r\n        for (const type of WINDOW_EVENT_HANDLERS) {\r\n            this.window.addEventListener(type, this.eventHandler);\r\n        }\r\n        if (!InteractionManager.interactionDocuments.includes(document)) {\r\n            injectStyle(document, CSS);\r\n            InteractionManager.interactionDocuments.push(document);\r\n        }\r\n    }\r\n    destroy() {\r\n        for (const type of WINDOW_EVENT_HANDLERS) {\r\n            this.window.removeEventListener(type, this.eventHandler);\r\n        }\r\n        for (const type of EVENT_HANDLERS) {\r\n            this.element.removeEventListener(type, this.eventHandler);\r\n        }\r\n    }\r\n    resume(pauseType) {\r\n        this.pausers[pauseType]--;\r\n    }\r\n    pause(pauseType) {\r\n        this.pausers[pauseType]++;\r\n    }\r\n    processEvent(event) {\r\n        const types = this.decideInteractionEventTypes(event);\r\n        if (types.length > 0) {\r\n            // Async dispatch to avoid blocking the event-processing thread.\r\n            this.dispatchEvent(event, types).catch((e) => Logger.errorOnce(e));\r\n        }\r\n    }\r\n    dispatchEvent(event, types) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const coords = this.calculateCoordinates(event);\r\n            if (coords == null) {\r\n                return;\r\n            }\r\n            const pauses = Object.entries(this.pausers)\r\n                .filter(([, count]) => count > 0)\r\n                .map(([pause]) => pause);\r\n            for (const type of types) {\r\n                this.listeners.dispatchWrapHandlers(type, (handler, meta, interactionEvent) => {\r\n                    var _a;\r\n                    if (pauses.length > 0 && !((_a = meta === null || meta === void 0 ? void 0 : meta.bypassPause) === null || _a === void 0 ? void 0 : _a.some((p) => pauses.includes(p)))) {\r\n                        return;\r\n                    }\r\n                    if (!interactionEvent.consumed) {\r\n                        handler(interactionEvent);\r\n                    }\r\n                }, this.buildEvent(Object.assign({ type, event, pauses }, coords)));\r\n            }\r\n        });\r\n    }\r\n    decideInteractionEventTypes(event) {\r\n        const dragStart = 'drag-start';\r\n        switch (event.type) {\r\n            case 'click':\r\n                return ['click'];\r\n            case 'dblclick':\r\n                return ['dblclick'];\r\n            case 'contextmenu':\r\n                return ['contextmenu'];\r\n            case 'mousedown':\r\n                this.mouseDown = true;\r\n                this.dragStartElement = event.target;\r\n                return [dragStart];\r\n            case 'touchstart':\r\n                this.touchDown = true;\r\n                this.dragStartElement = event.target;\r\n                return [dragStart];\r\n            case 'touchmove':\r\n            case 'mousemove':\r\n                if (!this.mouseDown && !this.touchDown && !this.isEventOverElement(event)) {\r\n                    // We only care about these events if the target is the canvas, unless\r\n                    // we're in the middle of a drag/slide.\r\n                    return [];\r\n                }\r\n                return this.mouseDown || this.touchDown ? ['drag'] : ['hover'];\r\n            case 'mouseup':\r\n                if (!this.mouseDown && !this.isEventOverElement(event)) {\r\n                    // We only care about these events if the target is the canvas, unless\r\n                    // we're in the middle of a drag.\r\n                    return [];\r\n                }\r\n                this.mouseDown = false;\r\n                this.dragStartElement = undefined;\r\n                return ['drag-end'];\r\n            case 'touchend':\r\n                if (!this.touchDown && !this.isEventOverElement(event)) {\r\n                    // We only care about these events if the target is the canvas, unless\r\n                    // we're in the middle of a slide.\r\n                    return [];\r\n                }\r\n                this.touchDown = false;\r\n                this.dragStartElement = undefined;\r\n                return ['drag-end'];\r\n            case 'mouseout':\r\n            case 'touchcancel':\r\n                return ['leave'];\r\n            case 'mouseenter':\r\n                const mouseButtonDown = event instanceof MouseEvent && (event.buttons & 1) === 1;\r\n                if (this.mouseDown !== mouseButtonDown) {\r\n                    this.mouseDown = mouseButtonDown;\r\n                    return [mouseButtonDown ? dragStart : 'drag-end'];\r\n                }\r\n                return [];\r\n            case 'pagehide':\r\n                return ['page-left'];\r\n            case 'wheel':\r\n                return ['wheel'];\r\n        }\r\n        return [];\r\n    }\r\n    isEventOverElement(event) {\r\n        var _a;\r\n        return event.target === this.element || ((_a = event.target) === null || _a === void 0 ? void 0 : _a.parentElement) === this.element;\r\n    }\r\n    calculateCoordinates(event) {\r\n        var _a;\r\n        if (event instanceof MouseEvent) {\r\n            const { clientX, clientY, pageX, pageY, offsetX, offsetY } = event;\r\n            return this.fixOffsets(event, { clientX, clientY, pageX, pageY, offsetX, offsetY });\r\n        }\r\n        else if (typeof TouchEvent !== 'undefined' && event instanceof TouchEvent) {\r\n            const lastTouch = (_a = event.touches[0]) !== null && _a !== void 0 ? _a : event.changedTouches[0];\r\n            const { clientX, clientY, pageX, pageY } = lastTouch;\r\n            return Object.assign(Object.assign({}, InteractionManager.NULL_COORDS), { clientX, clientY, pageX, pageY });\r\n        }\r\n        else if (event instanceof PageTransitionEvent) {\r\n            if (event.persisted) {\r\n                // Don't fire the page-left event since the page maybe revisited.\r\n                return;\r\n            }\r\n            return InteractionManager.NULL_COORDS;\r\n        }\r\n        // Unsupported event - abort.\r\n    }\r\n    fixOffsets(event, coords) {\r\n        const offsets = (el) => {\r\n            let x = 0;\r\n            let y = 0;\r\n            while (el) {\r\n                x += el.offsetLeft;\r\n                y += el.offsetTop;\r\n                el = el.offsetParent;\r\n            }\r\n            return { x, y };\r\n        };\r\n        if (this.dragStartElement != null && event.target !== this.dragStartElement) {\r\n            // Offsets need to be relative to the drag-start element to avoid jumps when\r\n            // the pointer moves between element boundaries.\r\n            const offsetDragStart = offsets(this.dragStartElement);\r\n            const offsetEvent = offsets(event.target);\r\n            coords.offsetX -= offsetDragStart.x - offsetEvent.x;\r\n            coords.offsetY -= offsetDragStart.y - offsetEvent.y;\r\n        }\r\n        return coords;\r\n    }\r\n    buildEvent(opts) {\r\n        const { type, event, clientX, clientY, pauses } = opts;\r\n        let { offsetX, offsetY, pageX, pageY } = opts;\r\n        if (!isNumber(offsetX) || !isNumber(offsetY)) {\r\n            const rect = this.element.getBoundingClientRect();\r\n            offsetX = clientX - rect.left;\r\n            offsetY = clientY - rect.top;\r\n        }\r\n        if (!isNumber(pageX) || !isNumber(pageY)) {\r\n            const pageRect = this.rootElement.getBoundingClientRect();\r\n            pageX = clientX - pageRect.left;\r\n            pageY = clientY - pageRect.top;\r\n        }\r\n        const builtEvent = {\r\n            type,\r\n            offsetX: offsetX,\r\n            offsetY: offsetY,\r\n            pageX: pageX,\r\n            pageY: pageY,\r\n            sourceEvent: event,\r\n            consumed: false,\r\n            pauses,\r\n            consume() {\r\n                builtEvent.consumed = true;\r\n            },\r\n        };\r\n        return builtEvent;\r\n    }\r\n}\r\nInteractionManager.interactionDocuments = [];\r\nInteractionManager.NULL_COORDS = {\r\n    clientX: -Infinity,\r\n    clientY: -Infinity,\r\n    pageX: -Infinity,\r\n    pageY: -Infinity,\r\n    offsetX: -Infinity,\r\n    offsetY: -Infinity,\r\n};\n\n/**\r\n * Manages the tooltip HTML an element. Tracks the requested HTML from distinct dependents and\r\n * handles conflicting tooltip requests.\r\n */\r\nclass TooltipManager {\r\n    constructor(tooltip, interactionManager) {\r\n        this.states = {};\r\n        this.exclusiveAreas = {};\r\n        this.destroyFns = [];\r\n        this.tooltip = tooltip;\r\n        this.destroyFns.push(interactionManager.addListener('hover', (e) => this.checkExclusiveRects(e)));\r\n    }\r\n    getRange() {\r\n        return this.tooltip.range;\r\n    }\r\n    updateTooltip(callerId, meta, content) {\r\n        var _a;\r\n        if (content == null) {\r\n            content = (_a = this.states[callerId]) === null || _a === void 0 ? void 0 : _a.content;\r\n        }\r\n        this.states[callerId] = { content, meta };\r\n        this.applyStates();\r\n    }\r\n    updateExclusiveRect(callerId, area) {\r\n        if (area) {\r\n            this.exclusiveAreas[callerId] = area;\r\n        }\r\n        else {\r\n            delete this.exclusiveAreas[callerId];\r\n        }\r\n    }\r\n    removeTooltip(callerId) {\r\n        delete this.states[callerId];\r\n        this.applyStates();\r\n    }\r\n    getTooltipMeta(callerId) {\r\n        var _a;\r\n        return (_a = this.states[callerId]) === null || _a === void 0 ? void 0 : _a.meta;\r\n    }\r\n    destroy() {\r\n        for (const destroyFn of this.destroyFns) {\r\n            destroyFn();\r\n        }\r\n    }\r\n    checkExclusiveRects(e) {\r\n        let newAppliedExclusiveArea;\r\n        for (const [entryId, area] of Object.entries(this.exclusiveAreas)) {\r\n            if (!area.containsPoint(e.offsetX, e.offsetY)) {\r\n                continue;\r\n            }\r\n            newAppliedExclusiveArea = entryId;\r\n            break;\r\n        }\r\n        if (newAppliedExclusiveArea === this.appliedExclusiveArea) {\r\n            return;\r\n        }\r\n        this.appliedExclusiveArea = newAppliedExclusiveArea;\r\n        this.applyStates();\r\n    }\r\n    applyStates() {\r\n        var _a;\r\n        const ids = this.appliedExclusiveArea ? [this.appliedExclusiveArea] : Object.keys(this.states);\r\n        let contentToApply;\r\n        let metaToApply;\r\n        // Last added entry wins.\r\n        ids.reverse();\r\n        ids.slice(0, 1).forEach((id) => {\r\n            var _a;\r\n            const { content, meta } = (_a = this.states[id]) !== null && _a !== void 0 ? _a : {};\r\n            contentToApply = content;\r\n            metaToApply = meta;\r\n        });\r\n        if (metaToApply === undefined || contentToApply === undefined) {\r\n            this.appliedState = undefined;\r\n            this.tooltip.toggle(false);\r\n            return;\r\n        }\r\n        if (((_a = this.appliedState) === null || _a === void 0 ? void 0 : _a.content) === contentToApply) {\r\n            const renderInstantly = this.tooltip.isVisible();\r\n            this.tooltip.show(metaToApply, undefined, renderInstantly);\r\n        }\r\n        else {\r\n            this.tooltip.show(metaToApply, contentToApply);\r\n        }\r\n        this.appliedState = { content: contentToApply, meta: metaToApply };\r\n    }\r\n    static makeTooltipMeta(event, canvas, datum, window) {\r\n        var _a, _b, _c, _d;\r\n        const { pageX, pageY, offsetX, offsetY } = event;\r\n        const position = {\r\n            xOffset: datum.series.tooltip.position.xOffset,\r\n            yOffset: datum.series.tooltip.position.yOffset,\r\n        };\r\n        const meta = {\r\n            pageX,\r\n            pageY,\r\n            offsetX,\r\n            offsetY,\r\n            event: event,\r\n            showArrow: datum.series.tooltip.showArrow,\r\n            position,\r\n        };\r\n        // On line and scatter series, the tooltip covers the top of errorbars when using\r\n        // datum.midPoint. Using datum.yBar.upperPoint renders the tooltip higher up.\r\n        const refPoint = (_b = (_a = datum.yBar) === null || _a === void 0 ? void 0 : _a.upperPoint) !== null && _b !== void 0 ? _b : datum.midPoint;\r\n        if (datum.series.tooltip.position.type === 'node' && refPoint) {\r\n            const { x, y } = refPoint;\r\n            const point = datum.series.contentGroup.inverseTransformPoint(x, y);\r\n            const canvasRect = canvas.element.getBoundingClientRect();\r\n            return Object.assign(Object.assign({}, meta), { pageX: Math.round(canvasRect.left + window.scrollX + point.x), pageY: Math.round(canvasRect.top + window.scrollY + point.y), offsetX: Math.round(point.x), offsetY: Math.round(point.y) });\r\n        }\r\n        meta.enableInteraction = (_d = (_c = datum.series.tooltip.interaction) === null || _c === void 0 ? void 0 : _c.enabled) !== null && _d !== void 0 ? _d : false;\r\n        return meta;\r\n    }\r\n}\n\n/**\r\n * Manages the current zoom state for a chart. Tracks the requested zoom from distinct dependents\r\n * and handles conflicting zoom requests.\r\n */\r\nclass ZoomManager extends BaseManager {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.axes = {};\r\n    }\r\n    updateAxes(axes) {\r\n        var _a;\r\n        const removedAxes = new Set(Object.keys(this.axes));\r\n        axes.forEach((axis) => {\r\n            var _a;\r\n            var _b, _c;\r\n            removedAxes.delete(axis.id);\r\n            (_a = (_b = this.axes)[_c = axis.id]) !== null && _a !== void 0 ? _a : (_b[_c] = new AxisZoomManager(axis));\r\n        });\r\n        removedAxes.forEach((axisId) => {\r\n            delete this.axes[axisId];\r\n        });\r\n        if ((_a = this.initialZoom) === null || _a === void 0 ? void 0 : _a.newZoom) {\r\n            this.updateZoom(this.initialZoom.callerId, this.initialZoom.newZoom);\r\n        }\r\n        this.initialZoom = undefined;\r\n    }\r\n    updateZoom(callerId, newZoom) {\r\n        if (Object.keys(this.axes).length === 0) {\r\n            this.initialZoom = { callerId, newZoom };\r\n            return;\r\n        }\r\n        Object.values(this.axes).forEach((axis) => {\r\n            axis.updateZoom(callerId, newZoom === null || newZoom === void 0 ? void 0 : newZoom[axis.getDirection()]);\r\n        });\r\n        this.applyStates();\r\n    }\r\n    updateAxisZoom(callerId, axisId, newZoom) {\r\n        var _a;\r\n        (_a = this.axes[axisId]) === null || _a === void 0 ? void 0 : _a.updateZoom(callerId, newZoom);\r\n        this.applyStates();\r\n    }\r\n    getZoom() {\r\n        let x;\r\n        let y;\r\n        // TODO: this only works when there is a single axis on each direction as it gets the last of each\r\n        Object.values(this.axes).forEach((axis) => {\r\n            if (axis.getDirection() === ChartAxisDirection.X) {\r\n                x = axis.getZoom();\r\n            }\r\n            else if (axis.getDirection() === ChartAxisDirection.Y) {\r\n                y = axis.getZoom();\r\n            }\r\n        });\r\n        if (x || y) {\r\n            return { x, y };\r\n        }\r\n    }\r\n    getAxisZoom(axisId) {\r\n        var _a;\r\n        return (_a = this.axes[axisId]) === null || _a === void 0 ? void 0 : _a.getZoom();\r\n    }\r\n    getAxisZooms() {\r\n        const axes = {};\r\n        for (const [axisId, axis] of Object.entries(this.axes)) {\r\n            axes[axisId] = {\r\n                direction: axis.getDirection(),\r\n                zoom: axis.getZoom(),\r\n            };\r\n        }\r\n        return axes;\r\n    }\r\n    applyStates() {\r\n        const changed = Object.values(this.axes)\r\n            .map((axis) => axis.applyStates())\r\n            .some(Boolean);\r\n        if (!changed) {\r\n            return;\r\n        }\r\n        const currentZoom = this.getZoom();\r\n        const axes = {};\r\n        for (const [axisId, axis] of Object.entries(this.axes)) {\r\n            axes[axisId] = axis.getZoom();\r\n        }\r\n        this.listeners.dispatch('zoom-change', Object.assign(Object.assign({ type: 'zoom-change' }, (currentZoom !== null && currentZoom !== void 0 ? currentZoom : {})), { axes }));\r\n    }\r\n}\r\nclass AxisZoomManager {\r\n    constructor(axis) {\r\n        this.states = {};\r\n        this.axis = axis;\r\n        const [min = 0, max = 1] = axis.visibleRange;\r\n        this.currentZoom = { min, max };\r\n        this.states['__initial__'] = this.currentZoom;\r\n    }\r\n    getDirection() {\r\n        return this.axis.direction;\r\n    }\r\n    updateZoom(callerId, newZoom) {\r\n        delete this.states[callerId];\r\n        if (newZoom != null) {\r\n            this.states[callerId] = Object.assign({}, newZoom);\r\n        }\r\n    }\r\n    getZoom() {\r\n        return this.currentZoom;\r\n    }\r\n    applyStates() {\r\n        var _a, _b;\r\n        const prevZoom = this.currentZoom;\r\n        const last = Object.keys(this.states)[Object.keys(this.states).length - 1];\r\n        this.currentZoom = Object.assign({}, this.states[last]);\r\n        return (prevZoom === null || prevZoom === void 0 ? void 0 : prevZoom.min) !== ((_a = this.currentZoom) === null || _a === void 0 ? void 0 : _a.min) || (prevZoom === null || prevZoom === void 0 ? void 0 : prevZoom.max) !== ((_b = this.currentZoom) === null || _b === void 0 ? void 0 : _b.max);\r\n    }\r\n}\n\nclass LayoutService extends Listeners {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.layoutComplete = 'layout-complete';\r\n    }\r\n    addListener(eventType, handler) {\r\n        if (this.isLayoutStage(eventType) || this.isLayoutComplete(eventType)) {\r\n            return super.addListener(eventType, handler);\r\n        }\r\n        throw new Error(`AG Charts - unsupported listener type: ${eventType}`);\r\n    }\r\n    dispatchPerformLayout(stage, ctx) {\r\n        if (this.isLayoutStage(stage)) {\r\n            return this.getListenersByType(stage).reduce((result, listener) => {\r\n                try {\r\n                    return listener.handler(result);\r\n                }\r\n                catch (e) {\r\n                    Logger.errorOnce(e);\r\n                    return result;\r\n                }\r\n            }, ctx);\r\n        }\r\n        return ctx;\r\n    }\r\n    dispatchLayoutComplete(event) {\r\n        this.dispatch(this.layoutComplete, event);\r\n    }\r\n    isLayoutStage(eventType) {\r\n        return eventType !== this.layoutComplete;\r\n    }\r\n    isLayoutComplete(eventType) {\r\n        return eventType === this.layoutComplete;\r\n    }\r\n}\n\nfunction gridLayout({ orientation, bboxes, maxHeight, maxWidth, itemPaddingY = 0, itemPaddingX = 0, forceResult = false, }) {\r\n    const horizontal = orientation === 'horizontal';\r\n    const primary = {\r\n        max: horizontal ? maxWidth : maxHeight,\r\n        fn: horizontal ? (b) => b.width : (b) => b.height,\r\n        padding: horizontal ? itemPaddingX : itemPaddingY,\r\n    };\r\n    const secondary = {\r\n        max: !horizontal ? maxWidth : maxHeight,\r\n        fn: !horizontal ? (b) => b.width : (b) => b.height,\r\n        padding: !horizontal ? itemPaddingX : itemPaddingY,\r\n    };\r\n    let processedBBoxCount = 0;\r\n    const rawPages = [];\r\n    while (processedBBoxCount < bboxes.length) {\r\n        const unprocessedBBoxes = bboxes.slice(processedBBoxCount);\r\n        const result = processBBoxes(unprocessedBBoxes, processedBBoxCount, primary, secondary, forceResult);\r\n        if (!result) {\r\n            return;\r\n        }\r\n        processedBBoxCount += result.processedBBoxCount;\r\n        rawPages.push(result.pageIndices);\r\n    }\r\n    return buildPages(rawPages, orientation, bboxes, itemPaddingY, itemPaddingX);\r\n}\r\nfunction processBBoxes(bboxes, indexOffset, primary, secondary, forceResult) {\r\n    // If calculatePage() fails on the first guess, we could use the number of items that fit\r\n    // as a good guess for the next iteration.\r\n    const minGuess = 1;\r\n    let startingGuess = estimateStartingGuess(bboxes, primary);\r\n    if (startingGuess < minGuess) {\r\n        if (!forceResult) {\r\n            return undefined;\r\n        }\r\n        // Legend constraints too small! Display at least one row/column if forceResult is true\r\n        startingGuess = minGuess;\r\n    }\r\n    for (let guess = startingGuess; guess >= minGuess; guess--) {\r\n        const pageIndices = calculatePage(bboxes, indexOffset, guess, primary, secondary, forceResult);\r\n        if (pageIndices == null && guess <= minGuess) {\r\n            // Can't layout!\r\n            return undefined;\r\n        }\r\n        if (pageIndices == null) {\r\n            // Guess again!\r\n            continue;\r\n        }\r\n        if (typeof pageIndices === 'number') {\r\n            // calculatePage() suggested a better guess, use that if it's more than minGuess.\r\n            if (pageIndices <= minGuess) {\r\n                // Can't layout!\r\n                return undefined;\r\n            }\r\n            guess = pageIndices < guess && pageIndices > minGuess ? pageIndices : guess;\r\n            continue;\r\n        }\r\n        const processedBBoxCount = pageIndices.length * pageIndices[0].length; // this is an estimate, not all rows/columns will have the same length\r\n        return { processedBBoxCount, pageIndices };\r\n    }\r\n}\r\nfunction calculatePage(bboxes, indexOffset, primaryCount, primary, secondary, forceResult) {\r\n    var _a;\r\n    const result = [];\r\n    let sumSecondary = 0;\r\n    let currentMaxSecondary = 0;\r\n    let currentPrimaryIndices = [];\r\n    const maxPrimaryValues = [];\r\n    for (let bboxIndex = 0; bboxIndex < bboxes.length; bboxIndex++) {\r\n        const primaryValueIdx = (bboxIndex + primaryCount) % primaryCount;\r\n        if (primaryValueIdx === 0) {\r\n            sumSecondary += currentMaxSecondary;\r\n            currentMaxSecondary = 0;\r\n            if (currentPrimaryIndices.length > 0) {\r\n                result.push(currentPrimaryIndices);\r\n            }\r\n            currentPrimaryIndices = [];\r\n        }\r\n        const primaryValue = primary.fn(bboxes[bboxIndex]) + primary.padding;\r\n        maxPrimaryValues[primaryValueIdx] = Math.max((_a = maxPrimaryValues[primaryValueIdx]) !== null && _a !== void 0 ? _a : 0, primaryValue);\r\n        currentMaxSecondary = Math.max(currentMaxSecondary, secondary.fn(bboxes[bboxIndex]) + secondary.padding);\r\n        const currentSecondaryDimension = sumSecondary + currentMaxSecondary;\r\n        const returnResult = !forceResult || result.length > 0;\r\n        if (currentSecondaryDimension > secondary.max && returnResult) {\r\n            // Breached max secondary dimension size, return indices accumlated so far (but not in-progress row/column).\r\n            currentPrimaryIndices = [];\r\n            break;\r\n        }\r\n        const sumPrimary = maxPrimaryValues.reduce((sum, next) => sum + next, 0);\r\n        if (sumPrimary > primary.max && !forceResult) {\r\n            // Breached max main dimension size.\r\n            if (maxPrimaryValues.length < primaryCount) {\r\n                // Feedback as guess for next iteration if we're on the first round still.\r\n                return maxPrimaryValues.length;\r\n            }\r\n            return undefined;\r\n        }\r\n        currentPrimaryIndices.push(bboxIndex + indexOffset);\r\n    }\r\n    if (currentPrimaryIndices.length > 0) {\r\n        result.push(currentPrimaryIndices);\r\n    }\r\n    return result.length > 0 ? result : undefined;\r\n}\r\nfunction buildPages(rawPages, orientation, bboxes, itemPaddingY, itemPaddingX) {\r\n    let maxPageWidth = 0;\r\n    let maxPageHeight = 0;\r\n    const pages = rawPages.map((indices) => {\r\n        if (orientation === 'horizontal') {\r\n            indices = transpose(indices);\r\n        }\r\n        let endIndex = 0;\r\n        const columns = indices.map((colIndices) => {\r\n            const colBBoxes = colIndices.map((bboxIndex) => {\r\n                endIndex = Math.max(bboxIndex, endIndex);\r\n                return bboxes[bboxIndex];\r\n            });\r\n            let columnHeight = 0;\r\n            let columnWidth = 0;\r\n            colBBoxes.forEach((bbox) => {\r\n                columnHeight += bbox.height + itemPaddingY;\r\n                columnWidth = Math.max(columnWidth, bbox.width + itemPaddingX);\r\n            });\r\n            return {\r\n                indices: colIndices,\r\n                bboxes: colBBoxes,\r\n                columnHeight: Math.ceil(columnHeight),\r\n                columnWidth: Math.ceil(columnWidth),\r\n            };\r\n        });\r\n        let pageWidth = 0;\r\n        let pageHeight = 0;\r\n        columns.forEach((column) => {\r\n            pageWidth += column.columnWidth;\r\n            pageHeight = Math.max(pageHeight, column.columnHeight);\r\n        });\r\n        maxPageWidth = Math.max(pageWidth, maxPageWidth);\r\n        maxPageHeight = Math.max(pageHeight, maxPageHeight);\r\n        return {\r\n            columns,\r\n            startIndex: indices[0][0],\r\n            endIndex,\r\n            pageWidth,\r\n            pageHeight,\r\n        };\r\n    });\r\n    return { pages, maxPageWidth, maxPageHeight };\r\n}\r\nfunction transpose(data) {\r\n    const result = [];\r\n    for (const _ of data[0]) {\r\n        result.push([]);\r\n    }\r\n    data.forEach((innerData, dataIdx) => {\r\n        innerData.forEach((item, itemIdx) => {\r\n            result[itemIdx][dataIdx] = item;\r\n        });\r\n    });\r\n    return result;\r\n}\r\nfunction estimateStartingGuess(bboxes, primary) {\r\n    const n = bboxes.length;\r\n    let primarySum = 0;\r\n    for (let bboxIndex = 0; bboxIndex < n; bboxIndex++) {\r\n        primarySum += primary.fn(bboxes[bboxIndex]) + primary.padding;\r\n        if (primarySum > primary.max) {\r\n            const ratio = n / bboxIndex;\r\n            if (ratio < 2) {\r\n                return Math.ceil(n / 2);\r\n            }\r\n            return bboxIndex;\r\n        }\r\n    }\r\n    return n;\r\n}\n\nclass Cross extends Marker {\r\n    updatePath() {\r\n        const s = this.size / 4.2;\r\n        super.applyPath(s, Cross.moves);\r\n    }\r\n}\r\nCross.className = 'Cross';\r\nCross.moves = [\r\n    { x: -1, y: 0, t: 'move' },\r\n    { x: -1, y: -1 },\r\n    { x: +1, y: -1 },\r\n    { x: +1, y: +1 },\r\n    { x: +1, y: -1 },\r\n    { x: +1, y: +1 },\r\n    { x: -1, y: +1 },\r\n    { x: +1, y: +1 },\r\n    { x: -1, y: +1 },\r\n    { x: -1, y: -1 },\r\n    { x: -1, y: +1 },\r\n    { x: -1, y: -1 },\r\n];\n\nclass Diamond extends Marker {\r\n    updatePath() {\r\n        const s = this.size / 2;\r\n        super.applyPath(s, Diamond.moves);\r\n    }\r\n}\r\nDiamond.className = 'Diamond';\r\nDiamond.moves = [\r\n    { x: 0, y: -1, t: 'move' },\r\n    { x: +1, y: +1 },\r\n    { x: -1, y: +1 },\r\n    { x: -1, y: -1 },\r\n    { x: +1, y: -1 },\r\n];\n\nclass Heart extends Marker {\r\n    rad(degree) {\r\n        return (degree / 180) * Math.PI;\r\n    }\r\n    updatePath() {\r\n        const { x, path, size, rad } = this;\r\n        const r = size / 4;\r\n        const y = this.y + r / 2;\r\n        path.clear();\r\n        path.arc(x - r, y - r, r, rad(130), rad(330));\r\n        path.arc(x + r, y - r, r, rad(220), rad(50));\r\n        path.lineTo(x, y + r);\r\n        path.closePath();\r\n    }\r\n}\r\nHeart.className = 'Heart';\n\nclass Plus extends Marker {\r\n    updatePath() {\r\n        const s = this.size / 3;\r\n        super.applyPath(s, Plus.moves);\r\n    }\r\n}\r\nPlus.className = 'Plus';\r\nPlus.moves = [\r\n    { x: -0.5, y: -0.5, t: 'move' },\r\n    { x: 0, y: -1 },\r\n    { x: +1, y: 0 },\r\n    { x: 0, y: +1 },\r\n    { x: +1, y: 0 },\r\n    { x: 0, y: +1 },\r\n    { x: -1, y: 0 },\r\n    { x: 0, y: +1 },\r\n    { x: -1, y: 0 },\r\n    { x: 0, y: -1 },\r\n    { x: -1, y: 0 },\r\n    { x: 0, y: -1 },\r\n];\n\nclass Square extends Marker {\r\n    updatePath() {\r\n        const { path, x, y } = this;\r\n        const hs = this.size / 2;\r\n        path.clear();\r\n        path.moveTo(this.align(x - hs), this.align(y - hs));\r\n        path.lineTo(this.align(x + hs), this.align(y - hs));\r\n        path.lineTo(this.align(x + hs), this.align(y + hs));\r\n        path.lineTo(this.align(x - hs), this.align(y + hs));\r\n        path.closePath();\r\n    }\r\n}\r\nSquare.className = 'Square';\n\nclass Triangle extends Marker {\r\n    updatePath() {\r\n        const s = this.size * 1.1;\r\n        super.applyPath(s, Triangle.moves);\r\n    }\r\n}\r\nTriangle.className = 'Triangle';\r\nTriangle.moves = [\r\n    { x: 0, y: -0.48, t: 'move' },\r\n    { x: 0.5, y: 0.87 },\r\n    { x: -1, y: 0 },\r\n];\n\nconst MARKER_SHAPES = {\r\n    circle: Circle,\r\n    cross: Cross,\r\n    diamond: Diamond,\r\n    heart: Heart,\r\n    plus: Plus,\r\n    square: Square,\r\n    triangle: Triangle,\r\n};\r\nconst MARKER_SUPPORTED_SHAPES = Object.keys(MARKER_SHAPES);\r\nfunction isMarkerShape(shape) {\r\n    return MARKER_SUPPORTED_SHAPES.includes(shape);\r\n}\r\n// This function is in its own file because putting it into SeriesMarker makes the Legend\r\n// suddenly aware of the series (it's an agnostic component), and putting it into Marker\r\n// introduces circular dependencies.\r\nfunction getMarker(shape = Square) {\r\n    if (isMarkerShape(shape)) {\r\n        return MARKER_SHAPES[shape];\r\n    }\r\n    if (typeof shape === 'function') {\r\n        return shape;\r\n    }\r\n    return Square;\r\n}\n\nclass MarkerLabel extends Group {\r\n    constructor() {\r\n        super({ name: 'markerLabelGroup' });\r\n        this.label = new Text();\r\n        this._marker = new Square();\r\n        this._markerSize = 15;\r\n        this._spacing = 8;\r\n        const label = this.label;\r\n        label.textBaseline = 'middle';\r\n        label.fontSize = 12;\r\n        label.fontFamily = 'Verdana, sans-serif';\r\n        label.fill = 'black';\r\n        // For better looking vertical alignment of labels to markers.\r\n        label.y = HdpiCanvas.has.textMetrics ? 1 : 0;\r\n        this.append([this.marker, label]);\r\n        this.update();\r\n    }\r\n    set marker(value) {\r\n        if (this._marker !== value) {\r\n            this.removeChild(this._marker);\r\n            this._marker = value;\r\n            this.appendChild(value);\r\n            this.update();\r\n        }\r\n    }\r\n    get marker() {\r\n        return this._marker;\r\n    }\r\n    set markerSize(value) {\r\n        if (this._markerSize !== value) {\r\n            this._markerSize = value;\r\n            this.update();\r\n        }\r\n    }\r\n    get markerSize() {\r\n        return this._markerSize;\r\n    }\r\n    set spacing(value) {\r\n        if (this._spacing !== value) {\r\n            this._spacing = value;\r\n            this.update();\r\n        }\r\n    }\r\n    get spacing() {\r\n        return this._spacing;\r\n    }\r\n    update() {\r\n        const marker = this.marker;\r\n        const markerSize = this.markerSize;\r\n        marker.size = markerSize;\r\n        this.label.x = markerSize / 2 + this.spacing;\r\n    }\r\n    render(renderCtx) {\r\n        // Cannot override field Group.opacity with get/set pair, so\r\n        // propagate opacity changes here.\r\n        this.marker.opacity = this.opacity;\r\n        this.label.opacity = this.opacity;\r\n        super.render(renderCtx);\r\n    }\r\n}\r\nMarkerLabel.className = 'MarkerLabel';\r\n__decorate([\r\n    ProxyPropertyOnWrite('label'),\r\n    __metadata(\"design:type\", String)\r\n], MarkerLabel.prototype, \"text\", void 0);\r\n__decorate([\r\n    ProxyPropertyOnWrite('label'),\r\n    __metadata(\"design:type\", String)\r\n], MarkerLabel.prototype, \"fontStyle\", void 0);\r\n__decorate([\r\n    ProxyPropertyOnWrite('label'),\r\n    __metadata(\"design:type\", String)\r\n], MarkerLabel.prototype, \"fontWeight\", void 0);\r\n__decorate([\r\n    ProxyPropertyOnWrite('label'),\r\n    __metadata(\"design:type\", Number)\r\n], MarkerLabel.prototype, \"fontSize\", void 0);\r\n__decorate([\r\n    ProxyPropertyOnWrite('label'),\r\n    __metadata(\"design:type\", String)\r\n], MarkerLabel.prototype, \"fontFamily\", void 0);\r\n__decorate([\r\n    ProxyPropertyOnWrite('label', 'fill'),\r\n    __metadata(\"design:type\", String)\r\n], MarkerLabel.prototype, \"color\", void 0);\r\n__decorate([\r\n    ProxyPropertyOnWrite('marker', 'fill'),\r\n    __metadata(\"design:type\", String)\r\n], MarkerLabel.prototype, \"markerFill\", void 0);\r\n__decorate([\r\n    ProxyPropertyOnWrite('marker', 'stroke'),\r\n    __metadata(\"design:type\", String)\r\n], MarkerLabel.prototype, \"markerStroke\", void 0);\r\n__decorate([\r\n    ProxyPropertyOnWrite('marker', 'strokeWidth'),\r\n    __metadata(\"design:type\", Number)\r\n], MarkerLabel.prototype, \"markerStrokeWidth\", void 0);\r\n__decorate([\r\n    ProxyPropertyOnWrite('marker', 'fillOpacity'),\r\n    __metadata(\"design:type\", Number)\r\n], MarkerLabel.prototype, \"markerFillOpacity\", void 0);\r\n__decorate([\r\n    ProxyPropertyOnWrite('marker', 'strokeOpacity'),\r\n    __metadata(\"design:type\", Number)\r\n], MarkerLabel.prototype, \"markerStrokeOpacity\", void 0);\n\nclass PaginationLabel {\r\n    constructor() {\r\n        this.color = 'black';\r\n        this.fontStyle = undefined;\r\n        this.fontWeight = undefined;\r\n        this.fontSize = 12;\r\n        this.fontFamily = 'Verdana, sans-serif';\r\n    }\r\n}\r\n__decorate([\r\n    Validate(COLOR_STRING),\r\n    __metadata(\"design:type\", String)\r\n], PaginationLabel.prototype, \"color\", void 0);\r\n__decorate([\r\n    Validate(OPT_FONT_STYLE),\r\n    __metadata(\"design:type\", String)\r\n], PaginationLabel.prototype, \"fontStyle\", void 0);\r\n__decorate([\r\n    Validate(OPT_FONT_WEIGHT),\r\n    __metadata(\"design:type\", String)\r\n], PaginationLabel.prototype, \"fontWeight\", void 0);\r\n__decorate([\r\n    Validate(NUMBER$1(0)),\r\n    __metadata(\"design:type\", Number)\r\n], PaginationLabel.prototype, \"fontSize\", void 0);\r\n__decorate([\r\n    Validate(STRING),\r\n    __metadata(\"design:type\", String)\r\n], PaginationLabel.prototype, \"fontFamily\", void 0);\r\nclass PaginationMarkerStyle {\r\n    constructor() {\r\n        this.size = 15;\r\n        this.fill = undefined;\r\n        this.fillOpacity = undefined;\r\n        this.stroke = undefined;\r\n        this.strokeWidth = 1;\r\n        this.strokeOpacity = 1;\r\n    }\r\n}\r\n__decorate([\r\n    Validate(NUMBER$1(0)),\r\n    __metadata(\"design:type\", Object)\r\n], PaginationMarkerStyle.prototype, \"size\", void 0);\r\n__decorate([\r\n    Validate(OPT_COLOR_STRING),\r\n    __metadata(\"design:type\", String)\r\n], PaginationMarkerStyle.prototype, \"fill\", void 0);\r\n__decorate([\r\n    Validate(OPT_NUMBER(0, 1)),\r\n    __metadata(\"design:type\", Number)\r\n], PaginationMarkerStyle.prototype, \"fillOpacity\", void 0);\r\n__decorate([\r\n    Validate(OPT_COLOR_STRING),\r\n    __metadata(\"design:type\", String)\r\n], PaginationMarkerStyle.prototype, \"stroke\", void 0);\r\n__decorate([\r\n    Validate(NUMBER$1(0)),\r\n    __metadata(\"design:type\", Number)\r\n], PaginationMarkerStyle.prototype, \"strokeWidth\", void 0);\r\n__decorate([\r\n    Validate(NUMBER$1(0, 1)),\r\n    __metadata(\"design:type\", Number)\r\n], PaginationMarkerStyle.prototype, \"strokeOpacity\", void 0);\r\nclass PaginationMarker {\r\n    constructor(parent) {\r\n        this.parent = parent;\r\n        this.shape = Triangle;\r\n        this.size = 15;\r\n        /**\r\n         * Inner padding between a pagination button and the label.\r\n         */\r\n        this.padding = 8;\r\n    }\r\n}\r\n__decorate([\r\n    ActionOnSet({\r\n        changeValue() {\r\n            if (this.parent.marker === this) {\r\n                this.parent.onMarkerShapeChange();\r\n            }\r\n        },\r\n    }),\r\n    __metadata(\"design:type\", Object)\r\n], PaginationMarker.prototype, \"shape\", void 0);\r\n__decorate([\r\n    Validate(NUMBER$1(0)),\r\n    __metadata(\"design:type\", Object)\r\n], PaginationMarker.prototype, \"size\", void 0);\r\n__decorate([\r\n    Validate(NUMBER$1(0)),\r\n    __metadata(\"design:type\", Number)\r\n], PaginationMarker.prototype, \"padding\", void 0);\r\nclass Pagination {\r\n    constructor(chartUpdateCallback, pageUpdateCallback, interactionManager, cursorManager) {\r\n        this.chartUpdateCallback = chartUpdateCallback;\r\n        this.pageUpdateCallback = pageUpdateCallback;\r\n        this.interactionManager = interactionManager;\r\n        this.cursorManager = cursorManager;\r\n        this.id = createId(this);\r\n        this.group = new Group({ name: 'pagination' });\r\n        this.labelNode = new Text();\r\n        this.marker = new PaginationMarker(this);\r\n        this.activeStyle = new PaginationMarkerStyle();\r\n        this.inactiveStyle = new PaginationMarkerStyle();\r\n        this.highlightStyle = new PaginationMarkerStyle();\r\n        this.label = new PaginationLabel();\r\n        this.totalPages = 0;\r\n        this.currentPage = 0;\r\n        this.translationX = 0;\r\n        this.translationY = 0;\r\n        this.nextButtonDisabled = false;\r\n        this.previousButtonDisabled = false;\r\n        this._visible = true;\r\n        this._enabled = true;\r\n        this._orientation = 'vertical';\r\n        this._nextButton = new Triangle();\r\n        this._previousButton = new Triangle();\r\n        const { labelNode } = this;\r\n        labelNode.textBaseline = 'middle';\r\n        labelNode.fontSize = 12;\r\n        labelNode.fontFamily = 'Verdana, sans-serif';\r\n        labelNode.fill = 'black';\r\n        labelNode.y = HdpiCanvas.has.textMetrics ? 1 : 0;\r\n        this.group.append([this.nextButton, this.previousButton, labelNode]);\r\n        this.interactionManager.addListener('click', (event) => this.onPaginationClick(event));\r\n        this.interactionManager.addListener('hover', (event) => this.onPaginationMouseMove(event));\r\n        this.update();\r\n        this.updateMarkers();\r\n    }\r\n    set visible(value) {\r\n        this._visible = value;\r\n        this.updateGroupVisibility();\r\n    }\r\n    get visible() {\r\n        return this._visible;\r\n    }\r\n    set enabled(value) {\r\n        this._enabled = value;\r\n        this.updateGroupVisibility();\r\n    }\r\n    get enabled() {\r\n        return this._enabled;\r\n    }\r\n    updateGroupVisibility() {\r\n        this.group.visible = this.enabled && this.visible;\r\n    }\r\n    set orientation(value) {\r\n        this._orientation = value;\r\n        switch (value) {\r\n            case 'horizontal': {\r\n                this.previousButton.rotation = -Math.PI / 2;\r\n                this.nextButton.rotation = Math.PI / 2;\r\n                break;\r\n            }\r\n            case 'vertical':\r\n            default: {\r\n                this.previousButton.rotation = 0;\r\n                this.nextButton.rotation = Math.PI;\r\n            }\r\n        }\r\n    }\r\n    get orientation() {\r\n        return this._orientation;\r\n    }\r\n    set nextButton(value) {\r\n        if (this._nextButton !== value) {\r\n            this.group.removeChild(this._nextButton);\r\n            this._nextButton = value;\r\n            this.group.appendChild(value);\r\n        }\r\n    }\r\n    get nextButton() {\r\n        return this._nextButton;\r\n    }\r\n    set previousButton(value) {\r\n        if (this._previousButton !== value) {\r\n            this.group.removeChild(this._previousButton);\r\n            this._previousButton = value;\r\n            this.group.appendChild(value);\r\n        }\r\n    }\r\n    get previousButton() {\r\n        return this._previousButton;\r\n    }\r\n    update() {\r\n        this.updateLabel();\r\n        this.updatePositions();\r\n        this.enableOrDisableButtons();\r\n    }\r\n    updatePositions() {\r\n        this.group.translationX = this.translationX;\r\n        this.group.translationY = this.translationY;\r\n        this.updateLabelPosition();\r\n        this.updateNextButtonPosition();\r\n    }\r\n    updateLabelPosition() {\r\n        const { size: markerSize, padding: markerPadding } = this.marker;\r\n        this.nextButton.size = markerSize;\r\n        this.previousButton.size = markerSize;\r\n        this.labelNode.x = markerSize / 2 + markerPadding;\r\n    }\r\n    updateNextButtonPosition() {\r\n        const labelBBox = this.labelNode.computeBBox();\r\n        this.nextButton.translationX = labelBBox.x + labelBBox.width + this.marker.size / 2 + this.marker.padding;\r\n    }\r\n    updateLabel() {\r\n        const { currentPage, totalPages: pages, labelNode, label: { color, fontStyle, fontWeight, fontSize, fontFamily }, } = this;\r\n        labelNode.text = `${currentPage + 1} / ${pages}`;\r\n        labelNode.fill = color;\r\n        labelNode.fontStyle = fontStyle;\r\n        labelNode.fontWeight = fontWeight;\r\n        labelNode.fontSize = fontSize;\r\n        labelNode.fontFamily = fontFamily;\r\n    }\r\n    updateMarkers() {\r\n        const { nextButton, previousButton, nextButtonDisabled, previousButtonDisabled, activeStyle, inactiveStyle, highlightStyle, highlightActive, } = this;\r\n        const buttonStyle = (button, disabled) => {\r\n            if (disabled) {\r\n                return inactiveStyle;\r\n            }\r\n            else if (button === highlightActive) {\r\n                return highlightStyle;\r\n            }\r\n            return activeStyle;\r\n        };\r\n        this.updateMarker(nextButton, buttonStyle('next', nextButtonDisabled));\r\n        this.updateMarker(previousButton, buttonStyle('previous', previousButtonDisabled));\r\n    }\r\n    updateMarker(marker, style) {\r\n        var _a;\r\n        const { size } = this.marker;\r\n        marker.size = size;\r\n        marker.fill = style.fill;\r\n        marker.fillOpacity = (_a = style.fillOpacity) !== null && _a !== void 0 ? _a : 1;\r\n        marker.stroke = style.stroke;\r\n        marker.strokeWidth = style.strokeWidth;\r\n        marker.strokeOpacity = style.strokeOpacity;\r\n    }\r\n    enableOrDisableButtons() {\r\n        const { currentPage, totalPages } = this;\r\n        const zeroPagesToDisplay = totalPages === 0;\r\n        const onLastPage = currentPage === totalPages - 1;\r\n        const onFirstPage = currentPage === 0;\r\n        this.nextButtonDisabled = onLastPage || zeroPagesToDisplay;\r\n        this.previousButtonDisabled = onFirstPage || zeroPagesToDisplay;\r\n    }\r\n    nextButtonContainsPoint(offsetX, offsetY) {\r\n        return !this.nextButtonDisabled && this.nextButton.containsPoint(offsetX, offsetY);\r\n    }\r\n    previousButtonContainsPoint(offsetX, offsetY) {\r\n        return !this.previousButtonDisabled && this.previousButton.containsPoint(offsetX, offsetY);\r\n    }\r\n    onPaginationClick(event) {\r\n        const { offsetX, offsetY } = event;\r\n        if (this.nextButtonContainsPoint(offsetX, offsetY)) {\r\n            this.incrementPage();\r\n            this.onPaginationChanged();\r\n            event.consume();\r\n        }\r\n        else if (this.previousButtonContainsPoint(offsetX, offsetY)) {\r\n            this.decrementPage();\r\n            this.onPaginationChanged();\r\n            event.consume();\r\n        }\r\n    }\r\n    onPaginationMouseMove(event) {\r\n        const { offsetX, offsetY } = event;\r\n        if (this.nextButtonContainsPoint(offsetX, offsetY)) {\r\n            this.cursorManager.updateCursor(this.id, 'pointer');\r\n            this.highlightActive = 'next';\r\n        }\r\n        else if (this.previousButtonContainsPoint(offsetX, offsetY)) {\r\n            this.cursorManager.updateCursor(this.id, 'pointer');\r\n            this.highlightActive = 'previous';\r\n        }\r\n        else {\r\n            this.cursorManager.updateCursor(this.id);\r\n            this.highlightActive = undefined;\r\n        }\r\n        this.updateMarkers();\r\n        this.chartUpdateCallback(ChartUpdateType.SCENE_RENDER);\r\n    }\r\n    onPaginationChanged() {\r\n        this.pageUpdateCallback(this.currentPage);\r\n    }\r\n    incrementPage() {\r\n        this.currentPage = Math.min(this.currentPage + 1, this.totalPages - 1);\r\n    }\r\n    decrementPage() {\r\n        this.currentPage = Math.max(this.currentPage - 1, 0);\r\n    }\r\n    onMarkerShapeChange() {\r\n        const Marker = getMarker(this.marker.shape || Triangle);\r\n        this.previousButton = new Marker();\r\n        this.nextButton = new Marker();\r\n        this.updatePositions();\r\n        this.updateMarkers();\r\n        this.chartUpdateCallback(ChartUpdateType.SCENE_RENDER);\r\n    }\r\n    attachPagination(node) {\r\n        node.append(this.group);\r\n    }\r\n    computeBBox() {\r\n        return this.group.computeBBox();\r\n    }\r\n}\r\nPagination.className = 'Pagination';\n\nconst ORIENTATIONS = ['horizontal', 'vertical'];\r\nconst OPT_ORIENTATION = predicateWithMessage((v, ctx) => OPTIONAL(v, ctx, (v) => ORIENTATIONS.includes(v)), `expecting an orientation keyword such as 'horizontal' or 'vertical'`);\r\nclass LegendLabel {\r\n    constructor() {\r\n        this.maxLength = undefined;\r\n        this.color = 'black';\r\n        this.fontStyle = undefined;\r\n        this.fontWeight = undefined;\r\n        this.fontSize = 12;\r\n        this.fontFamily = 'Verdana, sans-serif';\r\n        this.formatter = undefined;\r\n    }\r\n}\r\n__decorate([\r\n    Validate(OPT_NUMBER(0)),\r\n    __metadata(\"design:type\", Number)\r\n], LegendLabel.prototype, \"maxLength\", void 0);\r\n__decorate([\r\n    Validate(COLOR_STRING),\r\n    __metadata(\"design:type\", String)\r\n], LegendLabel.prototype, \"color\", void 0);\r\n__decorate([\r\n    Validate(OPT_FONT_STYLE),\r\n    __metadata(\"design:type\", String)\r\n], LegendLabel.prototype, \"fontStyle\", void 0);\r\n__decorate([\r\n    Validate(OPT_FONT_WEIGHT),\r\n    __metadata(\"design:type\", String)\r\n], LegendLabel.prototype, \"fontWeight\", void 0);\r\n__decorate([\r\n    Validate(NUMBER$1(0)),\r\n    __metadata(\"design:type\", Number)\r\n], LegendLabel.prototype, \"fontSize\", void 0);\r\n__decorate([\r\n    Validate(STRING),\r\n    __metadata(\"design:type\", String)\r\n], LegendLabel.prototype, \"fontFamily\", void 0);\r\n__decorate([\r\n    Validate(OPT_FUNCTION),\r\n    __metadata(\"design:type\", Function)\r\n], LegendLabel.prototype, \"formatter\", void 0);\r\nclass LegendMarker {\r\n    constructor() {\r\n        this.size = 15;\r\n        /**\r\n         * If the marker type is set, the legend will always use that marker type for all its items,\r\n         * regardless of the type that comes from the `data`.\r\n         */\r\n        this._shape = undefined;\r\n        /**\r\n         * Padding between the marker and the label within each legend item.\r\n         */\r\n        this.padding = 8;\r\n        this.strokeWidth = undefined;\r\n    }\r\n    set shape(value) {\r\n        var _a;\r\n        this._shape = value;\r\n        (_a = this.parent) === null || _a === void 0 ? void 0 : _a.onMarkerShapeChange();\r\n    }\r\n    get shape() {\r\n        return this._shape;\r\n    }\r\n}\r\n__decorate([\r\n    Validate(NUMBER$1(0)),\r\n    __metadata(\"design:type\", Object)\r\n], LegendMarker.prototype, \"size\", void 0);\r\n__decorate([\r\n    Validate(NUMBER$1(0)),\r\n    __metadata(\"design:type\", Number)\r\n], LegendMarker.prototype, \"padding\", void 0);\r\n__decorate([\r\n    Validate(OPT_NUMBER(0)),\r\n    __metadata(\"design:type\", Object)\r\n], LegendMarker.prototype, \"strokeWidth\", void 0);\r\nclass LegendItem {\r\n    constructor() {\r\n        this.marker = new LegendMarker();\r\n        this.label = new LegendLabel();\r\n        /** Used to constrain the width of legend items. */\r\n        this.maxWidth = undefined;\r\n        /**\r\n         * The legend uses grid layout for its items, occupying as few columns as possible when positioned to left or right,\r\n         * and as few rows as possible when positioned to top or bottom. This config specifies the amount of horizontal\r\n         * padding between legend items.\r\n         */\r\n        this.paddingX = 16;\r\n        /**\r\n         * The legend uses grid layout for its items, occupying as few columns as possible when positioned to left or right,\r\n         * and as few rows as possible when positioned to top or bottom. This config specifies the amount of vertical\r\n         * padding between legend items.\r\n         */\r\n        this.paddingY = 8;\r\n        this.toggleSeriesVisible = true;\r\n    }\r\n}\r\n__decorate([\r\n    Validate(OPT_NUMBER(0)),\r\n    __metadata(\"design:type\", Number)\r\n], LegendItem.prototype, \"maxWidth\", void 0);\r\n__decorate([\r\n    Validate(NUMBER$1(0)),\r\n    __metadata(\"design:type\", Object)\r\n], LegendItem.prototype, \"paddingX\", void 0);\r\n__decorate([\r\n    Validate(NUMBER$1(0)),\r\n    __metadata(\"design:type\", Object)\r\n], LegendItem.prototype, \"paddingY\", void 0);\r\n__decorate([\r\n    Validate(BOOLEAN),\r\n    __metadata(\"design:type\", Boolean)\r\n], LegendItem.prototype, \"toggleSeriesVisible\", void 0);\r\nclass LegendListeners {\r\n    constructor() {\r\n        this.legendItemClick = undefined;\r\n        this.legendItemDoubleClick = undefined;\r\n    }\r\n}\r\n__decorate([\r\n    Validate(OPT_FUNCTION),\r\n    __metadata(\"design:type\", Function)\r\n], LegendListeners.prototype, \"legendItemClick\", void 0);\r\nclass Legend {\r\n    set data(value) {\r\n        this._data = value;\r\n        this.updateGroupVisibility();\r\n    }\r\n    get data() {\r\n        return this._data;\r\n    }\r\n    set enabled(value) {\r\n        this._enabled = value;\r\n        this.updateGroupVisibility();\r\n    }\r\n    get enabled() {\r\n        return this._enabled;\r\n    }\r\n    getOrientation() {\r\n        if (this.orientation !== undefined) {\r\n            return this.orientation;\r\n        }\r\n        switch (this.position) {\r\n            case 'right':\r\n            case 'left':\r\n                return 'vertical';\r\n            case 'bottom':\r\n            case 'top':\r\n                return 'horizontal';\r\n        }\r\n    }\r\n    constructor(ctx) {\r\n        this.ctx = ctx;\r\n        this.id = createId(this);\r\n        this.group = new Group({ name: 'legend', layer: true, zIndex: Layers.LEGEND_ZINDEX });\r\n        this.itemSelection = Selection.select(this.group, MarkerLabel);\r\n        this.oldSize = [0, 0];\r\n        this.pages = [];\r\n        this.maxPageSize = [0, 0];\r\n        /** Item index to track on re-pagination, so current page updates appropriately. */\r\n        this.paginationTrackingIndex = 0;\r\n        this.item = new LegendItem();\r\n        this.listeners = new LegendListeners();\r\n        this.truncatedItems = new Set();\r\n        this._data = [];\r\n        this._enabled = true;\r\n        this.position = 'bottom';\r\n        /** Used to constrain the width of the legend. */\r\n        this.maxWidth = undefined;\r\n        /** Used to constrain the height of the legend. */\r\n        this.maxHeight = undefined;\r\n        /** Reverse the display order of legend items if `true`. */\r\n        this.reverseOrder = undefined;\r\n        this.destroyFns = [];\r\n        /**\r\n         * Spacing between the legend and the edge of the chart's element.\r\n         */\r\n        this.spacing = 20;\r\n        this.characterWidths = new Map();\r\n        this.size = [0, 0];\r\n        this._visible = true;\r\n        this.item.marker.parent = this;\r\n        this.pagination = new Pagination((type) => ctx.updateService.update(type), (page) => this.updatePageNumber(page), ctx.interactionManager, ctx.cursorManager);\r\n        this.pagination.attachPagination(this.group);\r\n        this.item.marker.parent = this;\r\n        const bypass = { bypassPause: ['animation'] };\r\n        this.destroyFns.push(ctx.interactionManager.addListener('click', (e) => this.checkLegendClick(e), bypass), ctx.interactionManager.addListener('dblclick', (e) => this.checkLegendDoubleClick(e), bypass), ctx.interactionManager.addListener('hover', (e) => this.handleLegendMouseMove(e)), ctx.layoutService.addListener('start-layout', (e) => this.positionLegend(e.shrinkRect)), () => this.detachLegend());\r\n    }\r\n    destroy() {\r\n        this.destroyFns.forEach((f) => f());\r\n    }\r\n    onMarkerShapeChange() {\r\n        this.itemSelection.clear();\r\n        this.group.markDirty(this.group, RedrawType.MINOR);\r\n    }\r\n    getCharacterWidths(font) {\r\n        const { characterWidths } = this;\r\n        if (characterWidths.has(font)) {\r\n            return characterWidths.get(font);\r\n        }\r\n        const cw = {\r\n            '...': HdpiCanvas.getTextSize('...', font).width,\r\n        };\r\n        characterWidths.set(font, cw);\r\n        return cw;\r\n    }\r\n    set visible(value) {\r\n        this._visible = value;\r\n        this.updateGroupVisibility();\r\n    }\r\n    get visible() {\r\n        return this._visible;\r\n    }\r\n    updateGroupVisibility() {\r\n        this.group.visible = this.enabled && this.visible && this.data.length > 0;\r\n    }\r\n    attachLegend(node) {\r\n        node.append(this.group);\r\n    }\r\n    detachLegend() {\r\n        var _a;\r\n        (_a = this.group.parent) === null || _a === void 0 ? void 0 : _a.removeChild(this.group);\r\n    }\r\n    getItemLabel(datum) {\r\n        const { ctx: { callbackCache }, } = this;\r\n        const { formatter } = this.item.label;\r\n        if (formatter) {\r\n            return callbackCache.call(formatter, {\r\n                itemId: datum.itemId,\r\n                value: datum.label.text,\r\n                seriesId: datum.seriesId,\r\n            });\r\n        }\r\n        return datum.label.text;\r\n    }\r\n    /**\r\n     * The method is given the desired size of the legend, which only serves as a hint.\r\n     * The vertically oriented legend will take as much horizontal space as needed, but will\r\n     * respect the height constraints, and the horizontal legend will take as much vertical\r\n     * space as needed in an attempt not to exceed the given width.\r\n     * After the layout is done, the {@link size} will contain the actual size of the legend.\r\n     * If the actual size is not the same as the previous actual size, the legend will fire\r\n     * the 'layoutChange' event to communicate that another layout is needed, and the above\r\n     * process should be repeated.\r\n     * @param width\r\n     * @param height\r\n     */\r\n    performLayout(width, height) {\r\n        const { paddingX, paddingY, label, maxWidth, marker: { size: markerSize, padding: markerPadding, shape: markerShape }, label: { maxLength = Infinity, fontStyle, fontWeight, fontSize, fontFamily }, } = this.item;\r\n        const data = [...this.data];\r\n        if (this.reverseOrder) {\r\n            data.reverse();\r\n        }\r\n        this.itemSelection.update(data);\r\n        // Update properties that affect the size of the legend items and measure them.\r\n        const bboxes = [];\r\n        const font = getFont(label);\r\n        const itemMaxWidthPercentage = 0.8;\r\n        const maxItemWidth = maxWidth !== null && maxWidth !== void 0 ? maxWidth : width * itemMaxWidthPercentage;\r\n        const paddedMarkerWidth = markerSize + markerPadding + paddingX;\r\n        this.itemSelection.each((markerLabel, datum) => {\r\n            var _a;\r\n            const Marker = getMarker(markerShape !== null && markerShape !== void 0 ? markerShape : datum.marker.shape);\r\n            if (!(markerLabel.marker && markerLabel.marker instanceof Marker)) {\r\n                markerLabel.marker = new Marker();\r\n            }\r\n            markerLabel.markerSize = markerSize;\r\n            markerLabel.spacing = markerPadding;\r\n            markerLabel.fontStyle = fontStyle;\r\n            markerLabel.fontWeight = fontWeight;\r\n            markerLabel.fontSize = fontSize;\r\n            markerLabel.fontFamily = fontFamily;\r\n            const id = (_a = datum.itemId) !== null && _a !== void 0 ? _a : datum.id;\r\n            const labelText = this.getItemLabel(datum);\r\n            const text = (labelText !== null && labelText !== void 0 ? labelText : '<unknown>').replace(/\\r?\\n/g, ' ');\r\n            markerLabel.text = this.truncate(text, maxLength, maxItemWidth, paddedMarkerWidth, font, id);\r\n            bboxes.push(markerLabel.computeBBox());\r\n        });\r\n        width = Math.max(1, width);\r\n        height = Math.max(1, height);\r\n        if (!isFinite(width)) {\r\n            return false;\r\n        }\r\n        const size = this.size;\r\n        const oldSize = this.oldSize;\r\n        size[0] = width;\r\n        size[1] = height;\r\n        if (size[0] !== oldSize[0] || size[1] !== oldSize[1]) {\r\n            oldSize[0] = size[0];\r\n            oldSize[1] = size[1];\r\n        }\r\n        const { pages, maxPageHeight, maxPageWidth } = this.updatePagination(bboxes, width, height);\r\n        this.pages = pages;\r\n        this.maxPageSize = [maxPageWidth - paddingX, maxPageHeight - paddingY];\r\n        const pageNumber = this.pagination.currentPage;\r\n        const page = this.pages[pageNumber];\r\n        if (this.pages.length < 1 || !page) {\r\n            this.visible = false;\r\n            return;\r\n        }\r\n        this.visible = true;\r\n        // Position legend items\r\n        this.updatePositions(pageNumber);\r\n        // Update legend item properties that don't affect the layout.\r\n        this.update();\r\n    }\r\n    truncate(text, maxCharLength, maxItemWidth, paddedMarkerWidth, font, id) {\r\n        const ellipsis = `...`;\r\n        const textChars = text.split('');\r\n        let addEllipsis = false;\r\n        if (text.length > maxCharLength) {\r\n            text = `${text.substring(0, maxCharLength)}`;\r\n            addEllipsis = true;\r\n        }\r\n        const labelWidth = Math.floor(paddedMarkerWidth + HdpiCanvas.getTextSize(text, font).width);\r\n        if (labelWidth > maxItemWidth) {\r\n            let truncatedText = '';\r\n            const characterWidths = this.getCharacterWidths(font);\r\n            let cumulativeWidth = paddedMarkerWidth + characterWidths[ellipsis];\r\n            for (const char of textChars) {\r\n                if (!characterWidths[char]) {\r\n                    characterWidths[char] = HdpiCanvas.getTextSize(char, font).width;\r\n                }\r\n                cumulativeWidth += characterWidths[char];\r\n                if (cumulativeWidth > maxItemWidth) {\r\n                    break;\r\n                }\r\n                truncatedText += char;\r\n            }\r\n            text = truncatedText;\r\n            addEllipsis = true;\r\n        }\r\n        if (addEllipsis) {\r\n            text += ellipsis;\r\n            this.truncatedItems.add(id);\r\n        }\r\n        else {\r\n            this.truncatedItems.delete(id);\r\n        }\r\n        return text;\r\n    }\r\n    updatePagination(bboxes, width, height) {\r\n        const orientation = this.getOrientation();\r\n        const trackingIndex = Math.min(this.paginationTrackingIndex, bboxes.length);\r\n        this.pagination.orientation = orientation;\r\n        this.pagination.translationX = 0;\r\n        this.pagination.translationY = 0;\r\n        const { pages, maxPageHeight, maxPageWidth, paginationBBox, paginationVertical } = this.calculatePagination(bboxes, width, height);\r\n        const newCurrentPage = pages.findIndex((p) => p.endIndex >= trackingIndex);\r\n        this.pagination.currentPage = Math.min(Math.max(newCurrentPage, 0), pages.length - 1);\r\n        const { paddingX: itemPaddingX, paddingY: itemPaddingY } = this.item;\r\n        const paginationComponentPadding = 8;\r\n        const legendItemsWidth = maxPageWidth - itemPaddingX;\r\n        const legendItemsHeight = maxPageHeight - itemPaddingY;\r\n        let paginationX = 0;\r\n        let paginationY = -paginationBBox.y - this.item.marker.size / 2;\r\n        if (paginationVertical) {\r\n            paginationY += legendItemsHeight + paginationComponentPadding;\r\n        }\r\n        else {\r\n            paginationX += -paginationBBox.x + legendItemsWidth + paginationComponentPadding;\r\n            paginationY += (legendItemsHeight - paginationBBox.height) / 2;\r\n        }\r\n        this.pagination.translationX = paginationX;\r\n        this.pagination.translationY = paginationY;\r\n        this.pagination.update();\r\n        this.pagination.updateMarkers();\r\n        return {\r\n            maxPageHeight,\r\n            maxPageWidth,\r\n            pages,\r\n        };\r\n    }\r\n    calculatePagination(bboxes, width, height) {\r\n        var _a, _b, _c;\r\n        const { paddingX: itemPaddingX, paddingY: itemPaddingY } = this.item;\r\n        const orientation = this.getOrientation();\r\n        const paginationVertical = ['left', 'right'].includes(this.position);\r\n        let paginationBBox = this.pagination.computeBBox();\r\n        let lastPassPaginationBBox = new BBox(0, 0, 0, 0);\r\n        let pages = [];\r\n        let maxPageWidth = 0;\r\n        let maxPageHeight = 0;\r\n        let count = 0;\r\n        const stableOutput = (lastPassPaginationBBox) => {\r\n            const { width, height } = lastPassPaginationBBox;\r\n            return width === paginationBBox.width && height === paginationBBox.height;\r\n        };\r\n        const forceResult = this.maxWidth !== undefined || this.maxHeight !== undefined;\r\n        do {\r\n            if (count++ > 10) {\r\n                Logger.warn('unable to find stable legend layout.');\r\n                break;\r\n            }\r\n            paginationBBox = lastPassPaginationBBox;\r\n            const maxWidth = width - (paginationVertical ? 0 : paginationBBox.width);\r\n            const maxHeight = height - (paginationVertical ? paginationBBox.height : 0);\r\n            const layout = gridLayout({\r\n                orientation,\r\n                bboxes,\r\n                maxHeight,\r\n                maxWidth,\r\n                itemPaddingY,\r\n                itemPaddingX,\r\n                forceResult,\r\n            });\r\n            pages = (_a = layout === null || layout === void 0 ? void 0 : layout.pages) !== null && _a !== void 0 ? _a : [];\r\n            maxPageWidth = (_b = layout === null || layout === void 0 ? void 0 : layout.maxPageWidth) !== null && _b !== void 0 ? _b : 0;\r\n            maxPageHeight = (_c = layout === null || layout === void 0 ? void 0 : layout.maxPageHeight) !== null && _c !== void 0 ? _c : 0;\r\n            const totalPages = pages.length;\r\n            this.pagination.visible = totalPages > 1;\r\n            this.pagination.totalPages = totalPages;\r\n            this.pagination.update();\r\n            lastPassPaginationBBox = this.pagination.computeBBox();\r\n            if (!this.pagination.visible) {\r\n                break;\r\n            }\r\n        } while (!stableOutput(lastPassPaginationBBox));\r\n        return { maxPageWidth, maxPageHeight, pages, paginationBBox, paginationVertical };\r\n    }\r\n    updatePositions(pageNumber = 0) {\r\n        const { item: { paddingY }, itemSelection, pages, } = this;\r\n        if (pages.length < 1 || !pages[pageNumber]) {\r\n            return;\r\n        }\r\n        const { columns, startIndex: visibleStart, endIndex: visibleEnd } = pages[pageNumber];\r\n        // Position legend items using the layout computed above.\r\n        let x = 0;\r\n        let y = 0;\r\n        const columnCount = columns.length;\r\n        const rowCount = columns[0].indices.length;\r\n        const horizontal = this.getOrientation() === 'horizontal';\r\n        const itemHeight = columns[0].bboxes[0].height + paddingY;\r\n        const rowSumColumnWidths = [];\r\n        itemSelection.each((markerLabel, _, i) => {\r\n            var _a, _b;\r\n            if (i < visibleStart || i > visibleEnd) {\r\n                markerLabel.visible = false;\r\n                return;\r\n            }\r\n            const pageIndex = i - visibleStart;\r\n            let columnIndex = 0;\r\n            let rowIndex = 0;\r\n            if (horizontal) {\r\n                columnIndex = pageIndex % columnCount;\r\n                rowIndex = Math.floor(pageIndex / columnCount);\r\n            }\r\n            else {\r\n                columnIndex = Math.floor(pageIndex / rowCount);\r\n                rowIndex = pageIndex % rowCount;\r\n            }\r\n            markerLabel.visible = true;\r\n            const column = columns[columnIndex];\r\n            if (!column) {\r\n                return;\r\n            }\r\n            y = itemHeight * rowIndex;\r\n            x = (_a = rowSumColumnWidths[rowIndex]) !== null && _a !== void 0 ? _a : 0;\r\n            rowSumColumnWidths[rowIndex] = ((_b = rowSumColumnWidths[rowIndex]) !== null && _b !== void 0 ? _b : 0) + column.columnWidth;\r\n            // Round off for pixel grid alignment to work properly.\r\n            markerLabel.translationX = Math.floor(x);\r\n            markerLabel.translationY = Math.floor(y);\r\n        });\r\n    }\r\n    updatePageNumber(pageNumber) {\r\n        const { pages } = this;\r\n        // Track an item on the page in re-pagination cases (e.g. resize).\r\n        const { startIndex, endIndex } = pages[pageNumber];\r\n        if (startIndex === 0) {\r\n            // Stay on first page on pagination update.\r\n            this.paginationTrackingIndex = 0;\r\n        }\r\n        else if (pageNumber === pages.length - 1) {\r\n            // Stay on last page on pagination update.\r\n            this.paginationTrackingIndex = endIndex;\r\n        }\r\n        else {\r\n            // Track the middle item on the page).\r\n            this.paginationTrackingIndex = Math.floor((startIndex + endIndex) / 2);\r\n        }\r\n        this.pagination.update();\r\n        this.pagination.updateMarkers();\r\n        this.updatePositions(pageNumber);\r\n        this.ctx.updateService.update(ChartUpdateType.SCENE_RENDER);\r\n    }\r\n    update() {\r\n        const { label: { color }, marker: itemMarker, } = this.item;\r\n        this.itemSelection.each((markerLabel, datum) => {\r\n            var _a;\r\n            const marker = datum.marker;\r\n            markerLabel.markerFill = marker.fill;\r\n            markerLabel.markerStroke = marker.stroke;\r\n            markerLabel.markerStrokeWidth = (_a = itemMarker.strokeWidth) !== null && _a !== void 0 ? _a : Math.min(2, marker.strokeWidth);\r\n            markerLabel.markerFillOpacity = marker.fillOpacity;\r\n            markerLabel.markerStrokeOpacity = marker.strokeOpacity;\r\n            markerLabel.opacity = datum.enabled ? 1 : 0.5;\r\n            markerLabel.color = color;\r\n        });\r\n    }\r\n    getDatumForPoint(x, y) {\r\n        const visibleChildBBoxes = [];\r\n        const closestLeftTop = { dist: Infinity, datum: undefined };\r\n        for (const child of this.group.children) {\r\n            if (!child.visible)\r\n                continue;\r\n            if (!(child instanceof MarkerLabel))\r\n                continue;\r\n            const childBBox = child.computeBBox();\r\n            childBBox.grow(this.item.paddingX / 2, 'horizontal');\r\n            childBBox.grow(this.item.paddingY / 2, 'vertical');\r\n            if (childBBox.containsPoint(x, y)) {\r\n                return child.datum;\r\n            }\r\n            const distX = x - childBBox.x - this.item.paddingX / 2;\r\n            const distY = y - childBBox.y - this.item.paddingY / 2;\r\n            const dist = Math.pow(distX, 2) + Math.pow(distY, 2);\r\n            const toTheLeftTop = distX >= 0 && distY >= 0;\r\n            if (toTheLeftTop && dist < closestLeftTop.dist) {\r\n                closestLeftTop.dist = dist;\r\n                closestLeftTop.datum = child.datum;\r\n            }\r\n            visibleChildBBoxes.push(childBBox);\r\n        }\r\n        const pageBBox = BBox.merge(visibleChildBBoxes);\r\n        if (!pageBBox.containsPoint(x, y)) {\r\n            // We're not in-between legend items.\r\n            return undefined;\r\n        }\r\n        // Fallback to returning closest match to the left/up.\r\n        return closestLeftTop.datum;\r\n    }\r\n    computeBBox() {\r\n        return this.group.computeBBox();\r\n    }\r\n    computePagedBBox() {\r\n        const actualBBox = this.group.computeBBox();\r\n        if (this.pages.length <= 1) {\r\n            return actualBBox;\r\n        }\r\n        const [maxPageWidth, maxPageHeight] = this.maxPageSize;\r\n        actualBBox.height = Math.max(maxPageHeight, actualBBox.height);\r\n        actualBBox.width = Math.max(maxPageWidth, actualBBox.width);\r\n        return actualBBox;\r\n    }\r\n    checkLegendClick(event) {\r\n        const { listeners: { legendItemClick }, ctx: { dataService, highlightManager }, item: { toggleSeriesVisible }, } = this;\r\n        const { offsetX, offsetY } = event;\r\n        const legendBBox = this.computeBBox();\r\n        const pointerInsideLegend = this.group.visible && legendBBox.containsPoint(offsetX, offsetY);\r\n        const datum = this.getDatumForPoint(offsetX, offsetY);\r\n        if (!pointerInsideLegend || !datum) {\r\n            return;\r\n        }\r\n        const { id, itemId, enabled } = datum;\r\n        const chartSeries = dataService.getSeries();\r\n        const series = chartSeries.find((s) => s.id === id);\r\n        if (!series) {\r\n            return;\r\n        }\r\n        event.consume();\r\n        let newEnabled = enabled;\r\n        if (toggleSeriesVisible) {\r\n            newEnabled = !enabled;\r\n            this.ctx.chartEventManager.legendItemClick(series, itemId, newEnabled, datum.legendItemName);\r\n        }\r\n        if (!newEnabled) {\r\n            highlightManager.updateHighlight(this.id);\r\n        }\r\n        else {\r\n            highlightManager.updateHighlight(this.id, {\r\n                series,\r\n                itemId,\r\n                datum: undefined,\r\n            });\r\n        }\r\n        this.ctx.updateService.update(ChartUpdateType.PROCESS_DATA, { forceNodeDataRefresh: true });\r\n        legendItemClick === null || legendItemClick === void 0 ? void 0 : legendItemClick({ type: 'click', enabled: newEnabled, itemId, seriesId: series.id });\r\n    }\r\n    checkLegendDoubleClick(event) {\r\n        var _a;\r\n        const { listeners: { legendItemDoubleClick }, ctx: { dataService }, item: { toggleSeriesVisible }, } = this;\r\n        const { offsetX, offsetY } = event;\r\n        // Integrated charts do not handle double click behaviour correctly due to multiple instances of the\r\n        // chart being created. See https://ag-grid.atlassian.net/browse/RTI-1381\r\n        if (this.ctx.mode === 'integrated') {\r\n            return;\r\n        }\r\n        const legendBBox = this.computeBBox();\r\n        const pointerInsideLegend = this.group.visible && legendBBox.containsPoint(offsetX, offsetY);\r\n        const datum = this.getDatumForPoint(offsetX, offsetY);\r\n        if (!pointerInsideLegend || !datum) {\r\n            return;\r\n        }\r\n        const { id, itemId, seriesId } = datum;\r\n        const chartSeries = dataService.getSeries();\r\n        const series = chartSeries.find((s) => s.id === id);\r\n        if (!series) {\r\n            return;\r\n        }\r\n        event.consume();\r\n        if (toggleSeriesVisible) {\r\n            const numVisibleItems = {};\r\n            const legendData = chartSeries.flatMap((series) => series.getLegendData('category'));\r\n            legendData.forEach((d) => {\r\n                var _a;\r\n                var _b;\r\n                (_a = numVisibleItems[_b = d.seriesId]) !== null && _a !== void 0 ? _a : (numVisibleItems[_b] = 0);\r\n                if (d.enabled) {\r\n                    numVisibleItems[d.seriesId]++;\r\n                }\r\n            });\r\n            const clickedItem = legendData.find((d) => d.itemId === itemId && d.seriesId === seriesId);\r\n            this.ctx.chartEventManager.legendItemDoubleClick(series, itemId, (_a = clickedItem === null || clickedItem === void 0 ? void 0 : clickedItem.enabled) !== null && _a !== void 0 ? _a : false, numVisibleItems, clickedItem === null || clickedItem === void 0 ? void 0 : clickedItem.legendItemName);\r\n        }\r\n        this.ctx.updateService.update(ChartUpdateType.PROCESS_DATA, { forceNodeDataRefresh: true });\r\n        legendItemDoubleClick === null || legendItemDoubleClick === void 0 ? void 0 : legendItemDoubleClick({ type: 'dblclick', enabled: true, itemId, seriesId: series.id });\r\n    }\r\n    handleLegendMouseMove(event) {\r\n        var _a;\r\n        const { enabled, item: { toggleSeriesVisible }, listeners, } = this;\r\n        if (!enabled) {\r\n            return;\r\n        }\r\n        const legendBBox = this.computeBBox();\r\n        const { pageX, pageY, offsetX, offsetY } = event;\r\n        const pointerInsideLegend = this.group.visible && legendBBox.containsPoint(offsetX, offsetY);\r\n        if (!pointerInsideLegend) {\r\n            this.ctx.cursorManager.updateCursor(this.id);\r\n            this.ctx.highlightManager.updateHighlight(this.id);\r\n            this.ctx.tooltipManager.removeTooltip(this.id);\r\n            return;\r\n        }\r\n        // Prevent other handlers from consuming this event if it's generated inside the legend\r\n        // boundaries.\r\n        event.consume();\r\n        const datum = this.getDatumForPoint(offsetX, offsetY);\r\n        const pointerOverLegendDatum = pointerInsideLegend && datum !== undefined;\r\n        if (!pointerOverLegendDatum) {\r\n            this.ctx.cursorManager.updateCursor(this.id);\r\n            this.ctx.highlightManager.updateHighlight(this.id);\r\n            return;\r\n        }\r\n        const series = datum ? this.ctx.dataService.getSeries().find((series) => series.id === (datum === null || datum === void 0 ? void 0 : datum.id)) : undefined;\r\n        if (datum && this.truncatedItems.has((_a = datum.itemId) !== null && _a !== void 0 ? _a : datum.id)) {\r\n            this.ctx.tooltipManager.updateTooltip(this.id, { pageX, pageY, offsetX, offsetY, event, showArrow: false }, toTooltipHtml({ content: this.getItemLabel(datum) }));\r\n        }\r\n        else {\r\n            this.ctx.tooltipManager.removeTooltip(this.id);\r\n        }\r\n        if (toggleSeriesVisible || listeners.legendItemClick != null || listeners.legendItemDoubleClick != null) {\r\n            this.ctx.cursorManager.updateCursor(this.id, 'pointer');\r\n        }\r\n        if ((datum === null || datum === void 0 ? void 0 : datum.enabled) && series) {\r\n            this.ctx.highlightManager.updateHighlight(this.id, {\r\n                series,\r\n                itemId: datum === null || datum === void 0 ? void 0 : datum.itemId,\r\n                datum: undefined,\r\n            });\r\n        }\r\n        else {\r\n            this.ctx.highlightManager.updateHighlight(this.id);\r\n        }\r\n    }\r\n    positionLegend(shrinkRect) {\r\n        const newShrinkRect = shrinkRect.clone();\r\n        if (!this.enabled || !this.data.length) {\r\n            return { shrinkRect: newShrinkRect };\r\n        }\r\n        const [legendWidth, legendHeight] = this.calculateLegendDimensions(shrinkRect);\r\n        this.group.translationX = 0;\r\n        this.group.translationY = 0;\r\n        this.performLayout(legendWidth, legendHeight);\r\n        const legendBBox = this.computePagedBBox();\r\n        const calculateTranslationPerpendicularDimension = () => {\r\n            switch (this.position) {\r\n                case 'top':\r\n                case 'left':\r\n                    return 0;\r\n                case 'bottom':\r\n                    return shrinkRect.height - legendBBox.height;\r\n                case 'right':\r\n                default:\r\n                    return shrinkRect.width - legendBBox.width;\r\n            }\r\n        };\r\n        if (this.visible) {\r\n            let translationX;\r\n            let translationY;\r\n            switch (this.position) {\r\n                case 'top':\r\n                case 'bottom':\r\n                    translationX = (shrinkRect.width - legendBBox.width) / 2;\r\n                    translationY = calculateTranslationPerpendicularDimension();\r\n                    newShrinkRect.shrink(legendBBox.height, this.position);\r\n                    break;\r\n                case 'left':\r\n                case 'right':\r\n                default:\r\n                    translationX = calculateTranslationPerpendicularDimension();\r\n                    translationY = (shrinkRect.height - legendBBox.height) / 2;\r\n                    newShrinkRect.shrink(legendBBox.width, this.position);\r\n            }\r\n            // Round off for pixel grid alignment to work properly.\r\n            this.group.translationX = Math.floor(-legendBBox.x + shrinkRect.x + translationX);\r\n            this.group.translationY = Math.floor(-legendBBox.y + shrinkRect.y + translationY);\r\n        }\r\n        if (this.visible && this.enabled && this.data.length) {\r\n            const legendPadding = this.spacing;\r\n            newShrinkRect.shrink(legendPadding, this.position);\r\n            const legendPositionedBBox = legendBBox.clone();\r\n            legendPositionedBBox.x += this.group.translationX;\r\n            legendPositionedBBox.y += this.group.translationY;\r\n            this.ctx.tooltipManager.updateExclusiveRect(this.id, legendPositionedBBox);\r\n        }\r\n        else {\r\n            this.ctx.tooltipManager.updateExclusiveRect(this.id);\r\n        }\r\n        return { shrinkRect: newShrinkRect };\r\n    }\r\n    calculateLegendDimensions(shrinkRect) {\r\n        const { width, height } = shrinkRect;\r\n        const aspectRatio = width / height;\r\n        const maxCoefficient = 0.5;\r\n        const minHeightCoefficient = 0.2;\r\n        const minWidthCoefficient = 0.25;\r\n        let legendWidth, legendHeight;\r\n        switch (this.position) {\r\n            case 'top':\r\n            case 'bottom':\r\n                // A horizontal legend should take maximum between 20 to 50 percent of the chart height if height is larger than width\r\n                // and maximum 20 percent of the chart height if height is smaller than width.\r\n                const heightCoefficient = aspectRatio < 1\r\n                    ? Math.min(maxCoefficient, minHeightCoefficient * (1 / aspectRatio))\r\n                    : minHeightCoefficient;\r\n                legendWidth = this.maxWidth ? Math.min(this.maxWidth, width) : width;\r\n                legendHeight = this.maxHeight\r\n                    ? Math.min(this.maxHeight, height)\r\n                    : Math.round(height * heightCoefficient);\r\n                break;\r\n            case 'left':\r\n            case 'right':\r\n            default:\r\n                // A vertical legend should take maximum between 25 to 50 percent of the chart width if width is larger than height\r\n                // and maximum 25 percent of the chart width if width is smaller than height.\r\n                const widthCoefficient = aspectRatio > 1 ? Math.min(maxCoefficient, minWidthCoefficient * aspectRatio) : minWidthCoefficient;\r\n                legendWidth = this.maxWidth ? Math.min(this.maxWidth, width) : Math.round(width * widthCoefficient);\r\n                legendHeight = this.maxHeight ? Math.min(this.maxHeight, height) : height;\r\n        }\r\n        return [legendWidth, legendHeight];\r\n    }\r\n}\r\nLegend.className = 'Legend';\r\n__decorate([\r\n    Validate(BOOLEAN),\r\n    __metadata(\"design:type\", Object)\r\n], Legend.prototype, \"_enabled\", void 0);\r\n__decorate([\r\n    Validate(POSITION),\r\n    __metadata(\"design:type\", String)\r\n], Legend.prototype, \"position\", void 0);\r\n__decorate([\r\n    Validate(OPT_NUMBER(0)),\r\n    __metadata(\"design:type\", Number)\r\n], Legend.prototype, \"maxWidth\", void 0);\r\n__decorate([\r\n    Validate(OPT_NUMBER(0)),\r\n    __metadata(\"design:type\", Number)\r\n], Legend.prototype, \"maxHeight\", void 0);\r\n__decorate([\r\n    Validate(OPT_BOOLEAN),\r\n    __metadata(\"design:type\", Boolean)\r\n], Legend.prototype, \"reverseOrder\", void 0);\r\n__decorate([\r\n    Validate(OPT_ORIENTATION),\r\n    __metadata(\"design:type\", String)\r\n], Legend.prototype, \"orientation\", void 0);\r\n__decorate([\r\n    Validate(NUMBER$1(0)),\r\n    __metadata(\"design:type\", Object)\r\n], Legend.prototype, \"spacing\", void 0);\n\nclass Overlay {\r\n    constructor(className, parent, document) {\r\n        this.text = undefined;\r\n        this.className = className;\r\n        this.parentElement = parent;\r\n        this.document = document;\r\n    }\r\n    show(rect) {\r\n        var _a, _b;\r\n        let element = this.element;\r\n        if (!element) {\r\n            element = this.document.createElement('div');\r\n            element.className = this.className;\r\n            this.element = element;\r\n        }\r\n        element.style.position = 'absolute';\r\n        element.style.left = `${rect.x}px`;\r\n        element.style.top = `${rect.y}px`;\r\n        element.style.width = `${rect.width}px`;\r\n        element.style.height = `${rect.height}px`;\r\n        if (this.renderer) {\r\n            element.innerHTML = this.renderer();\r\n        }\r\n        else {\r\n            const content = this.document.createElement('div');\r\n            content.style.alignItems = 'center';\r\n            content.style.boxSizing = 'border-box';\r\n            content.style.display = 'flex';\r\n            content.style.justifyContent = 'center';\r\n            content.style.margin = '8px';\r\n            content.style.height = '100%';\r\n            content.style.font = '12px Verdana, sans-serif';\r\n            content.innerText = (_a = this.text) !== null && _a !== void 0 ? _a : 'No data to display';\r\n            element.append(content);\r\n        }\r\n        (_b = this.parentElement) === null || _b === void 0 ? void 0 : _b.append(element);\r\n    }\r\n    hide() {\r\n        var _a;\r\n        (_a = this.element) === null || _a === void 0 ? void 0 : _a.remove();\r\n        this.element = undefined;\r\n    }\r\n}\r\n__decorate([\r\n    Validate(OPT_FUNCTION),\r\n    __metadata(\"design:type\", Function)\r\n], Overlay.prototype, \"renderer\", void 0);\r\n__decorate([\r\n    Validate(OPT_STRING),\r\n    __metadata(\"design:type\", String)\r\n], Overlay.prototype, \"text\", void 0);\n\nclass ChartOverlays {\r\n    constructor(parent) {\r\n        this.noData = new Overlay('ag-chart-no-data-overlay', parent, parent.ownerDocument);\r\n    }\r\n}\n\nconst SERIES_THRESHOLD_FOR_AGGRESSIVE_LAYER_REDUCTION = 30;\r\nclass SeriesLayerManager {\r\n    constructor(rootGroup) {\r\n        this.groups = {};\r\n        this.series = {};\r\n        this.expectedSeriesCount = 1;\r\n        this.mode = 'normal';\r\n        this.rootGroup = rootGroup;\r\n    }\r\n    setSeriesCount(count) {\r\n        this.expectedSeriesCount = count;\r\n    }\r\n    requestGroup(seriesConfig) {\r\n        var _a, _b;\r\n        var _c, _d;\r\n        const { id, type, rootGroup: seriesRootGroup, highlightGroup: seriesHighlightGroup, annotationGroup: seriesAnnotationGroup, seriesGrouping, } = seriesConfig;\r\n        const { groupIndex = id } = seriesGrouping !== null && seriesGrouping !== void 0 ? seriesGrouping : {};\r\n        if (this.series[id] != null) {\r\n            throw new Error(`AG Charts - series already has an allocated layer: ${this.series[id]}`);\r\n        }\r\n        // Re-evaluate mode only on first series addition - we can't swap strategy mid-setup.\r\n        if (Object.keys(this.series).length === 0) {\r\n            this.mode =\r\n                this.expectedSeriesCount >= SERIES_THRESHOLD_FOR_AGGRESSIVE_LAYER_REDUCTION\r\n                    ? 'aggressive-grouping'\r\n                    : 'normal';\r\n        }\r\n        (_a = (_c = this.groups)[type]) !== null && _a !== void 0 ? _a : (_c[type] = {});\r\n        const lookupIndex = this.lookupIdx(groupIndex);\r\n        let groupInfo = this.groups[type][lookupIndex];\r\n        if (!groupInfo) {\r\n            groupInfo = (_b = (_d = this.groups[type])[lookupIndex]) !== null && _b !== void 0 ? _b : (_d[lookupIndex] = {\r\n                seriesIds: [],\r\n                group: this.rootGroup.appendChild(new Group({\r\n                    name: `${type}-content`,\r\n                    layer: true,\r\n                    zIndex: Layers.SERIES_LAYER_ZINDEX,\r\n                    zIndexSubOrder: seriesConfig.getGroupZIndexSubOrder('data'),\r\n                })),\r\n                highlight: this.rootGroup.appendChild(new Group({\r\n                    name: `${type}-highlight`,\r\n                    layer: true,\r\n                    zIndex: Layers.SERIES_LAYER_ZINDEX,\r\n                    zIndexSubOrder: seriesConfig.getGroupZIndexSubOrder('highlight'),\r\n                })),\r\n                annotation: this.rootGroup.appendChild(new Group({\r\n                    name: `${type}-annotation`,\r\n                    layer: true,\r\n                    zIndex: Layers.SERIES_LAYER_ZINDEX,\r\n                    zIndexSubOrder: seriesConfig.getGroupZIndexSubOrder('annotation'),\r\n                })),\r\n            });\r\n        }\r\n        this.series[id] = { layerState: groupInfo, seriesConfig };\r\n        groupInfo.seriesIds.push(id);\r\n        groupInfo.group.appendChild(seriesRootGroup);\r\n        groupInfo.highlight.appendChild(seriesHighlightGroup);\r\n        groupInfo.annotation.appendChild(seriesAnnotationGroup);\r\n        return groupInfo.group;\r\n    }\r\n    changeGroup(seriesConfig) {\r\n        var _a, _b;\r\n        const { id, seriesGrouping, type, rootGroup, highlightGroup, annotationGroup, oldGrouping } = seriesConfig;\r\n        const { groupIndex = id } = seriesGrouping !== null && seriesGrouping !== void 0 ? seriesGrouping : {};\r\n        if ((_b = (_a = this.groups[type]) === null || _a === void 0 ? void 0 : _a[groupIndex]) === null || _b === void 0 ? void 0 : _b.seriesIds.includes(id)) {\r\n            // Already in the right group, nothing to do.\r\n            return;\r\n        }\r\n        if (this.series[id] != null) {\r\n            this.releaseGroup({ id, seriesGrouping: oldGrouping, type, rootGroup, highlightGroup, annotationGroup });\r\n        }\r\n        this.requestGroup(seriesConfig);\r\n    }\r\n    releaseGroup(seriesConfig) {\r\n        var _a, _b, _c, _d, _e;\r\n        const { id, seriesGrouping, rootGroup, highlightGroup, annotationGroup, type } = seriesConfig;\r\n        const { groupIndex = id } = seriesGrouping !== null && seriesGrouping !== void 0 ? seriesGrouping : {};\r\n        if (this.series[id] == null) {\r\n            throw new Error(`AG Charts - series doesn't have an allocated layer: ${id}`);\r\n        }\r\n        const lookupIndex = this.lookupIdx(groupIndex);\r\n        const groupInfo = (_b = (_a = this.groups[type]) === null || _a === void 0 ? void 0 : _a[lookupIndex]) !== null && _b !== void 0 ? _b : (_c = this.series[id]) === null || _c === void 0 ? void 0 : _c.layerState;\r\n        if (groupInfo) {\r\n            groupInfo.seriesIds = groupInfo.seriesIds.filter((v) => v !== id);\r\n            groupInfo.group.removeChild(rootGroup);\r\n            groupInfo.highlight.removeChild(highlightGroup);\r\n            groupInfo.annotation.removeChild(annotationGroup);\r\n        }\r\n        if ((groupInfo === null || groupInfo === void 0 ? void 0 : groupInfo.seriesIds.length) === 0) {\r\n            // Last member of the layer, cleanup.\r\n            this.rootGroup.removeChild(groupInfo.group);\r\n            this.rootGroup.removeChild(groupInfo.highlight);\r\n            this.rootGroup.removeChild(groupInfo.annotation);\r\n            delete this.groups[type][lookupIndex];\r\n            delete this.groups[type][id];\r\n        }\r\n        else if ((groupInfo === null || groupInfo === void 0 ? void 0 : groupInfo.seriesIds.length) > 0) {\r\n            // Update zIndexSubOrder to avoid it becoming stale as series are removed and re-added\r\n            // with the same groupIndex, but are otherwise unrelated.\r\n            const leadSeriesConfig = (_e = this.series[(_d = groupInfo === null || groupInfo === void 0 ? void 0 : groupInfo.seriesIds) === null || _d === void 0 ? void 0 : _d[0]]) === null || _e === void 0 ? void 0 : _e.seriesConfig;\r\n            groupInfo.group.zIndexSubOrder = leadSeriesConfig === null || leadSeriesConfig === void 0 ? void 0 : leadSeriesConfig.getGroupZIndexSubOrder('data');\r\n            groupInfo.highlight.zIndexSubOrder = leadSeriesConfig === null || leadSeriesConfig === void 0 ? void 0 : leadSeriesConfig.getGroupZIndexSubOrder('highlight');\r\n            groupInfo.annotation.zIndexSubOrder = leadSeriesConfig === null || leadSeriesConfig === void 0 ? void 0 : leadSeriesConfig.getGroupZIndexSubOrder('annotation');\r\n        }\r\n        delete this.series[id];\r\n    }\r\n    lookupIdx(groupIndex) {\r\n        if (this.mode === 'normal') {\r\n            return groupIndex;\r\n        }\r\n        if (typeof groupIndex === 'string') {\r\n            groupIndex = Number(groupIndex.split('-').slice(-1)[0]);\r\n            if (!groupIndex)\r\n                return 0;\r\n        }\r\n        return Math.floor(Math.max(Math.min(groupIndex / this.expectedSeriesCount, 1), 0) *\r\n            SERIES_THRESHOLD_FOR_AGGRESSIVE_LAYER_REDUCTION);\r\n    }\r\n    destroy() {\r\n        for (const groups of Object.values(this.groups)) {\r\n            for (const groupInfo of Object.values(groups)) {\r\n                this.rootGroup.removeChild(groupInfo.group);\r\n                this.rootGroup.removeChild(groupInfo.highlight);\r\n                this.rootGroup.removeChild(groupInfo.annotation);\r\n            }\r\n        }\r\n        this.groups = {};\r\n        this.series = {};\r\n    }\r\n}\n\nclass SeriesStateManager {\r\n    constructor() {\r\n        this.groups = {};\r\n    }\r\n    registerSeries({ id, seriesGrouping, visible, type, }) {\r\n        var _a;\r\n        var _b;\r\n        if (!seriesGrouping)\r\n            return;\r\n        (_a = (_b = this.groups)[type]) !== null && _a !== void 0 ? _a : (_b[type] = {});\r\n        this.groups[type][id] = { grouping: seriesGrouping, visible };\r\n    }\r\n    deregisterSeries({ id, type }) {\r\n        if (this.groups[type]) {\r\n            delete this.groups[type][id];\r\n        }\r\n        if (this.groups[type] && Object.keys(this.groups[type]).length === 0) {\r\n            delete this.groups[type];\r\n        }\r\n    }\r\n    getVisiblePeerGroupIndex({ type, seriesGrouping }) {\r\n        var _a;\r\n        if (!seriesGrouping)\r\n            return { visibleGroupCount: 1, index: 0 };\r\n        const visibleGroups = [\r\n            ...Object.entries((_a = this.groups[type]) !== null && _a !== void 0 ? _a : {})\r\n                .filter(([_, entry]) => entry.visible)\r\n                .reduce((result, [_, next]) => {\r\n                if (next.visible) {\r\n                    result.add(next.grouping.groupIndex);\r\n                }\r\n                return result;\r\n            }, new Set())\r\n                .values(),\r\n        ];\r\n        visibleGroups.sort((a, b) => a - b);\r\n        return {\r\n            visibleGroupCount: visibleGroups.length,\r\n            index: visibleGroups.indexOf(seriesGrouping.groupIndex),\r\n        };\r\n    }\r\n}\n\nclass BaseLayoutProcessor {\r\n    constructor(chartLike, layoutService) {\r\n        this.chartLike = chartLike;\r\n        this.layoutService = layoutService;\r\n        this.destroyFns = [];\r\n        this.destroyFns.push(\r\n        // eslint-disable-next-line sonarjs/no-duplicate-string\r\n        this.layoutService.addListener('layout-complete', (e) => this.layoutComplete(e)), this.layoutService.addListener('start-layout', (e) => this.positionPadding(e.shrinkRect)), this.layoutService.addListener('start-layout', (e) => this.positionCaptions(e.shrinkRect)));\r\n    }\r\n    destroy() {\r\n        this.destroyFns.forEach((cb) => cb());\r\n    }\r\n    layoutComplete({ clipSeries, series: { paddedRect } }) {\r\n        const { seriesArea, seriesRoot } = this.chartLike;\r\n        if (seriesArea.clip || clipSeries) {\r\n            seriesRoot.setClipRectInGroupCoordinateSpace(paddedRect);\r\n        }\r\n        else {\r\n            seriesRoot.setClipRectInGroupCoordinateSpace();\r\n        }\r\n    }\r\n    positionPadding(shrinkRect) {\r\n        const { padding } = this.chartLike;\r\n        shrinkRect.shrink(padding.left, 'left');\r\n        shrinkRect.shrink(padding.top, 'top');\r\n        shrinkRect.shrink(padding.right, 'right');\r\n        shrinkRect.shrink(padding.bottom, 'bottom');\r\n        return { shrinkRect };\r\n    }\r\n    positionCaptions(shrinkRect) {\r\n        var _a, _b, _c, _d;\r\n        const { title, subtitle, footnote } = this.chartLike;\r\n        const newShrinkRect = shrinkRect.clone();\r\n        const updateCaption = (caption) => {\r\n            var _a;\r\n            const defaultCaptionHeight = shrinkRect.height / 10;\r\n            const captionLineHeight = (_a = caption.lineHeight) !== null && _a !== void 0 ? _a : caption.fontSize * Text.defaultLineHeightRatio;\r\n            const maxWidth = shrinkRect.width;\r\n            const maxHeight = Math.max(captionLineHeight, defaultCaptionHeight);\r\n            caption.computeTextWrap(maxWidth, maxHeight);\r\n        };\r\n        const positionTopAndShrinkBBox = (caption, spacing) => {\r\n            const baseY = newShrinkRect.y;\r\n            caption.node.x = newShrinkRect.x + newShrinkRect.width / 2;\r\n            caption.node.y = baseY;\r\n            caption.node.textBaseline = 'top';\r\n            updateCaption(caption);\r\n            const bbox = caption.node.computeBBox();\r\n            // As the bbox (x,y) ends up at a different location than specified above, we need to\r\n            // take it into consideration when calculating how much space needs to be reserved to\r\n            // accommodate the caption.\r\n            const bboxHeight = Math.ceil(bbox.y - baseY + bbox.height + spacing);\r\n            newShrinkRect.shrink(bboxHeight, 'top');\r\n        };\r\n        const positionBottomAndShrinkBBox = (caption, spacing) => {\r\n            const baseY = newShrinkRect.y + newShrinkRect.height;\r\n            caption.node.x = newShrinkRect.x + newShrinkRect.width / 2;\r\n            caption.node.y = baseY;\r\n            caption.node.textBaseline = 'bottom';\r\n            updateCaption(caption);\r\n            const bbox = caption.node.computeBBox();\r\n            const bboxHeight = Math.ceil(baseY - bbox.y + spacing);\r\n            newShrinkRect.shrink(bboxHeight, 'bottom');\r\n        };\r\n        if (subtitle) {\r\n            subtitle.node.visible = (_a = subtitle.enabled) !== null && _a !== void 0 ? _a : false;\r\n        }\r\n        if (title) {\r\n            title.node.visible = title.enabled;\r\n            if (title.node.visible) {\r\n                const defaultTitleSpacing = (subtitle === null || subtitle === void 0 ? void 0 : subtitle.node.visible) ? Caption.SMALL_PADDING : Caption.LARGE_PADDING;\r\n                const spacing = (_b = title.spacing) !== null && _b !== void 0 ? _b : defaultTitleSpacing;\r\n                positionTopAndShrinkBBox(title, spacing);\r\n            }\r\n        }\r\n        if (subtitle && subtitle.node.visible) {\r\n            positionTopAndShrinkBBox(subtitle, (_c = subtitle.spacing) !== null && _c !== void 0 ? _c : 0);\r\n        }\r\n        if (footnote) {\r\n            footnote.node.visible = footnote.enabled;\r\n            if (footnote.node.visible) {\r\n                positionBottomAndShrinkBBox(footnote, (_d = footnote.spacing) !== null && _d !== void 0 ? _d : 0);\r\n            }\r\n        }\r\n        return { shrinkRect: newShrinkRect };\r\n    }\r\n}\n\nclass UpdateService extends Listeners {\r\n    constructor(updateCallback) {\r\n        super();\r\n        this.updateCallback = updateCallback;\r\n    }\r\n    update(type = ChartUpdateType.FULL, { forceNodeDataRefresh = false, skipAnimations = false } = {}) {\r\n        this.updateCallback(type, { forceNodeDataRefresh, skipAnimations });\r\n    }\r\n    dispatchUpdateComplete(minRect) {\r\n        const event = { type: 'update-complete', minRect };\r\n        this.dispatch('update-complete', event);\r\n    }\r\n}\n\nfunction initialiseSpecialOverrides(opts) {\r\n    let globalWindow;\r\n    if (opts.window != null) {\r\n        globalWindow = opts.window;\r\n    }\r\n    else if (typeof window !== 'undefined') {\r\n        globalWindow = window;\r\n    }\r\n    else if (typeof __webpack_require__.g !== 'undefined') {\r\n        globalWindow = __webpack_require__.g.window;\r\n    }\r\n    else {\r\n        throw new Error('AG Charts - unable to resolve global window');\r\n    }\r\n    let globalDocument;\r\n    if (opts.document != null) {\r\n        globalDocument = opts.document;\r\n    }\r\n    else if (typeof document !== 'undefined') {\r\n        globalDocument = document;\r\n    }\r\n    else if (typeof __webpack_require__.g !== 'undefined') {\r\n        globalDocument = __webpack_require__.g.document;\r\n    }\r\n    else {\r\n        throw new Error('AG Charts - unable to resolve global document');\r\n    }\r\n    return {\r\n        document: globalDocument,\r\n        window: globalWindow,\r\n        overrideDevicePixelRatio: opts.overrideDevicePixelRatio,\r\n        sceneMode: opts.sceneMode,\r\n    };\r\n}\r\nclass SeriesArea {\r\n    constructor() {\r\n        this.clip = undefined;\r\n        this.padding = new Padding(0);\r\n    }\r\n}\r\n__decorate([\r\n    Validate(OPT_BOOLEAN),\r\n    __metadata(\"design:type\", Boolean)\r\n], SeriesArea.prototype, \"clip\", void 0);\r\nclass Chart extends Observable {\r\n    getOptions() {\r\n        var _a;\r\n        const { queuedUserOptions } = this;\r\n        const lastUpdateOptions = (_a = queuedUserOptions[queuedUserOptions.length - 1]) !== null && _a !== void 0 ? _a : this.userOptions;\r\n        return jsonMerge([lastUpdateOptions]);\r\n    }\r\n    autoSizeChanged(value) {\r\n        const { style } = this.element;\r\n        if (value) {\r\n            style.display = 'block';\r\n            style.width = '100%';\r\n            style.height = '100%';\r\n            if (!this._lastAutoSize) {\r\n                return;\r\n            }\r\n            this.resize(undefined, undefined, 'autoSize option');\r\n        }\r\n        else {\r\n            style.display = 'inline-block';\r\n            style.width = 'auto';\r\n            style.height = 'auto';\r\n        }\r\n    }\r\n    download(fileName, fileFormat) {\r\n        this.scene.download(fileName, fileFormat);\r\n    }\r\n    get destroyed() {\r\n        return this._destroyed;\r\n    }\r\n    constructor(specialOverrides, resources) {\r\n        var _a;\r\n        super();\r\n        this.id = createId(this);\r\n        this.processedOptions = {};\r\n        this.userOptions = {};\r\n        this.queuedUserOptions = [];\r\n        this.seriesRoot = new Group({ name: `${this.id}-Series-root` });\r\n        this.debug = Debug.create();\r\n        this.extraDebugStats = {};\r\n        this.container = undefined;\r\n        this.data = [];\r\n        this._firstAutoSize = true;\r\n        this.padding = new Padding(20);\r\n        this.seriesArea = new SeriesArea();\r\n        this.title = undefined;\r\n        this.subtitle = undefined;\r\n        this.footnote = undefined;\r\n        this.mode = 'standalone';\r\n        this._destroyed = false;\r\n        this._destroyFns = [];\r\n        this.modules = {};\r\n        this.legendModules = {};\r\n        this.processors = [];\r\n        this.legends = new Map();\r\n        this._pendingFactoryUpdatesCount = 0;\r\n        this._performUpdateNoRenderCount = 0;\r\n        this._performUpdateType = ChartUpdateType.NONE;\r\n        this._performUpdateSkipAnimations = false;\r\n        this.updateShortcutCount = 0;\r\n        this.seriesToUpdate = new Set();\r\n        this.updateMutex = new Mutex();\r\n        this.updateRequestors = {};\r\n        this.performUpdateTrigger = debouncedCallback(({ count }) => __awaiter(this, void 0, void 0, function* () {\r\n            if (this._destroyed)\r\n                return;\r\n            this.updateMutex.acquire(() => __awaiter(this, void 0, void 0, function* () {\r\n                try {\r\n                    yield this.performUpdate(count);\r\n                }\r\n                catch (error) {\r\n                    this._lastPerformUpdateError = error;\r\n                    Logger.error('update error', error);\r\n                }\r\n            }));\r\n        }));\r\n        this._axes = [];\r\n        this._series = [];\r\n        this.lastInteractionEvent = undefined;\r\n        this.pointerScheduler = debouncedAnimationFrame(() => {\r\n            if (this.lastInteractionEvent) {\r\n                this.handlePointer(this.lastInteractionEvent);\r\n            }\r\n            this.lastInteractionEvent = undefined;\r\n        });\r\n        this.onSeriesNodeClick = (event) => {\r\n            const seriesNodeClickEvent = Object.assign(Object.assign({}, event), { type: 'seriesNodeClick' });\r\n            Object.defineProperty(seriesNodeClickEvent, 'series', {\r\n                enumerable: false,\r\n                // Should display the deprecation warning\r\n                get: () => event.series,\r\n            });\r\n            this.fireEvent(seriesNodeClickEvent);\r\n        };\r\n        this.onSeriesNodeDoubleClick = (event) => {\r\n            const seriesNodeDoubleClick = Object.assign(Object.assign({}, event), { type: 'seriesNodeDoubleClick' });\r\n            this.fireEvent(seriesNodeDoubleClick);\r\n        };\r\n        this.specialOverrides = initialiseSpecialOverrides(specialOverrides);\r\n        const { window, document } = this.specialOverrides;\r\n        const scene = resources === null || resources === void 0 ? void 0 : resources.scene;\r\n        const element = (_a = resources === null || resources === void 0 ? void 0 : resources.element) !== null && _a !== void 0 ? _a : document.createElement('div');\r\n        const container = resources === null || resources === void 0 ? void 0 : resources.container;\r\n        const root = new Group({ name: 'root' });\r\n        // Prevent the scene from rendering chart components in an invalid state\r\n        // (before first layout is performed).\r\n        root.visible = false;\r\n        root.append(this.seriesRoot);\r\n        this.axisGridGroup = new Group({ name: 'Axes-Grids', layer: true, zIndex: Layers.AXIS_GRID_ZINDEX });\r\n        root.appendChild(this.axisGridGroup);\r\n        this.axisGroup = new Group({ name: 'Axes', layer: true, zIndex: Layers.AXIS_ZINDEX });\r\n        root.appendChild(this.axisGroup);\r\n        this.element = element;\r\n        element.classList.add('ag-chart-wrapper');\r\n        element.style.position = 'relative';\r\n        this.scene = scene !== null && scene !== void 0 ? scene : new Scene(this.specialOverrides);\r\n        this.scene.root = root;\r\n        this.scene.container = element;\r\n        this.autoSize = true;\r\n        this.chartEventManager = new ChartEventManager();\r\n        this.cursorManager = new CursorManager(element);\r\n        this.highlightManager = new HighlightManager();\r\n        this.interactionManager = new InteractionManager(element, document, window);\r\n        this.zoomManager = new ZoomManager();\r\n        this.dataService = new DataService(() => this.series);\r\n        this.layoutService = new LayoutService();\r\n        this.updateService = new UpdateService((type = ChartUpdateType.FULL, { forceNodeDataRefresh, skipAnimations }) => this.update(type, { forceNodeDataRefresh, skipAnimations }));\r\n        this.seriesStateManager = new SeriesStateManager();\r\n        this.seriesLayerManager = new SeriesLayerManager(this.seriesRoot);\r\n        this.callbackCache = new CallbackCache();\r\n        this.animationManager = new AnimationManager(this.interactionManager, this.updateMutex);\r\n        this.animationManager.skip();\r\n        this.animationManager.play();\r\n        this.processors = [new BaseLayoutProcessor(this, this.layoutService)];\r\n        this.tooltip = new Tooltip(this.scene.canvas.element, document, window, document.body);\r\n        this.tooltipManager = new TooltipManager(this.tooltip, this.interactionManager);\r\n        this.overlays = new ChartOverlays(this.element);\r\n        this.highlight = new ChartHighlight();\r\n        this.container = container;\r\n        SizeMonitor.observe(this.element, (size) => this.rawResize(size));\r\n        this._destroyFns.push(this.interactionManager.addListener('click', (event) => this.onClick(event)), this.interactionManager.addListener('dblclick', (event) => this.onDoubleClick(event)), this.interactionManager.addListener('hover', (event) => this.onMouseMove(event)), this.interactionManager.addListener('leave', (event) => this.onLeave(event)), this.interactionManager.addListener('page-left', () => this.destroy()), this.interactionManager.addListener('wheel', () => this.disablePointer()), \r\n        // Block redundant and interfering attempts to update the hovered element during dragging.\r\n        this.interactionManager.addListener('drag-start', () => this.disablePointer()), this.animationManager.addListener('animation-frame', (_) => {\r\n            this.update(ChartUpdateType.SCENE_RENDER);\r\n        }), this.highlightManager.addListener('highlight-change', (event) => this.changeHighlightDatum(event)), this.zoomManager.addListener('zoom-change', (_) => this.update(ChartUpdateType.PROCESS_DATA, { forceNodeDataRefresh: true, skipAnimations: true })));\r\n        this.legend = this.attachLegend('category', Legend);\r\n    }\r\n    addModule(module) {\r\n        if (this.modules[module.optionsKey] != null) {\r\n            throw new Error('AG Charts - module already initialised: ' + module.optionsKey);\r\n        }\r\n        const moduleInstance = new module.instanceConstructor(this.getModuleContext());\r\n        this.modules[module.optionsKey] = { instance: moduleInstance };\r\n        this[module.optionsKey] = moduleInstance; // TODO remove\r\n    }\r\n    removeModule(module) {\r\n        var _a;\r\n        (_a = this.modules[module.optionsKey]) === null || _a === void 0 ? void 0 : _a.instance.destroy();\r\n        delete this.modules[module.optionsKey];\r\n        delete this[module.optionsKey]; // TODO remove\r\n    }\r\n    attachLegend(legendType, legendConstructor) {\r\n        const legend = new legendConstructor(this.getModuleContext());\r\n        this.legends.set(legendType, legend);\r\n        legend.attachLegend(this.scene.root);\r\n        return legend;\r\n    }\r\n    addLegendModule(module) {\r\n        if (this.modules[module.optionsKey] != null) {\r\n            throw new Error('AG Charts - module already initialised: ' + module.optionsKey);\r\n        }\r\n        const legend = this.attachLegend(module.identifier, module.instanceConstructor);\r\n        this.modules[module.optionsKey] = { instance: legend };\r\n        this[module.optionsKey] = legend;\r\n    }\r\n    removeLegendModule(module) {\r\n        this.legends.delete(module.identifier);\r\n        this.removeModule(module);\r\n    }\r\n    isModuleEnabled(module) {\r\n        return this.modules[module.optionsKey] != null;\r\n    }\r\n    getModuleContext() {\r\n        const { scene, animationManager, chartEventManager, cursorManager, highlightManager, interactionManager, tooltipManager, zoomManager, dataService, layoutService, updateService, seriesStateManager, seriesLayerManager, mode, callbackCache, specialOverrides: { window, document }, } = this;\r\n        return {\r\n            window,\r\n            document,\r\n            scene,\r\n            animationManager,\r\n            chartEventManager,\r\n            cursorManager,\r\n            highlightManager,\r\n            interactionManager,\r\n            tooltipManager,\r\n            zoomManager,\r\n            dataService,\r\n            layoutService,\r\n            updateService,\r\n            mode,\r\n            seriesStateManager,\r\n            seriesLayerManager,\r\n            callbackCache,\r\n        };\r\n    }\r\n    destroy(opts) {\r\n        if (this._destroyed) {\r\n            return;\r\n        }\r\n        const keepTransferableResources = opts === null || opts === void 0 ? void 0 : opts.keepTransferableResources;\r\n        let result;\r\n        this._performUpdateType = ChartUpdateType.NONE;\r\n        this._destroyFns.forEach((fn) => fn());\r\n        this.processors.forEach((p) => p.destroy());\r\n        this.tooltipManager.destroy();\r\n        this.tooltip.destroy();\r\n        Object.values(this.legends).forEach((legend) => legend.destroy());\r\n        this.legends.clear();\r\n        this.overlays.noData.hide();\r\n        SizeMonitor.unobserve(this.element);\r\n        for (const optionsKey of Object.keys(this.modules)) {\r\n            this.removeModule({ optionsKey });\r\n        }\r\n        this.interactionManager.destroy();\r\n        this.animationManager.stop();\r\n        if (keepTransferableResources) {\r\n            this.scene.strip();\r\n            result = { container: this.container, scene: this.scene, element: this.element };\r\n        }\r\n        else {\r\n            this.scene.destroy();\r\n            this.container = undefined;\r\n        }\r\n        this.removeAllSeries();\r\n        this.seriesLayerManager.destroy();\r\n        this.axes.forEach((a) => a.destroy());\r\n        this.axes = [];\r\n        this.callbackCache.invalidateCache();\r\n        this._destroyed = true;\r\n        return result;\r\n    }\r\n    disablePointer(highlightOnly = false) {\r\n        if (!highlightOnly) {\r\n            this.tooltipManager.removeTooltip(this.id);\r\n        }\r\n        this.highlightManager.updateHighlight(this.id);\r\n        if (this.lastInteractionEvent) {\r\n            this.lastInteractionEvent = undefined;\r\n        }\r\n    }\r\n    requestFactoryUpdate(cb) {\r\n        this._pendingFactoryUpdatesCount++;\r\n        this.updateMutex.acquire(() => __awaiter(this, void 0, void 0, function* () {\r\n            yield cb();\r\n            this._pendingFactoryUpdatesCount--;\r\n        }));\r\n    }\r\n    get performUpdateType() {\r\n        return this._performUpdateType;\r\n    }\r\n    get lastPerformUpdateError() {\r\n        return this._lastPerformUpdateError;\r\n    }\r\n    update(type = ChartUpdateType.FULL, opts) {\r\n        var _a, _b;\r\n        const { forceNodeDataRefresh = false, skipAnimations, seriesToUpdate = this.series, newAnimationBatch, } = opts !== null && opts !== void 0 ? opts : {};\r\n        if (forceNodeDataRefresh) {\r\n            this.series.forEach((series) => series.markNodeDataDirty());\r\n        }\r\n        for (const series of seriesToUpdate) {\r\n            this.seriesToUpdate.add(series);\r\n        }\r\n        if (skipAnimations) {\r\n            this.animationManager.skipCurrentBatch();\r\n            this._performUpdateSkipAnimations = true;\r\n        }\r\n        if (newAnimationBatch) {\r\n            if (this.animationManager.isActive()) {\r\n                this._performUpdateSkipAnimations = true;\r\n            }\r\n            else {\r\n                (_a = this._performUpdateSkipAnimations) !== null && _a !== void 0 ? _a : (this._performUpdateSkipAnimations = false);\r\n            }\r\n        }\r\n        if (Debug.check(true)) {\r\n            let stack = (_b = new Error().stack) !== null && _b !== void 0 ? _b : '<unknown>';\r\n            stack = stack.replace(/\\([^)]*/g, '');\r\n            this.updateRequestors[stack] = type;\r\n        }\r\n        if (type < this._performUpdateType) {\r\n            this._performUpdateType = type;\r\n            this.performUpdateTrigger.schedule(opts === null || opts === void 0 ? void 0 : opts.backOffMs);\r\n        }\r\n    }\r\n    performUpdate(count) {\r\n        var _a;\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const { _performUpdateType: performUpdateType, extraDebugStats } = this;\r\n            const seriesToUpdate = [...this.seriesToUpdate];\r\n            // Clear state immediately so that side-effects can be detected prior to SCENE_RENDER.\r\n            this._performUpdateType = ChartUpdateType.NONE;\r\n            this.seriesToUpdate.clear();\r\n            if (this.updateShortcutCount === 0 && performUpdateType < ChartUpdateType.SCENE_RENDER) {\r\n                this.animationManager.startBatch(this._performUpdateSkipAnimations);\r\n            }\r\n            this.debug('Chart.performUpdate() - start', ChartUpdateType[performUpdateType]);\r\n            const splits = { start: performance.now() };\r\n            switch (performUpdateType) {\r\n                case ChartUpdateType.FULL:\r\n                case ChartUpdateType.PROCESS_DATA:\r\n                    yield this.processData();\r\n                    this.disablePointer(true);\r\n                    splits['🏭'] = performance.now();\r\n                // fallthrough\r\n                case ChartUpdateType.PERFORM_LAYOUT:\r\n                    if (this.checkUpdateShortcut(ChartUpdateType.PERFORM_LAYOUT))\r\n                        break;\r\n                    if (!this.checkFirstAutoSize(seriesToUpdate))\r\n                        break;\r\n                    yield this.processLayout();\r\n                    splits['⌖'] = performance.now();\r\n                // fallthrough\r\n                case ChartUpdateType.SERIES_UPDATE:\r\n                    if (this.checkUpdateShortcut(ChartUpdateType.SERIES_UPDATE))\r\n                        break;\r\n                    const { seriesRect } = this;\r\n                    const seriesUpdates = [...seriesToUpdate].map((series) => series.update({ seriesRect }));\r\n                    yield Promise.all(seriesUpdates);\r\n                    splits['🤔'] = performance.now();\r\n                // fallthrough\r\n                case ChartUpdateType.TOOLTIP_RECALCULATION:\r\n                    if (this.checkUpdateShortcut(ChartUpdateType.TOOLTIP_RECALCULATION))\r\n                        break;\r\n                    const tooltipMeta = this.tooltipManager.getTooltipMeta(this.id);\r\n                    const isHovered = ((_a = tooltipMeta === null || tooltipMeta === void 0 ? void 0 : tooltipMeta.event) === null || _a === void 0 ? void 0 : _a.type) === 'hover';\r\n                    if (performUpdateType <= ChartUpdateType.SERIES_UPDATE && isHovered) {\r\n                        this.handlePointer(tooltipMeta.event);\r\n                    }\r\n                    splits['↖'] = performance.now();\r\n                // fallthrough\r\n                case ChartUpdateType.SCENE_RENDER:\r\n                    if (this.checkUpdateShortcut(ChartUpdateType.SCENE_RENDER))\r\n                        break;\r\n                    extraDebugStats['updateShortcutCount'] = this.updateShortcutCount;\r\n                    yield this.scene.render({ debugSplitTimes: splits, extraDebugStats });\r\n                    this.extraDebugStats = {};\r\n                // fallthrough\r\n                case ChartUpdateType.NONE:\r\n                    // Do nothing.\r\n                    this.updateShortcutCount = 0;\r\n                    this.updateRequestors = {};\r\n                    this._performUpdateSkipAnimations = undefined;\r\n                    this.animationManager.endBatch();\r\n            }\r\n            this.updateService.dispatchUpdateComplete(this.getMinRect());\r\n            const end = performance.now();\r\n            this.debug('Chart.performUpdate() - end', {\r\n                chart: this,\r\n                durationMs: Math.round((end - splits['start']) * 100) / 100,\r\n                count,\r\n                performUpdateType: ChartUpdateType[performUpdateType],\r\n            });\r\n        });\r\n    }\r\n    checkUpdateShortcut(checkUpdateType) {\r\n        const maxShortcuts = 3;\r\n        if (this.updateShortcutCount > maxShortcuts) {\r\n            Logger.warn(`exceeded the maximum number of simultaneous updates (${maxShortcuts + 1}), discarding changes and rendering`, this.updateRequestors);\r\n            return false;\r\n        }\r\n        if (this.performUpdateType <= checkUpdateType) {\r\n            // A previous step modified series state, and we need to re-run this or an earlier step before rendering.\r\n            this.updateShortcutCount++;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    checkFirstAutoSize(seriesToUpdate) {\r\n        if (this.autoSize && !this._lastAutoSize) {\r\n            const count = this._performUpdateNoRenderCount++;\r\n            const backOffMs = (count ^ 2) * 10;\r\n            if (count < 8) {\r\n                // Reschedule if canvas size hasn't been set yet to avoid a race.\r\n                this.update(ChartUpdateType.PERFORM_LAYOUT, { seriesToUpdate, backOffMs });\r\n                this.debug('Chart.checkFirstAutoSize() - backing off until first size update', backOffMs);\r\n                return false;\r\n            }\r\n            // After several failed passes, continue and accept there maybe a redundant\r\n            // render. Sometimes this case happens when we already have the correct\r\n            // width/height, and we end up never rendering the chart in that scenario.\r\n            this.debug('Chart.checkFirstAutoSize() - timeout for first size update.');\r\n        }\r\n        this._performUpdateNoRenderCount = 0;\r\n        return true;\r\n    }\r\n    set axes(values) {\r\n        const removedAxes = new Set();\r\n        this._axes.forEach((axis) => {\r\n            axis.detachAxis(this.axisGroup, this.axisGridGroup);\r\n            removedAxes.add(axis);\r\n        });\r\n        // make linked axes go after the regular ones (simulates stable sort by `linkedTo` property)\r\n        this._axes = values.filter((a) => !a.linkedTo).concat(values.filter((a) => a.linkedTo));\r\n        this._axes.forEach((axis) => {\r\n            axis.attachAxis(this.axisGroup, this.axisGridGroup);\r\n            removedAxes.delete(axis);\r\n        });\r\n        this.zoomManager.updateAxes(this._axes);\r\n        removedAxes.forEach((axis) => axis.destroy());\r\n    }\r\n    get axes() {\r\n        return this._axes;\r\n    }\r\n    set series(values) {\r\n        this.removeAllSeries();\r\n        this.seriesLayerManager.setSeriesCount(values.length);\r\n        values.forEach((series) => this.addSeries(series));\r\n    }\r\n    get series() {\r\n        return this._series;\r\n    }\r\n    addSeries(series) {\r\n        const { series: allSeries } = this;\r\n        const canAdd = allSeries.indexOf(series) < 0;\r\n        if (canAdd) {\r\n            allSeries.push(series);\r\n            if (series.rootGroup.parent == null) {\r\n                this.seriesLayerManager.requestGroup(series);\r\n            }\r\n            this.initSeries(series);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    initSeries(series) {\r\n        const chart = this;\r\n        series.chart = {\r\n            get mode() {\r\n                return chart.mode;\r\n            },\r\n            get seriesRect() {\r\n                return chart.seriesRect;\r\n            },\r\n            placeLabels() {\r\n                return chart.placeLabels();\r\n            },\r\n        };\r\n        series.setChartData(this.data);\r\n        this.addSeriesListeners(series);\r\n        series.addChartEventListeners();\r\n    }\r\n    removeAllSeries() {\r\n        this.series.forEach((series) => {\r\n            series.removeEventListener('nodeClick', this.onSeriesNodeClick);\r\n            series.removeEventListener('nodeDoubleClick', this.onSeriesNodeDoubleClick);\r\n            series.destroy();\r\n            series.chart = undefined;\r\n        });\r\n        this._series = []; // using `_series` instead of `series` to prevent infinite recursion\r\n    }\r\n    addSeriesListeners(series) {\r\n        if (this.hasEventListener('seriesNodeClick')) {\r\n            series.addEventListener('nodeClick', this.onSeriesNodeClick);\r\n        }\r\n        if (this.hasEventListener('seriesNodeDoubleClick')) {\r\n            series.addEventListener('nodeDoubleClick', this.onSeriesNodeDoubleClick);\r\n        }\r\n    }\r\n    updateAllSeriesListeners() {\r\n        this.series.forEach((series) => {\r\n            series.removeEventListener('nodeClick', this.onSeriesNodeClick);\r\n            series.removeEventListener('nodeDoubleClick', this.onSeriesNodeDoubleClick);\r\n            this.addSeriesListeners(series);\r\n        });\r\n    }\r\n    assignSeriesToAxes() {\r\n        this.axes.forEach((axis) => {\r\n            axis.boundSeries = this.series.filter((s) => {\r\n                const seriesAxis = s.axes[axis.direction];\r\n                return seriesAxis === axis;\r\n            });\r\n        });\r\n    }\r\n    assignAxesToSeries() {\r\n        // This method has to run before `assignSeriesToAxes`.\r\n        const directionToAxesMap = {};\r\n        this.axes.forEach((axis) => {\r\n            var _a;\r\n            const direction = axis.direction;\r\n            const directionAxes = ((_a = directionToAxesMap[direction]) !== null && _a !== void 0 ? _a : (directionToAxesMap[direction] = []));\r\n            directionAxes.push(axis);\r\n        });\r\n        this.series.forEach((series) => {\r\n            series.directions.forEach((direction) => {\r\n                const directionAxes = directionToAxesMap[direction];\r\n                if (!directionAxes) {\r\n                    Logger.warnOnce(`no available axis for direction [${direction}]; check series and axes configuration.`);\r\n                    return;\r\n                }\r\n                const seriesKeys = series.getKeys(direction);\r\n                const newAxis = this.findMatchingAxis(directionAxes, seriesKeys);\r\n                if (!newAxis) {\r\n                    Logger.warnOnce(`no matching axis for direction [${direction}] and keys [${seriesKeys}]; check series and axes configuration.`);\r\n                    return;\r\n                }\r\n                series.axes[direction] = newAxis;\r\n            });\r\n        });\r\n    }\r\n    findMatchingAxis(directionAxes, directionKeys) {\r\n        for (const axis of directionAxes) {\r\n            const axisKeys = axis.keys;\r\n            if (!axisKeys.length) {\r\n                return axis;\r\n            }\r\n            if (!directionKeys) {\r\n                continue;\r\n            }\r\n            for (const directionKey of directionKeys) {\r\n                if (axisKeys.indexOf(directionKey) >= 0) {\r\n                    return axis;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    rawResize(size) {\r\n        var _a;\r\n        let { width, height } = size;\r\n        width = Math.floor(width);\r\n        height = Math.floor(height);\r\n        if (!this.autoSize) {\r\n            return;\r\n        }\r\n        if (width === 0 && height === 0) {\r\n            return;\r\n        }\r\n        const [autoWidth = 0, authHeight = 0] = (_a = this._lastAutoSize) !== null && _a !== void 0 ? _a : [];\r\n        if (autoWidth === width && authHeight === height) {\r\n            return;\r\n        }\r\n        this._lastAutoSize = [width, height];\r\n        this.resize(undefined, undefined, 'SizeMonitor');\r\n    }\r\n    resize(width, height, source) {\r\n        var _a, _b, _c, _d;\r\n        width !== null && width !== void 0 ? width : (width = (_a = this.width) !== null && _a !== void 0 ? _a : (this.autoSize ? (_b = this._lastAutoSize) === null || _b === void 0 ? void 0 : _b[0] : this.scene.canvas.width));\r\n        height !== null && height !== void 0 ? height : (height = (_c = this.height) !== null && _c !== void 0 ? _c : (this.autoSize ? (_d = this._lastAutoSize) === null || _d === void 0 ? void 0 : _d[1] : this.scene.canvas.height));\r\n        this.debug(`Chart.resize() from ${source}`, { width, height, stack: new Error().stack });\r\n        if (!width || !height || !Number.isFinite(width) || !Number.isFinite(height))\r\n            return;\r\n        if (this.scene.resize(width, height)) {\r\n            this.disablePointer();\r\n            this.animationManager.reset();\r\n            let skipAnimations = true;\r\n            if (this.autoSize && this._firstAutoSize) {\r\n                skipAnimations = false;\r\n                this._firstAutoSize = false;\r\n            }\r\n            this.update(ChartUpdateType.PERFORM_LAYOUT, { forceNodeDataRefresh: true, skipAnimations });\r\n        }\r\n    }\r\n    processData() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (this.series.some((s) => s.canHaveAxes)) {\r\n                this.assignAxesToSeries();\r\n                this.assignSeriesToAxes();\r\n            }\r\n            const dataController = new DataController(this.mode);\r\n            const seriesPromises = this.series.map((s) => s.processData(dataController));\r\n            yield dataController.execute();\r\n            yield Promise.all(seriesPromises);\r\n            yield this.updateLegend();\r\n        });\r\n    }\r\n    placeLabels() {\r\n        const visibleSeries = [];\r\n        const data = [];\r\n        for (const series of this.series) {\r\n            if (!series.visible) {\r\n                continue;\r\n            }\r\n            const labelData = series.getLabelData();\r\n            if (!(labelData && isPointLabelDatum(labelData[0]))) {\r\n                continue;\r\n            }\r\n            data.push(labelData);\r\n            visibleSeries.push(series);\r\n        }\r\n        const { seriesRect } = this;\r\n        const labels = seriesRect && data.length > 0\r\n            ? placeLabels(data, { x: 0, y: 0, width: seriesRect.width, height: seriesRect.height })\r\n            : [];\r\n        return new Map(labels.map((l, i) => [visibleSeries[i], l]));\r\n    }\r\n    updateLegend() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            this.legends.forEach((legend, legendType) => {\r\n                const isCategoryLegendData = (data) => data.every((d) => d.legendType === 'category');\r\n                const legendData = this.series.filter((s) => s.showInLegend).flatMap((s) => s.getLegendData(legendType));\r\n                if (isCategoryLegendData(legendData)) {\r\n                    this.validateCategoryLegendData(legendData);\r\n                }\r\n                legend.data = legendData;\r\n            });\r\n        });\r\n    }\r\n    validateCategoryLegendData(legendData) {\r\n        // Validate each series that shares a legend item label uses the same fill colour\r\n        const labelMarkerFills = {};\r\n        legendData.forEach((d) => {\r\n            var _a, _b, _c;\r\n            var _d, _e;\r\n            const seriesType = (_a = this.series.find((s) => s.id === d.seriesId)) === null || _a === void 0 ? void 0 : _a.type;\r\n            if (!seriesType)\r\n                return;\r\n            (_b = labelMarkerFills[seriesType]) !== null && _b !== void 0 ? _b : (labelMarkerFills[seriesType] = {});\r\n            (_c = (_d = labelMarkerFills[seriesType])[_e = d.label.text]) !== null && _c !== void 0 ? _c : (_d[_e] = new Set());\r\n            if (d.marker.fill != null) {\r\n                labelMarkerFills[seriesType][d.label.text].add(d.marker.fill);\r\n            }\r\n        });\r\n        for (const seriesMarkers of Object.values(labelMarkerFills)) {\r\n            for (const [name, fills] of Object.entries(seriesMarkers)) {\r\n                if (fills.size > 1) {\r\n                    Logger.warnOnce(`legend item '${name}' has multiple fill colors, this may cause unexpected behaviour.`);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    processLayout() {\r\n        var _a;\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const oldRect = this.animationRect;\r\n            yield this.performLayout();\r\n            if (oldRect && !((_a = this.animationRect) === null || _a === void 0 ? void 0 : _a.equals(oldRect))) {\r\n                // Skip animations if the layout changed.\r\n                this.animationManager.skipCurrentBatch();\r\n            }\r\n            this.handleNoDataOverlay();\r\n            this.debug('Chart.performUpdate() - seriesRect', this.seriesRect);\r\n        });\r\n    }\r\n    performLayout() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (this.scene.root) {\r\n                this.scene.root.visible = true;\r\n            }\r\n            const { width, height } = this.scene;\r\n            let ctx = { shrinkRect: new BBox(0, 0, width, height) };\r\n            ctx = this.layoutService.dispatchPerformLayout('start-layout', ctx);\r\n            ctx = this.layoutService.dispatchPerformLayout('before-series', ctx);\r\n            return ctx.shrinkRect;\r\n        });\r\n    }\r\n    // x/y are local canvas coordinates in CSS pixels, not actual pixels\r\n    pickSeriesNode(point, exactMatchOnly, maxDistance) {\r\n        var _a, _b;\r\n        const start = performance.now();\r\n        // Disable 'nearest match' options if looking for exact matches only\r\n        const pickModes = exactMatchOnly ? [SeriesNodePickMode.EXACT_SHAPE_MATCH] : undefined;\r\n        // Iterate through series in reverse, as later declared series appears on top of earlier\r\n        // declared series.\r\n        const reverseSeries = [...this.series].reverse();\r\n        let result;\r\n        for (const series of reverseSeries) {\r\n            if (!series.visible || !series.rootGroup.visible) {\r\n                continue;\r\n            }\r\n            const { match, distance } = (_a = series.pickNode(point, pickModes)) !== null && _a !== void 0 ? _a : {};\r\n            if (!match || distance == null) {\r\n                continue;\r\n            }\r\n            if ((!result || result.distance > distance) && distance <= (maxDistance !== null && maxDistance !== void 0 ? maxDistance : Infinity)) {\r\n                result = { series, distance, datum: match };\r\n            }\r\n            if (distance === 0) {\r\n                break;\r\n            }\r\n        }\r\n        this.extraDebugStats['pickSeriesNode'] = Math.round(((_b = this.extraDebugStats['pickSeriesNode']) !== null && _b !== void 0 ? _b : 0) + (performance.now() - start));\r\n        return result;\r\n    }\r\n    onMouseMove(event) {\r\n        this.lastInteractionEvent = event;\r\n        this.pointerScheduler.schedule();\r\n        this.extraDebugStats['mouseX'] = event.offsetX;\r\n        this.extraDebugStats['mouseY'] = event.offsetY;\r\n        this.update(ChartUpdateType.SCENE_RENDER);\r\n    }\r\n    onLeave(event) {\r\n        if (this.tooltip.pointerLeftOntoTooltip(event)) {\r\n            return;\r\n        }\r\n        this.disablePointer();\r\n    }\r\n    handlePointer(event) {\r\n        const { lastPick, hoverRect } = this;\r\n        const { offsetX, offsetY } = event;\r\n        const disablePointer = (highlightOnly = false) => {\r\n            if (lastPick) {\r\n                // Cursor moved from a non-marker node to empty space.\r\n                this.disablePointer(highlightOnly);\r\n            }\r\n        };\r\n        if (!(hoverRect === null || hoverRect === void 0 ? void 0 : hoverRect.containsPoint(offsetX, offsetY))) {\r\n            disablePointer();\r\n            return;\r\n        }\r\n        // Handle node highlighting and tooltip toggling when pointer within `tooltip.range`\r\n        this.handlePointerTooltip(event, disablePointer);\r\n        // Handle node highlighting and mouse cursor when pointer withing `series[].nodeClickRange`\r\n        this.handlePointerNode(event);\r\n    }\r\n    handlePointerTooltip(event, disablePointer) {\r\n        const { lastPick, tooltip } = this;\r\n        const { range } = tooltip;\r\n        const { offsetX, offsetY } = event;\r\n        let pixelRange;\r\n        if (typeof range === 'number' && Number.isFinite(range)) {\r\n            pixelRange = range;\r\n        }\r\n        const pick = this.pickSeriesNode({ x: offsetX, y: offsetY }, range === 'exact', pixelRange);\r\n        if (!pick) {\r\n            this.tooltipManager.removeTooltip(this.id);\r\n            if (this.highlight.range === 'tooltip')\r\n                disablePointer(true);\r\n            return;\r\n        }\r\n        const isNewDatum = this.highlight.range === 'node' || !lastPick || lastPick.datum !== pick.datum;\r\n        let html;\r\n        if (isNewDatum) {\r\n            html = pick.series.getTooltipHtml(pick.datum);\r\n            if (this.highlight.range === 'tooltip') {\r\n                this.highlightManager.updateHighlight(this.id, pick.datum);\r\n            }\r\n        }\r\n        else if (lastPick) {\r\n            lastPick.event = event.sourceEvent;\r\n        }\r\n        const isPixelRange = pixelRange != null;\r\n        const tooltipEnabled = this.tooltip.enabled && pick.series.tooltip.enabled;\r\n        const exactlyMatched = range === 'exact' && pick.distance === 0;\r\n        const rangeMatched = range === 'nearest' || isPixelRange || exactlyMatched;\r\n        const shouldUpdateTooltip = tooltipEnabled && rangeMatched && (!isNewDatum || html !== undefined);\r\n        const meta = TooltipManager.makeTooltipMeta(event, this.scene.canvas, pick.datum, this.specialOverrides.window);\r\n        if (shouldUpdateTooltip) {\r\n            this.tooltipManager.updateTooltip(this.id, meta, html);\r\n        }\r\n    }\r\n    handlePointerNode(event) {\r\n        const found = this.checkSeriesNodeRange(event, (series, datum) => {\r\n            if (series.hasEventListener('nodeClick') || series.hasEventListener('nodeDoubleClick')) {\r\n                this.cursorManager.updateCursor('chart', 'pointer');\r\n            }\r\n            if (this.highlight.range === 'node') {\r\n                this.highlightManager.updateHighlight(this.id, datum);\r\n            }\r\n        });\r\n        if (!found) {\r\n            this.cursorManager.updateCursor('chart');\r\n            if (this.highlight.range === 'node') {\r\n                this.highlightManager.updateHighlight(this.id);\r\n            }\r\n        }\r\n    }\r\n    onClick(event) {\r\n        if (this.checkSeriesNodeClick(event)) {\r\n            this.update(ChartUpdateType.SERIES_UPDATE);\r\n            return;\r\n        }\r\n        this.fireEvent({\r\n            type: 'click',\r\n            event: event.sourceEvent,\r\n        });\r\n    }\r\n    onDoubleClick(event) {\r\n        if (this.checkSeriesNodeDoubleClick(event)) {\r\n            this.update(ChartUpdateType.SERIES_UPDATE);\r\n            return;\r\n        }\r\n        this.fireEvent({\r\n            type: 'doubleClick',\r\n            event: event.sourceEvent,\r\n        });\r\n    }\r\n    checkSeriesNodeClick(event) {\r\n        return this.checkSeriesNodeRange(event, (series, datum) => series.fireNodeClickEvent(event.sourceEvent, datum));\r\n    }\r\n    checkSeriesNodeDoubleClick(event) {\r\n        return this.checkSeriesNodeRange(event, (series, datum) => series.fireNodeDoubleClickEvent(event.sourceEvent, datum));\r\n    }\r\n    checkSeriesNodeRange(event, callback) {\r\n        const nearestNode = this.pickSeriesNode({ x: event.offsetX, y: event.offsetY }, false);\r\n        const datum = nearestNode === null || nearestNode === void 0 ? void 0 : nearestNode.datum;\r\n        const nodeClickRange = datum === null || datum === void 0 ? void 0 : datum.series.nodeClickRange;\r\n        let pixelRange;\r\n        if (typeof nodeClickRange === 'number' && Number.isFinite(nodeClickRange)) {\r\n            pixelRange = nodeClickRange;\r\n        }\r\n        // Find the node if exactly matched and update the highlight picked node\r\n        let pickedNode = this.pickSeriesNode({ x: event.offsetX, y: event.offsetY }, true);\r\n        if (pickedNode) {\r\n            this.highlightManager.updatePicked(this.id, pickedNode.datum);\r\n        }\r\n        else {\r\n            this.highlightManager.updatePicked(this.id);\r\n        }\r\n        // First check if we should trigger the callback based on nearest node\r\n        if (datum && nodeClickRange === 'nearest') {\r\n            callback(datum.series, datum);\r\n            return true;\r\n        }\r\n        if (nodeClickRange !== 'exact') {\r\n            pickedNode = this.pickSeriesNode({ x: event.offsetX, y: event.offsetY }, false, pixelRange);\r\n        }\r\n        if (!pickedNode)\r\n            return false;\r\n        // Then if we've picked a node within the pixel range, or exactly, trigger the callback\r\n        const isPixelRange = pixelRange != null;\r\n        const exactlyMatched = nodeClickRange === 'exact' && pickedNode.distance === 0;\r\n        if (isPixelRange || exactlyMatched) {\r\n            callback(pickedNode.series, pickedNode.datum);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    changeHighlightDatum(event) {\r\n        var _a, _b;\r\n        const seriesToUpdate = new Set();\r\n        const { series: newSeries = undefined, datum: newDatum } = (_a = event.currentHighlight) !== null && _a !== void 0 ? _a : {};\r\n        const { series: lastSeries = undefined, datum: lastDatum } = (_b = event.previousHighlight) !== null && _b !== void 0 ? _b : {};\r\n        if (lastSeries) {\r\n            seriesToUpdate.add(lastSeries);\r\n        }\r\n        if (newSeries) {\r\n            seriesToUpdate.add(newSeries);\r\n        }\r\n        // Adjust cursor if a specific datum is highlighted, rather than just a series.\r\n        if ((lastSeries === null || lastSeries === void 0 ? void 0 : lastSeries.cursor) && lastDatum) {\r\n            this.cursorManager.updateCursor(lastSeries.id);\r\n        }\r\n        if ((newSeries === null || newSeries === void 0 ? void 0 : newSeries.cursor) && newDatum) {\r\n            this.cursorManager.updateCursor(newSeries.id, newSeries.cursor);\r\n        }\r\n        this.lastPick = event.currentHighlight ? { datum: event.currentHighlight } : undefined;\r\n        const updateAll = newSeries == null || lastSeries == null;\r\n        if (updateAll) {\r\n            this.update(ChartUpdateType.SERIES_UPDATE);\r\n        }\r\n        else {\r\n            this.update(ChartUpdateType.SERIES_UPDATE, { seriesToUpdate });\r\n        }\r\n    }\r\n    waitForUpdate(timeoutMs = 5000) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const start = performance.now();\r\n            if (this._pendingFactoryUpdatesCount > 0) {\r\n                // Await until any pending updates are flushed through.\r\n                yield this.updateMutex.waitForClearAcquireQueue();\r\n            }\r\n            while (this._performUpdateType !== ChartUpdateType.NONE) {\r\n                if (performance.now() - start > timeoutMs) {\r\n                    throw new Error('waitForUpdate() timeout reached.');\r\n                }\r\n                yield sleep(5);\r\n            }\r\n            // Await until any remaining updates are flushed through.\r\n            yield this.updateMutex.waitForClearAcquireQueue();\r\n        });\r\n    }\r\n    handleNoDataOverlay() {\r\n        const shouldDisplayNoDataOverlay = !this.series.some((s) => s.hasData());\r\n        if (shouldDisplayNoDataOverlay && this.seriesRect) {\r\n            this.overlays.noData.show(this.seriesRect);\r\n        }\r\n        else {\r\n            this.overlays.noData.hide();\r\n        }\r\n    }\r\n    getMinRect() {\r\n        const minRects = this.series.map((series) => series.getMinRect()).filter((rect) => rect !== undefined);\r\n        if (!minRects.length)\r\n            return undefined;\r\n        return new BBox(0, 0, minRects.reduce((max, rect) => Math.max(max, rect.width), 0), minRects.reduce((max, rect) => Math.max(max, rect.height), 0));\r\n    }\r\n}\r\n__decorate([\r\n    ActionOnSet({\r\n        newValue(value) {\r\n            if (this.destroyed)\r\n                return;\r\n            value.appendChild(this.element);\r\n        },\r\n        oldValue(value) {\r\n            value.removeChild(this.element);\r\n        },\r\n    }),\r\n    __metadata(\"design:type\", Object)\r\n], Chart.prototype, \"container\", void 0);\r\n__decorate([\r\n    ActionOnSet({\r\n        newValue(value) {\r\n            var _a;\r\n            (_a = this.series) === null || _a === void 0 ? void 0 : _a.forEach((series) => {\r\n                series.setChartData(value);\r\n            });\r\n        },\r\n    }),\r\n    __metadata(\"design:type\", Object)\r\n], Chart.prototype, \"data\", void 0);\r\n__decorate([\r\n    ActionOnSet({\r\n        newValue(value) {\r\n            this.resize(value, undefined, 'width option');\r\n        },\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], Chart.prototype, \"width\", void 0);\r\n__decorate([\r\n    ActionOnSet({\r\n        newValue(value) {\r\n            this.resize(undefined, value, 'height option');\r\n        },\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], Chart.prototype, \"height\", void 0);\r\n__decorate([\r\n    ActionOnSet({\r\n        changeValue(value) {\r\n            this.autoSizeChanged(value);\r\n        },\r\n    }),\r\n    Validate(BOOLEAN),\r\n    __metadata(\"design:type\", Object)\r\n], Chart.prototype, \"autoSize\", void 0);\r\n__decorate([\r\n    ActionOnSet({\r\n        newValue(value) {\r\n            var _a;\r\n            (_a = this.scene.root) === null || _a === void 0 ? void 0 : _a.appendChild(value.node);\r\n        },\r\n        oldValue(oldValue) {\r\n            var _a;\r\n            (_a = this.scene.root) === null || _a === void 0 ? void 0 : _a.removeChild(oldValue.node);\r\n        },\r\n    }),\r\n    __metadata(\"design:type\", Function)\r\n], Chart.prototype, \"title\", void 0);\r\n__decorate([\r\n    ActionOnSet({\r\n        newValue(value) {\r\n            var _a;\r\n            (_a = this.scene.root) === null || _a === void 0 ? void 0 : _a.appendChild(value.node);\r\n        },\r\n        oldValue(oldValue) {\r\n            var _a;\r\n            (_a = this.scene.root) === null || _a === void 0 ? void 0 : _a.removeChild(oldValue.node);\r\n        },\r\n    }),\r\n    __metadata(\"design:type\", Function)\r\n], Chart.prototype, \"subtitle\", void 0);\r\n__decorate([\r\n    ActionOnSet({\r\n        newValue(value) {\r\n            var _a;\r\n            (_a = this.scene.root) === null || _a === void 0 ? void 0 : _a.appendChild(value.node);\r\n        },\r\n        oldValue(oldValue) {\r\n            var _a;\r\n            (_a = this.scene.root) === null || _a === void 0 ? void 0 : _a.removeChild(oldValue.node);\r\n        },\r\n    }),\r\n    __metadata(\"design:type\", Function)\r\n], Chart.prototype, \"footnote\", void 0);\r\n__decorate([\r\n    Validate(STRING_UNION('standalone', 'integrated')),\r\n    __metadata(\"design:type\", String)\r\n], Chart.prototype, \"mode\", void 0);\n\nvar ArcType;\r\n(function (ArcType) {\r\n    ArcType[ArcType[\"Open\"] = 0] = \"Open\";\r\n    ArcType[ArcType[\"Chord\"] = 1] = \"Chord\";\r\n    ArcType[ArcType[\"Round\"] = 2] = \"Round\";\r\n})(ArcType || (ArcType = {}));\r\n/**\r\n * Elliptical arc node.\r\n */\r\nclass Arc extends Path {\r\n    constructor() {\r\n        super();\r\n        this.centerX = 0;\r\n        this.centerY = 0;\r\n        this.radius = 10;\r\n        this.startAngle = 0;\r\n        this.endAngle = Math.PI * 2;\r\n        this.counterClockwise = false;\r\n        /**\r\n         * The type of arc to render:\r\n         * - {@link ArcType.Open} - end points of the arc segment are not connected (default)\r\n         * - {@link ArcType.Chord} - end points of the arc segment are connected by a line segment\r\n         * - {@link ArcType.Round} - each of the end points of the arc segment are connected\r\n         *                           to the center of the arc\r\n         * Arcs with {@link ArcType.Open} do not support hit testing, even if they have their\r\n         * {@link Shape.fillStyle} set, because they are not closed paths. Hit testing support\r\n         * would require using two paths - one for rendering, another for hit testing - and there\r\n         * doesn't seem to be a compelling reason to do that, when one can just use {@link ArcType.Chord}\r\n         * to create a closed path.\r\n         */\r\n        this.type = ArcType.Open;\r\n        this.restoreOwnStyles();\r\n    }\r\n    get fullPie() {\r\n        return isEqual(normalizeAngle360(this.startAngle), normalizeAngle360(this.endAngle));\r\n    }\r\n    updatePath() {\r\n        const path = this.path;\r\n        path.clear(); // No need to recreate the Path, can simply clear the existing one.\r\n        path.arc(this.centerX, this.centerY, this.radius, this.startAngle, this.endAngle, this.counterClockwise);\r\n        if (this.type === ArcType.Chord) {\r\n            path.closePath();\r\n        }\r\n        else if (this.type === ArcType.Round && !this.fullPie) {\r\n            path.lineTo(this.centerX, this.centerY);\r\n            path.closePath();\r\n        }\r\n    }\r\n    computeBBox() {\r\n        // Only works with full arcs (circles) and untransformed ellipses.\r\n        return new BBox(this.centerX - this.radius, this.centerY - this.radius, this.radius * 2, this.radius * 2);\r\n    }\r\n    isPointInPath(x, y) {\r\n        const point = this.transformPoint(x, y);\r\n        const bbox = this.computeBBox();\r\n        return (this.type !== ArcType.Open &&\r\n            bbox.containsPoint(point.x, point.y) &&\r\n            this.path.isPointInPath(point.x, point.y));\r\n    }\r\n}\r\nArc.className = 'Arc';\r\nArc.defaultStyles = Object.assign({}, Shape.defaultStyles, {\r\n    lineWidth: 1,\r\n    fillStyle: null,\r\n});\r\n__decorate([\r\n    ScenePathChangeDetection(),\r\n    __metadata(\"design:type\", Number)\r\n], Arc.prototype, \"centerX\", void 0);\r\n__decorate([\r\n    ScenePathChangeDetection(),\r\n    __metadata(\"design:type\", Number)\r\n], Arc.prototype, \"centerY\", void 0);\r\n__decorate([\r\n    ScenePathChangeDetection(),\r\n    __metadata(\"design:type\", Number)\r\n], Arc.prototype, \"radius\", void 0);\r\n__decorate([\r\n    ScenePathChangeDetection(),\r\n    __metadata(\"design:type\", Number)\r\n], Arc.prototype, \"startAngle\", void 0);\r\n__decorate([\r\n    ScenePathChangeDetection(),\r\n    __metadata(\"design:type\", Number)\r\n], Arc.prototype, \"endAngle\", void 0);\r\n__decorate([\r\n    ScenePathChangeDetection(),\r\n    __metadata(\"design:type\", Boolean)\r\n], Arc.prototype, \"counterClockwise\", void 0);\r\n__decorate([\r\n    ScenePathChangeDetection(),\r\n    __metadata(\"design:type\", Number)\r\n], Arc.prototype, \"type\", void 0);\n\nconst convertColorStringToHsla = (v) => {\r\n    const color = Color.fromString(v);\r\n    const [h, s, l] = Color.RGBtoHSL(color.r, color.g, color.b);\r\n    return { h, s, l, a: color.a };\r\n};\r\nconst interpolateHsla = (x, y, d) => {\r\n    d = Math.min(Math.max(d, 0), 1);\r\n    let h;\r\n    let s;\r\n    if (Number.isNaN(x.h) && Number.isNaN(y.h)) {\r\n        h = 0;\r\n        s = 0;\r\n    }\r\n    else if (Number.isNaN(x.h)) {\r\n        h = y.h;\r\n        s = y.s;\r\n    }\r\n    else if (Number.isNaN(y.h)) {\r\n        h = x.h;\r\n        s = x.s;\r\n    }\r\n    else {\r\n        const xH = x.h;\r\n        let yH = y.h;\r\n        const deltaH = y.h - x.h;\r\n        if (deltaH > 180) {\r\n            yH -= 360;\r\n        }\r\n        else if (deltaH < -180) {\r\n            yH += 360;\r\n        }\r\n        h = xH * (1 - d) + yH * d;\r\n        s = x.s * (1 - d) + y.s * d;\r\n    }\r\n    const l = x.l * (1 - d) + y.l * d;\r\n    const a = x.a * (1 - d) + y.a * d;\r\n    return Color.fromHSL(h, s, l, a);\r\n};\r\nclass ColorScale {\r\n    constructor() {\r\n        this.domain = [0, 1];\r\n        this.range = ['red', 'blue'];\r\n        this.parsedRange = this.range.map(convertColorStringToHsla);\r\n    }\r\n    update() {\r\n        const { domain, range } = this;\r\n        if (domain.length < 2) {\r\n            Logger.warnOnce('`colorDomain` should have at least 2 values.');\r\n            if (domain.length === 0) {\r\n                domain.push(0, 1);\r\n            }\r\n            else if (domain.length === 1) {\r\n                domain.push(domain[0] + 1);\r\n            }\r\n        }\r\n        for (let i = 1; i < domain.length; i++) {\r\n            const a = domain[i - 1];\r\n            const b = domain[i];\r\n            if (a >= b) {\r\n                Logger.warnOnce('`colorDomain` values should be supplied in ascending order.');\r\n                domain.sort((a, b) => a - b);\r\n                break;\r\n            }\r\n        }\r\n        if (range.length < domain.length) {\r\n            for (let i = range.length; i < domain.length; i++) {\r\n                range.push(range.length > 0 ? range[0] : 'black');\r\n            }\r\n        }\r\n        this.parsedRange = this.range.map(convertColorStringToHsla);\r\n    }\r\n    convert(x) {\r\n        const { domain, range, parsedRange } = this;\r\n        const d0 = domain[0];\r\n        const d1 = domain[domain.length - 1];\r\n        const r0 = range[0];\r\n        const r1 = range[range.length - 1];\r\n        if (x <= d0) {\r\n            return r0;\r\n        }\r\n        if (x >= d1) {\r\n            return r1;\r\n        }\r\n        let index;\r\n        let q;\r\n        if (domain.length === 2) {\r\n            const t = (x - d0) / (d1 - d0);\r\n            const step = 1 / (range.length - 1);\r\n            index = range.length <= 2 ? 0 : Math.min(Math.floor(t * (range.length - 1)), range.length - 2);\r\n            q = (t - index * step) / step;\r\n        }\r\n        else {\r\n            for (index = 0; index < domain.length - 2; index++) {\r\n                if (x < domain[index + 1]) {\r\n                    break;\r\n                }\r\n            }\r\n            const a = domain[index];\r\n            const b = domain[index + 1];\r\n            q = (x - a) / (b - a);\r\n        }\r\n        const c0 = parsedRange[index];\r\n        const c1 = parsedRange[index + 1];\r\n        return interpolateHsla(c0, c1, q).toRgbaString();\r\n    }\r\n}\n\nclass LinearGradientFill extends Shape {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.direction = 'to-right';\r\n        this.stops = undefined;\r\n        this._mask = undefined;\r\n    }\r\n    get mask() {\r\n        return this._mask;\r\n    }\r\n    set mask(newMask) {\r\n        if (this._mask != null) {\r\n            this.removeChild(this._mask);\r\n        }\r\n        if (newMask != null) {\r\n            this.appendChild(newMask);\r\n        }\r\n        this._mask = newMask;\r\n    }\r\n    isPointInPath(x, y) {\r\n        var _a, _b;\r\n        return (_b = (_a = this.mask) === null || _a === void 0 ? void 0 : _a.isPointInPath(x, y)) !== null && _b !== void 0 ? _b : false;\r\n    }\r\n    computeBBox() {\r\n        var _a;\r\n        return (_a = this.mask) === null || _a === void 0 ? void 0 : _a.computeBBox();\r\n    }\r\n    render(renderCtx) {\r\n        const { mask, stops } = this;\r\n        const { ctx, devicePixelRatio } = renderCtx;\r\n        const pixelLength = 1 / devicePixelRatio;\r\n        const maskBbox = mask === null || mask === void 0 ? void 0 : mask.computeTransformedBBox();\r\n        if (mask == null || stops == null || maskBbox == null)\r\n            return;\r\n        if (mask.dirtyPath) {\r\n            mask.updatePath();\r\n            mask.dirtyPath = false;\r\n        }\r\n        ctx.save();\r\n        ctx.beginPath();\r\n        mask.path.draw(ctx);\r\n        ctx.clip();\r\n        ctx.resetTransform();\r\n        const x0 = Math.floor(maskBbox.x);\r\n        const x1 = Math.ceil(maskBbox.x + maskBbox.width);\r\n        const y0 = Math.floor(maskBbox.y);\r\n        const y1 = Math.ceil(maskBbox.y + maskBbox.height);\r\n        const colorScale = new ColorScale();\r\n        const [i0, i1] = this.direction === 'to-right' ? [x0, x1] : [y0, y1];\r\n        colorScale.domain = stops.map((_, index) => {\r\n            return i0 + ((i1 - i0) * index) / (stops.length - 1);\r\n        });\r\n        colorScale.range = stops;\r\n        colorScale.update();\r\n        if (this.direction === 'to-right') {\r\n            const height = y1 - y0;\r\n            for (let x = x0; x <= x1; x += pixelLength) {\r\n                ctx.fillStyle = colorScale.convert(x);\r\n                ctx.fillRect(x, y0, pixelLength, height);\r\n            }\r\n        }\r\n        else {\r\n            const width = x1 - x0;\r\n            for (let y = y0; y <= y1; y += pixelLength) {\r\n                ctx.fillStyle = colorScale.convert(y);\r\n                ctx.fillRect(x0, y, width, pixelLength);\r\n            }\r\n        }\r\n        ctx.restore();\r\n    }\r\n}\r\n__decorate([\r\n    SceneChangeDetection({ redraw: RedrawType.MAJOR }),\r\n    __metadata(\"design:type\", String)\r\n], LinearGradientFill.prototype, \"direction\", void 0);\r\n__decorate([\r\n    SceneChangeDetection({ redraw: RedrawType.MAJOR }),\r\n    __metadata(\"design:type\", Array)\r\n], LinearGradientFill.prototype, \"stops\", void 0);\r\n__decorate([\r\n    SceneChangeDetection({ redraw: RedrawType.MAJOR }),\r\n    __metadata(\"design:type\", Function)\r\n], LinearGradientFill.prototype, \"_mask\", void 0);\n\nclass Rect extends Path {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.borderPath = new Path2D();\r\n        this.x = 0;\r\n        this.y = 0;\r\n        this.width = 10;\r\n        this.height = 10;\r\n        this.radius = 0;\r\n        /**\r\n         * If `true`, the rect is aligned to the pixel grid for crisp looking lines.\r\n         * Animated rects may not look nice with this option enabled, for example\r\n         * when a rect is translated by a sub-pixel value on each frame.\r\n         */\r\n        this.crisp = false;\r\n        this.lastUpdatePathStrokeWidth = Shape.defaultStyles.strokeWidth;\r\n        this.effectiveStrokeWidth = Shape.defaultStyles.strokeWidth;\r\n        /**\r\n         * When the rectangle's width or height is less than a pixel\r\n         * and crisp mode is on, the rectangle will still fit into the pixel,\r\n         * but will be less opaque to make an effect of holding less space.\r\n         */\r\n        this.microPixelEffectOpacity = 1;\r\n    }\r\n    isDirtyPath() {\r\n        var _a;\r\n        if (this.lastUpdatePathStrokeWidth !== this.strokeWidth) {\r\n            return true;\r\n        }\r\n        return !!(this.path.isDirty() || this.borderPath.isDirty() || ((_a = this.clipPath) === null || _a === void 0 ? void 0 : _a.isDirty()));\r\n    }\r\n    updatePath() {\r\n        var _a, _b, _c;\r\n        const { path, borderPath, crisp } = this;\r\n        let { x, y, width: w, height: h, strokeWidth } = this;\r\n        const pixelRatio = (_b = (_a = this.layerManager) === null || _a === void 0 ? void 0 : _a.canvas.pixelRatio) !== null && _b !== void 0 ? _b : 1;\r\n        const pixelSize = 1 / pixelRatio;\r\n        let microPixelEffectOpacity = 1;\r\n        path.clear({ trackChanges: true });\r\n        borderPath.clear({ trackChanges: true });\r\n        if (crisp) {\r\n            if (w <= pixelSize) {\r\n                microPixelEffectOpacity *= w / pixelSize;\r\n            }\r\n            if (h <= pixelSize) {\r\n                microPixelEffectOpacity *= h / pixelSize;\r\n            }\r\n            w = this.align(x, w);\r\n            h = this.align(y, h);\r\n            x = this.align(x);\r\n            y = this.align(y);\r\n        }\r\n        if (strokeWidth) {\r\n            if (w < pixelSize) {\r\n                // Too narrow, draw a vertical stroke\r\n                const lx = x + pixelSize / 2;\r\n                borderPath.moveTo(lx, y);\r\n                borderPath.lineTo(lx, y + h);\r\n                strokeWidth = pixelSize;\r\n                this.borderClipPath = undefined;\r\n            }\r\n            else if (h < pixelSize) {\r\n                // Too narrow, draw a horizontal stroke\r\n                const ly = y + pixelSize / 2;\r\n                borderPath.moveTo(x, ly);\r\n                borderPath.lineTo(x + w, ly);\r\n                strokeWidth = pixelSize;\r\n                this.borderClipPath = undefined;\r\n            }\r\n            else if (strokeWidth < w && strokeWidth < h) {\r\n                const halfStrokeWidth = strokeWidth / 2;\r\n                x += halfStrokeWidth;\r\n                y += halfStrokeWidth;\r\n                w -= strokeWidth;\r\n                h -= strokeWidth;\r\n                // Clipping not needed in this case; fill to center of stroke.\r\n                this.borderClipPath = undefined;\r\n                path.rect(x, y, w, h);\r\n                borderPath.rect(x, y, w, h);\r\n            }\r\n            else {\r\n                // Skip the fill and just render the stroke.\r\n                this.borderClipPath = (_c = this.borderClipPath) !== null && _c !== void 0 ? _c : new Path2D();\r\n                this.borderClipPath.clear({ trackChanges: true });\r\n                this.borderClipPath.rect(x, y, w, h);\r\n                borderPath.rect(x, y, w, h);\r\n            }\r\n        }\r\n        else {\r\n            // No borderPath needed, and thus no clipPath needed either. Fill to full extent of\r\n            // Rect.\r\n            this.borderClipPath = undefined;\r\n            path.rect(x, y, w, h);\r\n        }\r\n        this.effectiveStrokeWidth = strokeWidth;\r\n        this.lastUpdatePathStrokeWidth = strokeWidth;\r\n        this.microPixelEffectOpacity = microPixelEffectOpacity;\r\n    }\r\n    computeBBox() {\r\n        const { x, y, width, height } = this;\r\n        return new BBox(x, y, width, height);\r\n    }\r\n    isPointInPath(x, y) {\r\n        const point = this.transformPoint(x, y);\r\n        const bbox = this.computeBBox();\r\n        return bbox.containsPoint(point.x, point.y);\r\n    }\r\n    applyFillAlpha(ctx) {\r\n        const { fillOpacity, microPixelEffectOpacity, opacity } = this;\r\n        const { globalAlpha } = ctx;\r\n        ctx.globalAlpha = globalAlpha * opacity * fillOpacity * microPixelEffectOpacity;\r\n    }\r\n    renderStroke(ctx) {\r\n        const { stroke, effectiveStrokeWidth, borderPath, borderClipPath, opacity, microPixelEffectOpacity } = this;\r\n        const borderActive = !!stroke && !!effectiveStrokeWidth;\r\n        if (borderActive) {\r\n            const { strokeOpacity, lineDash, lineDashOffset, lineCap, lineJoin } = this;\r\n            if (borderClipPath) {\r\n                // strokeWidth is larger than width or height, so use clipping to render correctly.\r\n                // This is the simplest way to achieve the correct rendering due to nuances with ~0\r\n                // width/height lines in Canvas operations.\r\n                borderClipPath.draw(ctx);\r\n                ctx.clip();\r\n            }\r\n            borderPath.draw(ctx);\r\n            const { globalAlpha } = ctx;\r\n            ctx.strokeStyle = stroke;\r\n            ctx.globalAlpha = globalAlpha * opacity * strokeOpacity * microPixelEffectOpacity;\r\n            ctx.lineWidth = effectiveStrokeWidth;\r\n            if (lineDash) {\r\n                ctx.setLineDash(lineDash);\r\n            }\r\n            if (lineDashOffset) {\r\n                ctx.lineDashOffset = lineDashOffset;\r\n            }\r\n            if (lineCap) {\r\n                ctx.lineCap = lineCap;\r\n            }\r\n            if (lineJoin) {\r\n                ctx.lineJoin = lineJoin;\r\n            }\r\n            ctx.stroke();\r\n            ctx.globalAlpha = globalAlpha;\r\n        }\r\n    }\r\n}\r\nRect.className = 'Rect';\r\n__decorate([\r\n    ScenePathChangeDetection(),\r\n    __metadata(\"design:type\", Number)\r\n], Rect.prototype, \"x\", void 0);\r\n__decorate([\r\n    ScenePathChangeDetection(),\r\n    __metadata(\"design:type\", Number)\r\n], Rect.prototype, \"y\", void 0);\r\n__decorate([\r\n    ScenePathChangeDetection(),\r\n    __metadata(\"design:type\", Number)\r\n], Rect.prototype, \"width\", void 0);\r\n__decorate([\r\n    ScenePathChangeDetection(),\r\n    __metadata(\"design:type\", Number)\r\n], Rect.prototype, \"height\", void 0);\r\n__decorate([\r\n    ScenePathChangeDetection(),\r\n    __metadata(\"design:type\", Number)\r\n], Rect.prototype, \"radius\", void 0);\r\n__decorate([\r\n    ScenePathChangeDetection(),\r\n    __metadata(\"design:type\", Boolean)\r\n], Rect.prototype, \"crisp\", void 0);\n\nclass Image extends Node {\r\n    constructor(sourceImage) {\r\n        super();\r\n        this.x = 0;\r\n        this.y = 0;\r\n        this.width = 0;\r\n        this.height = 0;\r\n        this.opacity = 1;\r\n        this.sourceImage = sourceImage;\r\n    }\r\n    render(renderCtx) {\r\n        const { ctx, forceRender, stats } = renderCtx;\r\n        if (this.dirty === RedrawType.NONE && !forceRender) {\r\n            if (stats)\r\n                stats.nodesSkipped++;\r\n            return;\r\n        }\r\n        this.computeTransformMatrix();\r\n        this.matrix.toContext(ctx);\r\n        const image = this.sourceImage;\r\n        ctx.globalAlpha = this.opacity;\r\n        ctx.drawImage(image, 0, 0, image.width, image.height, this.x, this.y, this.width, this.height);\r\n        super.render(renderCtx);\r\n    }\r\n}\r\n__decorate([\r\n    SceneChangeDetection({ redraw: RedrawType.MAJOR }),\r\n    __metadata(\"design:type\", Number)\r\n], Image.prototype, \"x\", void 0);\r\n__decorate([\r\n    SceneChangeDetection({ redraw: RedrawType.MAJOR }),\r\n    __metadata(\"design:type\", Number)\r\n], Image.prototype, \"y\", void 0);\r\n__decorate([\r\n    SceneChangeDetection({ redraw: RedrawType.MAJOR }),\r\n    __metadata(\"design:type\", Number)\r\n], Image.prototype, \"width\", void 0);\r\n__decorate([\r\n    SceneChangeDetection({ redraw: RedrawType.MAJOR }),\r\n    __metadata(\"design:type\", Number)\r\n], Image.prototype, \"height\", void 0);\r\n__decorate([\r\n    SceneChangeDetection({ redraw: RedrawType.MAJOR }),\r\n    __metadata(\"design:type\", Number)\r\n], Image.prototype, \"opacity\", void 0);\n\nconst motion = Object.assign(Object.assign({}, fromToMotion$1), resetMotion$1);\n\nvar integratedChartsScene = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    motion: motion,\n    Caption: Caption,\n    DropShadow: DropShadow,\n    Group: Group,\n    Scene: Scene,\n    Node: Node,\n    get PointerEvents () { return PointerEvents; },\n    get RedrawType () { return RedrawType; },\n    SceneChangeDetection: SceneChangeDetection,\n    Selection: Selection,\n    Arc: Arc,\n    Line: Line,\n    LinearGradientFill: LinearGradientFill,\n    Path: Path,\n    ScenePathChangeDetection: ScenePathChangeDetection,\n    Rect: Rect,\n    Sector: Sector,\n    Shape: Shape,\n    Text: Text,\n    getFont: getFont,\n    ContinuousScale: ContinuousScale,\n    BandScale: BandScale,\n    LinearScale: LinearScale,\n    toRadians: toRadians,\n    Label: Label,\n    Marker: Marker,\n    getMarker: getMarker,\n    Circle: Circle,\n    Diamond: Diamond,\n    Square: Square,\n    Triangle: Triangle,\n    Tooltip: Tooltip,\n    toTooltipHtml: toTooltipHtml,\n    BBox: BBox,\n    nearestSquared: nearestSquared,\n    nearestSquaredInContainer: nearestSquaredInContainer,\n    HdpiCanvas: HdpiCanvas,\n    Image: Image,\n    Path2D: Path2D,\n    easing: easing\n});\n\nconst DEFAULT_DIRECTION_KEYS = {\r\n    [ChartAxisDirection.X]: ['xKey'],\r\n    [ChartAxisDirection.Y]: ['yKey'],\r\n};\r\nconst DEFAULT_DIRECTION_NAMES = {\r\n    [ChartAxisDirection.X]: ['xName'],\r\n    [ChartAxisDirection.Y]: ['yName'],\r\n};\r\nclass CartesianSeriesNodeClickEvent extends SeriesNodeClickEvent {\r\n    constructor(type, nativeEvent, datum, series) {\r\n        super(type, nativeEvent, datum, series);\r\n        this.xKey = series.xKey;\r\n        this.yKey = series.yKey;\r\n    }\r\n}\r\nclass CartesianSeries extends DataModelSeries {\r\n    get contextNodeData() {\r\n        return this._contextNodeData.slice();\r\n    }\r\n    constructor(_a) {\r\n        var { pathsPerSeries = 1, hasMarkers = false, hasHighlightedLabels = false, pathsZIndexSubOrderOffset = [], directionKeys = DEFAULT_DIRECTION_KEYS, directionNames = DEFAULT_DIRECTION_NAMES, datumSelectionGarbageCollection = true, markerSelectionGarbageCollection = true, animationResetFns } = _a, otherOpts = __rest(_a, [\"pathsPerSeries\", \"hasMarkers\", \"hasHighlightedLabels\", \"pathsZIndexSubOrderOffset\", \"directionKeys\", \"directionNames\", \"datumSelectionGarbageCollection\", \"markerSelectionGarbageCollection\", \"animationResetFns\"]);\r\n        super(Object.assign({ directionKeys,\r\n            directionNames, useSeriesGroupLayer: true, canHaveAxes: true }, otherOpts));\r\n        this.legendItemName = undefined;\r\n        this._contextNodeData = [];\r\n        this.NodeClickEvent = CartesianSeriesNodeClickEvent;\r\n        this.highlightSelection = Selection.select(this.highlightNode, () => this.opts.hasMarkers ? this.markerFactory() : this.nodeFactory());\r\n        this.highlightLabelSelection = Selection.select(this.highlightLabel, Text);\r\n        this.annotationSelections = new Set();\r\n        this.subGroups = [];\r\n        this.subGroupId = 0;\r\n        this.debug = Debug.create();\r\n        this.opts = {\r\n            pathsPerSeries,\r\n            hasMarkers,\r\n            hasHighlightedLabels,\r\n            pathsZIndexSubOrderOffset,\r\n            directionKeys,\r\n            directionNames,\r\n            animationResetFns,\r\n            datumSelectionGarbageCollection,\r\n            markerSelectionGarbageCollection,\r\n        };\r\n        this.animationState = new StateMachine('empty', {\r\n            empty: {\r\n                update: {\r\n                    target: 'ready',\r\n                    action: (data) => this.animateEmptyUpdateReady(data),\r\n                },\r\n            },\r\n            ready: {\r\n                updateData: 'waiting',\r\n                clear: 'clearing',\r\n                highlight: (data) => this.animateReadyHighlight(data),\r\n                highlightMarkers: (data) => this.animateReadyHighlightMarkers(data),\r\n                resize: (data) => this.animateReadyResize(data),\r\n            },\r\n            waiting: {\r\n                update: {\r\n                    target: 'ready',\r\n                    action: (data) => this.animateWaitingUpdateReady(data),\r\n                },\r\n            },\r\n            clearing: {\r\n                update: {\r\n                    target: 'empty',\r\n                    action: (data) => this.animateClearingUpdateEmpty(data),\r\n                },\r\n            },\r\n        }, () => this.checkProcessedDataAnimatable());\r\n    }\r\n    addChartEventListeners() {\r\n        this.ctx.chartEventManager.addListener('legend-item-click', (event) => this.onLegendItemClick(event));\r\n        this.ctx.chartEventManager.addListener('legend-item-double-click', (event) => this.onLegendItemDoubleClick(event));\r\n    }\r\n    destroy() {\r\n        super.destroy();\r\n        this._contextNodeData.splice(0, this._contextNodeData.length);\r\n        this.subGroups.splice(0, this.subGroups.length);\r\n    }\r\n    update({ seriesRect }) {\r\n        var _a, _b;\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const { visible, _contextNodeData: previousContextData } = this;\r\n            const { series } = (_b = (_a = this.ctx.highlightManager) === null || _a === void 0 ? void 0 : _a.getActiveHighlight()) !== null && _b !== void 0 ? _b : {};\r\n            const seriesHighlighted = series ? series === this : undefined;\r\n            const resize = this.checkResize(seriesRect);\r\n            const highlightItems = yield this.updateHighlightSelection(seriesHighlighted);\r\n            yield this.updateSelections(visible);\r\n            yield this.updateNodes(highlightItems, seriesHighlighted, visible);\r\n            const animationData = this.getAnimationData(seriesRect, previousContextData);\r\n            if (resize) {\r\n                this.animationState.transition('resize', animationData);\r\n            }\r\n            this.animationState.transition('update', animationData);\r\n        });\r\n    }\r\n    updateSelections(anySeriesItemEnabled) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (!anySeriesItemEnabled && this.ctx.animationManager.isSkipped()) {\r\n                return;\r\n            }\r\n            if (!this.nodeDataRefresh && !this.isPathOrSelectionDirty()) {\r\n                return;\r\n            }\r\n            if (this.nodeDataRefresh) {\r\n                this.nodeDataRefresh = false;\r\n                this.debug(`CartesianSeries.updateSelections() - calling createNodeData() for`, this.id);\r\n                this._contextNodeData = yield this.createNodeData();\r\n                const animationValid = this.isProcessedDataAnimatable();\r\n                this._contextNodeData.forEach((nodeData) => {\r\n                    var _a;\r\n                    (_a = nodeData.animationValid) !== null && _a !== void 0 ? _a : (nodeData.animationValid = animationValid);\r\n                });\r\n                yield this.updateSeriesGroups();\r\n                const { dataModel, processedData } = this;\r\n                if (dataModel !== undefined && processedData !== undefined) {\r\n                    this.dispatch('data-update', { dataModel, processedData });\r\n                }\r\n            }\r\n            yield Promise.all(this.subGroups.map((g, i) => this.updateSeriesGroupSelections(g, i)));\r\n        });\r\n    }\r\n    updateSeriesGroupSelections(subGroup, seriesIdx, seriesHighlighted) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const { datumSelection, labelSelection, markerSelection, paths } = subGroup;\r\n            const contextData = this._contextNodeData[seriesIdx];\r\n            const { nodeData, labelData, itemId } = contextData;\r\n            yield this.updatePaths({ seriesHighlighted, itemId, contextData, paths, seriesIdx });\r\n            subGroup.datumSelection = yield this.updateDatumSelection({ nodeData, datumSelection, seriesIdx });\r\n            subGroup.labelSelection = yield this.updateLabelSelection({ labelData, labelSelection, seriesIdx });\r\n            if (markerSelection) {\r\n                subGroup.markerSelection = yield this.updateMarkerSelection({\r\n                    nodeData,\r\n                    markerSelection,\r\n                    seriesIdx,\r\n                });\r\n            }\r\n        });\r\n    }\r\n    markerFactory() {\r\n        const MarkerShape = getMarker();\r\n        return new MarkerShape();\r\n    }\r\n    updateSeriesGroups() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const { _contextNodeData: contextNodeData, contentGroup, subGroups, opts: { pathsPerSeries, hasMarkers, datumSelectionGarbageCollection, markerSelectionGarbageCollection }, } = this;\r\n            if (contextNodeData.length === subGroups.length) {\r\n                return;\r\n            }\r\n            if (contextNodeData.length < subGroups.length) {\r\n                subGroups.splice(contextNodeData.length).forEach(({ dataNodeGroup, markerGroup, labelGroup, paths }) => {\r\n                    contentGroup.removeChild(dataNodeGroup);\r\n                    if (markerGroup) {\r\n                        contentGroup.removeChild(markerGroup);\r\n                    }\r\n                    if (labelGroup) {\r\n                        contentGroup.removeChild(labelGroup);\r\n                    }\r\n                    for (const path of paths) {\r\n                        contentGroup.removeChild(path);\r\n                    }\r\n                });\r\n            }\r\n            const totalGroups = contextNodeData.length;\r\n            while (totalGroups > subGroups.length) {\r\n                const layer = false;\r\n                const subGroupId = this.subGroupId++;\r\n                const dataNodeGroup = new Group({\r\n                    name: `${this.id}-series-sub${subGroupId}-dataNodes`,\r\n                    layer,\r\n                    zIndex: Layers.SERIES_LAYER_ZINDEX,\r\n                    zIndexSubOrder: this.getGroupZIndexSubOrder('data', subGroupId),\r\n                });\r\n                const markerGroup = hasMarkers\r\n                    ? new Group({\r\n                        name: `${this.id}-series-sub${this.subGroupId++}-markers`,\r\n                        layer,\r\n                        zIndex: Layers.SERIES_LAYER_ZINDEX,\r\n                        zIndexSubOrder: this.getGroupZIndexSubOrder('marker', subGroupId),\r\n                    })\r\n                    : undefined;\r\n                const labelGroup = new Group({\r\n                    name: `${this.id}-series-sub${this.subGroupId++}-labels`,\r\n                    layer,\r\n                    zIndex: Layers.SERIES_LABEL_ZINDEX,\r\n                    zIndexSubOrder: this.getGroupZIndexSubOrder('labels', subGroupId),\r\n                });\r\n                contentGroup.appendChild(dataNodeGroup);\r\n                contentGroup.appendChild(labelGroup);\r\n                if (markerGroup) {\r\n                    contentGroup.appendChild(markerGroup);\r\n                }\r\n                const paths = [];\r\n                for (let index = 0; index < pathsPerSeries; index++) {\r\n                    paths[index] = new Path();\r\n                    paths[index].zIndex = Layers.SERIES_LAYER_ZINDEX;\r\n                    paths[index].zIndexSubOrder = this.getGroupZIndexSubOrder('paths', index);\r\n                    contentGroup.appendChild(paths[index]);\r\n                }\r\n                subGroups.push({\r\n                    paths,\r\n                    dataNodeGroup,\r\n                    markerGroup,\r\n                    labelGroup,\r\n                    labelSelection: Selection.select(labelGroup, Text),\r\n                    datumSelection: Selection.select(dataNodeGroup, () => this.nodeFactory(), datumSelectionGarbageCollection),\r\n                    markerSelection: markerGroup\r\n                        ? Selection.select(markerGroup, () => this.markerFactory(), markerSelectionGarbageCollection)\r\n                        : undefined,\r\n                });\r\n            }\r\n        });\r\n    }\r\n    getGroupZIndexSubOrder(type, subIndex = 0) {\r\n        var _a;\r\n        const result = super.getGroupZIndexSubOrder(type, subIndex);\r\n        if (type === 'paths') {\r\n            const pathOffset = (_a = this.opts.pathsZIndexSubOrderOffset[subIndex]) !== null && _a !== void 0 ? _a : 0;\r\n            const superFn = result[0];\r\n            if (typeof superFn === 'function') {\r\n                result[0] = () => +superFn() + pathOffset;\r\n            }\r\n            else {\r\n                result[0] = +superFn + pathOffset;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    updateNodes(highlightedItems, seriesHighlighted, anySeriesItemEnabled) {\r\n        var _a;\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const { highlightSelection, highlightLabelSelection, opts: { hasMarkers, hasHighlightedLabels }, } = this;\r\n            const animationEnabled = !this.ctx.animationManager.isSkipped();\r\n            const visible = this.visible && ((_a = this._contextNodeData) === null || _a === void 0 ? void 0 : _a.length) > 0 && anySeriesItemEnabled;\r\n            this.rootGroup.visible = animationEnabled || visible;\r\n            this.contentGroup.visible = animationEnabled || visible;\r\n            this.highlightGroup.visible = (animationEnabled || visible) && !!seriesHighlighted;\r\n            const subGroupOpacity = this.getOpacity();\r\n            if (hasMarkers) {\r\n                yield this.updateMarkerNodes({\r\n                    markerSelection: highlightSelection,\r\n                    isHighlight: true,\r\n                    seriesIdx: -1,\r\n                });\r\n                this.animationState.transition('highlightMarkers', highlightSelection);\r\n            }\r\n            else {\r\n                yield this.updateDatumNodes({\r\n                    datumSelection: highlightSelection,\r\n                    isHighlight: true,\r\n                    seriesIdx: -1,\r\n                });\r\n                this.animationState.transition('highlight', highlightSelection);\r\n            }\r\n            if (hasHighlightedLabels) {\r\n                yield this.updateLabelNodes({ labelSelection: highlightLabelSelection, seriesIdx: -1 });\r\n            }\r\n            yield Promise.all(this.subGroups.map((subGroup, seriesIdx) => __awaiter(this, void 0, void 0, function* () {\r\n                const { dataNodeGroup, markerGroup, datumSelection, labelSelection, markerSelection, paths, labelGroup, } = subGroup;\r\n                const { itemId } = this.contextNodeData[seriesIdx];\r\n                const subGroupVisible = visible;\r\n                dataNodeGroup.opacity = subGroupOpacity;\r\n                dataNodeGroup.visible = animationEnabled || subGroupVisible;\r\n                labelGroup.visible = subGroupVisible;\r\n                if (markerGroup) {\r\n                    markerGroup.opacity = subGroupOpacity;\r\n                    markerGroup.zIndex =\r\n                        dataNodeGroup.zIndex >= Layers.SERIES_LAYER_ZINDEX\r\n                            ? dataNodeGroup.zIndex\r\n                            : dataNodeGroup.zIndex + 1;\r\n                    markerGroup.visible = subGroupVisible;\r\n                }\r\n                if (labelGroup) {\r\n                    labelGroup.opacity = subGroupOpacity;\r\n                }\r\n                yield this.updatePathNodes({\r\n                    seriesHighlighted,\r\n                    itemId,\r\n                    paths,\r\n                    seriesIdx,\r\n                    opacity: subGroupOpacity,\r\n                    visible: subGroupVisible,\r\n                    animationEnabled,\r\n                });\r\n                if (!dataNodeGroup.visible) {\r\n                    return;\r\n                }\r\n                yield this.updateDatumNodes({ datumSelection, highlightedItems, isHighlight: false, seriesIdx });\r\n                yield this.updateLabelNodes({ labelSelection, seriesIdx });\r\n                if (hasMarkers && markerSelection) {\r\n                    yield this.updateMarkerNodes({ markerSelection, isHighlight: false, seriesIdx });\r\n                }\r\n            })));\r\n        });\r\n    }\r\n    getHighlightLabelData(labelData, highlightedItem) {\r\n        const labelItem = labelData.find((ld) => ld.datum === highlightedItem.datum && ld.itemId === highlightedItem.itemId);\r\n        return labelItem ? [labelItem] : undefined;\r\n    }\r\n    getHighlightData(_nodeData, highlightedItem) {\r\n        return highlightedItem ? [highlightedItem] : undefined;\r\n    }\r\n    updateHighlightSelection(seriesHighlighted) {\r\n        var _a;\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const { highlightSelection, highlightLabelSelection, _contextNodeData: contextNodeData } = this;\r\n            const highlightedDatum = (_a = this.ctx.highlightManager) === null || _a === void 0 ? void 0 : _a.getActiveHighlight();\r\n            const item = seriesHighlighted && (highlightedDatum === null || highlightedDatum === void 0 ? void 0 : highlightedDatum.datum) ? highlightedDatum : undefined;\r\n            let labelItems;\r\n            let highlightItems;\r\n            if (item != null) {\r\n                const labelsEnabled = this.isLabelEnabled();\r\n                for (const { labelData, nodeData } of contextNodeData) {\r\n                    highlightItems = this.getHighlightData(nodeData, item);\r\n                    labelItems = labelsEnabled ? this.getHighlightLabelData(labelData, item) : undefined;\r\n                    if ((!labelsEnabled || labelItems != null) && highlightItems != null) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            this.highlightSelection = yield this.updateHighlightSelectionItem({\r\n                items: highlightItems,\r\n                highlightSelection,\r\n            });\r\n            this.highlightLabelSelection = yield this.updateHighlightSelectionLabel({\r\n                items: labelItems,\r\n                highlightLabelSelection,\r\n            });\r\n            return highlightItems;\r\n        });\r\n    }\r\n    pickNodeExactShape(point) {\r\n        var _a;\r\n        const result = super.pickNodeExactShape(point);\r\n        if (result) {\r\n            return result;\r\n        }\r\n        const { x, y } = point;\r\n        const { opts: { hasMarkers }, } = this;\r\n        for (const { dataNodeGroup, markerGroup } of this.subGroups) {\r\n            let match = dataNodeGroup.pickNode(x, y);\r\n            if (!match && hasMarkers) {\r\n                match = markerGroup === null || markerGroup === void 0 ? void 0 : markerGroup.pickNode(x, y);\r\n            }\r\n            if (match) {\r\n                break;\r\n            }\r\n        }\r\n        {\r\n            for (const mod of this.moduleMap) {\r\n                const { datum } = (_a = mod.pickNodeExact(point)) !== null && _a !== void 0 ? _a : {};\r\n                if (datum !== undefined) {\r\n                    return { datum, distance: 0 };\r\n                }\r\n            }\r\n        }\r\n    }\r\n    pickNodeClosestDatum(point) {\r\n        var _a, _b;\r\n        const { x, y } = point;\r\n        const { axes, rootGroup, _contextNodeData: contextNodeData } = this;\r\n        const xAxis = axes[ChartAxisDirection.X];\r\n        const yAxis = axes[ChartAxisDirection.Y];\r\n        const hitPoint = rootGroup.transformPoint(x, y);\r\n        let minDistance = Infinity;\r\n        let closestDatum;\r\n        for (const context of contextNodeData) {\r\n            for (const datum of context.nodeData) {\r\n                const { point: { x: datumX = NaN, y: datumY = NaN } = {} } = datum;\r\n                if (isNaN(datumX) || isNaN(datumY)) {\r\n                    continue;\r\n                }\r\n                const isInRange = (xAxis === null || xAxis === void 0 ? void 0 : xAxis.inRange(datumX)) && (yAxis === null || yAxis === void 0 ? void 0 : yAxis.inRange(datumY));\r\n                if (!isInRange) {\r\n                    continue;\r\n                }\r\n                // No need to use Math.sqrt() since x < y implies Math.sqrt(x) < Math.sqrt(y) for\r\n                // values > 1\r\n                const distance = Math.max(Math.pow((hitPoint.x - datumX), 2) + Math.pow((hitPoint.y - datumY), 2), 0);\r\n                if (distance < minDistance) {\r\n                    minDistance = distance;\r\n                    closestDatum = datum;\r\n                }\r\n            }\r\n        }\r\n        for (const mod of this.moduleMap) {\r\n            const modPick = mod.pickNodeNearest(point);\r\n            if (modPick !== undefined && modPick.distanceSquared < minDistance) {\r\n                minDistance = modPick.distanceSquared;\r\n                closestDatum = modPick.datum;\r\n                break;\r\n            }\r\n        }\r\n        if (closestDatum) {\r\n            const distance = Math.max(Math.sqrt(minDistance) - ((_b = (_a = closestDatum.point) === null || _a === void 0 ? void 0 : _a.size) !== null && _b !== void 0 ? _b : 0), 0);\r\n            return { datum: closestDatum, distance };\r\n        }\r\n    }\r\n    pickNodeMainAxisFirst(point, requireCategoryAxis) {\r\n        var _a, _b;\r\n        const { x, y } = point;\r\n        const { axes, rootGroup, _contextNodeData: contextNodeData } = this;\r\n        const xAxis = axes[ChartAxisDirection.X];\r\n        const yAxis = axes[ChartAxisDirection.Y];\r\n        // Prefer to start search with any available category axis.\r\n        const directions = [xAxis, yAxis]\r\n            .filter((a) => a instanceof CategoryAxis)\r\n            .map((a) => a.direction);\r\n        if (requireCategoryAxis && directions.length === 0) {\r\n            return;\r\n        }\r\n        // Default to X-axis unless we found a suitable category axis.\r\n        const [primaryDirection = ChartAxisDirection.X] = directions;\r\n        const hitPoint = rootGroup.transformPoint(x, y);\r\n        const hitPointCoords = primaryDirection === ChartAxisDirection.X ? [hitPoint.x, hitPoint.y] : [hitPoint.y, hitPoint.x];\r\n        const minDistance = [Infinity, Infinity];\r\n        let closestDatum;\r\n        for (const context of contextNodeData) {\r\n            for (const datum of context.nodeData) {\r\n                const { point: { x: datumX = NaN, y: datumY = NaN } = {} } = datum;\r\n                if (isNaN(datumX) || isNaN(datumY)) {\r\n                    continue;\r\n                }\r\n                const isInRange = (xAxis === null || xAxis === void 0 ? void 0 : xAxis.inRange(datumX)) && (yAxis === null || yAxis === void 0 ? void 0 : yAxis.inRange(datumY));\r\n                if (!isInRange) {\r\n                    continue;\r\n                }\r\n                const point = primaryDirection === ChartAxisDirection.X ? [datumX, datumY] : [datumY, datumX];\r\n                // Compare distances from most significant dimension to least.\r\n                let newMinDistance = true;\r\n                for (let i = 0; i < point.length; i++) {\r\n                    const dist = Math.abs(point[i] - hitPointCoords[i]);\r\n                    if (dist > minDistance[i]) {\r\n                        newMinDistance = false;\r\n                        break;\r\n                    }\r\n                    if (dist < minDistance[i]) {\r\n                        minDistance[i] = dist;\r\n                        minDistance.fill(Infinity, i + 1, minDistance.length);\r\n                    }\r\n                }\r\n                if (newMinDistance) {\r\n                    closestDatum = datum;\r\n                }\r\n            }\r\n        }\r\n        if (closestDatum) {\r\n            let closestDistanceSquared = Math.max(Math.pow(minDistance[0], 2) + Math.pow(minDistance[1], 2) - ((_b = (_a = closestDatum.point) === null || _a === void 0 ? void 0 : _a.size) !== null && _b !== void 0 ? _b : 0), 0);\r\n            for (const mod of this.moduleMap) {\r\n                const modPick = mod.pickNodeMainAxisFirst(point);\r\n                if (modPick !== undefined && modPick.distanceSquared < closestDistanceSquared) {\r\n                    closestDatum = modPick.datum;\r\n                    closestDistanceSquared = modPick.distanceSquared;\r\n                    break;\r\n                }\r\n            }\r\n            return { datum: closestDatum, distance: Math.sqrt(closestDistanceSquared) };\r\n        }\r\n    }\r\n    onLegendItemClick(event) {\r\n        const { enabled, itemId, series, legendItemName } = event;\r\n        const matchedLegendItemName = this.legendItemName != null && this.legendItemName === legendItemName;\r\n        if (series.id === this.id || matchedLegendItemName) {\r\n            this.toggleSeriesItem(itemId, enabled);\r\n        }\r\n    }\r\n    onLegendItemDoubleClick(event) {\r\n        const { enabled, itemId, series, numVisibleItems, legendItemName } = event;\r\n        const totalVisibleItems = Object.values(numVisibleItems).reduce((p, v) => p + v, 0);\r\n        const matchedLegendItemName = this.legendItemName != null && this.legendItemName === legendItemName;\r\n        if (series.id === this.id || matchedLegendItemName) {\r\n            // Double-clicked item should always become visible.\r\n            this.toggleSeriesItem(itemId, true);\r\n        }\r\n        else if (enabled && totalVisibleItems === 1) {\r\n            // Other items should become visible if there is only one existing visible item.\r\n            this.toggleSeriesItem(itemId, true);\r\n        }\r\n        else {\r\n            // Disable other items if not exactly one enabled.\r\n            this.toggleSeriesItem(itemId, false);\r\n        }\r\n    }\r\n    isPathOrSelectionDirty() {\r\n        // Override point to allow more sophisticated dirty selection detection.\r\n        return false;\r\n    }\r\n    getLabelData() {\r\n        return [];\r\n    }\r\n    shouldFlipXY() {\r\n        return false;\r\n    }\r\n    /**\r\n     * Get the minimum bounding box that contains any adjacent two nodes. The axes are treated independently, so this\r\n     * may not represent the same two points for both directions. The dimensions represent the greatest distance\r\n     * between any two adjacent nodes.\r\n     */\r\n    getMinRect() {\r\n        const [context] = this._contextNodeData;\r\n        if (!context || context.nodeData.length == 0)\r\n            return;\r\n        const width = context.nodeData\r\n            .map(({ midPoint }) => { var _a; return (_a = midPoint === null || midPoint === void 0 ? void 0 : midPoint.x) !== null && _a !== void 0 ? _a : 0; })\r\n            .sort((a, b) => a - b)\r\n            .reduce((max, x, i, array) => (i > 0 ? Math.max(max, x - array[i - 1]) : max), 0);\r\n        const height = context.nodeData\r\n            .map(({ midPoint }) => { var _a; return (_a = midPoint === null || midPoint === void 0 ? void 0 : midPoint.y) !== null && _a !== void 0 ? _a : 0; })\r\n            .sort((a, b) => a - b)\r\n            .reduce((max, y, i, array) => (i > 0 ? Math.max(max, y - array[i - 1]) : max), 0);\r\n        return new BBox(0, 0, width, height);\r\n    }\r\n    updateHighlightSelectionItem(opts) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const { opts: { hasMarkers }, } = this;\r\n            const { items, highlightSelection } = opts;\r\n            const nodeData = items !== null && items !== void 0 ? items : [];\r\n            if (hasMarkers) {\r\n                const markerSelection = highlightSelection;\r\n                return this.updateMarkerSelection({ nodeData, markerSelection, seriesIdx: -1 });\r\n            }\r\n            else {\r\n                return this.updateDatumSelection({\r\n                    nodeData,\r\n                    datumSelection: highlightSelection,\r\n                    seriesIdx: -1,\r\n                });\r\n            }\r\n        });\r\n    }\r\n    updateHighlightSelectionLabel(opts) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const { items, highlightLabelSelection } = opts;\r\n            const labelData = items !== null && items !== void 0 ? items : [];\r\n            return this.updateLabelSelection({ labelData, labelSelection: highlightLabelSelection, seriesIdx: -1 });\r\n        });\r\n    }\r\n    updateDatumSelection(opts) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            // Override point for sub-classes.\r\n            return opts.datumSelection;\r\n        });\r\n    }\r\n    updateDatumNodes(_opts) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            // Override point for sub-classes.\r\n        });\r\n    }\r\n    updateMarkerSelection(opts) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            // Override point for sub-classes.\r\n            return opts.markerSelection;\r\n        });\r\n    }\r\n    updateMarkerNodes(_opts) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            // Override point for sub-classes.\r\n        });\r\n    }\r\n    updatePaths(opts) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            // Override point for sub-classes.\r\n            opts.paths.forEach((p) => (p.visible = false));\r\n        });\r\n    }\r\n    updatePathNodes(opts) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const { paths, opacity, visible } = opts;\r\n            for (const path of paths) {\r\n                path.opacity = opacity;\r\n                path.visible = visible;\r\n            }\r\n        });\r\n    }\r\n    resetAllAnimation(data) {\r\n        var _a, _b;\r\n        const { path, datum, label, marker } = (_b = (_a = this.opts) === null || _a === void 0 ? void 0 : _a.animationResetFns) !== null && _b !== void 0 ? _b : {};\r\n        // Stop any running animations by prefix convention.\r\n        this.ctx.animationManager.stopByAnimationGroupId(this.id);\r\n        if (path) {\r\n            data.paths.forEach((paths) => {\r\n                resetMotion(paths, path);\r\n            });\r\n        }\r\n        if (datum) {\r\n            resetMotion(data.datumSelections, datum);\r\n        }\r\n        if (label) {\r\n            resetMotion(data.labelSelections, label);\r\n        }\r\n        if (marker) {\r\n            resetMotion(data.markerSelections, marker);\r\n        }\r\n        if (data.contextData.some((d) => d.animationValid === false)) {\r\n            this.ctx.animationManager.skipCurrentBatch();\r\n        }\r\n    }\r\n    animateEmptyUpdateReady(data) {\r\n        this.ctx.animationManager.skipCurrentBatch();\r\n        this.resetAllAnimation(data);\r\n    }\r\n    animateWaitingUpdateReady(data) {\r\n        this.ctx.animationManager.skipCurrentBatch();\r\n        this.resetAllAnimation(data);\r\n    }\r\n    animateReadyHighlight(data) {\r\n        var _a, _b;\r\n        const { datum } = (_b = (_a = this.opts) === null || _a === void 0 ? void 0 : _a.animationResetFns) !== null && _b !== void 0 ? _b : {};\r\n        if (datum) {\r\n            resetMotion([data], datum);\r\n        }\r\n    }\r\n    animateReadyHighlightMarkers(data) {\r\n        var _a, _b;\r\n        const { marker } = (_b = (_a = this.opts) === null || _a === void 0 ? void 0 : _a.animationResetFns) !== null && _b !== void 0 ? _b : {};\r\n        if (marker) {\r\n            resetMotion([data], marker);\r\n        }\r\n    }\r\n    animateReadyResize(data) {\r\n        this.resetAllAnimation(data);\r\n    }\r\n    animateClearingUpdateEmpty(data) {\r\n        this.ctx.animationManager.skipCurrentBatch();\r\n        this.resetAllAnimation(data);\r\n    }\r\n    animationTransitionClear() {\r\n        this.animationState.transition('clear', this.getAnimationData());\r\n    }\r\n    getAnimationData(seriesRect, previousContextData) {\r\n        const animationData = {\r\n            datumSelections: this.subGroups.map(({ datumSelection }) => datumSelection),\r\n            markerSelections: this.subGroups\r\n                .filter(({ markerSelection }) => markerSelection !== undefined)\r\n                .map(({ markerSelection }) => markerSelection),\r\n            labelSelections: this.subGroups.map(({ labelSelection }) => labelSelection),\r\n            annotationSelections: [...this.annotationSelections],\r\n            contextData: this._contextNodeData,\r\n            previousContextData,\r\n            paths: this.subGroups.map(({ paths }) => paths),\r\n            seriesRect,\r\n        };\r\n        return animationData;\r\n    }\r\n    calculateScaling() {\r\n        const result = {};\r\n        const addScale = (direction) => {\r\n            const axis = this.axes[direction];\r\n            if (!axis)\r\n                return;\r\n            if (axis.scale instanceof LogScale) {\r\n                const { range, domain } = axis.scale;\r\n                result[direction] = {\r\n                    type: 'log',\r\n                    convert: (domain) => axis.scale.convert(domain),\r\n                    domain: [domain[0], domain[1]],\r\n                    range: [range[0], range[1]],\r\n                };\r\n            }\r\n            else if (axis.scale instanceof ContinuousScale) {\r\n                const { range } = axis.scale;\r\n                const domain = axis.scale.getDomain();\r\n                result[direction] = {\r\n                    type: 'continuous',\r\n                    domain: [domain[0], domain[1]],\r\n                    range: [range[0], range[1]],\r\n                };\r\n            }\r\n            else if (axis.scale) {\r\n                const { domain } = axis.scale;\r\n                result[direction] = {\r\n                    type: 'category',\r\n                    domain,\r\n                    range: domain.map((d) => axis.scale.convert(d)),\r\n                };\r\n            }\r\n        };\r\n        addScale(ChartAxisDirection.X);\r\n        addScale(ChartAxisDirection.Y);\r\n        return result;\r\n    }\r\n}\r\n__decorate([\r\n    Validate(OPT_STRING),\r\n    __metadata(\"design:type\", String)\r\n], CartesianSeries.prototype, \"legendItemName\", void 0);\n\nconst directions = ['top', 'right', 'bottom', 'left'];\r\nclass CartesianChart extends Chart {\r\n    constructor(specialOverrides, resources) {\r\n        super(specialOverrides, resources);\r\n        /** Integrated Charts feature state - not used in Standalone Charts. */\r\n        this.paired = true;\r\n        this._lastAxisWidths = {\r\n            top: 0,\r\n            bottom: 0,\r\n            left: 0,\r\n            right: 0,\r\n        };\r\n        this._lastVisibility = {\r\n            crossLines: true,\r\n            series: true,\r\n        };\r\n    }\r\n    performLayout() {\r\n        const _super = Object.create(null, {\r\n            performLayout: { get: () => super.performLayout }\r\n        });\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const shrinkRect = yield _super.performLayout.call(this);\r\n            const { animationRect, seriesRect, visibility, clipSeries } = this.updateAxes(shrinkRect);\r\n            this.seriesRoot.visible = visibility.series;\r\n            this.seriesRect = seriesRect;\r\n            this.animationRect = animationRect;\r\n            this.seriesRoot.translationX = Math.floor(seriesRect.x);\r\n            this.seriesRoot.translationY = Math.floor(seriesRect.y);\r\n            const { seriesArea: { padding }, } = this;\r\n            // Recreate padding object to prevent issues with getters in `BBox.shrink()`\r\n            const seriesPaddedRect = seriesRect.clone().grow({\r\n                top: padding.top,\r\n                right: padding.right,\r\n                bottom: padding.bottom,\r\n                left: padding.left,\r\n            });\r\n            this.hoverRect = seriesPaddedRect;\r\n            this.layoutService.dispatchLayoutComplete({\r\n                type: 'layout-complete',\r\n                chart: { width: this.scene.width, height: this.scene.height },\r\n                clipSeries,\r\n                series: {\r\n                    rect: seriesRect,\r\n                    paddedRect: seriesPaddedRect,\r\n                    visible: visibility.series,\r\n                    shouldFlipXY: this.shouldFlipXY(),\r\n                },\r\n                axes: this.axes.map((axis) => (Object.assign({ id: axis.id }, axis.getLayoutState()))),\r\n            });\r\n            return shrinkRect;\r\n        });\r\n    }\r\n    updateAxes(inputShrinkRect) {\r\n        var _a;\r\n        // Start with a good approximation from the last update - this should mean that in many resize\r\n        // cases that only a single pass is needed \\o/.\r\n        const axisWidths = Object.assign({}, this._lastAxisWidths);\r\n        const visibility = Object.assign({}, this._lastVisibility);\r\n        // Clean any positions which aren't valid with the current axis status (otherwise we end up\r\n        // never being able to find a stable result).\r\n        const liveAxisWidths = new Set(this._axes.map((a) => a.position));\r\n        for (const position of Object.keys(axisWidths)) {\r\n            if (!liveAxisWidths.has(position)) {\r\n                delete axisWidths[position];\r\n            }\r\n        }\r\n        const stableOutputs = (otherAxisWidths, otherVisibility) => {\r\n            // Check for new axis positions.\r\n            if (Object.keys(otherAxisWidths).some((k) => axisWidths[k] == null)) {\r\n                return false;\r\n            }\r\n            return (visibility.crossLines === otherVisibility.crossLines &&\r\n                visibility.series === otherVisibility.series &&\r\n                // Check for existing axis positions and equality.\r\n                Object.entries(axisWidths).every(([p, w]) => {\r\n                    const otherW = otherAxisWidths[p];\r\n                    if (w != null || otherW != null) {\r\n                        return w === otherW;\r\n                    }\r\n                    return true;\r\n                }));\r\n        };\r\n        const ceilValues = (records) => {\r\n            return Object.entries(records).reduce((out, [key, value]) => {\r\n                if (value && Math.abs(value) === Infinity) {\r\n                    value = 0;\r\n                }\r\n                out[key] = value != null ? Math.ceil(value) : value;\r\n                return out;\r\n            }, {});\r\n        };\r\n        // Iteratively try to resolve axis widths - since X axis width affects Y axis range,\r\n        // and vice-versa, we need to iteratively try and find a fit for the axes and their\r\n        // ticks/labels.\r\n        let lastPassAxisWidths = {};\r\n        let lastPassVisibility = {};\r\n        let clipSeries = false;\r\n        let seriesRect = (_a = this.seriesRect) === null || _a === void 0 ? void 0 : _a.clone();\r\n        let count = 0;\r\n        let primaryTickCounts = {};\r\n        do {\r\n            Object.assign(axisWidths, lastPassAxisWidths);\r\n            Object.assign(visibility, lastPassVisibility);\r\n            const result = this.updateAxesPass(axisWidths, inputShrinkRect.clone(), seriesRect);\r\n            lastPassAxisWidths = ceilValues(result.axisWidths);\r\n            lastPassVisibility = result.visibility;\r\n            clipSeries = result.clipSeries;\r\n            seriesRect = result.seriesRect;\r\n            primaryTickCounts = result.primaryTickCounts;\r\n            if (count++ > 10) {\r\n                Logger.warn('unable to find stable axis layout.');\r\n                break;\r\n            }\r\n        } while (!stableOutputs(lastPassAxisWidths, lastPassVisibility));\r\n        this.axes.forEach((axis) => {\r\n            const { direction } = axis;\r\n            const primaryTickCount = primaryTickCounts[direction];\r\n            axis.update(primaryTickCount);\r\n        });\r\n        const clipRectPadding = 5;\r\n        this.axes.forEach((axis) => {\r\n            // update visibility of crosslines\r\n            axis.setCrossLinesVisible(visibility.crossLines);\r\n            if (!seriesRect) {\r\n                return;\r\n            }\r\n            axis.clipGrid(seriesRect.x, seriesRect.y, seriesRect.width + clipRectPadding, seriesRect.height + clipRectPadding);\r\n            switch (axis.position) {\r\n                case 'left':\r\n                case 'right':\r\n                    axis.clipTickLines(inputShrinkRect.x, seriesRect.y, inputShrinkRect.width + clipRectPadding, seriesRect.height + clipRectPadding);\r\n                    break;\r\n                case 'top':\r\n                case 'bottom':\r\n                    axis.clipTickLines(seriesRect.x, inputShrinkRect.y, seriesRect.width + clipRectPadding, inputShrinkRect.height + clipRectPadding);\r\n                    break;\r\n            }\r\n        });\r\n        this._lastAxisWidths = axisWidths;\r\n        this._lastVisibility = visibility;\r\n        return { seriesRect, animationRect: inputShrinkRect, visibility, clipSeries };\r\n    }\r\n    updateAxesPass(axisWidths, bounds, lastPassSeriesRect) {\r\n        const { axes } = this;\r\n        const visited = {};\r\n        const newAxisWidths = {};\r\n        const visibility = {\r\n            series: true,\r\n            crossLines: true,\r\n        };\r\n        let clipSeries = false;\r\n        const primaryTickCounts = {};\r\n        const paddedBounds = this.applySeriesPadding(bounds);\r\n        const crossLinePadding = lastPassSeriesRect ? this.buildCrossLinePadding(axisWidths) : {};\r\n        const axisBound = this.buildAxisBound(paddedBounds, axisWidths, crossLinePadding, visibility);\r\n        const seriesRect = this.buildSeriesRect(axisBound, axisWidths);\r\n        // Set the number of ticks for continuous axes based on the available range\r\n        // before updating the axis domain via `this.updateAxes()` as the tick count has an effect on the calculated `nice` domain extent\r\n        axes.forEach((axis) => {\r\n            var _a, _b;\r\n            const { position = 'left' } = axis;\r\n            const { clipSeries: newClipSeries, axisThickness, axisOffset, } = this.calculateAxisDimensions({\r\n                axis,\r\n                seriesRect,\r\n                paddedBounds,\r\n                axisWidths,\r\n                newAxisWidths,\r\n                primaryTickCounts,\r\n                clipSeries,\r\n                addInterAxisPadding: ((_a = visited[position]) !== null && _a !== void 0 ? _a : 0) > 0,\r\n            });\r\n            visited[position] = ((_b = visited[position]) !== null && _b !== void 0 ? _b : 0) + 1;\r\n            clipSeries = clipSeries || newClipSeries;\r\n            this.positionAxis({\r\n                axis,\r\n                axisBound,\r\n                axisOffset,\r\n                axisThickness,\r\n                axisWidths,\r\n                primaryTickCounts,\r\n                seriesRect,\r\n            });\r\n        });\r\n        return { clipSeries, seriesRect, axisWidths: newAxisWidths, visibility, primaryTickCounts };\r\n    }\r\n    buildCrossLinePadding(axisWidths) {\r\n        var _a;\r\n        const crossLinePadding = {};\r\n        this.axes.forEach((axis) => {\r\n            if (axis.crossLines) {\r\n                axis.crossLines.forEach((crossLine) => {\r\n                    crossLine.calculatePadding(crossLinePadding);\r\n                });\r\n            }\r\n        });\r\n        // Reduce cross-line padding to account for overlap with axes.\r\n        for (const [side, padding = 0] of Object.entries(crossLinePadding)) {\r\n            crossLinePadding[side] = Math.max(padding - ((_a = axisWidths[side]) !== null && _a !== void 0 ? _a : 0), 0);\r\n        }\r\n        return crossLinePadding;\r\n    }\r\n    applySeriesPadding(bounds) {\r\n        const paddedRect = bounds.clone();\r\n        const reversedAxes = this.axes.slice().reverse();\r\n        directions.forEach((dir) => {\r\n            const padding = this.seriesArea.padding[dir];\r\n            const axis = reversedAxes.find((axis) => axis.position === dir);\r\n            if (axis) {\r\n                axis.seriesAreaPadding = padding;\r\n            }\r\n            else {\r\n                paddedRect.shrink(padding, dir);\r\n            }\r\n        });\r\n        return paddedRect;\r\n    }\r\n    buildAxisBound(bounds, axisWidths, crossLinePadding, visibility) {\r\n        var _a, _b, _c, _d;\r\n        const result = bounds.clone();\r\n        const { top = 0, right = 0, bottom = 0, left = 0 } = crossLinePadding;\r\n        const horizontalPadding = left + right;\r\n        const verticalPadding = top + bottom;\r\n        const totalWidth = ((_a = axisWidths.left) !== null && _a !== void 0 ? _a : 0) + ((_b = axisWidths.right) !== null && _b !== void 0 ? _b : 0) + horizontalPadding;\r\n        const totalHeight = ((_c = axisWidths.top) !== null && _c !== void 0 ? _c : 0) + ((_d = axisWidths.bottom) !== null && _d !== void 0 ? _d : 0) + verticalPadding;\r\n        if (result.width <= totalWidth || result.height <= totalHeight) {\r\n            // Not enough space for crossLines and series\r\n            visibility.crossLines = false;\r\n            visibility.series = false;\r\n            return result;\r\n        }\r\n        result.x += left;\r\n        result.y += top;\r\n        result.width -= horizontalPadding;\r\n        result.height -= verticalPadding;\r\n        return result;\r\n    }\r\n    buildSeriesRect(axisBound, axisWidths) {\r\n        const result = axisBound.clone();\r\n        const { top, bottom, left, right } = axisWidths;\r\n        result.x += left !== null && left !== void 0 ? left : 0;\r\n        result.y += top !== null && top !== void 0 ? top : 0;\r\n        result.width -= (left !== null && left !== void 0 ? left : 0) + (right !== null && right !== void 0 ? right : 0);\r\n        result.height -= (top !== null && top !== void 0 ? top : 0) + (bottom !== null && bottom !== void 0 ? bottom : 0);\r\n        // Width and height should not be negative.\r\n        result.width = Math.max(0, result.width);\r\n        result.height = Math.max(0, result.height);\r\n        return result;\r\n    }\r\n    clampToOutsideSeriesRect(seriesRect, value, dimension, direction) {\r\n        const { x, y, width, height } = seriesRect;\r\n        const clampBounds = [x, y, x + width, y + height];\r\n        const fn = direction === 1 ? Math.min : Math.max;\r\n        const compareTo = clampBounds[(dimension === 'x' ? 0 : 1) + (direction === 1 ? 0 : 2)];\r\n        return fn(value, compareTo);\r\n    }\r\n    calculateAxisDimensions(opts) {\r\n        var _a, _b, _c, _d, _e;\r\n        const { axis, seriesRect, paddedBounds, axisWidths, newAxisWidths, primaryTickCounts, addInterAxisPadding } = opts;\r\n        let { clipSeries } = opts;\r\n        const { position = 'left', direction } = axis;\r\n        const axisLeftRightRange = (axis) => {\r\n            if (axis instanceof CategoryAxis || axis instanceof GroupedCategoryAxis) {\r\n                return [0, seriesRect.height];\r\n            }\r\n            return [seriesRect.height, 0];\r\n        };\r\n        const axisOffset = (_a = newAxisWidths[position]) !== null && _a !== void 0 ? _a : 0;\r\n        switch (position) {\r\n            case 'top':\r\n            case 'bottom':\r\n                axis.range = [0, seriesRect.width];\r\n                axis.gridLength = seriesRect.height;\r\n                break;\r\n            case 'right':\r\n            case 'left':\r\n                axis.range = axisLeftRightRange(axis);\r\n                axis.gridLength = seriesRect.width;\r\n                break;\r\n        }\r\n        const zoom = this.zoomManager.getAxisZoom(axis.id);\r\n        const { min = 0, max = 1 } = zoom !== null && zoom !== void 0 ? zoom : {};\r\n        axis.visibleRange = [min, max];\r\n        const rangeClipped = axis.dataDomain.clipped || axis.visibleRange[0] > 0 || axis.visibleRange[1] < 1;\r\n        clipSeries || (clipSeries = rangeClipped);\r\n        let primaryTickCount = axis.nice ? primaryTickCounts[direction] : undefined;\r\n        const paddedBoundsCoefficient = 0.3;\r\n        if (axis.thickness != null && axis.thickness > 0) {\r\n            axis.maxThickness = axis.thickness;\r\n        }\r\n        else if (direction === ChartAxisDirection.Y) {\r\n            axis.maxThickness = paddedBounds.width * paddedBoundsCoefficient;\r\n        }\r\n        else {\r\n            axis.maxThickness = paddedBounds.height * paddedBoundsCoefficient;\r\n        }\r\n        const layout = axis.calculateLayout(primaryTickCount);\r\n        primaryTickCount = layout.primaryTickCount;\r\n        primaryTickCounts[direction] = (_b = primaryTickCounts[direction]) !== null && _b !== void 0 ? _b : primaryTickCount;\r\n        let axisThickness = 0;\r\n        if (axis.thickness != null && axis.thickness > 0) {\r\n            axisThickness = axis.thickness;\r\n        }\r\n        else {\r\n            const { bbox } = layout;\r\n            axisThickness = direction === ChartAxisDirection.X ? bbox.height : bbox.width;\r\n        }\r\n        // for multiple axes in the same direction and position, apply padding at the top of each inner axis (i.e. between axes).\r\n        const axisPadding = 15;\r\n        if (addInterAxisPadding) {\r\n            axisThickness += axisPadding;\r\n        }\r\n        axisThickness = Math.ceil(axisThickness);\r\n        newAxisWidths[position] = ((_c = newAxisWidths[position]) !== null && _c !== void 0 ? _c : 0) + axisThickness;\r\n        axis.gridPadding = ((_d = axisWidths[position]) !== null && _d !== void 0 ? _d : 0) - ((_e = newAxisWidths[position]) !== null && _e !== void 0 ? _e : 0);\r\n        return { clipSeries, axisThickness, axisOffset, primaryTickCount };\r\n    }\r\n    positionAxis(opts) {\r\n        var _a, _b, _c, _d;\r\n        const { axis, axisBound, axisWidths, seriesRect, axisOffset, axisThickness } = opts;\r\n        const { position } = axis;\r\n        switch (position) {\r\n            case 'top':\r\n                axis.translation.x = axisBound.x + ((_a = axisWidths.left) !== null && _a !== void 0 ? _a : 0);\r\n                axis.translation.y = this.clampToOutsideSeriesRect(seriesRect, axisBound.y + 1 + axisOffset + axisThickness, 'y', 1);\r\n                break;\r\n            case 'bottom':\r\n                axis.translation.x = axisBound.x + ((_b = axisWidths.left) !== null && _b !== void 0 ? _b : 0);\r\n                axis.translation.y = this.clampToOutsideSeriesRect(seriesRect, axisBound.y + axisBound.height + 1 - axisThickness - axisOffset, 'y', -1);\r\n                break;\r\n            case 'left':\r\n                axis.translation.y = axisBound.y + ((_c = axisWidths.top) !== null && _c !== void 0 ? _c : 0);\r\n                axis.translation.x = this.clampToOutsideSeriesRect(seriesRect, axisBound.x + axisOffset + axisThickness, 'x', 1);\r\n                break;\r\n            case 'right':\r\n                axis.translation.y = axisBound.y + ((_d = axisWidths.top) !== null && _d !== void 0 ? _d : 0);\r\n                axis.translation.x = this.clampToOutsideSeriesRect(seriesRect, axisBound.x + axisBound.width - axisThickness - axisOffset, 'x', -1);\r\n                break;\r\n        }\r\n        axis.updatePosition({ rotation: toRadians(axis.rotation), sideFlag: axis.label.getSideFlag() });\r\n    }\r\n    shouldFlipXY() {\r\n        // Only flip the xy axes if all the series agree on flipping\r\n        return !this.series.some((series) => !(series instanceof CartesianSeries && series.shouldFlipXY()));\r\n    }\r\n}\r\nCartesianChart.className = 'CartesianChart';\r\nCartesianChart.type = 'cartesian';\n\n/**\r\n * Proxy class, to allow library users to keep a stable reference to their chart, even if we need\r\n * to switch concrete class (e.g. when switching between CartesianChart vs. PolarChart).\r\n */\r\nclass AgChartInstanceProxy {\r\n    static isInstance(x) {\r\n        var _a;\r\n        if (x instanceof AgChartInstanceProxy) {\r\n            // Simple case.\r\n            return true;\r\n        }\r\n        if (((_a = x.constructor) === null || _a === void 0 ? void 0 : _a.name) === 'AgChartInstanceProxy' && x.chart != null) {\r\n            // instanceof can fail if mixing bundles (e.g. grid all-modules vs. standalone).\r\n            return true;\r\n        }\r\n        return x.chart != null && this.validateImplementation(x);\r\n    }\r\n    static validateImplementation(x) {\r\n        var _a, _b;\r\n        const chartProps = ['getOptions', 'destroy'];\r\n        const signatureProps = Object.keys((_b = (_a = x.constructor) === null || _a === void 0 ? void 0 : _a.prototype) !== null && _b !== void 0 ? _b : {});\r\n        return chartProps.every((prop) => signatureProps.includes(prop));\r\n    }\r\n    constructor(chart) {\r\n        this.chart = chart;\r\n    }\r\n    getOptions() {\r\n        return this.chart.getOptions();\r\n    }\r\n    destroy() {\r\n        this.chart.destroy();\r\n    }\r\n}\n\nfunction calculateNiceSecondaryAxis(domain, primaryTickCount) {\r\n    // Make secondary axis domain nice using strict tick count, matching the tick count from the primary axis.\r\n    // This is to make the secondary axis grid lines/ tick positions align with the ones from the primary axis.\r\n    let start = Math.floor(domain[0]);\r\n    let stop = domain[1];\r\n    start = calculateNiceStart(start, stop, primaryTickCount);\r\n    const step = getTickStep(start, stop, primaryTickCount);\r\n    const segments = primaryTickCount - 1;\r\n    stop = start + segments * step;\r\n    const d = [start, stop];\r\n    const ticks = getTicks(start, step, primaryTickCount);\r\n    return [d, ticks];\r\n}\r\nfunction calculateNiceStart(a, b, count) {\r\n    const rawStep = Math.abs(b - a) / (count - 1);\r\n    const order = Math.floor(Math.log10(rawStep));\r\n    const magnitude = Math.pow(10, order);\r\n    return Math.floor(a / magnitude) * magnitude;\r\n}\r\nfunction getTicks(start, step, count) {\r\n    // power of the step will be negative if the step is a fraction (between 0 and 1)\r\n    const stepPower = Math.floor(Math.log10(step));\r\n    const fractionDigits = step > 0 && step < 1 ? Math.abs(stepPower) : 0;\r\n    const f = Math.pow(10, fractionDigits);\r\n    const ticks = new NumericTicks(fractionDigits);\r\n    for (let i = 0; i < count; i++) {\r\n        const tick = start + step * i;\r\n        ticks[i] = Math.round(tick * f) / f;\r\n    }\r\n    return ticks;\r\n}\r\nfunction getTickStep(start, stop, count) {\r\n    const segments = count - 1;\r\n    const rawStep = (stop - start) / segments;\r\n    return calculateNextNiceStep(rawStep);\r\n}\r\nfunction calculateNextNiceStep(rawStep) {\r\n    const order = Math.floor(Math.log10(rawStep));\r\n    const magnitude = Math.pow(10, order);\r\n    // Make order 1\r\n    const step = (rawStep / magnitude) * 10;\r\n    if (step > 0 && step <= 1) {\r\n        return magnitude / 10;\r\n    }\r\n    if (step > 1 && step <= 2) {\r\n        return (2 * magnitude) / 10;\r\n    }\r\n    if (step > 1 && step <= 5) {\r\n        return (5 * magnitude) / 10;\r\n    }\r\n    if (step > 5 && step <= 10) {\r\n        return (10 * magnitude) / 10;\r\n    }\r\n    if (step > 10 && step <= 20) {\r\n        return (20 * magnitude) / 10;\r\n    }\r\n    if (step > 20 && step <= 40) {\r\n        return (40 * magnitude) / 10;\r\n    }\r\n    if (step > 40 && step <= 50) {\r\n        return (50 * magnitude) / 10;\r\n    }\r\n    if (step > 50 && step <= 100) {\r\n        return (100 * magnitude) / 10;\r\n    }\r\n    return step;\r\n}\n\nclass NumberAxisTick extends AxisTick {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.maxSpacing = NaN;\r\n    }\r\n}\r\n__decorate([\r\n    Validate(AND(NUMBER_OR_NAN(1), GREATER_THAN('minSpacing'))),\r\n    Default(NaN),\r\n    __metadata(\"design:type\", Number)\r\n], NumberAxisTick.prototype, \"maxSpacing\", void 0);\r\nclass NumberAxis extends CartesianAxis {\r\n    constructor(moduleCtx, scale = new LinearScale()) {\r\n        super(moduleCtx, scale);\r\n        this.min = NaN;\r\n        this.max = NaN;\r\n    }\r\n    normaliseDataDomain(d) {\r\n        const { min, max } = this;\r\n        const { extent, clipped } = normalisedExtentWithMetadata(d, min, max);\r\n        return { domain: extent, clipped };\r\n    }\r\n    formatDatum(datum) {\r\n        if (typeof datum === 'number') {\r\n            return datum.toFixed(2);\r\n        }\r\n        else {\r\n            Logger.warnOnce('data contains Date objects which are being plotted against a number axis, please only use a number axis for numbers.');\r\n            return String(datum);\r\n        }\r\n    }\r\n    createTick() {\r\n        return new NumberAxisTick();\r\n    }\r\n    updateSecondaryAxisTicks(primaryTickCount) {\r\n        if (this.dataDomain == null) {\r\n            throw new Error('AG Charts - dataDomain not calculated, cannot perform tick calculation.');\r\n        }\r\n        if (this.dataDomain.domain.length === 0)\r\n            return [];\r\n        const [d, ticks] = calculateNiceSecondaryAxis(this.dataDomain.domain, primaryTickCount !== null && primaryTickCount !== void 0 ? primaryTickCount : 0);\r\n        this.scale.nice = false;\r\n        this.scale.domain = d;\r\n        this.scale.update();\r\n        return ticks;\r\n    }\r\n}\r\nNumberAxis.className = 'NumberAxis';\r\nNumberAxis.type = 'number';\r\n__decorate([\r\n    Validate(AND(NUMBER_OR_NAN(), LESS_THAN('max'))),\r\n    Default(NaN),\r\n    __metadata(\"design:type\", Number)\r\n], NumberAxis.prototype, \"min\", void 0);\r\n__decorate([\r\n    Validate(AND(NUMBER_OR_NAN(), GREATER_THAN('min'))),\r\n    Default(NaN),\r\n    __metadata(\"design:type\", Number)\r\n], NumberAxis.prototype, \"max\", void 0);\n\nfunction NON_ZERO_NUMBER() {\r\n    // Cannot be 0\r\n    const message = `expecting a non-zero Number`;\r\n    return predicateWithMessage((v) => typeof v === 'number' && v !== 0, message);\r\n}\r\nclass LogAxis extends NumberAxis {\r\n    normaliseDataDomain(d) {\r\n        const { min, max } = this;\r\n        const { extent, clipped } = normalisedExtentWithMetadata(d, min, max);\r\n        const isInverted = extent[0] > extent[1];\r\n        const crossesZero = extent[0] < 0 && extent[1] > 0;\r\n        const hasZeroExtent = extent[0] === 0 && extent[1] === 0;\r\n        const invalidDomain = isInverted || crossesZero || hasZeroExtent;\r\n        if (invalidDomain) {\r\n            d = [];\r\n            if (crossesZero) {\r\n                Logger.warn(`the data domain crosses zero, the chart data cannot be rendered. See log axis documentation for more information.`);\r\n            }\r\n            else if (hasZeroExtent) {\r\n                Logger.warn(`the data domain has 0 extent, no data is rendered.`);\r\n            }\r\n        }\r\n        if (extent[0] === 0) {\r\n            extent[0] = 1;\r\n        }\r\n        if (extent[1] === 0) {\r\n            extent[1] = -1;\r\n        }\r\n        return { domain: extent, clipped };\r\n    }\r\n    set base(value) {\r\n        this.scale.base = value;\r\n    }\r\n    get base() {\r\n        return this.scale.base;\r\n    }\r\n    constructor(moduleCtx) {\r\n        super(moduleCtx, new LogScale());\r\n        this.min = NaN;\r\n        this.max = NaN;\r\n    }\r\n}\r\nLogAxis.className = 'LogAxis';\r\nLogAxis.type = 'log';\r\n__decorate([\r\n    Validate(AND(NUMBER_OR_NAN(), LESS_THAN('max'), NON_ZERO_NUMBER())),\r\n    Default(NaN),\r\n    __metadata(\"design:type\", Number)\r\n], LogAxis.prototype, \"min\", void 0);\r\n__decorate([\r\n    Validate(AND(NUMBER_OR_NAN(), GREATER_THAN('min'), NON_ZERO_NUMBER())),\r\n    Default(NaN),\r\n    __metadata(\"design:type\", Number)\r\n], LogAxis.prototype, \"max\", void 0);\n\nclass TimeAxisTick extends AxisTick {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.maxSpacing = NaN;\r\n    }\r\n}\r\n__decorate([\r\n    Validate(AND(NUMBER_OR_NAN(1), GREATER_THAN('minSpacing'))),\r\n    Default(NaN),\r\n    __metadata(\"design:type\", Number)\r\n], TimeAxisTick.prototype, \"maxSpacing\", void 0);\r\nclass TimeAxis extends CartesianAxis {\r\n    constructor(moduleCtx) {\r\n        super(moduleCtx, new TimeScale());\r\n        this.datumFormat = '%m/%d/%y, %H:%M:%S';\r\n        this.min = undefined;\r\n        this.max = undefined;\r\n        const { scale } = this;\r\n        this.refreshScale();\r\n        this.datumFormatter = scale.tickFormat({\r\n            specifier: this.datumFormat,\r\n        });\r\n    }\r\n    normaliseDataDomain(d) {\r\n        var _a;\r\n        let { min, max } = this;\r\n        let clipped = false;\r\n        if (typeof min === 'number') {\r\n            min = new Date(min);\r\n        }\r\n        if (typeof max === 'number') {\r\n            max = new Date(max);\r\n        }\r\n        if (d.length > 2) {\r\n            d = ((_a = extent(d)) !== null && _a !== void 0 ? _a : [0, 1000]).map((x) => new Date(x));\r\n        }\r\n        if (min instanceof Date) {\r\n            clipped || (clipped = min > d[0]);\r\n            d = [min, d[1]];\r\n        }\r\n        if (max instanceof Date) {\r\n            clipped || (clipped = max < d[1]);\r\n            d = [d[0], max];\r\n        }\r\n        if (d[0] > d[1]) {\r\n            d = [];\r\n        }\r\n        return { domain: d, clipped };\r\n    }\r\n    createTick() {\r\n        return new TimeAxisTick();\r\n    }\r\n    onLabelFormatChange(ticks, format) {\r\n        if (format) {\r\n            super.onLabelFormatChange(ticks, format);\r\n        }\r\n        else {\r\n            // For time axis labels to look nice, even if date format wasn't set.\r\n            this.labelFormatter = this.scale.tickFormat({ ticks });\r\n        }\r\n    }\r\n    formatDatum(datum) {\r\n        var _a;\r\n        return (_a = this.moduleCtx.callbackCache.call(this.datumFormatter, datum)) !== null && _a !== void 0 ? _a : String(datum);\r\n    }\r\n    calculatePadding(_min, _max) {\r\n        // numbers in domain correspond to Unix timestamps\r\n        // automatically expand domain by 1 in forward direction\r\n        return [0, 1];\r\n    }\r\n}\r\nTimeAxis.className = 'TimeAxis';\r\nTimeAxis.type = 'time';\r\n__decorate([\r\n    Validate(AND(OPT_DATE_OR_DATETIME_MS, LESS_THAN('max'))),\r\n    __metadata(\"design:type\", Object)\r\n], TimeAxis.prototype, \"min\", void 0);\r\n__decorate([\r\n    Validate(AND(OPT_DATE_OR_DATETIME_MS, GREATER_THAN('min'))),\r\n    __metadata(\"design:type\", Object)\r\n], TimeAxis.prototype, \"max\", void 0);\n\nconst AXIS_CONSTRUCTORS = {\r\n    [NumberAxis.type]: NumberAxis,\r\n    [CategoryAxis.type]: CategoryAxis,\r\n    [TimeAxis.type]: TimeAxis,\r\n    [GroupedCategoryAxis.type]: GroupedCategoryAxis,\r\n    [LogAxis.type]: LogAxis,\r\n};\r\nfunction registerAxis(axisType, ctor) {\r\n    AXIS_CONSTRUCTORS[axisType] = ctor;\r\n}\r\nfunction getAxis(axisType, moduleCtx) {\r\n    const axisConstructor = AXIS_CONSTRUCTORS[axisType];\r\n    if (axisConstructor) {\r\n        return new axisConstructor(moduleCtx);\r\n    }\r\n    throw new Error(`AG Charts - unknown axis type: ${axisType}`);\r\n}\r\nconst AXIS_TYPES = {\r\n    has(axisType) {\r\n        return Object.prototype.hasOwnProperty.call(AXIS_CONSTRUCTORS, axisType);\r\n    },\r\n    get axesTypes() {\r\n        return Object.keys(AXIS_CONSTRUCTORS);\r\n    },\r\n};\r\nconst AXIS_THEME_TEMPLATES = {};\r\nfunction registerAxisThemeTemplate(axisType, theme) {\r\n    AXIS_THEME_TEMPLATES[axisType] = theme;\r\n}\r\nfunction getAxisThemeTemplate(axisType) {\r\n    var _a;\r\n    return (_a = AXIS_THEME_TEMPLATES[axisType]) !== null && _a !== void 0 ? _a : {};\r\n}\n\nconst EXPECTED_ENTERPRISE_MODULES = [\r\n    { type: 'root', optionsKey: 'animation', chartTypes: ['cartesian', 'polar', 'hierarchy'] },\r\n    {\r\n        type: 'root',\r\n        optionsKey: 'background',\r\n        chartTypes: ['cartesian', 'polar', 'hierarchy'],\r\n        optionsInnerKey: 'image',\r\n    },\r\n    { type: 'root', optionsKey: 'contextMenu', chartTypes: ['cartesian', 'polar', 'hierarchy'] },\r\n    { type: 'root', optionsKey: 'zoom', chartTypes: ['cartesian'] },\r\n    {\r\n        type: 'legend',\r\n        optionsKey: 'gradientLegend',\r\n        chartTypes: ['cartesian', 'polar', 'hierarchy'],\r\n        identifier: 'gradient',\r\n    },\r\n    { type: 'axis', optionsKey: 'axes[]', chartTypes: ['polar'], identifier: 'angle-category' },\r\n    { type: 'axis', optionsKey: 'axes[]', chartTypes: ['polar'], identifier: 'angle-number' },\r\n    { type: 'axis', optionsKey: 'axes[]', chartTypes: ['polar'], identifier: 'radius-category' },\r\n    { type: 'axis', optionsKey: 'axes[]', chartTypes: ['polar'], identifier: 'radius-number' },\r\n    { type: 'axis-option', optionsKey: 'crosshair', chartTypes: ['cartesian'] },\r\n    { type: 'series', optionsKey: 'series[]', chartTypes: ['cartesian'], identifier: 'box-plot' },\r\n    { type: 'series', optionsKey: 'series[]', chartTypes: ['cartesian'], identifier: 'bullet' },\r\n    { type: 'series', optionsKey: 'series[]', chartTypes: ['cartesian'], identifier: 'heatmap' },\r\n    { type: 'series', optionsKey: 'series[]', chartTypes: ['polar'], identifier: 'nightingale' },\r\n    { type: 'series', optionsKey: 'series[]', chartTypes: ['polar'], identifier: 'radar-area' },\r\n    { type: 'series', optionsKey: 'series[]', chartTypes: ['polar'], identifier: 'radar-line' },\r\n    { type: 'series', optionsKey: 'series[]', chartTypes: ['polar'], identifier: 'radial-bar' },\r\n    { type: 'series', optionsKey: 'series[]', chartTypes: ['polar'], identifier: 'radial-column' },\r\n    { type: 'series', optionsKey: 'series[]', chartTypes: ['cartesian'], identifier: 'range-area' },\r\n    { type: 'series', optionsKey: 'series[]', chartTypes: ['cartesian'], identifier: 'range-bar' },\r\n    { type: 'series', optionsKey: 'series[]', chartTypes: ['hierarchy'], identifier: 'sunburst' },\r\n    { type: 'series', optionsKey: 'series[]', chartTypes: ['hierarchy'], identifier: 'treemap' },\r\n    { type: 'series', optionsKey: 'series[]', chartTypes: ['cartesian'], identifier: 'waterfall' },\r\n    { type: 'series-option', optionsKey: 'errorBar', chartTypes: ['cartesian'], identifier: 'error-bars' },\r\n];\r\nfunction isEnterpriseSeriesType(type) {\r\n    return EXPECTED_ENTERPRISE_MODULES.some((s) => s.type === 'series' && s.identifier === type);\r\n}\r\nfunction getEnterpriseSeriesChartTypes(type) {\r\n    var _a;\r\n    return (_a = EXPECTED_ENTERPRISE_MODULES.find((s) => s.type === 'series' && s.identifier === type)) === null || _a === void 0 ? void 0 : _a.chartTypes;\r\n}\r\nfunction isEnterpriseSeriesTypeLoaded(type) {\r\n    var _a, _b;\r\n    return ((_b = (_a = EXPECTED_ENTERPRISE_MODULES.find((s) => s.type === 'series' && s.identifier === type)) === null || _a === void 0 ? void 0 : _a.useCount) !== null && _b !== void 0 ? _b : 0) > 0;\r\n}\r\nfunction isEnterpriseCartesian(seriesType) {\r\n    var _a;\r\n    const type = (_a = getEnterpriseSeriesChartTypes(seriesType)) === null || _a === void 0 ? void 0 : _a.find((v) => v === 'cartesian');\r\n    return type === 'cartesian';\r\n}\r\nfunction isEnterprisePolar(seriesType) {\r\n    var _a;\r\n    const type = (_a = getEnterpriseSeriesChartTypes(seriesType)) === null || _a === void 0 ? void 0 : _a.find((v) => v === 'polar');\r\n    return type === 'polar';\r\n}\r\nfunction isEnterpriseHierarchy(seriesType) {\r\n    var _a;\r\n    const type = (_a = getEnterpriseSeriesChartTypes(seriesType)) === null || _a === void 0 ? void 0 : _a.find((v) => v === 'hierarchy');\r\n    return type === 'hierarchy';\r\n}\r\nfunction verifyIfModuleExpected(module) {\r\n    var _a;\r\n    if (module.packageType !== 'enterprise') {\r\n        throw new Error('AG Charts - internal configuration error, only enterprise modules need verification.');\r\n    }\r\n    const stub = EXPECTED_ENTERPRISE_MODULES.find((s) => {\r\n        return (s.type === module.type &&\r\n            s.optionsKey === module.optionsKey &&\r\n            s.identifier === module.identifier &&\r\n            module.chartTypes.every((t) => s.chartTypes.includes(t)));\r\n    });\r\n    if (stub) {\r\n        (_a = stub.useCount) !== null && _a !== void 0 ? _a : (stub.useCount = 0);\r\n        stub.useCount++;\r\n    }\r\n    return stub != null;\r\n}\r\nfunction getUnusedExpectedModules() {\r\n    return EXPECTED_ENTERPRISE_MODULES.filter(({ useCount }) => useCount == null || useCount === 0);\r\n}\n\nconst LEGEND_KEYS = {\r\n    category: 'legend',\r\n};\r\nfunction registerLegend(type, key, ctr, theme) {\r\n    LEGEND_KEYS[type] = key;\r\n    LEGEND_THEME_TEMPLATES[key] = theme;\r\n}\r\nconst LEGEND_THEME_TEMPLATES = {};\r\nfunction getLegendThemeTemplates() {\r\n    return LEGEND_THEME_TEMPLATES;\r\n}\r\nfunction getLegendKeys() {\r\n    return LEGEND_KEYS;\r\n}\n\nclass Background extends BaseModuleInstance {\r\n    constructor(ctx) {\r\n        var _a;\r\n        super();\r\n        this.node = new Group({ name: 'background', zIndex: Layers.SERIES_BACKGROUND_ZINDEX });\r\n        this.rectNode = new Rect();\r\n        this.visible = true;\r\n        this.fill = 'white';\r\n        // placeholder for enterprise module\r\n        this.image = undefined;\r\n        this.node.appendChild(this.rectNode);\r\n        (_a = ctx.scene.root) === null || _a === void 0 ? void 0 : _a.appendChild(this.node);\r\n        this.destroyFns.push(() => { var _a; return (_a = ctx.scene.root) === null || _a === void 0 ? void 0 : _a.removeChild(this.node); }, ctx.layoutService.addListener('layout-complete', (e) => this.onLayoutComplete(e)));\r\n    }\r\n    onLayoutComplete(e) {\r\n        const { width, height } = e.chart;\r\n        this.rectNode.width = width;\r\n        this.rectNode.height = height;\r\n    }\r\n}\r\n__decorate([\r\n    Validate(BOOLEAN),\r\n    ProxyPropertyOnWrite('node', 'visible'),\r\n    __metadata(\"design:type\", Boolean)\r\n], Background.prototype, \"visible\", void 0);\r\n__decorate([\r\n    Validate(OPT_COLOR_STRING),\r\n    ProxyPropertyOnWrite('rectNode', 'fill'),\r\n    __metadata(\"design:type\", String)\r\n], Background.prototype, \"fill\", void 0);\n\nconst BackgroundModule = {\r\n    type: 'root',\r\n    optionsKey: 'background',\r\n    packageType: 'community',\r\n    chartTypes: ['cartesian', 'polar', 'hierarchy'],\r\n    instanceConstructor: Background,\r\n};\n\nclass NavigatorHandle {\r\n    set fill(value) {\r\n        this.rh.fill = value;\r\n    }\r\n    get fill() {\r\n        return this.rh.fill;\r\n    }\r\n    set stroke(value) {\r\n        this.rh.stroke = value;\r\n    }\r\n    get stroke() {\r\n        return this.rh.stroke;\r\n    }\r\n    set strokeWidth(value) {\r\n        this.rh.strokeWidth = value;\r\n    }\r\n    get strokeWidth() {\r\n        return this.rh.strokeWidth;\r\n    }\r\n    set width(value) {\r\n        this.rh.width = value;\r\n    }\r\n    get width() {\r\n        return this.rh.width;\r\n    }\r\n    set height(value) {\r\n        this.rh.height = value;\r\n    }\r\n    get height() {\r\n        return this.rh.height;\r\n    }\r\n    set gripLineGap(value) {\r\n        this.rh.gripLineGap = value;\r\n    }\r\n    get gripLineGap() {\r\n        return this.rh.gripLineGap;\r\n    }\r\n    set gripLineLength(value) {\r\n        this.rh.gripLineLength = value;\r\n    }\r\n    get gripLineLength() {\r\n        return this.rh.gripLineLength;\r\n    }\r\n    constructor(rangeHandle) {\r\n        this.rh = rangeHandle;\r\n    }\r\n}\n\nclass NavigatorMask {\r\n    set fill(value) {\r\n        this.rm.fill = value;\r\n    }\r\n    get fill() {\r\n        return this.rm.fill;\r\n    }\r\n    set stroke(value) {\r\n        this.rm.stroke = value;\r\n    }\r\n    get stroke() {\r\n        return this.rm.stroke;\r\n    }\r\n    set strokeWidth(value) {\r\n        this.rm.strokeWidth = value;\r\n    }\r\n    get strokeWidth() {\r\n        return this.rm.strokeWidth;\r\n    }\r\n    set fillOpacity(value) {\r\n        this.rm.fillOpacity = value;\r\n    }\r\n    get fillOpacity() {\r\n        return this.rm.fillOpacity;\r\n    }\r\n    constructor(rangeMask) {\r\n        this.rm = rangeMask;\r\n    }\r\n}\n\nclass RangeHandle extends Path {\r\n    constructor() {\r\n        super(...arguments);\r\n        this._fill = '#f2f2f2';\r\n        this._stroke = '#999999';\r\n        this._strokeWidth = 1;\r\n        this._lineCap = 'square';\r\n        this._centerX = 0;\r\n        this._centerY = 0;\r\n        // Use an even number for better looking results.\r\n        this._width = 8;\r\n        // Use an even number for better looking results.\r\n        this._gripLineGap = 2;\r\n        // Use an even number for better looking results.\r\n        this._gripLineLength = 8;\r\n        this._height = 16;\r\n    }\r\n    set centerX(value) {\r\n        if (this._centerX !== value) {\r\n            this._centerX = value;\r\n            this.dirtyPath = true;\r\n        }\r\n    }\r\n    get centerX() {\r\n        return this._centerX;\r\n    }\r\n    set centerY(value) {\r\n        if (this._centerY !== value) {\r\n            this._centerY = value;\r\n            this.dirtyPath = true;\r\n        }\r\n    }\r\n    get centerY() {\r\n        return this._centerY;\r\n    }\r\n    set width(value) {\r\n        if (this._width !== value) {\r\n            this._width = value;\r\n            this.dirtyPath = true;\r\n        }\r\n    }\r\n    get width() {\r\n        return this._width;\r\n    }\r\n    set gripLineGap(value) {\r\n        if (this._gripLineGap !== value) {\r\n            this._gripLineGap = value;\r\n            this.dirtyPath = true;\r\n        }\r\n    }\r\n    get gripLineGap() {\r\n        return this._gripLineGap;\r\n    }\r\n    set gripLineLength(value) {\r\n        if (this._gripLineLength !== value) {\r\n            this._gripLineLength = value;\r\n            this.dirtyPath = true;\r\n        }\r\n    }\r\n    get gripLineLength() {\r\n        return this._gripLineLength;\r\n    }\r\n    set height(value) {\r\n        if (this._height !== value) {\r\n            this._height = value;\r\n            this.dirtyPath = true;\r\n        }\r\n    }\r\n    get height() {\r\n        return this._height;\r\n    }\r\n    computeBBox() {\r\n        const { centerX, centerY, width, height } = this;\r\n        const x = centerX - width / 2;\r\n        const y = centerY - height / 2;\r\n        return new BBox(x, y, width, height);\r\n    }\r\n    isPointInPath(x, y) {\r\n        const point = this.transformPoint(x, y);\r\n        const bbox = this.computeBBox();\r\n        return bbox.containsPoint(point.x, point.y);\r\n    }\r\n    updatePath() {\r\n        const { path, centerX, centerY, width, height } = this;\r\n        path.clear();\r\n        const x = centerX - width / 2;\r\n        const y = centerY - height / 2;\r\n        const ax = this.align(x);\r\n        const ay = this.align(y);\r\n        const axw = ax + this.align(x, width);\r\n        const ayh = ay + this.align(y, height);\r\n        // Handle.\r\n        path.moveTo(ax, ay);\r\n        path.lineTo(axw, ay);\r\n        path.lineTo(axw, ayh);\r\n        path.lineTo(ax, ayh);\r\n        path.lineTo(ax, ay);\r\n        // Grip lines.\r\n        const dx = this.gripLineGap / 2;\r\n        const dy = this.gripLineLength / 2;\r\n        path.moveTo(this.align(centerX - dx), this.align(centerY - dy));\r\n        path.lineTo(this.align(centerX - dx), this.align(centerY + dy));\r\n        path.moveTo(this.align(centerX + dx), this.align(centerY - dy));\r\n        path.lineTo(this.align(centerX + dx), this.align(centerY + dy));\r\n    }\r\n}\r\nRangeHandle.className = 'RangeHandle';\r\n__decorate([\r\n    Validate(COLOR_STRING),\r\n    __metadata(\"design:type\", Object)\r\n], RangeHandle.prototype, \"_fill\", void 0);\r\n__decorate([\r\n    Validate(COLOR_STRING),\r\n    __metadata(\"design:type\", Object)\r\n], RangeHandle.prototype, \"_stroke\", void 0);\r\n__decorate([\r\n    Validate(NUMBER$1(0)),\r\n    __metadata(\"design:type\", Object)\r\n], RangeHandle.prototype, \"_strokeWidth\", void 0);\r\n__decorate([\r\n    Validate(LINE_CAP),\r\n    __metadata(\"design:type\", Object)\r\n], RangeHandle.prototype, \"_lineCap\", void 0);\r\n__decorate([\r\n    Validate(NUMBER$1(0)),\r\n    __metadata(\"design:type\", Number)\r\n], RangeHandle.prototype, \"_width\", void 0);\r\n__decorate([\r\n    Validate(NUMBER$1(0)),\r\n    __metadata(\"design:type\", Number)\r\n], RangeHandle.prototype, \"_gripLineGap\", void 0);\r\n__decorate([\r\n    Validate(NUMBER$1(0)),\r\n    __metadata(\"design:type\", Number)\r\n], RangeHandle.prototype, \"_gripLineLength\", void 0);\r\n__decorate([\r\n    Validate(NUMBER$1(0)),\r\n    __metadata(\"design:type\", Number)\r\n], RangeHandle.prototype, \"_height\", void 0);\n\nfunction markDirtyOnChange(newValue, oldValue) {\r\n    if (newValue !== oldValue) {\r\n        this.dirtyPath = true;\r\n    }\r\n}\r\nclass RangeMask extends Path {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.x = 0;\r\n        this.y = 0;\r\n        this.width = 200;\r\n        this.height = 30;\r\n        this.minRange = 0.05;\r\n        this._min = 0;\r\n        this._max = 1;\r\n    }\r\n    set min(value) {\r\n        var _a;\r\n        value = clamp(0, value, this.max - this.minRange);\r\n        if (this._min !== value && !isNaN(value)) {\r\n            this._min = value;\r\n            this.dirtyPath = true;\r\n            (_a = this.onRangeChange) === null || _a === void 0 ? void 0 : _a.call(this);\r\n        }\r\n    }\r\n    get min() {\r\n        return this._min;\r\n    }\r\n    set max(value) {\r\n        var _a;\r\n        value = clamp(this.min + this.minRange, value, 1);\r\n        if (this._max !== value && !isNaN(value)) {\r\n            this._max = value;\r\n            this.dirtyPath = true;\r\n            (_a = this.onRangeChange) === null || _a === void 0 ? void 0 : _a.call(this);\r\n        }\r\n    }\r\n    get max() {\r\n        return this._max;\r\n    }\r\n    computeBBox() {\r\n        const { x, y, width, height } = this;\r\n        return new BBox(x, y, width, height);\r\n    }\r\n    computeVisibleRangeBBox() {\r\n        const { x, y, width, height, min, max } = this;\r\n        const minX = x + width * min;\r\n        const maxX = x + width * max;\r\n        return new BBox(minX, y, maxX - minX, height);\r\n    }\r\n    updatePath() {\r\n        const { path, x, y, width, height, min, max } = this;\r\n        path.clear();\r\n        const ax = this.align(x);\r\n        const ay = this.align(y);\r\n        const axw = ax + this.align(x, width);\r\n        const ayh = ay + this.align(y, height);\r\n        // Whole range.\r\n        path.moveTo(ax, ay);\r\n        path.lineTo(axw, ay);\r\n        path.lineTo(axw, ayh);\r\n        path.lineTo(ax, ayh);\r\n        path.lineTo(ax, ay);\r\n        const minX = this.align(x + width * min);\r\n        const maxX = this.align(x + width * max);\r\n        // Visible range.\r\n        path.moveTo(minX, ay);\r\n        path.lineTo(minX, ayh);\r\n        path.lineTo(maxX, ayh);\r\n        path.lineTo(maxX, ay);\r\n        path.lineTo(minX, ay);\r\n    }\r\n}\r\nRangeMask.className = 'RangeMask';\r\n__decorate([\r\n    ActionOnSet({ changeValue: markDirtyOnChange }),\r\n    Validate(NUMBER$1(0)),\r\n    __metadata(\"design:type\", Object)\r\n], RangeMask.prototype, \"x\", void 0);\r\n__decorate([\r\n    ActionOnSet({ changeValue: markDirtyOnChange }),\r\n    Validate(NUMBER$1(0)),\r\n    __metadata(\"design:type\", Object)\r\n], RangeMask.prototype, \"y\", void 0);\r\n__decorate([\r\n    ActionOnSet({ changeValue: markDirtyOnChange }),\r\n    Validate(NUMBER$1(0)),\r\n    __metadata(\"design:type\", Object)\r\n], RangeMask.prototype, \"width\", void 0);\r\n__decorate([\r\n    ActionOnSet({ changeValue: markDirtyOnChange }),\r\n    Validate(NUMBER$1(0)),\r\n    __metadata(\"design:type\", Object)\r\n], RangeMask.prototype, \"height\", void 0);\r\n__decorate([\r\n    Validate(NUMBER$1()),\r\n    __metadata(\"design:type\", Number)\r\n], RangeMask.prototype, \"_min\", void 0);\r\n__decorate([\r\n    Validate(NUMBER$1()),\r\n    __metadata(\"design:type\", Number)\r\n], RangeMask.prototype, \"_max\", void 0);\n\nclass RangeSelector extends Group {\r\n    set x(value) {\r\n        this.mask.x = value;\r\n        this.updateHandles();\r\n    }\r\n    get x() {\r\n        return this.mask.x;\r\n    }\r\n    set y(value) {\r\n        this.mask.y = value;\r\n        this.updateHandles();\r\n    }\r\n    get y() {\r\n        return this.mask.y;\r\n    }\r\n    set width(value) {\r\n        this.mask.width = value;\r\n        this.updateHandles();\r\n    }\r\n    get width() {\r\n        return this.mask.width;\r\n    }\r\n    set height(value) {\r\n        this.mask.height = value;\r\n        this.updateHandles();\r\n    }\r\n    get height() {\r\n        return this.mask.height;\r\n    }\r\n    set min(value) {\r\n        this.mask.min = value;\r\n    }\r\n    get min() {\r\n        return this.mask.min;\r\n    }\r\n    set max(value) {\r\n        this.mask.max = value;\r\n    }\r\n    get max() {\r\n        return this.mask.max;\r\n    }\r\n    constructor() {\r\n        super({ name: 'rangeSelectorGroup' });\r\n        this.minHandle = new RangeHandle();\r\n        this.maxHandle = new RangeHandle();\r\n        this.mask = (() => {\r\n            const { x, y, width, height, min, max } = RangeSelector.defaults;\r\n            const mask = new RangeMask();\r\n            mask.x = x;\r\n            mask.y = y;\r\n            mask.width = width;\r\n            mask.height = height;\r\n            mask.min = min;\r\n            mask.max = max;\r\n            const { minHandle, maxHandle } = this;\r\n            minHandle.centerX = x;\r\n            maxHandle.centerX = x + width;\r\n            minHandle.centerY = maxHandle.centerY = y + height / 2;\r\n            this.append([mask, minHandle, maxHandle]);\r\n            mask.onRangeChange = () => {\r\n                var _a;\r\n                this.updateHandles();\r\n                (_a = this.onRangeChange) === null || _a === void 0 ? void 0 : _a.call(this);\r\n            };\r\n            return mask;\r\n        })();\r\n        this._x = RangeSelector.defaults.x;\r\n        this._y = RangeSelector.defaults.y;\r\n        this._width = RangeSelector.defaults.width;\r\n        this._height = RangeSelector.defaults.height;\r\n        this._min = RangeSelector.defaults.min;\r\n        this._max = RangeSelector.defaults.max;\r\n        this.isContainerNode = true;\r\n    }\r\n    updateHandles() {\r\n        const { minHandle, maxHandle, x, y, width, height, mask } = this;\r\n        minHandle.centerX = x + width * mask.min;\r\n        maxHandle.centerX = x + width * mask.max;\r\n        minHandle.centerY = maxHandle.centerY = y + height / 2;\r\n    }\r\n    computeBBox() {\r\n        return this.mask.computeBBox();\r\n    }\r\n    computeVisibleRangeBBox() {\r\n        return this.mask.computeVisibleRangeBBox();\r\n    }\r\n    render(renderCtx) {\r\n        const { ctx, forceRender, stats } = renderCtx;\r\n        if (this.dirty === RedrawType.NONE && !forceRender) {\r\n            if (stats)\r\n                stats.nodesSkipped++;\r\n            return;\r\n        }\r\n        this.computeTransformMatrix();\r\n        this.matrix.toContext(ctx);\r\n        const { mask, minHandle, maxHandle } = this;\r\n        [mask, minHandle, maxHandle].forEach((child) => {\r\n            if (child.visible && (forceRender || child.dirty > RedrawType.NONE)) {\r\n                ctx.save();\r\n                child.render(Object.assign(Object.assign({}, renderCtx), { ctx, forceRender }));\r\n                ctx.restore();\r\n            }\r\n        });\r\n        this.markClean({ force: true });\r\n        if (stats)\r\n            stats.nodesRendered++;\r\n    }\r\n}\r\nRangeSelector.className = 'Range';\r\nRangeSelector.defaults = {\r\n    x: 0,\r\n    y: 0,\r\n    width: 200,\r\n    height: 30,\r\n    min: 0,\r\n    max: 1,\r\n};\n\nclass Navigator extends BaseModuleInstance {\r\n    set width(value) {\r\n        this.rs.width = value;\r\n    }\r\n    get width() {\r\n        return this.rs.width;\r\n    }\r\n    set height(value) {\r\n        this.rs.height = value;\r\n    }\r\n    get height() {\r\n        return this.rs.height;\r\n    }\r\n    set min(value) {\r\n        this.rs.min = value;\r\n    }\r\n    get min() {\r\n        return this.rs.min;\r\n    }\r\n    set max(value) {\r\n        this.rs.max = value;\r\n    }\r\n    get max() {\r\n        return this.rs.max;\r\n    }\r\n    set visible(value) {\r\n        this._visible = value;\r\n        this.updateGroupVisibility();\r\n    }\r\n    get visible() {\r\n        return this._visible;\r\n    }\r\n    updateGroupVisibility() {\r\n        const visible = this.enabled && this.visible;\r\n        this.rs.visible = visible;\r\n        if (visible) {\r\n            this.ctx.zoomManager.updateZoom('navigator', {\r\n                x: { min: this.rs.min, max: this.rs.max },\r\n                y: { min: 0, max: 1 },\r\n            });\r\n        }\r\n        else {\r\n            this.ctx.zoomManager.updateZoom('navigator');\r\n        }\r\n    }\r\n    constructor(ctx) {\r\n        var _a;\r\n        super();\r\n        this.ctx = ctx;\r\n        this.rs = new RangeSelector();\r\n        // Wrappers to allow option application to the scene graph nodes.\r\n        this.mask = new NavigatorMask(this.rs.mask);\r\n        this.minHandle = new NavigatorHandle(this.rs.minHandle);\r\n        this.maxHandle = new NavigatorHandle(this.rs.maxHandle);\r\n        this.minHandleDragging = false;\r\n        this.maxHandleDragging = false;\r\n        this.panHandleOffset = NaN;\r\n        this.enabled = false;\r\n        this.margin = 10;\r\n        this._visible = true;\r\n        this.rs.onRangeChange = () => ctx.zoomManager.updateZoom('navigator', {\r\n            x: { min: this.rs.min, max: this.rs.max },\r\n            y: { min: 0, max: 1 },\r\n        });\r\n        (_a = ctx.scene.root) === null || _a === void 0 ? void 0 : _a.appendChild(this.rs);\r\n        const interactionOpts = { bypassPause: ['animation'] };\r\n        this.destroyFns.push(ctx.interactionManager.addListener('drag-start', (event) => this.onDragStart(event), interactionOpts), ctx.interactionManager.addListener('drag', (event) => this.onDrag(event), interactionOpts), ctx.interactionManager.addListener('hover', (event) => this.onDrag(event), interactionOpts), ctx.interactionManager.addListener('drag-end', () => this.onDragStop(), interactionOpts), ctx.layoutService.addListener('before-series', (event) => this.layout(event)), ctx.layoutService.addListener('layout-complete', (event) => this.layoutComplete(event)), () => { var _a; return (_a = ctx.scene.root) === null || _a === void 0 ? void 0 : _a.removeChild(this.rs); }, () => this.ctx.zoomManager.updateZoom('navigator'));\r\n        this.updateGroupVisibility();\r\n    }\r\n    layout({ shrinkRect }) {\r\n        if (this.enabled) {\r\n            const navigatorTotalHeight = this.rs.height + this.margin;\r\n            shrinkRect.shrink(navigatorTotalHeight, 'bottom');\r\n            this.rs.y = shrinkRect.y + shrinkRect.height + this.margin;\r\n        }\r\n        return { shrinkRect };\r\n    }\r\n    layoutComplete({ series: { rect, visible } }) {\r\n        if (this.enabled && visible) {\r\n            this.rs.x = rect.x;\r\n            this.rs.width = rect.width;\r\n        }\r\n        this.visible = visible;\r\n    }\r\n    onDragStart(offset) {\r\n        if (!this.enabled) {\r\n            return;\r\n        }\r\n        const { offsetX, offsetY } = offset;\r\n        const { rs } = this;\r\n        const { minHandle, maxHandle, x, width, min } = rs;\r\n        const visibleRange = rs.computeVisibleRangeBBox();\r\n        if (!(this.minHandleDragging || this.maxHandleDragging)) {\r\n            if (minHandle.containsPoint(offsetX, offsetY)) {\r\n                this.minHandleDragging = true;\r\n            }\r\n            else if (maxHandle.containsPoint(offsetX, offsetY)) {\r\n                this.maxHandleDragging = true;\r\n            }\r\n            else if (visibleRange.containsPoint(offsetX, offsetY)) {\r\n                this.panHandleOffset = (offsetX - x) / width - min;\r\n            }\r\n        }\r\n    }\r\n    onDrag(offset) {\r\n        if (!this.enabled) {\r\n            return;\r\n        }\r\n        const { rs, panHandleOffset } = this;\r\n        const { x, y, width, height, minHandle, maxHandle } = rs;\r\n        const { offsetX, offsetY } = offset;\r\n        const minX = x + width * rs.min;\r\n        const maxX = x + width * rs.max;\r\n        const visibleRange = new BBox(minX, y, maxX - minX, height);\r\n        const getRatio = () => Math.min(Math.max((offsetX - x) / width, 0), 1);\r\n        if (minHandle.containsPoint(offsetX, offsetY) || maxHandle.containsPoint(offsetX, offsetY)) {\r\n            this.ctx.cursorManager.updateCursor('navigator', 'ew-resize');\r\n        }\r\n        else if (visibleRange.containsPoint(offsetX, offsetY)) {\r\n            this.ctx.cursorManager.updateCursor('navigator', 'grab');\r\n        }\r\n        else {\r\n            this.ctx.cursorManager.updateCursor('navigator');\r\n        }\r\n        if (this.minHandleDragging) {\r\n            rs.min = getRatio();\r\n        }\r\n        else if (this.maxHandleDragging) {\r\n            rs.max = getRatio();\r\n        }\r\n        else if (!isNaN(panHandleOffset)) {\r\n            const span = rs.max - rs.min;\r\n            const min = Math.min(getRatio() - panHandleOffset, 1 - span);\r\n            if (min <= rs.min) {\r\n                // pan left\r\n                rs.min = min;\r\n                rs.max = rs.min + span;\r\n            }\r\n            else {\r\n                // pan right\r\n                rs.max = min + span;\r\n                rs.min = rs.max - span;\r\n            }\r\n        }\r\n    }\r\n    onDragStop() {\r\n        this.stopHandleDragging();\r\n    }\r\n    stopHandleDragging() {\r\n        this.minHandleDragging = this.maxHandleDragging = false;\r\n        this.panHandleOffset = NaN;\r\n    }\r\n}\r\n__decorate([\r\n    ActionOnSet({\r\n        changeValue(newValue) {\r\n            if (newValue) {\r\n                this.min = 0;\r\n                this.max = 1;\r\n            }\r\n            this.updateGroupVisibility();\r\n        },\r\n    }),\r\n    Validate(BOOLEAN),\r\n    __metadata(\"design:type\", Object)\r\n], Navigator.prototype, \"enabled\", void 0);\r\n__decorate([\r\n    Validate(NUMBER$1(0)),\r\n    __metadata(\"design:type\", Object)\r\n], Navigator.prototype, \"margin\", void 0);\n\nconst NavigatorModule = {\r\n    type: 'root',\r\n    optionsKey: 'navigator',\r\n    packageType: 'community',\r\n    chartTypes: ['cartesian'],\r\n    instanceConstructor: Navigator,\r\n    themeTemplate: {\r\n        navigator: {\r\n            enabled: false,\r\n            height: 30,\r\n            mask: {\r\n                fill: '#999999',\r\n                stroke: '#999999',\r\n                strokeWidth: 1,\r\n                fillOpacity: 0.2,\r\n            },\r\n            minHandle: {\r\n                fill: '#f2f2f2',\r\n                stroke: '#999999',\r\n                strokeWidth: 1,\r\n                width: 8,\r\n                height: 16,\r\n                gripLineGap: 2,\r\n                gripLineLength: 8,\r\n            },\r\n            maxHandle: {\r\n                fill: '#f2f2f2',\r\n                stroke: '#999999',\r\n                strokeWidth: 1,\r\n                width: 8,\r\n                height: 16,\r\n                gripLineGap: 2,\r\n                gripLineLength: 8,\r\n            },\r\n        },\r\n    },\r\n};\n\nconst singleSeriesPaletteFactory = ({ takeColors }) => {\r\n    const { fills: [fill], strokes: [stroke], } = takeColors(1);\r\n    return { fill, stroke };\r\n};\r\nconst markerPaletteFactory = (params) => {\r\n    const { fill, stroke } = singleSeriesPaletteFactory(params);\r\n    return { marker: { fill, stroke } };\r\n};\n\nconst FONT_SIZE = {\r\n    SMALL: 12,\r\n    MEDIUM: 13,\r\n    LARGE: 17,\r\n};\r\nconst BOLD = 'bold';\r\nconst NORMAL = 'normal';\r\nconst BOTTOM = 'bottom';\r\nconst LEFT = 'left';\r\nconst TOP = 'top';\r\nconst CARTESIAN_AXIS_POSITIONS = {\r\n    BOTTOM,\r\n    LEFT,\r\n    TOP,\r\n};\r\nconst CATEGORY = 'category';\r\nconst NUMBER = 'number';\r\nconst TIME = 'time';\r\nconst LOG = 'log';\r\nconst CARTESIAN_AXIS_TYPES = {\r\n    CATEGORY,\r\n    NUMBER,\r\n    TIME,\r\n    LOG,\r\n};\r\nconst ANGLE_CATEGORY = 'angle-category';\r\nconst ANGLE_NUMBER = 'angle-number';\r\nconst RADIUS_CATEGORY = 'radius-category';\r\nconst RADIUS_NUMBER = 'radius-number';\r\nconst POLAR_AXIS_TYPES = {\r\n    ANGLE_CATEGORY,\r\n    ANGLE_NUMBER,\r\n    RADIUS_CATEGORY,\r\n    RADIUS_NUMBER,\r\n};\r\nconst CIRCLE = 'circle';\n\nconst TYPES = {};\r\nconst DEFAULTS = {};\r\nconst CHART_TYPES = {\r\n    has(seriesType) {\r\n        return Object.prototype.hasOwnProperty.call(TYPES, seriesType);\r\n    },\r\n    isCartesian(seriesType) {\r\n        return TYPES[seriesType] === 'cartesian';\r\n    },\r\n    isPolar(seriesType) {\r\n        return TYPES[seriesType] === 'polar';\r\n    },\r\n    isHierarchy(seriesType) {\r\n        return TYPES[seriesType] === 'hierarchy';\r\n    },\r\n    get seriesTypes() {\r\n        return Object.keys(TYPES);\r\n    },\r\n    get cartesianTypes() {\r\n        return this.seriesTypes.filter((t) => this.isCartesian(t));\r\n    },\r\n    get polarTypes() {\r\n        return this.seriesTypes.filter((t) => this.isPolar(t));\r\n    },\r\n    get hierarchyTypes() {\r\n        return this.seriesTypes.filter((t) => this.isHierarchy(t));\r\n    },\r\n};\r\nfunction registerChartSeriesType(seriesType, chartType) {\r\n    TYPES[seriesType] = chartType;\r\n}\r\nfunction registerChartDefaults(chartType, defaults) {\r\n    var _a;\r\n    DEFAULTS[chartType] = jsonMerge([(_a = DEFAULTS[chartType]) !== null && _a !== void 0 ? _a : {}, defaults]);\r\n}\r\nfunction getChartDefaults(chartType) {\r\n    var _a;\r\n    return (_a = DEFAULTS[chartType]) !== null && _a !== void 0 ? _a : {};\r\n}\r\nfunction getChartType(seriesType) {\r\n    var _a;\r\n    return (_a = TYPES[seriesType]) !== null && _a !== void 0 ? _a : 'unknown';\r\n}\n\nfunction optionsType(input) {\r\n    var _a, _b, _c, _d;\r\n    return (_d = (_a = input.type) !== null && _a !== void 0 ? _a : (_c = (_b = input.series) === null || _b === void 0 ? void 0 : _b[0]) === null || _c === void 0 ? void 0 : _c.type) !== null && _d !== void 0 ? _d : 'line';\r\n}\r\nfunction isAgCartesianChartOptions(input) {\r\n    const specifiedType = optionsType(input);\r\n    if (specifiedType == null) {\r\n        return true;\r\n    }\r\n    if (specifiedType === 'cartesian') {\r\n        Logger.warnOnce(`type '${specifiedType}' is deprecated, use a series type instead`);\r\n        return true;\r\n    }\r\n    return CHART_TYPES.isCartesian(specifiedType) || isEnterpriseCartesian(specifiedType);\r\n}\r\nfunction isAgHierarchyChartOptions(input) {\r\n    const specifiedType = optionsType(input);\r\n    if (specifiedType == null) {\r\n        return false;\r\n    }\r\n    if (specifiedType === 'hierarchy') {\r\n        Logger.warnOnce(`type '${specifiedType}' is deprecated, use a series type instead`);\r\n        return true;\r\n    }\r\n    return CHART_TYPES.isHierarchy(specifiedType) || isEnterpriseHierarchy(specifiedType);\r\n}\r\nfunction isAgPolarChartOptions(input) {\r\n    const specifiedType = optionsType(input);\r\n    if (specifiedType == null) {\r\n        return false;\r\n    }\r\n    if (specifiedType === 'polar') {\r\n        Logger.warnOnce(`type '${specifiedType}' is deprecated, use a series type instead`);\r\n        return true;\r\n    }\r\n    return CHART_TYPES.isPolar(specifiedType) || isEnterprisePolar(specifiedType);\r\n}\r\nfunction isSeriesOptionType(input) {\r\n    if (input == null) {\r\n        return false;\r\n    }\r\n    return CHART_TYPES.has(input);\r\n}\r\nfunction isAxisOptionType(input) {\r\n    if (input == null) {\r\n        return false;\r\n    }\r\n    return AXIS_TYPES.has(input);\r\n}\n\nconst DEFAULT_CARTESIAN_CHART_OVERRIDES = {\r\n    axes: [\r\n        {\r\n            type: CARTESIAN_AXIS_TYPES.NUMBER,\r\n            position: CARTESIAN_AXIS_POSITIONS.LEFT,\r\n        },\r\n        {\r\n            type: CARTESIAN_AXIS_TYPES.CATEGORY,\r\n            position: CARTESIAN_AXIS_POSITIONS.BOTTOM,\r\n        },\r\n    ],\r\n};\r\nfunction swapAxes(opts) {\r\n    var _a;\r\n    if (!isAgCartesianChartOptions(opts)) {\r\n        return opts;\r\n    }\r\n    const [axis0, axis1] = (_a = opts.axes) !== null && _a !== void 0 ? _a : [];\r\n    return Object.assign(Object.assign({}, opts), { axes: [\r\n            Object.assign(Object.assign({}, axis0), { position: axis1.position }),\r\n            Object.assign(Object.assign({}, axis1), { position: axis0.position }),\r\n        ] });\r\n}\r\nfunction resolveModuleConflicts(opts) {\r\n    var _a, _b, _c, _d;\r\n    const conflictOverrides = {};\r\n    for (const [source, conflicts] of MODULE_CONFLICTS.entries()) {\r\n        if (opts[source] == null || !conflicts.length) {\r\n            continue;\r\n        }\r\n        (_a = conflictOverrides[source]) !== null && _a !== void 0 ? _a : (conflictOverrides[source] = {});\r\n        for (const conflict of conflicts) {\r\n            if (((_b = opts[source]) === null || _b === void 0 ? void 0 : _b.enabled) && ((_c = opts[conflict]) === null || _c === void 0 ? void 0 : _c.enabled)) {\r\n                Logger.warnOnce(`the [${source}] module can not be used at the same time as [${conflict}], it will be disabled.`);\r\n                conflictOverrides[source].enabled = false;\r\n            }\r\n            else {\r\n                conflictOverrides[source].enabled = (_d = opts[source]) === null || _d === void 0 ? void 0 : _d.enabled;\r\n            }\r\n        }\r\n    }\r\n    return conflictOverrides;\r\n}\n\nconst EXTENDS_CHART_DEFAULTS = Symbol('extends-chart-defaults');\r\nconst EXTENDS_LEGEND_DEFAULTS = Symbol('extends-legend-defaults');\r\nconst EXTENDS_LEGEND_ITEM_DEFAULTS = Symbol('extends-legend-item-defaults');\r\nconst EXTENDS_LEGEND_ITEM_MARKER_DEFAULTS = Symbol('extends-legend-item-marker-defaults');\r\nconst EXTENDS_AXES_DEFAULTS = Symbol('extends-axes-defaults');\r\nconst EXTENDS_AXES_LABEL_DEFAULTS = Symbol('extends-axes-label-defaults');\r\nconst EXTENDS_AXES_LINE_DEFAULTS = Symbol('extends-axes-line-defaults');\r\nconst EXTENDS_AXES_TICK_DEFAULTS = Symbol('extends-axes-tick-defaults');\r\nconst EXTENDS_AXES_GRID_LINE_DEFAULTS = Symbol('extends-axes-grid-line-defaults');\r\nconst EXTENDS_SERIES_DEFAULTS = Symbol('extends-series-defaults');\r\nconst EXTENDS_CARTESIAN_MARKER_DEFAULTS = Symbol('extends-cartesian-marker-defaults');\r\nconst OVERRIDE_SERIES_LABEL_DEFAULTS = Symbol('override-series-label-defaults');\r\nconst DEFAULT_FONT_FAMILY = Symbol('default-font');\r\nconst DEFAULT_LABEL_COLOUR = Symbol('default-label-colour');\r\nconst DEFAULT_INVERTED_LABEL_COLOUR = Symbol('default-inverted-label-colour');\r\nconst DEFAULT_INSIDE_SERIES_LABEL_COLOUR = Symbol('default-inside-series-label-colour');\r\nconst DEFAULT_MUTED_LABEL_COLOUR = Symbol('default-muted-label-colour');\r\nconst DEFAULT_AXIS_GRID_COLOUR = Symbol('default-axis-grid-colour');\r\nconst DEFAULT_AXIS_LINE_COLOUR = Symbol('default-axis-line-colour');\r\nconst DEFAULT_CROSS_LINES_COLOUR = Symbol('default-cross-lines-colour');\r\nconst DEFAULT_BACKGROUND_COLOUR = Symbol('default-background-colour');\r\nconst DEFAULT_SHADOW_COLOUR = Symbol('default-shadow-colour');\r\nconst DEFAULT_WATERFALL_SERIES_POSITIVE_COLOURS = Symbol('default-waterfall-series-positive-colors');\r\nconst DEFAULT_WATERFALL_SERIES_NEGATIVE_COLOURS = Symbol('default-waterfall-series-negative-colors');\r\nconst DEFAULT_WATERFALL_SERIES_TOTAL_COLOURS = Symbol('default-waterfall-series-total-colors');\r\nconst DEFAULT_WATERFALL_SERIES_CONNECTOR_LINE_STROKE = Symbol('default-waterfall-series-connector-line-stroke');\r\nconst DEFAULT_POLAR_SERIES_STROKE = Symbol('default-polar-series-stroke');\r\nconst DEFAULT_DIVERGING_SERIES_COLOUR_RANGE = Symbol('default-diverging-series-colour-range');\r\nconst DEFAULT_HIERARCHY_FILLS = Symbol('default-hierarchy-fills');\r\nconst DEFAULT_HIERARCHY_STROKES = Symbol('default-hierarchy-strokes');\n\n/**\r\n * Implements a per-path \"to/from\" animation.\r\n *\r\n * @param id prefix for all animation ids generated by this call\r\n * @param animationManager used to schedule generated animations\r\n * @param paths contains paths to be animated\r\n * @param intermediateFn callback to update path\r\n * @param extraOpts optional additional animation properties to pass to AnimationManager#animate.\r\n */\r\nfunction pathMotion(groupId, subId, animationManager, paths, fns) {\r\n    const { defaultDuration } = animationManager;\r\n    const { addPhaseFn, updatePhaseFn, removePhaseFn } = fns;\r\n    const animate = (phase, path, updateFn) => {\r\n        animationManager.animate({\r\n            id: `${groupId}_${subId}_${path.id}_${phase}`,\r\n            groupId,\r\n            from: 0,\r\n            to: 1,\r\n            ease: easeOut,\r\n            onUpdate(ratio, preInit) {\r\n                if (preInit && phase !== 'removed')\r\n                    return;\r\n                path.path.clear({ trackChanges: true });\r\n                updateFn(ratio, path);\r\n                path.checkPathDirty();\r\n            },\r\n            onStop() {\r\n                if (phase !== 'added')\r\n                    return;\r\n                path.path.clear({ trackChanges: true });\r\n                updateFn(1, path);\r\n                path.checkPathDirty();\r\n            },\r\n            duration: FROM_TO_MIXINS[phase].animationDuration * defaultDuration,\r\n            delay: FROM_TO_MIXINS[phase].animationDelay * defaultDuration,\r\n        });\r\n    };\r\n    for (const path of paths) {\r\n        if (!animationManager.isSkipped()) {\r\n            animate('removed', path, removePhaseFn);\r\n            animate('updated', path, updatePhaseFn);\r\n        }\r\n        animate('added', path, addPhaseFn);\r\n    }\r\n}\n\nconst MARKER_SHAPE = predicateWithMessage((v) => isMarkerShape(v) || Object.getPrototypeOf(v) === Marker, `expecting a marker shape keyword such as 'circle', 'diamond' or 'square' or an object extending the Marker class`);\r\nclass SeriesMarker extends ChangeDetectable {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.enabled = true;\r\n        /** One of the predefined marker names, or a marker constructor function (for user-defined markers). */\r\n        this.shape = Circle;\r\n        this.size = 6;\r\n        this.fillOpacity = 1;\r\n        this.strokeWidth = 1;\r\n        this.strokeOpacity = 1;\r\n    }\r\n    getStyle() {\r\n        const { size, fill, fillOpacity, stroke, strokeWidth, strokeOpacity } = this;\r\n        return { size, fill, fillOpacity, stroke, strokeWidth, strokeOpacity };\r\n    }\r\n    getDiameter() {\r\n        return this.size + this.strokeWidth;\r\n    }\r\n}\r\n__decorate([\r\n    Validate(BOOLEAN),\r\n    SceneChangeDetection({ redraw: RedrawType.MAJOR }),\r\n    __metadata(\"design:type\", Object)\r\n], SeriesMarker.prototype, \"enabled\", void 0);\r\n__decorate([\r\n    Validate(MARKER_SHAPE),\r\n    SceneChangeDetection({ redraw: RedrawType.MAJOR }),\r\n    __metadata(\"design:type\", Object)\r\n], SeriesMarker.prototype, \"shape\", void 0);\r\n__decorate([\r\n    Validate(NUMBER$1(0)),\r\n    SceneChangeDetection({ redraw: RedrawType.MAJOR }),\r\n    __metadata(\"design:type\", Number)\r\n], SeriesMarker.prototype, \"size\", void 0);\r\n__decorate([\r\n    Validate(OPT_COLOR_STRING),\r\n    SceneChangeDetection({ redraw: RedrawType.MAJOR }),\r\n    __metadata(\"design:type\", String)\r\n], SeriesMarker.prototype, \"fill\", void 0);\r\n__decorate([\r\n    Validate(OPT_NUMBER(0, 1)),\r\n    SceneChangeDetection({ redraw: RedrawType.MAJOR }),\r\n    __metadata(\"design:type\", Number)\r\n], SeriesMarker.prototype, \"fillOpacity\", void 0);\r\n__decorate([\r\n    Validate(OPT_COLOR_STRING),\r\n    SceneChangeDetection({ redraw: RedrawType.MAJOR }),\r\n    __metadata(\"design:type\", String)\r\n], SeriesMarker.prototype, \"stroke\", void 0);\r\n__decorate([\r\n    Validate(OPT_NUMBER(0)),\r\n    SceneChangeDetection({ redraw: RedrawType.MAJOR }),\r\n    __metadata(\"design:type\", Number)\r\n], SeriesMarker.prototype, \"strokeWidth\", void 0);\r\n__decorate([\r\n    Validate(OPT_NUMBER(0, 1)),\r\n    SceneChangeDetection({ redraw: RedrawType.MAJOR }),\r\n    __metadata(\"design:type\", Number)\r\n], SeriesMarker.prototype, \"strokeOpacity\", void 0);\r\n__decorate([\r\n    Validate(OPT_FUNCTION),\r\n    SceneChangeDetection({ redraw: RedrawType.MAJOR }),\r\n    __metadata(\"design:type\", Function)\r\n], SeriesMarker.prototype, \"formatter\", void 0);\n\nfunction markerFadeInAnimation({ id }, animationManager, markerSelections, status = 'unknown') {\r\n    const params = Object.assign({}, FROM_TO_MIXINS[status]);\r\n    staticFromToMotion(id, 'markers', animationManager, markerSelections, { opacity: 0 }, { opacity: 1 }, params);\r\n    markerSelections.forEach((s) => s.cleanup());\r\n}\r\nfunction markerScaleInAnimation({ id }, animationManager, markerSelections) {\r\n    staticFromToMotion(id, 'markers', animationManager, markerSelections, { scalingX: 0, scalingY: 0 }, { scalingX: 1, scalingY: 1 });\r\n    markerSelections.forEach((s) => s.cleanup());\r\n}\r\nfunction markerSwipeScaleInAnimation({ id }, animationManager, markerSelections, seriesWidth) {\r\n    // Improves consistency with matching parallel animations.\r\n    const tweakFactor = 0.1;\r\n    const fromFn = (_, datum) => {\r\n        var _a, _b;\r\n        const x = (_b = (_a = datum.midPoint) === null || _a === void 0 ? void 0 : _a.x) !== null && _b !== void 0 ? _b : seriesWidth;\r\n        // Calculate a delay that depends on the X position of the datum, so that nodes appear\r\n        // gradually from left to right. Use easeInOut to match any parallel swipe animations.\r\n        const delayRatio = easeInOut(x / seriesWidth) - tweakFactor;\r\n        const delay = Math.max(Math.min(delayRatio, 1), 0);\r\n        return { scalingX: 0, scalingY: 0, animationDelay: delay, animationDuration: QUICK_TRANSITION };\r\n    };\r\n    const toFn = () => {\r\n        return { scalingX: 1, scalingY: 1 };\r\n    };\r\n    fromToMotion(id, 'markers', animationManager, markerSelections, { fromFn, toFn });\r\n}\r\nfunction resetMarkerFn(_node) {\r\n    return { opacity: 1, scalingX: 1, scalingY: 1 };\r\n}\r\nfunction resetMarkerPositionFn(_node, datum) {\r\n    var _a, _b, _c, _d;\r\n    return {\r\n        translationX: (_b = (_a = datum.point) === null || _a === void 0 ? void 0 : _a.x) !== null && _b !== void 0 ? _b : NaN,\r\n        translationY: (_d = (_c = datum.point) === null || _c === void 0 ? void 0 : _c.y) !== null && _d !== void 0 ? _d : NaN,\r\n    };\r\n}\r\nfunction prepareMarkerAnimation(pairMap, parentStatus) {\r\n    const readFirstPair = (xValue, type) => {\r\n        const val = pairMap[type][xValue];\r\n        return Array.isArray(val) ? val[0] : val;\r\n    };\r\n    const markerStatus = (datum) => {\r\n        const { xValue } = datum;\r\n        if (pairMap.moved[xValue]) {\r\n            return { point: readFirstPair(xValue, 'moved'), status: 'updated' };\r\n        }\r\n        else if (pairMap.removed[xValue]) {\r\n            return { point: readFirstPair(xValue, 'removed'), status: 'removed' };\r\n        }\r\n        else if (pairMap.added[xValue]) {\r\n            return { point: readFirstPair(xValue, 'added'), status: 'added' };\r\n        }\r\n        return { status: 'unknown' };\r\n    };\r\n    const fromFn = (marker, datum) => {\r\n        var _a, _b, _c, _d, _e, _f;\r\n        const { status, point } = markerStatus(datum);\r\n        if (status === 'unknown')\r\n            return { opacity: 0 };\r\n        const defaults = Object.assign({ translationX: (_b = (_a = point === null || point === void 0 ? void 0 : point.from) === null || _a === void 0 ? void 0 : _a.x) !== null && _b !== void 0 ? _b : marker.translationX, translationY: (_d = (_c = point === null || point === void 0 ? void 0 : point.from) === null || _c === void 0 ? void 0 : _c.y) !== null && _d !== void 0 ? _d : marker.translationY, opacity: marker.opacity }, FROM_TO_MIXINS[status]);\r\n        if (parentStatus === 'added') {\r\n            return Object.assign(Object.assign(Object.assign({}, defaults), { opacity: 0, translationX: (_e = point === null || point === void 0 ? void 0 : point.to) === null || _e === void 0 ? void 0 : _e.x, translationY: (_f = point === null || point === void 0 ? void 0 : point.to) === null || _f === void 0 ? void 0 : _f.y }), FROM_TO_MIXINS['added']);\r\n        }\r\n        if (status === 'added') {\r\n            defaults.opacity = 0;\r\n        }\r\n        return defaults;\r\n    };\r\n    const toFn = (_marker, datum) => {\r\n        var _a, _b;\r\n        const { status, point } = markerStatus(datum);\r\n        if (status === 'unknown')\r\n            return { opacity: 0 };\r\n        const defaults = Object.assign({ translationX: datum.point.x, translationY: datum.point.y, opacity: 1 }, FROM_TO_MIXINS[status]);\r\n        if (status === 'removed' || parentStatus === 'removed') {\r\n            return Object.assign(Object.assign(Object.assign({}, defaults), { translationX: (_a = point === null || point === void 0 ? void 0 : point.to) === null || _a === void 0 ? void 0 : _a.x, translationY: (_b = point === null || point === void 0 ? void 0 : point.to) === null || _b === void 0 ? void 0 : _b.y, opacity: 0 }), FROM_TO_MIXINS['removed']);\r\n        }\r\n        return defaults;\r\n    };\r\n    return { fromFn, toFn };\r\n}\n\nfunction minMax(nodeData) {\r\n    return nodeData.reduce(({ min, max }, node) => {\r\n        if (min == null || min.point.x > node.point.x) {\r\n            min = node;\r\n        }\r\n        if (max == null || max.point.x < node.point.x) {\r\n            max = node;\r\n        }\r\n        return { min, max };\r\n    }, {});\r\n}\r\nfunction intersectionOnLine(a, b, targetX) {\r\n    const m = (b.y - a.y) / (b.x - a.x);\r\n    // Find a point a distance along the line from `a` and `b`\r\n    const y = (targetX - a.x) * m + a.y;\r\n    return { x: targetX, y };\r\n}\r\nfunction backfillPathPoint(results, process, skip, processFn) {\r\n    let prevMarkerIdx = -1, nextMarkerIdx = 0;\r\n    const toProcess = [];\r\n    while (nextMarkerIdx < results.length) {\r\n        if (results[nextMarkerIdx].change === process) {\r\n            toProcess.push(results[nextMarkerIdx]);\r\n            nextMarkerIdx++;\r\n            continue;\r\n        }\r\n        if (results[nextMarkerIdx].change === skip) {\r\n            nextMarkerIdx++;\r\n            continue;\r\n        }\r\n        if (toProcess.length > 0) {\r\n            processFn(toProcess, prevMarkerIdx, nextMarkerIdx);\r\n            toProcess.length = 0;\r\n        }\r\n        prevMarkerIdx = nextMarkerIdx;\r\n        nextMarkerIdx++;\r\n    }\r\n    if (toProcess.length > 0) {\r\n        processFn(toProcess, prevMarkerIdx, nextMarkerIdx);\r\n    }\r\n}\r\nfunction backfillPathPointData(result, splitMode) {\r\n    backfillPathPoint(result, 'out', 'in', (toProcess, sIdx, eIdx) => {\r\n        var _a, _b;\r\n        if (sIdx === -1 && result[eIdx]) {\r\n            toProcess.forEach((d) => (d.to = result[eIdx].from));\r\n        }\r\n        else if (eIdx === result.length && result[sIdx]) {\r\n            toProcess.forEach((d) => (d.to = result[sIdx].from));\r\n        }\r\n        else if (splitMode === 'intersect' && ((_a = result[sIdx]) === null || _a === void 0 ? void 0 : _a.from) && ((_b = result[eIdx]) === null || _b === void 0 ? void 0 : _b.from)) {\r\n            toProcess.forEach((d) => (d.to = intersectionOnLine(result[sIdx].from, result[eIdx].from, d.from.x)));\r\n        }\r\n        else {\r\n            toProcess.forEach((d) => (d.to = d.from));\r\n        }\r\n    });\r\n    backfillPathPoint(result, 'in', 'out', (toProcess, sIdx, eIdx) => {\r\n        var _a, _b;\r\n        if (sIdx === -1 && result[eIdx]) {\r\n            toProcess.forEach((d) => (d.from = result[eIdx].to));\r\n        }\r\n        else if (eIdx === result.length && result[sIdx]) {\r\n            toProcess.forEach((d) => (d.from = result[sIdx].to));\r\n        }\r\n        else if (splitMode === 'intersect' && ((_a = result[sIdx]) === null || _a === void 0 ? void 0 : _a.to) && ((_b = result[eIdx]) === null || _b === void 0 ? void 0 : _b.to)) {\r\n            toProcess.forEach((d) => (d.from = intersectionOnLine(result[sIdx].to, result[eIdx].to, d.to.x)));\r\n        }\r\n        else {\r\n            toProcess.forEach((d) => (d.from = d.to));\r\n        }\r\n    });\r\n}\r\nfunction calculatePoint(from, to, ratio) {\r\n    const x1 = isNaN(from.x) ? to.x : from.x;\r\n    const y1 = isNaN(from.y) ? to.y : from.y;\r\n    const xd = to.x - from.x;\r\n    const yd = to.y - from.y;\r\n    const xr = isNaN(xd) ? 0 : xd * ratio;\r\n    const yr = isNaN(yd) ? 0 : yd * ratio;\r\n    return {\r\n        x: x1 + xr,\r\n        y: y1 + yr,\r\n    };\r\n}\r\nfunction renderPartialPath(pairData, ratios, path) {\r\n    const { path: linePath } = path;\r\n    let previousTo;\r\n    for (const data of pairData) {\r\n        const ratio = ratios[data.change];\r\n        if (ratio == null)\r\n            continue;\r\n        const { from, to } = data;\r\n        if (from == null || to == null)\r\n            continue;\r\n        const { x, y } = calculatePoint(from, to, ratio);\r\n        if (data.moveTo === false) {\r\n            linePath.lineTo(x, y);\r\n        }\r\n        else if (data.moveTo === true || !previousTo) {\r\n            linePath.moveTo(x, y);\r\n        }\r\n        else if (previousTo) {\r\n            const moveToRatio = data.moveTo === 'in' ? ratio : 1 - ratio;\r\n            const { x: midPointX, y: midPointY } = calculatePoint(previousTo, { x, y }, moveToRatio);\r\n            linePath.lineTo(midPointX, midPointY);\r\n            linePath.moveTo(x, y);\r\n        }\r\n        previousTo = { x, y };\r\n    }\r\n}\r\nfunction pathSwipeInAnimation({ id }, animationManager, paths) {\r\n    staticFromToMotion(id, 'path_properties', animationManager, paths, { clipScalingX: 0 }, { clipScalingX: 1 }, {\r\n        start: { clipMode: 'normal' },\r\n        finish: { clipMode: undefined },\r\n    });\r\n}\r\nfunction pathFadeInAnimation({ id }, subId, animationManager, selection) {\r\n    staticFromToMotion(id, subId, animationManager, selection, { opacity: 0 }, { opacity: 1 }, LABEL_PHASE);\r\n}\r\nfunction pathFadeOutAnimation({ id }, subId, animationManager, selection) {\r\n    staticFromToMotion(id, subId, animationManager, selection, { opacity: 1 }, { opacity: 0 }, LABEL_PHASE);\r\n}\r\nfunction buildResetPathFn(opts) {\r\n    return (_node) => {\r\n        return { opacity: opts.getOpacity(), clipScalingX: 1, clipMode: undefined };\r\n    };\r\n}\n\nfunction scale(val, scaling) {\r\n    if (!scaling)\r\n        return NaN;\r\n    if (val instanceof Date) {\r\n        val = val.getTime();\r\n    }\r\n    if (scaling.type === 'continuous' && typeof val === 'number') {\r\n        const domainRatio = (val - scaling.domain[0]) / (scaling.domain[1] - scaling.domain[0]);\r\n        return domainRatio * (scaling.range[1] - scaling.range[0]) + scaling.range[0];\r\n    }\r\n    if (scaling.type === 'log' && typeof val === 'number') {\r\n        return scaling.convert(val);\r\n    }\r\n    // Category axis case.\r\n    const matchingIndex = scaling.domain.findIndex((d) => d === val);\r\n    if (matchingIndex >= 0) {\r\n        return scaling.range[matchingIndex];\r\n    }\r\n    // We failed to convert using the scale.\r\n    return NaN;\r\n}\r\nfunction closeMatch(a, b) {\r\n    const an = Number(a);\r\n    const bn = Number(b);\r\n    if (!isNaN(an) && !isNaN(bn)) {\r\n        return Math.abs(bn - an) < 0.25;\r\n    }\r\n    return a === b;\r\n}\r\nfunction calculateMoveTo(from = false, to = false) {\r\n    if (from === to) {\r\n        return !!from;\r\n    }\r\n    return from ? 'in' : 'out';\r\n}\r\nfunction pairContinuousData(newData, oldData, opts = {}) {\r\n    var _a, _b, _c, _d;\r\n    const { backfillSplitMode = 'intersect' } = opts;\r\n    const toNewScale = (oldDatum) => {\r\n        var _a, _b;\r\n        return {\r\n            x: scale((_a = oldDatum.xValue) !== null && _a !== void 0 ? _a : NaN, newData.scales.x),\r\n            y: scale((_b = oldDatum.yValue) !== null && _b !== void 0 ? _b : NaN, newData.scales.y),\r\n        };\r\n    };\r\n    const toOldScale = (newDatum) => {\r\n        var _a, _b;\r\n        return {\r\n            x: scale((_a = newDatum.xValue) !== null && _a !== void 0 ? _a : NaN, oldData.scales.x),\r\n            y: scale((_b = newDatum.yValue) !== null && _b !== void 0 ? _b : NaN, oldData.scales.y),\r\n        };\r\n    };\r\n    const result = [];\r\n    const resultMap = {\r\n        added: {},\r\n        moved: {},\r\n        removed: {},\r\n    };\r\n    const pairUp = (from, to, xValue, change = 'move') => {\r\n        if (from && (isNaN(from.point.x) || isNaN(from.point.y))) {\r\n            // Default to 'to' position if 'from' is invalid.\r\n            from = to;\r\n        }\r\n        const resultPoint = {\r\n            from: from === null || from === void 0 ? void 0 : from.point,\r\n            to: to === null || to === void 0 ? void 0 : to.point,\r\n            moveTo: calculateMoveTo(from === null || from === void 0 ? void 0 : from.point.moveTo, to === null || to === void 0 ? void 0 : to.point.moveTo),\r\n            change,\r\n        };\r\n        if (change === 'move') {\r\n            resultMap.moved[xValue] = resultPoint;\r\n            oldIdx++;\r\n            newIdx++;\r\n        }\r\n        else if (change === 'in') {\r\n            resultMap.added[xValue] = resultPoint;\r\n            newIdx++;\r\n        }\r\n        else if (change === 'out') {\r\n            resultMap.removed[xValue] = resultPoint;\r\n            oldIdx++;\r\n        }\r\n        result.push(resultPoint);\r\n    };\r\n    const { min: minFromNode, max: maxFromNode } = minMax(oldData.nodeData);\r\n    const { min: minToNode, max: maxToNode } = minMax(newData.nodeData);\r\n    let oldIdx = 0;\r\n    let newIdx = 0;\r\n    while (oldIdx < oldData.nodeData.length || newIdx < newData.nodeData.length) {\r\n        const from = oldData.nodeData[oldIdx];\r\n        const to = newData.nodeData[newIdx];\r\n        const fromShifted = from ? toNewScale(from) : undefined;\r\n        const toUnshifted = to ? toOldScale(to) : undefined;\r\n        const NA = undefined;\r\n        if (fromShifted && closeMatch(fromShifted.x, to === null || to === void 0 ? void 0 : to.point.x)) {\r\n            pairUp(from, to, to.xValue, 'move');\r\n        }\r\n        else if (fromShifted && fromShifted.x < ((_a = minToNode === null || minToNode === void 0 ? void 0 : minToNode.point.x) !== null && _a !== void 0 ? _a : -Infinity)) {\r\n            pairUp(from, NA, from.xValue, 'out');\r\n        }\r\n        else if (fromShifted && fromShifted.x > ((_b = maxToNode === null || maxToNode === void 0 ? void 0 : maxToNode.point.x) !== null && _b !== void 0 ? _b : Infinity)) {\r\n            pairUp(from, NA, from.xValue, 'out');\r\n        }\r\n        else if (toUnshifted && toUnshifted.x < ((_c = minFromNode === null || minFromNode === void 0 ? void 0 : minFromNode.point.x) !== null && _c !== void 0 ? _c : -Infinity)) {\r\n            pairUp(NA, to, to.xValue, 'in');\r\n        }\r\n        else if (toUnshifted && toUnshifted.x > ((_d = maxFromNode === null || maxFromNode === void 0 ? void 0 : maxFromNode.point.x) !== null && _d !== void 0 ? _d : Infinity)) {\r\n            pairUp(NA, to, to.xValue, 'in');\r\n        }\r\n        else if (fromShifted && fromShifted.x < (to === null || to === void 0 ? void 0 : to.point.x)) {\r\n            pairUp(from, NA, from.xValue, 'out');\r\n        }\r\n        else if (toUnshifted && toUnshifted.x < (from === null || from === void 0 ? void 0 : from.point.x)) {\r\n            pairUp(NA, to, to.xValue, 'in');\r\n        }\r\n        else if (from) {\r\n            pairUp(from, NA, from.xValue, 'out');\r\n        }\r\n        else if (to) {\r\n            pairUp(NA, to, to.xValue, 'in');\r\n        }\r\n        else {\r\n            throw new Error('Unable to process points');\r\n        }\r\n    }\r\n    backfillPathPointData(result, backfillSplitMode);\r\n    return { result, resultMap };\r\n}\r\nfunction pairCategoryData(newData, oldData, diff, opts = {}) {\r\n    var _a, _b, _c;\r\n    const { backfillSplitMode = 'intersect', multiDatum = false } = opts;\r\n    const result = [];\r\n    const resultMapSingle = {\r\n        added: {},\r\n        moved: {},\r\n        removed: {},\r\n    };\r\n    const resultMapMulti = {\r\n        added: {},\r\n        moved: {},\r\n        removed: {},\r\n    };\r\n    let previousResultPoint = undefined;\r\n    let previousXValue = undefined;\r\n    const addToResultMap = (xValue, result) => {\r\n        var _a;\r\n        var _b;\r\n        const type = result.change === 'move' ? 'moved' : result.change === 'in' ? 'added' : 'removed';\r\n        if (multiDatum) {\r\n            (_a = (_b = resultMapMulti[type])[xValue]) !== null && _a !== void 0 ? _a : (_b[xValue] = []);\r\n            resultMapMulti[type][xValue].push(result);\r\n        }\r\n        else {\r\n            resultMapSingle[type][xValue] = result;\r\n        }\r\n        previousResultPoint = result;\r\n        previousXValue = xValue;\r\n    };\r\n    let oldIndex = 0;\r\n    let newIndex = 0;\r\n    let isXUnordered = false;\r\n    while (oldIndex < oldData.nodeData.length || newIndex < newData.nodeData.length) {\r\n        const before = oldData.nodeData[oldIndex];\r\n        const after = newData.nodeData[newIndex];\r\n        let resultPoint;\r\n        if ((before === null || before === void 0 ? void 0 : before.xValue) === (after === null || after === void 0 ? void 0 : after.xValue)) {\r\n            resultPoint = {\r\n                change: 'move',\r\n                moveTo: calculateMoveTo((_a = before.point.moveTo) !== null && _a !== void 0 ? _a : false, after.point.moveTo),\r\n                from: before.point,\r\n                to: after.point,\r\n            };\r\n            addToResultMap(before.xValue, resultPoint);\r\n            oldIndex++;\r\n            newIndex++;\r\n        }\r\n        else if (diff.removed.indexOf(before === null || before === void 0 ? void 0 : before.xValue) >= 0) {\r\n            resultPoint = {\r\n                change: 'out',\r\n                moveTo: (_b = before.point.moveTo) !== null && _b !== void 0 ? _b : false,\r\n                from: before.point,\r\n            };\r\n            addToResultMap(before.xValue, resultPoint);\r\n            oldIndex++;\r\n        }\r\n        else if (diff.added.indexOf(after === null || after === void 0 ? void 0 : after.xValue) >= 0) {\r\n            resultPoint = {\r\n                change: 'in',\r\n                moveTo: (_c = after.point.moveTo) !== null && _c !== void 0 ? _c : false,\r\n                to: after.point,\r\n            };\r\n            addToResultMap(after.xValue, resultPoint);\r\n            newIndex++;\r\n        }\r\n        else if (multiDatum && previousResultPoint && previousXValue === (before === null || before === void 0 ? void 0 : before.xValue)) {\r\n            resultPoint = Object.assign({}, previousResultPoint);\r\n            addToResultMap(before.xValue, resultPoint);\r\n            oldIndex++;\r\n        }\r\n        else if (multiDatum && previousResultPoint && previousXValue === (after === null || after === void 0 ? void 0 : after.xValue)) {\r\n            resultPoint = Object.assign({}, previousResultPoint);\r\n            addToResultMap(after.xValue, resultPoint);\r\n            newIndex++;\r\n        }\r\n        else {\r\n            isXUnordered = true;\r\n            break;\r\n        }\r\n        result.push(resultPoint);\r\n    }\r\n    let previousX = -Infinity;\r\n    isXUnordered || (isXUnordered = result.some((pathPoint) => {\r\n        const { change: marker, to: { x = -Infinity } = {} } = pathPoint;\r\n        if (marker === 'out')\r\n            return;\r\n        const result = x < previousX;\r\n        previousX = x;\r\n        return result;\r\n    }));\r\n    if (isXUnordered) {\r\n        return { result: undefined, resultMap: undefined };\r\n    }\r\n    backfillPathPointData(result, backfillSplitMode);\r\n    if (multiDatum) {\r\n        return { result, resultMap: resultMapMulti };\r\n    }\r\n    return { result, resultMap: resultMapSingle };\r\n}\r\nfunction determinePathStatus(newData, oldData) {\r\n    let status = 'updated';\r\n    const visible = (data) => {\r\n        return data.visible;\r\n    };\r\n    if (!visible(oldData) && visible(newData)) {\r\n        status = 'added';\r\n    }\r\n    else if (visible(oldData) && !visible(newData)) {\r\n        status = 'removed';\r\n    }\r\n    return status;\r\n}\r\nfunction prepareLinePathPropertyAnimation(status, visibleToggleMode) {\r\n    const phase = visibleToggleMode === 'none' ? 'updated' : status;\r\n    const result = {\r\n        fromFn: (_path) => {\r\n            let mixin;\r\n            if (status === 'removed') {\r\n                mixin = { finish: { visible: false } };\r\n            }\r\n            else if (status === 'added') {\r\n                mixin = { start: { visible: true } };\r\n            }\r\n            else {\r\n                mixin = {};\r\n            }\r\n            return Object.assign(Object.assign({}, FROM_TO_MIXINS[phase]), mixin);\r\n        },\r\n        toFn: (_path) => {\r\n            return Object.assign({}, FROM_TO_MIXINS[phase]);\r\n        },\r\n    };\r\n    if (visibleToggleMode === 'fade') {\r\n        return {\r\n            fromFn: (path) => {\r\n                const opacity = status === 'added' ? 0 : path.opacity;\r\n                return Object.assign({ opacity }, result.fromFn(path));\r\n            },\r\n            toFn: (path) => {\r\n                const opacity = status === 'removed' ? 0 : 1;\r\n                return Object.assign({ opacity }, result.toFn(path));\r\n            },\r\n        };\r\n    }\r\n    return result;\r\n}\r\nfunction prepareLinePathAnimationFns(newData, oldData, pairData, visibleToggleMode, render) {\r\n    const status = determinePathStatus(newData, oldData);\r\n    const removePhaseFn = (ratio, path) => {\r\n        render(pairData, { move: 0, out: ratio }, path);\r\n    };\r\n    const updatePhaseFn = (ratio, path) => {\r\n        render(pairData, { move: ratio }, path);\r\n    };\r\n    const addPhaseFn = (ratio, path) => {\r\n        render(pairData, { move: 1, in: ratio }, path);\r\n    };\r\n    const pathProperties = prepareLinePathPropertyAnimation(status, visibleToggleMode);\r\n    return { status, path: { addPhaseFn, updatePhaseFn, removePhaseFn }, pathProperties };\r\n}\r\nfunction prepareLinePathAnimation(newData, oldData, diff) {\r\n    var _a;\r\n    const isCategoryBased = ((_a = newData.scales.x) === null || _a === void 0 ? void 0 : _a.type) === 'category';\r\n    const { result: pairData, resultMap: pairMap } = isCategoryBased && diff ? pairCategoryData(newData, oldData, diff) : pairContinuousData(newData, oldData);\r\n    let status = 'updated';\r\n    if (oldData.visible && !newData.visible) {\r\n        status = 'removed';\r\n    }\r\n    else if (!oldData.visible && newData.visible) {\r\n        status = 'added';\r\n    }\r\n    if (pairData === undefined || pairMap === undefined) {\r\n        return;\r\n    }\r\n    const pathFns = prepareLinePathAnimationFns(newData, oldData, pairData, 'fade', renderPartialPath);\r\n    const marker = prepareMarkerAnimation(pairMap, status);\r\n    return Object.assign(Object.assign({}, pathFns), { marker });\r\n}\n\nvar AreaSeriesTag;\r\n(function (AreaSeriesTag) {\r\n    AreaSeriesTag[AreaSeriesTag[\"Fill\"] = 0] = \"Fill\";\r\n    AreaSeriesTag[AreaSeriesTag[\"Stroke\"] = 1] = \"Stroke\";\r\n    AreaSeriesTag[AreaSeriesTag[\"Marker\"] = 2] = \"Marker\";\r\n    AreaSeriesTag[AreaSeriesTag[\"Label\"] = 3] = \"Label\";\r\n})(AreaSeriesTag || (AreaSeriesTag = {}));\r\nfunction splitFillPoints(context) {\r\n    const { points } = context.fillData;\r\n    return { top: points.slice(0, points.length / 2), bottom: points.slice(points.length / 2).reverse() };\r\n}\r\nfunction prepPoints(key, ctx, points) {\r\n    return {\r\n        scales: ctx.scales,\r\n        nodeData: points[key],\r\n        visible: ctx.visible,\r\n    };\r\n}\r\nfunction pairFillCategoryData(newData, oldData, diff) {\r\n    const oldPoints = splitFillPoints(oldData);\r\n    const newPoints = splitFillPoints(newData);\r\n    const pairOpts = { multiDatum: true };\r\n    return {\r\n        top: pairCategoryData(prepPoints('top', newData, newPoints), prepPoints('top', oldData, oldPoints), diff, pairOpts),\r\n        bottom: pairCategoryData(prepPoints('bottom', newData, newPoints), prepPoints('bottom', oldData, oldPoints), diff, pairOpts),\r\n    };\r\n}\r\nfunction pairFillContinuousData(newData, oldData) {\r\n    const oldPoints = splitFillPoints(oldData);\r\n    const newPoints = splitFillPoints(newData);\r\n    return {\r\n        top: pairContinuousData(prepPoints('top', newData, newPoints), prepPoints('top', oldData, oldPoints)),\r\n        bottom: pairContinuousData(prepPoints('bottom', newData, newPoints), prepPoints('bottom', oldData, oldPoints)),\r\n    };\r\n}\r\nfunction prepareAreaPathAnimation(newData, oldData, diff) {\r\n    var _a;\r\n    const isCategoryBased = ((_a = newData.scales.x) === null || _a === void 0 ? void 0 : _a.type) === 'category';\r\n    let status = 'updated';\r\n    if (oldData.visible && !newData.visible) {\r\n        status = 'removed';\r\n    }\r\n    else if (!oldData.visible && newData.visible) {\r\n        status = 'added';\r\n    }\r\n    const prepareMarkerPairs = () => {\r\n        if (isCategoryBased && diff) {\r\n            return pairCategoryData(newData, oldData, diff, { backfillSplitMode: 'static', multiDatum: true });\r\n        }\r\n        return pairContinuousData(newData, oldData, { backfillSplitMode: 'static' });\r\n    };\r\n    const prepareFillPairs = () => {\r\n        if (isCategoryBased && diff) {\r\n            return pairFillCategoryData(newData, oldData, diff);\r\n        }\r\n        return pairFillContinuousData(newData, oldData);\r\n    };\r\n    const { resultMap: markerPairMap } = prepareMarkerPairs();\r\n    const { top, bottom } = prepareFillPairs();\r\n    if (markerPairMap === undefined || top.result === undefined || bottom.result === undefined) {\r\n        return;\r\n    }\r\n    const pairData = [...top.result, ...bottom.result.reverse()];\r\n    const fill = prepareLinePathAnimationFns(newData, oldData, pairData, 'none', renderPartialPath);\r\n    const marker = prepareMarkerAnimation(markerPairMap, status);\r\n    return { fill, marker };\r\n}\n\nclass AreaSeries extends CartesianSeries {\r\n    constructor(moduleCtx) {\r\n        super({\r\n            moduleCtx,\r\n            pathsPerSeries: 2,\r\n            pathsZIndexSubOrderOffset: [0, 1000],\r\n            hasMarkers: true,\r\n            markerSelectionGarbageCollection: false,\r\n            pickModes: [SeriesNodePickMode.NEAREST_BY_MAIN_AXIS_FIRST, SeriesNodePickMode.EXACT_SHAPE_MATCH],\r\n            animationResetFns: {\r\n                path: buildResetPathFn({ getOpacity: () => this.getOpacity() }),\r\n                label: resetLabelFn,\r\n                marker: (node, datum) => (Object.assign(Object.assign({}, resetMarkerFn()), resetMarkerPositionFn(node, datum))),\r\n            },\r\n        });\r\n        this.tooltip = new SeriesTooltip();\r\n        this.marker = new SeriesMarker();\r\n        this.label = new Label();\r\n        this.fill = '#c16068';\r\n        this.stroke = '#874349';\r\n        this.fillOpacity = 1;\r\n        this.strokeOpacity = 1;\r\n        this.lineDash = [0];\r\n        this.lineDashOffset = 0;\r\n        this.xKey = undefined;\r\n        this.xName = undefined;\r\n        this.strokeWidth = 2;\r\n        this.shadow = undefined;\r\n    }\r\n    processData(dataController) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const { xKey, yKey, normalizedTo, data, visible, seriesGrouping: { groupIndex = this.id } = {} } = this;\r\n            if (xKey == null || yKey == null || data == null)\r\n                return;\r\n            const animationEnabled = !this.ctx.animationManager.isSkipped();\r\n            const { isContinuousX, isContinuousY } = this.isContinuous();\r\n            const ids = [\r\n                `area-stack-${groupIndex}-yValues`,\r\n                `area-stack-${groupIndex}-yValues-trailing`,\r\n                `area-stack-${groupIndex}-yValues-prev`,\r\n                `area-stack-${groupIndex}-yValues-trailing-prev`,\r\n                `area-stack-${groupIndex}-yValues-marker`,\r\n            ];\r\n            const extraProps = [];\r\n            const normaliseTo = normalizedTo && isFinite(normalizedTo) ? normalizedTo : undefined;\r\n            if (normaliseTo) {\r\n                extraProps.push(normaliseGroupTo(this, [ids[0], ids[1], ids[4]], normaliseTo, 'range'));\r\n                extraProps.push(normaliseGroupTo(this, [ids[2], ids[3]], normaliseTo, 'range'));\r\n            }\r\n            // If two or more datums share an x-value, i.e. lined up vertically, they will have the same datum id.\r\n            // They must be identified this way when animated to ensure they can be tracked when their y-value\r\n            // is updated. If this is a static chart, we can instead not bother with identifying datums and\r\n            // automatically garbage collect the marker selection.\r\n            if (!isContinuousX && animationEnabled && this.processedData) {\r\n                extraProps.push(diff(this.processedData));\r\n            }\r\n            if (animationEnabled) {\r\n                extraProps.push(animationValidation(this));\r\n            }\r\n            const common = { invalidValue: null };\r\n            if (!visible) {\r\n                common.forceValue = 0;\r\n            }\r\n            yield this.requestDataModel(dataController, data, {\r\n                props: [\r\n                    keyProperty(this, xKey, isContinuousX, { id: 'xValue' }),\r\n                    valueProperty(this, yKey, isContinuousY, Object.assign({ id: `yValueRaw` }, common)),\r\n                    ...groupAccumulativeValueProperty(this, yKey, isContinuousY, 'window', 'current', Object.assign(Object.assign({ id: `yValueEnd` }, common), { groupId: ids[0] })),\r\n                    ...groupAccumulativeValueProperty(this, yKey, isContinuousY, 'window-trailing', 'current', Object.assign(Object.assign({ id: `yValueStart` }, common), { groupId: ids[1] })),\r\n                    ...groupAccumulativeValueProperty(this, yKey, isContinuousY, 'window', 'last', Object.assign(Object.assign({ id: `yValuePreviousEnd` }, common), { groupId: ids[2] })),\r\n                    ...groupAccumulativeValueProperty(this, yKey, isContinuousY, 'window-trailing', 'last', Object.assign(Object.assign({ id: `yValuePreviousStart` }, common), { groupId: ids[3] })),\r\n                    ...groupAccumulativeValueProperty(this, yKey, isContinuousY, 'normal', 'current', Object.assign(Object.assign({ id: `yValueCumulative` }, common), { groupId: ids[4] })),\r\n                    ...extraProps,\r\n                ],\r\n                groupByKeys: true,\r\n            });\r\n            this.animationState.transition('updateData');\r\n        });\r\n    }\r\n    getSeriesDomain(direction) {\r\n        const { processedData, dataModel, axes } = this;\r\n        if (!processedData || !dataModel)\r\n            return [];\r\n        const xAxis = axes[ChartAxisDirection.X];\r\n        const yAxis = axes[ChartAxisDirection.Y];\r\n        const keyDef = dataModel.resolveProcessedDataDefById(this, `xValue`);\r\n        const keys = dataModel.getDomain(this, `xValue`, 'key', processedData);\r\n        const yExtent = dataModel.getDomain(this, `yValueEnd`, 'value', processedData);\r\n        if (direction === ChartAxisDirection.X) {\r\n            if ((keyDef === null || keyDef === void 0 ? void 0 : keyDef.def.type) === 'key' && keyDef.def.valueType === 'category') {\r\n                return keys;\r\n            }\r\n            return fixNumericExtent(extent(keys), xAxis);\r\n        }\r\n        else if (yAxis instanceof LogAxis || yAxis instanceof TimeAxis) {\r\n            return fixNumericExtent(yExtent, yAxis);\r\n        }\r\n        else {\r\n            const fixedYExtent = [yExtent[0] > 0 ? 0 : yExtent[0], yExtent[1] < 0 ? 0 : yExtent[1]];\r\n            return fixNumericExtent(fixedYExtent, yAxis);\r\n        }\r\n    }\r\n    createNodeData() {\r\n        const _super = Object.create(null, {\r\n            calculateScaling: { get: () => super.calculateScaling }\r\n        });\r\n        var _a;\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const { axes, data, processedData: { data: groupedData } = {}, dataModel } = this;\r\n            const xAxis = axes[ChartAxisDirection.X];\r\n            const yAxis = axes[ChartAxisDirection.Y];\r\n            if (!xAxis || !yAxis || !data || !dataModel) {\r\n                return [];\r\n            }\r\n            const { yKey = '', xKey = '', marker, label, fill: seriesFill, stroke: seriesStroke } = this;\r\n            const { scale: xScale } = xAxis;\r\n            const { scale: yScale } = yAxis;\r\n            const continuousY = ContinuousScale.is(yScale);\r\n            const xOffset = ((_a = xScale.bandwidth) !== null && _a !== void 0 ? _a : 0) / 2;\r\n            const defs = dataModel.resolveProcessedDataDefsByIds(this, [\r\n                `yValueStart`,\r\n                `yValueEnd`,\r\n                `yValueRaw`,\r\n                `yValuePreviousStart`,\r\n                `yValuePreviousEnd`,\r\n                `yValueCumulative`,\r\n            ]);\r\n            const createMovePoint = (plainPoint) => {\r\n                const { point } = plainPoint, stroke = __rest(plainPoint, [\"point\"]);\r\n                return Object.assign(Object.assign({}, stroke), { point: Object.assign(Object.assign({}, point), { moveTo: true }) });\r\n            };\r\n            const createPathCoordinates = (xValue, lastYEnd, yEnd) => {\r\n                const x = xScale.convert(xValue) + xOffset;\r\n                const prevYCoordinate = yScale.convert(lastYEnd);\r\n                const currYCoordinate = yScale.convert(yEnd);\r\n                return [\r\n                    { point: { x, y: currYCoordinate }, yValue: yEnd, xValue },\r\n                    { point: { x, y: prevYCoordinate }, yValue: lastYEnd, xValue },\r\n                ];\r\n            };\r\n            const createMarkerCoordinate = (xDatum, yEnd, rawYDatum) => {\r\n                let currY;\r\n                // if not normalized, the invalid data points will be processed as `undefined` in processData()\r\n                // if normalized, the invalid data points will be processed as 0 rather than `undefined`\r\n                // check if unprocessed datum is valid as we only want to show markers for valid points\r\n                const normalized = this.normalizedTo && isFinite(this.normalizedTo);\r\n                const normalizedAndValid = normalized && continuousY && isContinuous(rawYDatum);\r\n                const valid = (!normalized && !isNaN(rawYDatum)) || normalizedAndValid;\r\n                if (valid) {\r\n                    currY = yEnd;\r\n                }\r\n                const x = xScale.convert(xDatum) + xOffset;\r\n                const y = yScale.convert(currY);\r\n                return { x, y, size: marker.size };\r\n            };\r\n            const itemId = yKey;\r\n            const labelData = [];\r\n            const markerData = [];\r\n            const context = {\r\n                itemId,\r\n                fillData: { itemId, points: [] },\r\n                strokeData: { itemId, points: [] },\r\n                labelData,\r\n                nodeData: markerData,\r\n                scales: _super.calculateScaling.call(this),\r\n                visible: this.visible,\r\n            };\r\n            const fillPoints = context.fillData.points;\r\n            const fillPhantomPoints = [];\r\n            const strokePoints = context.strokeData.points;\r\n            let datumIdx = -1;\r\n            let lastXDatum;\r\n            let lastYDatum = -Infinity;\r\n            groupedData === null || groupedData === void 0 ? void 0 : groupedData.forEach((datumGroup) => {\r\n                const { keys, keys: [xDatum], datum: datumArray, values: valuesArray, } = datumGroup;\r\n                valuesArray.forEach((values, valueIdx) => {\r\n                    var _a, _b, _c;\r\n                    datumIdx++;\r\n                    const seriesDatum = datumArray[valueIdx];\r\n                    const dataValues = dataModel.resolveProcessedDataDefsValues(defs, { keys, values });\r\n                    const { yValueRaw: yDatum, yValueCumulative } = dataValues;\r\n                    let { yValueStart, yValueEnd, yValuePreviousStart, yValuePreviousEnd } = dataValues;\r\n                    const validPoint = yDatum != null;\r\n                    // marker data\r\n                    const point = createMarkerCoordinate(xDatum, +yValueCumulative, yDatum);\r\n                    if (validPoint && marker) {\r\n                        markerData.push({\r\n                            index: datumIdx,\r\n                            series: this,\r\n                            itemId,\r\n                            datum: seriesDatum,\r\n                            midPoint: { x: point.x, y: point.y },\r\n                            cumulativeValue: yValueEnd,\r\n                            yValue: yDatum,\r\n                            xValue: xDatum,\r\n                            yKey,\r\n                            xKey,\r\n                            point,\r\n                            fill: (_a = marker.fill) !== null && _a !== void 0 ? _a : seriesFill,\r\n                            stroke: (_b = marker.stroke) !== null && _b !== void 0 ? _b : seriesStroke,\r\n                            strokeWidth: (_c = marker.strokeWidth) !== null && _c !== void 0 ? _c : this.getStrokeWidth(this.strokeWidth),\r\n                        });\r\n                    }\r\n                    // label data\r\n                    if (validPoint && label) {\r\n                        const labelText = this.getLabelText(label, {\r\n                            value: yDatum,\r\n                            datum: seriesDatum,\r\n                            xKey,\r\n                            yKey,\r\n                            xName: this.xName,\r\n                            yName: this.yName,\r\n                        }, (value) => (isNumber(value) ? value.toFixed(2) : String(value)));\r\n                        labelData.push({\r\n                            index: datumIdx,\r\n                            series: this,\r\n                            itemId: yKey,\r\n                            datum: seriesDatum,\r\n                            x: point.x,\r\n                            y: point.y,\r\n                            label: labelText\r\n                                ? {\r\n                                    text: labelText,\r\n                                    fontStyle: label.fontStyle,\r\n                                    fontWeight: label.fontWeight,\r\n                                    fontSize: label.fontSize,\r\n                                    fontFamily: label.fontFamily,\r\n                                    textAlign: 'center',\r\n                                    textBaseline: 'bottom',\r\n                                    fill: label.color,\r\n                                }\r\n                                : undefined,\r\n                        });\r\n                    }\r\n                    // fill data\r\n                    if (lastYDatum == null || yDatum == null) {\r\n                        // Reset all coordinates to 'zero' value.\r\n                        yValueStart = yValueStart !== null && yValueStart !== void 0 ? yValueStart : 0;\r\n                        yValueEnd = yValueStart !== null && yValueStart !== void 0 ? yValueStart : 0;\r\n                        yValuePreviousStart = yValuePreviousStart !== null && yValuePreviousStart !== void 0 ? yValuePreviousStart : 0;\r\n                        yValuePreviousEnd = yValuePreviousStart !== null && yValuePreviousStart !== void 0 ? yValuePreviousStart : 0;\r\n                    }\r\n                    const [prevTop, prevBottom] = createPathCoordinates(lastXDatum, yValuePreviousStart, yValuePreviousEnd);\r\n                    const [top, bottom] = createPathCoordinates(xDatum, yValueStart, yValueEnd);\r\n                    const xValid = lastXDatum != null && xDatum != null;\r\n                    if (xValid) {\r\n                        fillPoints.push(prevTop);\r\n                        fillPhantomPoints.push(prevBottom);\r\n                        fillPoints.push(top);\r\n                        fillPhantomPoints.push(bottom);\r\n                    }\r\n                    // stroke data\r\n                    if (validPoint && lastYDatum != null && datumIdx > 0) {\r\n                        strokePoints.push(createMovePoint(prevTop));\r\n                        strokePoints.push(top);\r\n                    }\r\n                    lastXDatum = xDatum;\r\n                    lastYDatum = yDatum;\r\n                });\r\n            });\r\n            if (strokePoints.length > 0) {\r\n                strokePoints[0] = createMovePoint(strokePoints[0]);\r\n            }\r\n            fillPhantomPoints.reverse();\r\n            fillPoints.push(...fillPhantomPoints);\r\n            return [context];\r\n        });\r\n    }\r\n    isPathOrSelectionDirty() {\r\n        return this.marker.isDirty();\r\n    }\r\n    markerFactory() {\r\n        const { shape } = this.marker;\r\n        const MarkerShape = getMarker(shape);\r\n        return new MarkerShape();\r\n    }\r\n    updatePathNodes(opts) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const { opacity, visible, animationEnabled } = opts;\r\n            const [fill, stroke] = opts.paths;\r\n            const { seriesRectHeight: height, seriesRectWidth: width } = this.nodeDataDependencies;\r\n            const strokeWidth = this.getStrokeWidth(this.strokeWidth);\r\n            stroke.setProperties({\r\n                tag: AreaSeriesTag.Stroke,\r\n                fill: undefined,\r\n                lineJoin: (stroke.lineCap = 'round'),\r\n                pointerEvents: PointerEvents.None,\r\n                stroke: this.stroke,\r\n                strokeWidth,\r\n                strokeOpacity: this.strokeOpacity,\r\n                lineDash: this.lineDash,\r\n                lineDashOffset: this.lineDashOffset,\r\n                opacity,\r\n                visible,\r\n            });\r\n            fill.setProperties({\r\n                tag: AreaSeriesTag.Fill,\r\n                stroke: undefined,\r\n                lineJoin: 'round',\r\n                pointerEvents: PointerEvents.None,\r\n                fill: this.fill,\r\n                fillOpacity: this.fillOpacity,\r\n                lineDash: this.lineDash,\r\n                lineDashOffset: this.lineDashOffset,\r\n                strokeOpacity: this.strokeOpacity,\r\n                fillShadow: this.shadow,\r\n                opacity,\r\n                visible: visible || animationEnabled,\r\n                strokeWidth,\r\n            });\r\n            const updateClipPath = (path) => {\r\n                var _a, _b;\r\n                if (path.clipPath == null) {\r\n                    path.clipPath = new Path2D();\r\n                    path.clipScalingX = 1;\r\n                    path.clipScalingY = 1;\r\n                }\r\n                (_a = path.clipPath) === null || _a === void 0 ? void 0 : _a.clear({ trackChanges: true });\r\n                (_b = path.clipPath) === null || _b === void 0 ? void 0 : _b.rect(-25, -25, (width !== null && width !== void 0 ? width : 0) + 50, (height !== null && height !== void 0 ? height : 0) + 50);\r\n            };\r\n            updateClipPath(stroke);\r\n            updateClipPath(fill);\r\n        });\r\n    }\r\n    updatePaths(opts) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            this.updateAreaPaths([opts.paths], [opts.contextData]);\r\n        });\r\n    }\r\n    updateAreaPaths(paths, contextData) {\r\n        this.updateFillPath(paths, contextData);\r\n        this.updateStrokePath(paths, contextData);\r\n    }\r\n    updateFillPath(paths, contextData) {\r\n        contextData.forEach(({ fillData }, contextDataIndex) => {\r\n            const [fill] = paths[contextDataIndex];\r\n            const { path: fillPath } = fill;\r\n            fillPath.clear({ trackChanges: true });\r\n            for (const { point } of fillData.points) {\r\n                if (point.moveTo) {\r\n                    fillPath.moveTo(point.x, point.y);\r\n                }\r\n                else {\r\n                    fillPath.lineTo(point.x, point.y);\r\n                }\r\n            }\r\n            fillPath.closePath();\r\n            fill.checkPathDirty();\r\n        });\r\n    }\r\n    updateStrokePath(paths, contextData) {\r\n        contextData.forEach(({ strokeData }, contextDataIndex) => {\r\n            const [, stroke] = paths[contextDataIndex];\r\n            const { path: strokePath } = stroke;\r\n            strokePath.clear({ trackChanges: true });\r\n            for (const { point } of strokeData.points) {\r\n                if (point.moveTo) {\r\n                    strokePath.moveTo(point.x, point.y);\r\n                }\r\n                else {\r\n                    strokePath.lineTo(point.x, point.y);\r\n                }\r\n            }\r\n            stroke.checkPathDirty();\r\n        });\r\n    }\r\n    updateMarkerSelection(opts) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const { nodeData, markerSelection } = opts;\r\n            const { marker: { enabled }, } = this;\r\n            const data = enabled && nodeData ? nodeData : [];\r\n            if (this.marker.isDirty()) {\r\n                markerSelection.clear();\r\n                markerSelection.cleanup();\r\n            }\r\n            return markerSelection.update(data);\r\n        });\r\n    }\r\n    updateMarkerNodes(opts) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const { markerSelection, isHighlight: highlighted } = opts;\r\n            const { xKey = '', yKey = '', marker, fill, stroke, strokeWidth, fillOpacity, strokeOpacity } = this;\r\n            const baseStyle = mergeDefaults(highlighted && this.highlightStyle.item, marker.getStyle(), {\r\n                fill,\r\n                stroke,\r\n                strokeWidth,\r\n                fillOpacity,\r\n                strokeOpacity,\r\n            });\r\n            markerSelection.each((node, datum) => {\r\n                this.updateMarkerStyle(node, marker, { datum, highlighted, xKey, yKey }, baseStyle);\r\n            });\r\n            if (!highlighted) {\r\n                this.marker.markClean();\r\n            }\r\n        });\r\n    }\r\n    updateLabelSelection(opts) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const { labelData, labelSelection } = opts;\r\n            return labelSelection.update(labelData, (text) => {\r\n                text.tag = AreaSeriesTag.Label;\r\n            });\r\n        });\r\n    }\r\n    updateLabelNodes(opts) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const { labelSelection } = opts;\r\n            const { enabled: labelEnabled, fontStyle, fontWeight, fontSize, fontFamily, color } = this.label;\r\n            labelSelection.each((text, datum) => {\r\n                const { x, y, label } = datum;\r\n                if (label && labelEnabled && this.visible) {\r\n                    text.fontStyle = fontStyle;\r\n                    text.fontWeight = fontWeight;\r\n                    text.fontSize = fontSize;\r\n                    text.fontFamily = fontFamily;\r\n                    text.textAlign = label.textAlign;\r\n                    text.textBaseline = label.textBaseline;\r\n                    text.text = label.text;\r\n                    text.x = x;\r\n                    text.y = y - 10;\r\n                    text.fill = color;\r\n                    text.visible = true;\r\n                }\r\n                else {\r\n                    text.visible = false;\r\n                }\r\n            });\r\n        });\r\n    }\r\n    getTooltipHtml(nodeDatum) {\r\n        const { xKey, id: seriesId, axes, xName, yName, tooltip, marker, dataModel } = this;\r\n        const { yKey, xValue, yValue, datum } = nodeDatum;\r\n        const xAxis = axes[ChartAxisDirection.X];\r\n        const yAxis = axes[ChartAxisDirection.Y];\r\n        if (!(xKey && yKey) || !(xAxis && yAxis && isNumber(yValue)) || !dataModel) {\r\n            return '';\r\n        }\r\n        const xString = xAxis.formatDatum(xValue);\r\n        const yString = yAxis.formatDatum(yValue);\r\n        const title = sanitizeHtml(yName);\r\n        const content = sanitizeHtml(xString + ': ' + yString);\r\n        const baseStyle = mergeDefaults({ fill: this.fill }, marker.getStyle(), {\r\n            stroke: this.stroke,\r\n            strokeWidth: this.strokeWidth,\r\n        });\r\n        const { fill: color } = this.getMarkerStyle(marker, { datum: nodeDatum, xKey, yKey, highlighted: false }, baseStyle);\r\n        return tooltip.toTooltipHtml({ title, content, backgroundColor: color }, {\r\n            datum,\r\n            xKey,\r\n            xName,\r\n            yKey,\r\n            yName,\r\n            color,\r\n            title,\r\n            seriesId,\r\n        });\r\n    }\r\n    getLegendData(legendType) {\r\n        var _a, _b, _c, _d, _e;\r\n        const { data, id, xKey, yKey, yName, marker, fill, stroke, fillOpacity, strokeOpacity, visible } = this;\r\n        if (!(data === null || data === void 0 ? void 0 : data.length) || !xKey || !yKey || legendType !== 'category') {\r\n            return [];\r\n        }\r\n        return [\r\n            {\r\n                legendType,\r\n                id,\r\n                itemId: yKey,\r\n                seriesId: id,\r\n                enabled: visible,\r\n                label: {\r\n                    text: yName !== null && yName !== void 0 ? yName : yKey,\r\n                },\r\n                marker: {\r\n                    shape: marker.shape,\r\n                    fill: (_a = marker.fill) !== null && _a !== void 0 ? _a : fill,\r\n                    stroke: (_b = marker.stroke) !== null && _b !== void 0 ? _b : stroke,\r\n                    fillOpacity: (_c = marker.fillOpacity) !== null && _c !== void 0 ? _c : fillOpacity,\r\n                    strokeOpacity: (_d = marker.strokeOpacity) !== null && _d !== void 0 ? _d : strokeOpacity,\r\n                    strokeWidth: (_e = marker.strokeWidth) !== null && _e !== void 0 ? _e : 0,\r\n                },\r\n            },\r\n        ];\r\n    }\r\n    animateEmptyUpdateReady(animationData) {\r\n        const { markerSelections, labelSelections, contextData, paths } = animationData;\r\n        const { animationManager } = this.ctx;\r\n        const { seriesRectWidth: width = 0 } = this.nodeDataDependencies;\r\n        this.updateAreaPaths(paths, contextData);\r\n        pathSwipeInAnimation(this, animationManager, paths.flat());\r\n        resetMotion(markerSelections, resetMarkerPositionFn);\r\n        markerSwipeScaleInAnimation(this, animationManager, markerSelections, width);\r\n        seriesLabelFadeInAnimation(this, 'labels', animationManager, labelSelections);\r\n    }\r\n    animateReadyResize(animationData) {\r\n        const { contextData, paths } = animationData;\r\n        this.updateAreaPaths(paths, contextData);\r\n        super.animateReadyResize(animationData);\r\n    }\r\n    animateWaitingUpdateReady(animationData) {\r\n        var _a, _b;\r\n        const { animationManager } = this.ctx;\r\n        const { markerSelections, labelSelections, contextData, paths, previousContextData } = animationData;\r\n        super.resetAllAnimation(animationData);\r\n        if (contextData.length === 0 || !previousContextData || previousContextData.length === 0) {\r\n            animationManager.skipCurrentBatch();\r\n            this.updateAreaPaths(paths, contextData);\r\n            return;\r\n        }\r\n        const [[fill, stroke]] = paths;\r\n        const [newData] = contextData;\r\n        const [oldData] = previousContextData;\r\n        const fns = prepareAreaPathAnimation(newData, oldData, (_b = (_a = this.processedData) === null || _a === void 0 ? void 0 : _a.reduced) === null || _b === void 0 ? void 0 : _b.diff);\r\n        if (fns === undefined) {\r\n            animationManager.skipCurrentBatch();\r\n            this.updateAreaPaths(paths, contextData);\r\n            return;\r\n        }\r\n        fromToMotion(this.id, 'marker_update', animationManager, markerSelections, fns.marker);\r\n        fromToMotion(this.id, 'fill_path_properties', animationManager, [fill], fns.fill.pathProperties);\r\n        pathMotion(this.id, 'fill_path_update', animationManager, [fill], fns.fill.path);\r\n        this.updateStrokePath(paths, contextData);\r\n        pathFadeInAnimation(this, 'stroke', animationManager, [stroke]);\r\n        seriesLabelFadeInAnimation(this, 'labels', animationManager, labelSelections);\r\n    }\r\n    isLabelEnabled() {\r\n        return this.label.enabled;\r\n    }\r\n    nodeFactory() {\r\n        return new Group();\r\n    }\r\n}\r\nAreaSeries.className = 'AreaSeries';\r\nAreaSeries.type = 'area';\r\n__decorate([\r\n    Validate(COLOR_STRING),\r\n    __metadata(\"design:type\", String)\r\n], AreaSeries.prototype, \"fill\", void 0);\r\n__decorate([\r\n    Validate(COLOR_STRING),\r\n    __metadata(\"design:type\", String)\r\n], AreaSeries.prototype, \"stroke\", void 0);\r\n__decorate([\r\n    Validate(NUMBER$1(0, 1)),\r\n    __metadata(\"design:type\", Object)\r\n], AreaSeries.prototype, \"fillOpacity\", void 0);\r\n__decorate([\r\n    Validate(NUMBER$1(0, 1)),\r\n    __metadata(\"design:type\", Object)\r\n], AreaSeries.prototype, \"strokeOpacity\", void 0);\r\n__decorate([\r\n    Validate(OPT_LINE_DASH),\r\n    __metadata(\"design:type\", Array)\r\n], AreaSeries.prototype, \"lineDash\", void 0);\r\n__decorate([\r\n    Validate(NUMBER$1(0)),\r\n    __metadata(\"design:type\", Number)\r\n], AreaSeries.prototype, \"lineDashOffset\", void 0);\r\n__decorate([\r\n    Validate(OPT_STRING),\r\n    __metadata(\"design:type\", String)\r\n], AreaSeries.prototype, \"xKey\", void 0);\r\n__decorate([\r\n    Validate(OPT_STRING),\r\n    __metadata(\"design:type\", String)\r\n], AreaSeries.prototype, \"xName\", void 0);\r\n__decorate([\r\n    Validate(OPT_STRING),\r\n    __metadata(\"design:type\", String)\r\n], AreaSeries.prototype, \"yKey\", void 0);\r\n__decorate([\r\n    Validate(OPT_STRING),\r\n    __metadata(\"design:type\", String)\r\n], AreaSeries.prototype, \"yName\", void 0);\r\n__decorate([\r\n    Validate(OPT_NUMBER(0)),\r\n    __metadata(\"design:type\", Number)\r\n], AreaSeries.prototype, \"normalizedTo\", void 0);\r\n__decorate([\r\n    Validate(NUMBER$1(0)),\r\n    __metadata(\"design:type\", Object)\r\n], AreaSeries.prototype, \"strokeWidth\", void 0);\n\nconst AreaSeriesModule = {\r\n    type: 'series',\r\n    optionsKey: 'series[]',\r\n    packageType: 'community',\r\n    chartTypes: ['cartesian'],\r\n    identifier: 'area',\r\n    instanceConstructor: AreaSeries,\r\n    stackable: true,\r\n    seriesDefaults: DEFAULT_CARTESIAN_CHART_OVERRIDES,\r\n    themeTemplate: {\r\n        __extends__: EXTENDS_SERIES_DEFAULTS,\r\n        nodeClickRange: 'nearest',\r\n        tooltip: {\r\n            position: {\r\n                type: 'node',\r\n            },\r\n        },\r\n        fillOpacity: 0.8,\r\n        strokeOpacity: 1,\r\n        strokeWidth: 0,\r\n        lineDash: [0],\r\n        lineDashOffset: 0,\r\n        shadow: {\r\n            enabled: false,\r\n            color: DEFAULT_SHADOW_COLOUR,\r\n            xOffset: 3,\r\n            yOffset: 3,\r\n            blur: 5,\r\n        },\r\n        marker: {\r\n            __extends__: EXTENDS_CARTESIAN_MARKER_DEFAULTS,\r\n            enabled: false,\r\n            fillOpacity: 1,\r\n            strokeOpacity: 1,\r\n            strokeWidth: 0,\r\n        },\r\n        label: {\r\n            enabled: false,\r\n            fontStyle: undefined,\r\n            fontWeight: undefined,\r\n            fontSize: 12,\r\n            fontFamily: DEFAULT_FONT_FAMILY,\r\n            color: DEFAULT_LABEL_COLOUR,\r\n            formatter: undefined,\r\n        },\r\n    },\r\n    paletteFactory: (params) => {\r\n        const { marker } = markerPaletteFactory(params);\r\n        return {\r\n            fill: marker.fill,\r\n            stroke: marker.stroke,\r\n            marker,\r\n        };\r\n    },\r\n};\n\nclass AbstractBarSeries extends CartesianSeries {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.direction = 'vertical';\r\n    }\r\n    getBandScalePadding() {\r\n        return { inner: 0.2, outer: 0.1 };\r\n    }\r\n    shouldFlipXY() {\r\n        return this.direction === 'horizontal';\r\n    }\r\n    getBarDirection() {\r\n        return this.shouldFlipXY() ? ChartAxisDirection.X : ChartAxisDirection.Y;\r\n    }\r\n    getCategoryDirection() {\r\n        return this.shouldFlipXY() ? ChartAxisDirection.Y : ChartAxisDirection.X;\r\n    }\r\n    getValueAxis() {\r\n        const direction = this.getBarDirection();\r\n        return this.axes[direction];\r\n    }\r\n    getCategoryAxis() {\r\n        const direction = this.getCategoryDirection();\r\n        return this.axes[direction];\r\n    }\r\n}\r\n__decorate([\r\n    Validate(DIRECTION),\r\n    __metadata(\"design:type\", String)\r\n], AbstractBarSeries.prototype, \"direction\", void 0);\n\nfunction updateRect({ rect, config }) {\r\n    const { crisp = true, fill, stroke, strokeWidth, fillOpacity, strokeOpacity, lineDash, lineDashOffset, fillShadow, visible = true, } = config;\r\n    rect.crisp = crisp;\r\n    rect.fill = fill;\r\n    rect.stroke = stroke;\r\n    rect.strokeWidth = strokeWidth;\r\n    rect.fillOpacity = fillOpacity;\r\n    rect.strokeOpacity = strokeOpacity;\r\n    rect.lineDash = lineDash;\r\n    rect.lineDashOffset = lineDashOffset;\r\n    rect.fillShadow = fillShadow;\r\n    rect.visible = visible;\r\n}\r\nfunction getRectConfig(_a) {\r\n    var _b, _c, _d, _e, _f;\r\n    var { datum, isHighlighted, style, highlightStyle, formatter, seriesId, ctx: { callbackCache } } = _a, opts = __rest(_a, [\"datum\", \"isHighlighted\", \"style\", \"highlightStyle\", \"formatter\", \"seriesId\", \"ctx\"]);\r\n    const { fill, fillOpacity, stroke, strokeWidth } = mergeDefaults(isHighlighted && highlightStyle, style);\r\n    const { strokeOpacity, fillShadow, lineDash, lineDashOffset } = style;\r\n    let format;\r\n    if (formatter) {\r\n        format = callbackCache.call(formatter, Object.assign({ datum: datum.datum, xKey: datum.xKey, fill,\r\n            stroke,\r\n            strokeWidth, highlighted: isHighlighted, seriesId }, opts));\r\n    }\r\n    return {\r\n        fill: (_b = format === null || format === void 0 ? void 0 : format.fill) !== null && _b !== void 0 ? _b : fill,\r\n        stroke: (_c = format === null || format === void 0 ? void 0 : format.stroke) !== null && _c !== void 0 ? _c : stroke,\r\n        strokeWidth: (_d = format === null || format === void 0 ? void 0 : format.strokeWidth) !== null && _d !== void 0 ? _d : strokeWidth,\r\n        fillOpacity: (_e = format === null || format === void 0 ? void 0 : format.fillOpacity) !== null && _e !== void 0 ? _e : fillOpacity,\r\n        strokeOpacity: (_f = format === null || format === void 0 ? void 0 : format.strokeOpacity) !== null && _f !== void 0 ? _f : strokeOpacity,\r\n        lineDash,\r\n        lineDashOffset,\r\n        fillShadow,\r\n    };\r\n}\r\nfunction checkCrisp(visibleRange = []) {\r\n    const [visibleMin, visibleMax] = visibleRange;\r\n    const isZoomed = visibleMin !== 0 || visibleMax !== 1;\r\n    return !isZoomed;\r\n}\r\nfunction collapsedStartingBarPosition(isVertical, axes) {\r\n    const { startingX, startingY } = getStartingValues(isVertical, axes);\r\n    const isDatumNegative = (datum) => {\r\n        var _a;\r\n        return isNegative((_a = datum['yValue']) !== null && _a !== void 0 ? _a : 0);\r\n    };\r\n    const calculate = (datum, prevDatum) => {\r\n        let x = isVertical ? datum.x : startingX;\r\n        let y = isVertical ? startingY : datum.y;\r\n        let width = isVertical ? datum.width : 0;\r\n        let height = isVertical ? 0 : datum.height;\r\n        if (prevDatum && (isNaN(x) || isNaN(y))) {\r\n            // Fallback\r\n            ({ x, y } = prevDatum);\r\n            width = isVertical ? prevDatum.width : 0;\r\n            height = isVertical ? 0 : prevDatum.height;\r\n            if (isVertical && !isDatumNegative(prevDatum)) {\r\n                y += prevDatum.height;\r\n            }\r\n            else if (!isVertical && isDatumNegative(prevDatum)) {\r\n                x += prevDatum.width;\r\n            }\r\n        }\r\n        return { x, y, width, height };\r\n    };\r\n    return { isVertical, calculate };\r\n}\r\nfunction midpointStartingBarPosition(isVertical) {\r\n    return {\r\n        isVertical,\r\n        calculate: (datum) => {\r\n            return {\r\n                x: isVertical ? datum.x : datum.x + datum.width / 2,\r\n                y: isVertical ? datum.y + datum.height / 2 : datum.y,\r\n                width: isVertical ? datum.width : 0,\r\n                height: isVertical ? 0 : datum.height,\r\n            };\r\n        },\r\n    };\r\n}\r\nfunction prepareBarAnimationFunctions(initPos) {\r\n    const isRemoved = (datum) => datum == null || isNaN(datum.x) || isNaN(datum.y);\r\n    const fromFn = (rect, datum, status) => {\r\n        if (status === 'updated' && isRemoved(datum)) {\r\n            status = 'removed';\r\n        }\r\n        else if (status === 'updated' && isRemoved(rect.previousDatum)) {\r\n            status = 'added';\r\n        }\r\n        // Continue from current rendering location.\r\n        let source = { x: rect.x, y: rect.y, width: rect.width, height: rect.height };\r\n        if (status === 'unknown' || status === 'added') {\r\n            source = initPos.calculate(datum, rect.previousDatum);\r\n        }\r\n        return Object.assign(Object.assign({}, source), FROM_TO_MIXINS[status]);\r\n    };\r\n    const toFn = (rect, datum, status) => {\r\n        if (status === 'removed' || isRemoved(datum)) {\r\n            return initPos.calculate(datum, rect.previousDatum);\r\n        }\r\n        return { x: datum.x, y: datum.y, width: datum.width, height: datum.height };\r\n    };\r\n    return { toFn, fromFn };\r\n}\r\nfunction getStartingValues(isVertical, axes) {\r\n    const axis = axes[isVertical ? ChartAxisDirection.Y : ChartAxisDirection.X];\r\n    let startingX = Infinity;\r\n    let startingY = 0;\r\n    if (!axis) {\r\n        return { startingX, startingY };\r\n    }\r\n    if (isVertical) {\r\n        startingY = axis.scale.convert(ContinuousScale.is(axis.scale) ? 0 : Math.max(...axis.range));\r\n    }\r\n    else {\r\n        startingX = axis.scale.convert(ContinuousScale.is(axis.scale) ? 0 : Math.min(...axis.range));\r\n    }\r\n    return { startingX, startingY };\r\n}\r\nfunction resetBarSelectionsFn(_node, { x, y, width, height }) {\r\n    return { x, y, width, height };\r\n}\n\nfunction updateLabelNode(textNode, label, labelDatum) {\r\n    if (label.enabled && labelDatum) {\r\n        const { x, y, text, textAlign, textBaseline } = labelDatum;\r\n        const { color: fill, fontStyle, fontWeight, fontSize, fontFamily } = label;\r\n        textNode.setProperties({\r\n            visible: true,\r\n            x,\r\n            y,\r\n            text,\r\n            fill,\r\n            fontStyle,\r\n            fontWeight,\r\n            fontSize,\r\n            fontFamily,\r\n            textAlign,\r\n            textBaseline,\r\n        });\r\n    }\r\n    else {\r\n        textNode.visible = false;\r\n    }\r\n}\r\nfunction adjustLabelPlacement({ isPositive, isVertical, placement, padding = 0, rect, }) {\r\n    let x = rect.x + rect.width / 2;\r\n    let y = rect.y + rect.height / 2;\r\n    let textAlign = 'center';\r\n    let textBaseline = 'middle';\r\n    switch (placement) {\r\n        case 'start': {\r\n            if (isVertical) {\r\n                y = isPositive ? rect.y + rect.height + padding : rect.y - padding;\r\n                textBaseline = isPositive ? 'top' : 'bottom';\r\n            }\r\n            else {\r\n                x = isPositive ? rect.x - padding : rect.x + rect.width + padding;\r\n                textAlign = isPositive ? 'start' : 'end';\r\n            }\r\n            break;\r\n        }\r\n        case 'outside':\r\n        case 'end': {\r\n            if (isVertical) {\r\n                y = isPositive ? rect.y - padding : rect.y + rect.height + padding;\r\n                textBaseline = isPositive ? 'bottom' : 'top';\r\n            }\r\n            else {\r\n                x = isPositive ? rect.x + rect.width + padding : rect.x - padding;\r\n                textAlign = isPositive ? 'start' : 'end';\r\n            }\r\n            break;\r\n        }\r\n    }\r\n    return { x, y, textAlign, textBaseline };\r\n}\n\nvar BarSeriesNodeTag;\r\n(function (BarSeriesNodeTag) {\r\n    BarSeriesNodeTag[BarSeriesNodeTag[\"Bar\"] = 0] = \"Bar\";\r\n    BarSeriesNodeTag[BarSeriesNodeTag[\"Label\"] = 1] = \"Label\";\r\n})(BarSeriesNodeTag || (BarSeriesNodeTag = {}));\r\nclass BarSeriesLabel extends Label {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.placement = 'inside';\r\n    }\r\n}\r\n__decorate([\r\n    Validate(STRING_UNION('inside', 'outside')),\r\n    __metadata(\"design:type\", String)\r\n], BarSeriesLabel.prototype, \"placement\", void 0);\r\nclass BarSeries extends AbstractBarSeries {\r\n    constructor(moduleCtx) {\r\n        super({\r\n            moduleCtx,\r\n            pickModes: [SeriesNodePickMode.EXACT_SHAPE_MATCH],\r\n            pathsPerSeries: 0,\r\n            hasHighlightedLabels: true,\r\n            datumSelectionGarbageCollection: false,\r\n            animationResetFns: {\r\n                datum: resetBarSelectionsFn,\r\n                label: resetLabelFn,\r\n            },\r\n        });\r\n        this.label = new BarSeriesLabel();\r\n        this.tooltip = new SeriesTooltip();\r\n        this.fill = '#c16068';\r\n        this.stroke = '#874349';\r\n        this.fillOpacity = 1;\r\n        this.strokeOpacity = 1;\r\n        this.lineDash = [0];\r\n        this.lineDashOffset = 0;\r\n        this.formatter = undefined;\r\n        this.xKey = undefined;\r\n        this.xName = undefined;\r\n        this.yKey = undefined;\r\n        this.yName = undefined;\r\n        this.stackGroup = undefined;\r\n        this.strokeWidth = 1;\r\n        this.shadow = undefined;\r\n        /**\r\n         * Used to get the position of bars within each group.\r\n         */\r\n        this.groupScale = new BandScale();\r\n        this.smallestDataInterval = undefined;\r\n    }\r\n    resolveKeyDirection(direction) {\r\n        if (this.getBarDirection() === ChartAxisDirection.X) {\r\n            if (direction === ChartAxisDirection.X) {\r\n                return ChartAxisDirection.Y;\r\n            }\r\n            return ChartAxisDirection.X;\r\n        }\r\n        return direction;\r\n    }\r\n    processData(dataController) {\r\n        var _a, _b, _c, _d;\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const { xKey, yKey, normalizedTo, seriesGrouping: { groupIndex = this.id } = {}, data = [] } = this;\r\n            if (xKey == null || yKey == null || data == null)\r\n                return;\r\n            const animationEnabled = !this.ctx.animationManager.isSkipped();\r\n            const normalizedToAbs = Math.abs(normalizedTo !== null && normalizedTo !== void 0 ? normalizedTo : NaN);\r\n            const isContinuousX = ContinuousScale.is((_a = this.getCategoryAxis()) === null || _a === void 0 ? void 0 : _a.scale);\r\n            const isContinuousY = ContinuousScale.is((_b = this.getValueAxis()) === null || _b === void 0 ? void 0 : _b.scale);\r\n            const stackGroupName = `bar-stack-${groupIndex}-yValues`;\r\n            const stackGroupTrailingName = `${stackGroupName}-trailing`;\r\n            const normaliseTo = normalizedToAbs && isFinite(normalizedToAbs) ? normalizedToAbs : undefined;\r\n            const extraProps = [];\r\n            if (normaliseTo) {\r\n                extraProps.push(normaliseGroupTo(this, [stackGroupName, stackGroupTrailingName], normaliseTo, 'range'));\r\n            }\r\n            if (animationEnabled && this.processedData) {\r\n                extraProps.push(diff(this.processedData));\r\n            }\r\n            if (animationEnabled) {\r\n                extraProps.push(animationValidation(this));\r\n            }\r\n            const visibleProps = !this.visible ? { forceValue: 0 } : {};\r\n            const { processedData } = yield this.requestDataModel(dataController, data, {\r\n                props: [\r\n                    keyProperty(this, xKey, isContinuousX, { id: 'xValue' }),\r\n                    valueProperty(this, yKey, isContinuousY, Object.assign({ id: `yValue-raw`, invalidValue: null }, visibleProps)),\r\n                    ...groupAccumulativeValueProperty(this, yKey, isContinuousY, 'normal', 'current', Object.assign({ id: `yValue-end`, invalidValue: null, missingValue: 0, groupId: stackGroupName, separateNegative: true }, visibleProps)),\r\n                    ...groupAccumulativeValueProperty(this, yKey, isContinuousY, 'trailing', 'current', Object.assign({ id: `yValue-start`, invalidValue: null, missingValue: 0, groupId: stackGroupTrailingName, separateNegative: true }, visibleProps)),\r\n                    ...(isContinuousX ? [SMALLEST_KEY_INTERVAL] : []),\r\n                    ...extraProps,\r\n                ],\r\n                groupByKeys: true,\r\n            });\r\n            this.smallestDataInterval = {\r\n                x: (_d = (_c = processedData.reduced) === null || _c === void 0 ? void 0 : _c.smallestKeyInterval) !== null && _d !== void 0 ? _d : Infinity,\r\n                y: Infinity,\r\n            };\r\n            this.animationState.transition('updateData');\r\n        });\r\n    }\r\n    getSeriesDomain(direction) {\r\n        var _a;\r\n        const { processedData, dataModel } = this;\r\n        if (!processedData || !dataModel)\r\n            return [];\r\n        const { reduced: { [SMALLEST_KEY_INTERVAL.property]: smallestX } = {} } = processedData;\r\n        const categoryAxis = this.getCategoryAxis();\r\n        const valueAxis = this.getValueAxis();\r\n        const keyDef = dataModel.resolveProcessedDataDefById(this, `xValue`);\r\n        const keys = dataModel.getDomain(this, `xValue`, 'key', processedData);\r\n        const yExtent = dataModel.getDomain(this, `yValue-end`, 'value', processedData);\r\n        if (direction === this.getCategoryDirection()) {\r\n            if ((keyDef === null || keyDef === void 0 ? void 0 : keyDef.def.type) === 'key' && (keyDef === null || keyDef === void 0 ? void 0 : keyDef.def.valueType) === 'category') {\r\n                return keys;\r\n            }\r\n            const scalePadding = smallestX != null && isFinite(smallestX) ? smallestX : 0;\r\n            const keysExtent = (_a = extent(keys)) !== null && _a !== void 0 ? _a : [NaN, NaN];\r\n            if (direction === ChartAxisDirection.Y) {\r\n                return fixNumericExtent([keysExtent[0] + -scalePadding, keysExtent[1]], categoryAxis);\r\n            }\r\n            return fixNumericExtent([keysExtent[0], keysExtent[1] + scalePadding], categoryAxis);\r\n        }\r\n        else if (this.getValueAxis() instanceof LogAxis) {\r\n            return fixNumericExtent(yExtent, valueAxis);\r\n        }\r\n        else {\r\n            const fixedYExtent = [yExtent[0] > 0 ? 0 : yExtent[0], yExtent[1] < 0 ? 0 : yExtent[1]];\r\n            return fixNumericExtent(fixedYExtent, valueAxis);\r\n        }\r\n    }\r\n    createNodeData() {\r\n        const _super = Object.create(null, {\r\n            calculateScaling: { get: () => super.calculateScaling }\r\n        });\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const { dataModel } = this;\r\n            const xAxis = this.getCategoryAxis();\r\n            const yAxis = this.getValueAxis();\r\n            if (!(dataModel && xAxis && yAxis)) {\r\n                return [];\r\n            }\r\n            const xScale = xAxis.scale;\r\n            const yScale = yAxis.scale;\r\n            const { groupScale, yKey = '', xKey = '', fill, stroke, strokeWidth, label, processedData, ctx: { seriesStateManager }, smallestDataInterval, } = this;\r\n            const xBandWidth = ContinuousScale.is(xScale)\r\n                ? xScale.calcBandwidth(smallestDataInterval === null || smallestDataInterval === void 0 ? void 0 : smallestDataInterval.x)\r\n                : xScale.bandwidth;\r\n            const domain = [];\r\n            const { index: groupIndex, visibleGroupCount } = seriesStateManager.getVisiblePeerGroupIndex(this);\r\n            for (let groupIdx = 0; groupIdx < visibleGroupCount; groupIdx++) {\r\n                domain.push(String(groupIdx));\r\n            }\r\n            groupScale.domain = domain;\r\n            groupScale.range = [0, xBandWidth !== null && xBandWidth !== void 0 ? xBandWidth : 0];\r\n            if (xAxis instanceof CategoryAxis) {\r\n                groupScale.paddingInner = xAxis.groupPaddingInner;\r\n            }\r\n            else if (xAxis instanceof GroupedCategoryAxis) {\r\n                groupScale.padding = 0.1;\r\n            }\r\n            else {\r\n                // Number or Time axis\r\n                groupScale.padding = 0;\r\n            }\r\n            // To get exactly `0` padding we need to turn off rounding\r\n            groupScale.round = groupScale.padding !== 0;\r\n            const barWidth = groupScale.bandwidth >= 1\r\n                ? // Pixel-rounded value for low-volume bar charts.\r\n                    groupScale.bandwidth\r\n                : // Handle high-volume bar charts gracefully.\r\n                    groupScale.rawBandwidth;\r\n            const xIndex = dataModel.resolveProcessedDataIndexById(this, `xValue`).index;\r\n            const yRawIndex = dataModel.resolveProcessedDataIndexById(this, `yValue-raw`).index;\r\n            const yStartIndex = dataModel.resolveProcessedDataIndexById(this, `yValue-start`).index;\r\n            const yEndIndex = dataModel.resolveProcessedDataIndexById(this, `yValue-end`).index;\r\n            const animationEnabled = !this.ctx.animationManager.isSkipped();\r\n            const context = {\r\n                itemId: yKey,\r\n                nodeData: [],\r\n                labelData: [],\r\n                scales: _super.calculateScaling.call(this),\r\n                visible: this.visible || animationEnabled,\r\n            };\r\n            processedData === null || processedData === void 0 ? void 0 : processedData.data.forEach(({ keys, datum: seriesDatum, values }) => {\r\n                const xValue = keys[xIndex];\r\n                const x = xScale.convert(xValue);\r\n                const currY = +values[0][yEndIndex];\r\n                const prevY = +values[0][yStartIndex];\r\n                const yRawValue = values[0][yRawIndex];\r\n                const barX = x + groupScale.convert(String(groupIndex));\r\n                if (isNaN(currY)) {\r\n                    return;\r\n                }\r\n                const y = yScale.convert(currY);\r\n                const bottomY = yScale.convert(prevY);\r\n                const barAlongX = this.getBarDirection() === ChartAxisDirection.X;\r\n                const rect = {\r\n                    x: barAlongX ? Math.min(y, bottomY) : barX,\r\n                    y: barAlongX ? barX : Math.min(y, bottomY),\r\n                    width: barAlongX ? Math.abs(bottomY - y) : barWidth,\r\n                    height: barAlongX ? barWidth : Math.abs(bottomY - y),\r\n                };\r\n                const { fontStyle: labelFontStyle, fontWeight: labelFontWeight, fontSize: labelFontSize, fontFamily: labelFontFamily, color: labelColor, placement, } = label;\r\n                const labelText = this.getLabelText(this.label, {\r\n                    datum: seriesDatum[0],\r\n                    value: yRawValue,\r\n                    xKey,\r\n                    yKey,\r\n                    xName: this.xName,\r\n                    yName: this.yName,\r\n                    legendItemName: this.legendItemName,\r\n                }, (value) => (isNumber(value) ? value.toFixed(2) : ''));\r\n                const labelDatum = labelText\r\n                    ? Object.assign({ text: labelText, fill: labelColor, fontStyle: labelFontStyle, fontWeight: labelFontWeight, fontSize: labelFontSize, fontFamily: labelFontFamily }, adjustLabelPlacement({\r\n                        isPositive: yRawValue >= 0,\r\n                        isVertical: !barAlongX,\r\n                        placement,\r\n                        rect,\r\n                    })) : undefined;\r\n                const lengthRatioMultiplier = this.shouldFlipXY() ? rect.height : rect.width;\r\n                const nodeData = {\r\n                    series: this,\r\n                    itemId: yKey,\r\n                    datum: seriesDatum[0],\r\n                    cumulativeValue: currY,\r\n                    xValue,\r\n                    yValue: yRawValue,\r\n                    yKey,\r\n                    xKey,\r\n                    capDefaults: {\r\n                        lengthRatioMultiplier: lengthRatioMultiplier,\r\n                        lengthMax: lengthRatioMultiplier,\r\n                    },\r\n                    x: rect.x,\r\n                    y: rect.y,\r\n                    width: rect.width,\r\n                    height: rect.height,\r\n                    midPoint: { x: rect.x + rect.width / 2, y: rect.y + rect.height / 2 },\r\n                    fill,\r\n                    stroke,\r\n                    strokeWidth,\r\n                    label: labelDatum,\r\n                };\r\n                context.nodeData.push(nodeData);\r\n                context.labelData.push(nodeData);\r\n            });\r\n            return [context];\r\n        });\r\n    }\r\n    nodeFactory() {\r\n        return new Rect();\r\n    }\r\n    updateDatumSelection(opts) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return opts.datumSelection.update(opts.nodeData, (rect) => {\r\n                rect.tag = BarSeriesNodeTag.Bar;\r\n            }, (datum) => datum.xValue);\r\n        });\r\n    }\r\n    updateDatumNodes(opts) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const { datumSelection, isHighlight } = opts;\r\n            const { yKey = '', fill, stroke, fillOpacity, strokeOpacity, lineDash, lineDashOffset, shadow, formatter, id: seriesId, highlightStyle: { item: itemHighlightStyle }, ctx, stackGroup, } = this;\r\n            const xAxis = this.axes[ChartAxisDirection.X];\r\n            const crisp = checkCrisp(xAxis === null || xAxis === void 0 ? void 0 : xAxis.visibleRange);\r\n            const categoryAlongX = this.getCategoryDirection() === ChartAxisDirection.X;\r\n            datumSelection.each((rect, datum) => {\r\n                const style = {\r\n                    fill,\r\n                    stroke,\r\n                    fillOpacity,\r\n                    strokeOpacity,\r\n                    lineDash,\r\n                    lineDashOffset,\r\n                    fillShadow: shadow,\r\n                    strokeWidth: this.getStrokeWidth(this.strokeWidth),\r\n                };\r\n                const visible = categoryAlongX ? datum.width > 0 : datum.height > 0;\r\n                const config = getRectConfig({\r\n                    datum,\r\n                    isHighlighted: isHighlight,\r\n                    style,\r\n                    highlightStyle: itemHighlightStyle,\r\n                    formatter,\r\n                    seriesId,\r\n                    stackGroup,\r\n                    ctx,\r\n                    yKey,\r\n                });\r\n                config.crisp = crisp;\r\n                config.visible = visible;\r\n                updateRect({ rect, config });\r\n            });\r\n        });\r\n    }\r\n    updateLabelSelection(opts) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const data = this.label.enabled ? opts.labelData : [];\r\n            return opts.labelSelection.update(data, (text) => {\r\n                text.tag = BarSeriesNodeTag.Label;\r\n                text.pointerEvents = PointerEvents.None;\r\n            });\r\n        });\r\n    }\r\n    updateLabelNodes(opts) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            opts.labelSelection.each((textNode, datum) => {\r\n                updateLabelNode(textNode, this.label, datum.label);\r\n            });\r\n        });\r\n    }\r\n    getTooltipHtml(nodeDatum) {\r\n        var _a;\r\n        const { xKey, yKey, processedData, ctx: { callbackCache }, } = this;\r\n        const xAxis = this.getCategoryAxis();\r\n        const yAxis = this.getValueAxis();\r\n        const { xValue, yValue, datum } = nodeDatum;\r\n        if (!processedData || !xKey || !yKey || !xAxis || !yAxis) {\r\n            return '';\r\n        }\r\n        const { xName, yName, fill, stroke, tooltip, formatter, id: seriesId, stackGroup } = this;\r\n        const strokeWidth = this.getStrokeWidth(this.strokeWidth);\r\n        const xString = xAxis.formatDatum(xValue);\r\n        const yString = yAxis.formatDatum(yValue);\r\n        const title = sanitizeHtml(yName);\r\n        const content = sanitizeHtml(xString + ': ' + yString);\r\n        let format;\r\n        if (formatter) {\r\n            format = callbackCache.call(formatter, {\r\n                datum,\r\n                fill,\r\n                stroke,\r\n                strokeWidth,\r\n                highlighted: false,\r\n                xKey,\r\n                yKey,\r\n                seriesId,\r\n                stackGroup,\r\n            });\r\n        }\r\n        const color = (_a = format === null || format === void 0 ? void 0 : format.fill) !== null && _a !== void 0 ? _a : fill;\r\n        return tooltip.toTooltipHtml({ title, content, backgroundColor: color }, Object.assign({ datum,\r\n            xKey,\r\n            xName,\r\n            yKey,\r\n            yName,\r\n            color,\r\n            title,\r\n            seriesId,\r\n            stackGroup }, this.getModuleTooltipParams(datum)));\r\n    }\r\n    getLegendData(legendType) {\r\n        var _a;\r\n        const { id, data, xKey, yKey, yName, legendItemName, fill, stroke, strokeWidth, fillOpacity, strokeOpacity, visible, showInLegend, } = this;\r\n        if (legendType !== 'category' || !showInLegend || !(data === null || data === void 0 ? void 0 : data.length) || !xKey || !yKey) {\r\n            return [];\r\n        }\r\n        return [\r\n            {\r\n                legendType: 'category',\r\n                id,\r\n                itemId: yKey,\r\n                seriesId: id,\r\n                enabled: visible,\r\n                label: { text: (_a = legendItemName !== null && legendItemName !== void 0 ? legendItemName : yName) !== null && _a !== void 0 ? _a : yKey },\r\n                marker: { fill, stroke, fillOpacity, strokeOpacity, strokeWidth },\r\n                legendItemName,\r\n            },\r\n        ];\r\n    }\r\n    animateEmptyUpdateReady({ datumSelections, labelSelections, annotationSelections }) {\r\n        const fns = prepareBarAnimationFunctions(collapsedStartingBarPosition(this.direction === 'vertical', this.axes));\r\n        fromToMotion(this.id, 'nodes', this.ctx.animationManager, datumSelections, fns);\r\n        seriesLabelFadeInAnimation(this, 'labels', this.ctx.animationManager, labelSelections);\r\n        seriesLabelFadeInAnimation(this, 'annotations', this.ctx.animationManager, annotationSelections);\r\n    }\r\n    animateWaitingUpdateReady(data) {\r\n        var _a, _b;\r\n        const { datumSelections, labelSelections, annotationSelections } = data;\r\n        this.ctx.animationManager.stopByAnimationGroupId(this.id);\r\n        const diff = (_b = (_a = this.processedData) === null || _a === void 0 ? void 0 : _a.reduced) === null || _b === void 0 ? void 0 : _b.diff;\r\n        const fns = prepareBarAnimationFunctions(collapsedStartingBarPosition(this.direction === 'vertical', this.axes));\r\n        fromToMotion(this.id, 'nodes', this.ctx.animationManager, datumSelections, fns, (_, datum) => String(datum.xValue), diff);\r\n        seriesLabelFadeInAnimation(this, 'labels', this.ctx.animationManager, labelSelections);\r\n        seriesLabelFadeInAnimation(this, 'annotations', this.ctx.animationManager, annotationSelections);\r\n    }\r\n    isLabelEnabled() {\r\n        return this.label.enabled;\r\n    }\r\n}\r\nBarSeries.className = 'BarSeries';\r\nBarSeries.type = 'bar';\r\n__decorate([\r\n    Validate(OPT_COLOR_STRING),\r\n    __metadata(\"design:type\", String)\r\n], BarSeries.prototype, \"fill\", void 0);\r\n__decorate([\r\n    Validate(OPT_COLOR_STRING),\r\n    __metadata(\"design:type\", String)\r\n], BarSeries.prototype, \"stroke\", void 0);\r\n__decorate([\r\n    Validate(NUMBER$1(0, 1)),\r\n    __metadata(\"design:type\", Object)\r\n], BarSeries.prototype, \"fillOpacity\", void 0);\r\n__decorate([\r\n    Validate(NUMBER$1(0, 1)),\r\n    __metadata(\"design:type\", Object)\r\n], BarSeries.prototype, \"strokeOpacity\", void 0);\r\n__decorate([\r\n    Validate(OPT_LINE_DASH),\r\n    __metadata(\"design:type\", Array)\r\n], BarSeries.prototype, \"lineDash\", void 0);\r\n__decorate([\r\n    Validate(NUMBER$1(0)),\r\n    __metadata(\"design:type\", Number)\r\n], BarSeries.prototype, \"lineDashOffset\", void 0);\r\n__decorate([\r\n    Validate(OPT_FUNCTION),\r\n    __metadata(\"design:type\", Function)\r\n], BarSeries.prototype, \"formatter\", void 0);\r\n__decorate([\r\n    Validate(OPT_STRING),\r\n    __metadata(\"design:type\", String)\r\n], BarSeries.prototype, \"xKey\", void 0);\r\n__decorate([\r\n    Validate(OPT_STRING),\r\n    __metadata(\"design:type\", String)\r\n], BarSeries.prototype, \"xName\", void 0);\r\n__decorate([\r\n    Validate(OPT_STRING),\r\n    __metadata(\"design:type\", String)\r\n], BarSeries.prototype, \"yKey\", void 0);\r\n__decorate([\r\n    Validate(OPT_STRING),\r\n    __metadata(\"design:type\", String)\r\n], BarSeries.prototype, \"yName\", void 0);\r\n__decorate([\r\n    Validate(OPT_STRING),\r\n    __metadata(\"design:type\", String)\r\n], BarSeries.prototype, \"stackGroup\", void 0);\r\n__decorate([\r\n    Validate(OPT_NUMBER()),\r\n    __metadata(\"design:type\", Number)\r\n], BarSeries.prototype, \"normalizedTo\", void 0);\r\n__decorate([\r\n    Validate(NUMBER$1(0)),\r\n    __metadata(\"design:type\", Number)\r\n], BarSeries.prototype, \"strokeWidth\", void 0);\n\nconst BarSeriesModule = {\r\n    type: 'series',\r\n    optionsKey: 'series[]',\r\n    packageType: 'community',\r\n    chartTypes: ['cartesian'],\r\n    identifier: 'bar',\r\n    instanceConstructor: BarSeries,\r\n    stackable: true,\r\n    groupable: true,\r\n    seriesDefaults: {\r\n        axes: [\r\n            {\r\n                type: CARTESIAN_AXIS_TYPES.NUMBER,\r\n                position: CARTESIAN_AXIS_POSITIONS.LEFT,\r\n            },\r\n            {\r\n                type: CARTESIAN_AXIS_TYPES.CATEGORY,\r\n                position: CARTESIAN_AXIS_POSITIONS.BOTTOM,\r\n            },\r\n        ],\r\n    },\r\n    swapDefaultAxesCondition: (series) => (series === null || series === void 0 ? void 0 : series.direction) === 'horizontal',\r\n    themeTemplate: {\r\n        __extends__: EXTENDS_SERIES_DEFAULTS,\r\n        fillOpacity: 1,\r\n        strokeWidth: 0,\r\n        lineDash: [0],\r\n        lineDashOffset: 0,\r\n        label: {\r\n            enabled: false,\r\n            fontStyle: undefined,\r\n            fontWeight: NORMAL,\r\n            fontSize: 12,\r\n            fontFamily: DEFAULT_FONT_FAMILY,\r\n            color: DEFAULT_INSIDE_SERIES_LABEL_COLOUR,\r\n            formatter: undefined,\r\n            placement: 'inside',\r\n        },\r\n        shadow: {\r\n            enabled: false,\r\n            color: DEFAULT_SHADOW_COLOUR,\r\n            xOffset: 3,\r\n            yOffset: 3,\r\n            blur: 5,\r\n        },\r\n    },\r\n    enterpriseThemeTemplate: {\r\n        errorBar: {\r\n            cap: {\r\n                lengthRatio: 0.3,\r\n            },\r\n        },\r\n    },\r\n    paletteFactory: singleSeriesPaletteFactory,\r\n};\n\nclass BubbleSeriesNodeClickEvent extends CartesianSeriesNodeClickEvent {\r\n    constructor(type, nativeEvent, datum, series) {\r\n        super(type, nativeEvent, datum, series);\r\n        this.sizeKey = series.sizeKey;\r\n    }\r\n}\r\nclass BubbleSeriesMarker extends SeriesMarker {\r\n    constructor() {\r\n        super(...arguments);\r\n        /**\r\n         * The series `sizeKey` values along with the `size` and `maxSize` configs will be used to\r\n         * determine the size of the marker. All values will be mapped to a marker size within the\r\n         * `[size, maxSize]` range, where the largest values will correspond to the `maxSize` and the\r\n         * lowest to the `size`.\r\n         */\r\n        this.maxSize = 30;\r\n        this.domain = undefined;\r\n    }\r\n}\r\n__decorate([\r\n    Validate(NUMBER$1(0)),\r\n    SceneChangeDetection({ redraw: RedrawType.MAJOR }),\r\n    __metadata(\"design:type\", Object)\r\n], BubbleSeriesMarker.prototype, \"maxSize\", void 0);\r\n__decorate([\r\n    Validate(OPT_NUMBER_ARRAY),\r\n    SceneChangeDetection({ redraw: RedrawType.MAJOR }),\r\n    __metadata(\"design:type\", Array)\r\n], BubbleSeriesMarker.prototype, \"domain\", void 0);\r\nclass BubbleSeries extends CartesianSeries {\r\n    constructor(moduleCtx) {\r\n        super({\r\n            moduleCtx,\r\n            pickModes: [\r\n                SeriesNodePickMode.NEAREST_BY_MAIN_CATEGORY_AXIS_FIRST,\r\n                SeriesNodePickMode.NEAREST_NODE,\r\n                SeriesNodePickMode.EXACT_SHAPE_MATCH,\r\n            ],\r\n            pathsPerSeries: 0,\r\n            hasMarkers: true,\r\n            markerSelectionGarbageCollection: false,\r\n            animationResetFns: {\r\n                label: resetLabelFn,\r\n                marker: resetMarkerFn,\r\n            },\r\n        });\r\n        this.NodeClickEvent = BubbleSeriesNodeClickEvent;\r\n        this.sizeScale = new LinearScale();\r\n        this.marker = new BubbleSeriesMarker();\r\n        this.label = new Label();\r\n        this.title = undefined;\r\n        this.labelKey = undefined;\r\n        this.xName = undefined;\r\n        this.yName = undefined;\r\n        this.sizeName = 'Size';\r\n        this.labelName = 'Label';\r\n        this.xKey = undefined;\r\n        this.yKey = undefined;\r\n        this.sizeKey = undefined;\r\n        this.colorKey = undefined;\r\n        this.colorName = 'Color';\r\n        this.colorRange = ['#ffff00', '#00ff00', '#0000ff'];\r\n        this.colorScale = new ColorScale();\r\n        this.tooltip = new SeriesTooltip();\r\n    }\r\n    processData(dataController) {\r\n        var _a, _b;\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const { xKey, yKey, sizeKey, labelKey, colorScale, colorDomain, colorRange, colorKey, marker, data } = this;\r\n            if (xKey == null || yKey == null || sizeKey == null || data == null)\r\n                return;\r\n            const { isContinuousX, isContinuousY } = this.isContinuous();\r\n            const { dataModel, processedData } = yield this.requestDataModel(dataController, data, {\r\n                props: [\r\n                    keyProperty(this, xKey, isContinuousX, { id: 'xKey-raw' }),\r\n                    keyProperty(this, yKey, isContinuousY, { id: 'yKey-raw' }),\r\n                    ...(labelKey ? [keyProperty(this, labelKey, false, { id: `labelKey-raw` })] : []),\r\n                    valueProperty(this, xKey, isContinuousX, { id: `xValue` }),\r\n                    valueProperty(this, yKey, isContinuousY, { id: `yValue` }),\r\n                    valueProperty(this, sizeKey, true, { id: `sizeValue` }),\r\n                    ...(colorKey ? [valueProperty(this, colorKey, true, { id: `colorValue` })] : []),\r\n                    ...(labelKey ? [valueProperty(this, labelKey, false, { id: `labelValue` })] : []),\r\n                ],\r\n                dataVisible: this.visible,\r\n            });\r\n            const sizeKeyIdx = dataModel.resolveProcessedDataIndexById(this, `sizeValue`).index;\r\n            const processedSize = (_a = processedData.domain.values[sizeKeyIdx]) !== null && _a !== void 0 ? _a : [];\r\n            this.sizeScale.domain = marker.domain ? marker.domain : processedSize;\r\n            if (colorKey) {\r\n                const colorKeyIdx = dataModel.resolveProcessedDataIndexById(this, `colorValue`).index;\r\n                colorScale.domain = (_b = colorDomain !== null && colorDomain !== void 0 ? colorDomain : processedData.domain.values[colorKeyIdx]) !== null && _b !== void 0 ? _b : [];\r\n                colorScale.range = colorRange;\r\n                colorScale.update();\r\n            }\r\n            this.animationState.transition('updateData');\r\n        });\r\n    }\r\n    getSeriesDomain(direction) {\r\n        const { dataModel, processedData } = this;\r\n        if (!processedData || !dataModel)\r\n            return [];\r\n        const id = direction === ChartAxisDirection.X ? `xValue` : `yValue`;\r\n        const dataDef = dataModel.resolveProcessedDataDefById(this, id);\r\n        const domain = dataModel.getDomain(this, id, 'value', processedData);\r\n        if ((dataDef === null || dataDef === void 0 ? void 0 : dataDef.def.type) === 'value' && (dataDef === null || dataDef === void 0 ? void 0 : dataDef.def.valueType) === 'category') {\r\n            return domain;\r\n        }\r\n        const axis = this.axes[direction];\r\n        return fixNumericExtent(extent(domain), axis);\r\n    }\r\n    createNodeData() {\r\n        const _super = Object.create(null, {\r\n            calculateScaling: { get: () => super.calculateScaling }\r\n        });\r\n        var _a, _b, _c, _d;\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const { visible, axes, yKey = '', xKey = '', label, labelKey, dataModel, processedData, colorScale, sizeKey = '', colorKey, } = this;\r\n            const xAxis = axes[ChartAxisDirection.X];\r\n            const yAxis = axes[ChartAxisDirection.Y];\r\n            if (!(dataModel && processedData && visible && xAxis && yAxis))\r\n                return [];\r\n            const xDataIdx = dataModel.resolveProcessedDataIndexById(this, `xValue`).index;\r\n            const yDataIdx = dataModel.resolveProcessedDataIndexById(this, `yValue`).index;\r\n            const sizeDataIdx = sizeKey ? dataModel.resolveProcessedDataIndexById(this, `sizeValue`).index : -1;\r\n            const colorDataIdx = colorKey ? dataModel.resolveProcessedDataIndexById(this, `colorValue`).index : -1;\r\n            const labelDataIdx = labelKey ? dataModel.resolveProcessedDataIndexById(this, `labelValue`).index : -1;\r\n            const xScale = xAxis.scale;\r\n            const yScale = yAxis.scale;\r\n            const xOffset = ((_a = xScale.bandwidth) !== null && _a !== void 0 ? _a : 0) / 2;\r\n            const yOffset = ((_b = yScale.bandwidth) !== null && _b !== void 0 ? _b : 0) / 2;\r\n            const { sizeScale, marker } = this;\r\n            const nodeData = [];\r\n            sizeScale.range = [marker.size, marker.maxSize];\r\n            const font = label.getFont();\r\n            for (const { values, datum } of (_c = processedData.data) !== null && _c !== void 0 ? _c : []) {\r\n                const xDatum = values[xDataIdx];\r\n                const yDatum = values[yDataIdx];\r\n                const x = xScale.convert(xDatum) + xOffset;\r\n                const y = yScale.convert(yDatum) + yOffset;\r\n                const labelText = this.getLabelText(label, {\r\n                    value: labelKey ? values[labelDataIdx] : yDatum,\r\n                    datum,\r\n                    xKey,\r\n                    yKey,\r\n                    sizeKey,\r\n                    labelKey,\r\n                    xName: this.xName,\r\n                    yName: this.yName,\r\n                    sizeName: this.sizeName,\r\n                    labelName: this.labelName,\r\n                });\r\n                const size = HdpiCanvas.getTextSize(String(labelText), font);\r\n                const markerSize = sizeKey ? sizeScale.convert(values[sizeDataIdx]) : marker.size;\r\n                const fill = colorKey ? colorScale.convert(values[colorDataIdx]) : undefined;\r\n                nodeData.push({\r\n                    series: this,\r\n                    itemId: yKey,\r\n                    yKey,\r\n                    xKey,\r\n                    datum,\r\n                    xValue: xDatum,\r\n                    yValue: yDatum,\r\n                    sizeValue: values[sizeDataIdx],\r\n                    point: { x, y, size: markerSize },\r\n                    midPoint: { x, y },\r\n                    fill,\r\n                    label: Object.assign({ text: labelText }, size),\r\n                });\r\n            }\r\n            return [\r\n                {\r\n                    itemId: (_d = this.yKey) !== null && _d !== void 0 ? _d : this.id,\r\n                    nodeData,\r\n                    labelData: nodeData,\r\n                    scales: _super.calculateScaling.call(this),\r\n                    visible: this.visible,\r\n                },\r\n            ];\r\n        });\r\n    }\r\n    isPathOrSelectionDirty() {\r\n        return this.marker.isDirty();\r\n    }\r\n    getLabelData() {\r\n        var _a;\r\n        return (_a = this.contextNodeData) === null || _a === void 0 ? void 0 : _a.reduce((r, n) => r.concat(n.labelData), []);\r\n    }\r\n    markerFactory() {\r\n        const { shape } = this.marker;\r\n        const MarkerShape = getMarker(shape);\r\n        return new MarkerShape();\r\n    }\r\n    updateMarkerSelection(opts) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const { nodeData, markerSelection } = opts;\r\n            if (this.marker.isDirty()) {\r\n                markerSelection.clear();\r\n                markerSelection.cleanup();\r\n            }\r\n            const data = this.marker.enabled ? nodeData : [];\r\n            return markerSelection.update(data, undefined, (datum) => this.getDatumId(datum));\r\n        });\r\n    }\r\n    updateMarkerNodes(opts) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const { markerSelection, isHighlight: highlighted } = opts;\r\n            const { xKey = '', yKey = '', sizeKey = '', labelKey, marker } = this;\r\n            const baseStyle = mergeDefaults(highlighted && this.highlightStyle.item, marker.getStyle());\r\n            this.sizeScale.range = [marker.size, marker.maxSize];\r\n            markerSelection.each((node, datum) => {\r\n                this.updateMarkerStyle(node, marker, { datum, highlighted, xKey, yKey, sizeKey, labelKey }, baseStyle);\r\n            });\r\n            if (!highlighted) {\r\n                this.marker.markClean();\r\n            }\r\n        });\r\n    }\r\n    updateLabelSelection(opts) {\r\n        var _a, _b;\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const { labelSelection } = opts;\r\n            const { label: { enabled }, } = this;\r\n            const placedLabels = enabled ? (_b = (_a = this.chart) === null || _a === void 0 ? void 0 : _a.placeLabels().get(this)) !== null && _b !== void 0 ? _b : [] : [];\r\n            const placedNodeDatum = placedLabels.map((v) => (Object.assign(Object.assign({}, v.datum), { point: {\r\n                    x: v.x,\r\n                    y: v.y,\r\n                    size: v.datum.point.size,\r\n                } })));\r\n            return labelSelection.update(placedNodeDatum);\r\n        });\r\n    }\r\n    updateLabelNodes(opts) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const { labelSelection } = opts;\r\n            const { label } = this;\r\n            labelSelection.each((text, datum) => {\r\n                var _a, _b, _c, _d;\r\n                text.text = datum.label.text;\r\n                text.fill = label.color;\r\n                text.x = (_b = (_a = datum.point) === null || _a === void 0 ? void 0 : _a.x) !== null && _b !== void 0 ? _b : 0;\r\n                text.y = (_d = (_c = datum.point) === null || _c === void 0 ? void 0 : _c.y) !== null && _d !== void 0 ? _d : 0;\r\n                text.fontStyle = label.fontStyle;\r\n                text.fontWeight = label.fontWeight;\r\n                text.fontSize = label.fontSize;\r\n                text.fontFamily = label.fontFamily;\r\n                text.textAlign = 'left';\r\n                text.textBaseline = 'top';\r\n            });\r\n        });\r\n    }\r\n    getTooltipHtml(nodeDatum) {\r\n        var _a;\r\n        const { xKey, yKey, sizeKey, axes } = this;\r\n        const xAxis = axes[ChartAxisDirection.X];\r\n        const yAxis = axes[ChartAxisDirection.Y];\r\n        if (!xKey || !yKey || !xAxis || !yAxis || !sizeKey) {\r\n            return '';\r\n        }\r\n        const { marker, tooltip, xName, yName, sizeName, labelKey, labelName, id: seriesId } = this;\r\n        const baseStyle = mergeDefaults({ fill: nodeDatum.fill, strokeWidth: this.getStrokeWidth(marker.strokeWidth) }, marker.getStyle());\r\n        const { fill: color = 'gray' } = this.getMarkerStyle(marker, { datum: nodeDatum, highlighted: false, xKey, yKey, sizeKey, labelKey }, baseStyle);\r\n        const title = (_a = this.title) !== null && _a !== void 0 ? _a : yName;\r\n        const { datum, xValue, yValue, sizeValue, label: { text: labelText }, } = nodeDatum;\r\n        const xString = sanitizeHtml(xAxis.formatDatum(xValue));\r\n        const yString = sanitizeHtml(yAxis.formatDatum(yValue));\r\n        let content = `<b>${sanitizeHtml(xName !== null && xName !== void 0 ? xName : xKey)}</b>: ${xString}<br>` +\r\n            `<b>${sanitizeHtml(yName !== null && yName !== void 0 ? yName : yKey)}</b>: ${yString}`;\r\n        if (sizeKey) {\r\n            content += `<br><b>${sanitizeHtml(sizeName !== null && sizeName !== void 0 ? sizeName : sizeKey)}</b>: ${sanitizeHtml(String(sizeValue))}`;\r\n        }\r\n        if (labelKey) {\r\n            content = `<b>${sanitizeHtml(labelName !== null && labelName !== void 0 ? labelName : labelKey)}</b>: ${sanitizeHtml(labelText)}<br>` + content;\r\n        }\r\n        return tooltip.toTooltipHtml({ title, content, backgroundColor: color }, {\r\n            datum,\r\n            xKey,\r\n            xName,\r\n            yKey,\r\n            yName,\r\n            sizeKey,\r\n            sizeName,\r\n            labelKey,\r\n            labelName,\r\n            title,\r\n            color,\r\n            seriesId,\r\n        });\r\n    }\r\n    getLegendData() {\r\n        var _a;\r\n        const { id, data, xKey, yKey, sizeKey, yName, title, visible, marker } = this;\r\n        const { shape, fill, stroke, fillOpacity, strokeOpacity, strokeWidth } = marker;\r\n        if (!((data === null || data === void 0 ? void 0 : data.length) && xKey && yKey && sizeKey)) {\r\n            return [];\r\n        }\r\n        return [\r\n            {\r\n                legendType: 'category',\r\n                id,\r\n                itemId: yKey,\r\n                seriesId: id,\r\n                enabled: visible,\r\n                label: {\r\n                    text: (_a = title !== null && title !== void 0 ? title : yName) !== null && _a !== void 0 ? _a : yKey,\r\n                },\r\n                marker: {\r\n                    shape,\r\n                    fill: fill !== null && fill !== void 0 ? fill : 'rgba(0, 0, 0, 0)',\r\n                    stroke: stroke !== null && stroke !== void 0 ? stroke : 'rgba(0, 0, 0, 0)',\r\n                    fillOpacity: fillOpacity !== null && fillOpacity !== void 0 ? fillOpacity : 1,\r\n                    strokeOpacity: strokeOpacity !== null && strokeOpacity !== void 0 ? strokeOpacity : 1,\r\n                    strokeWidth: strokeWidth !== null && strokeWidth !== void 0 ? strokeWidth : 0,\r\n                },\r\n            },\r\n        ];\r\n    }\r\n    animateEmptyUpdateReady({ markerSelections, labelSelections }) {\r\n        markerScaleInAnimation(this, this.ctx.animationManager, markerSelections);\r\n        seriesLabelFadeInAnimation(this, 'labels', this.ctx.animationManager, labelSelections);\r\n    }\r\n    getDatumId(datum) {\r\n        return createDatumId([`${datum.xValue}`, `${datum.yValue}`, datum.label.text]);\r\n    }\r\n    isLabelEnabled() {\r\n        return this.label.enabled;\r\n    }\r\n    nodeFactory() {\r\n        return new Group();\r\n    }\r\n}\r\nBubbleSeries.className = 'BubbleSeries';\r\nBubbleSeries.type = 'bubble';\r\n__decorate([\r\n    Validate(OPT_STRING),\r\n    __metadata(\"design:type\", String)\r\n], BubbleSeries.prototype, \"title\", void 0);\r\n__decorate([\r\n    Validate(OPT_STRING),\r\n    __metadata(\"design:type\", String)\r\n], BubbleSeries.prototype, \"labelKey\", void 0);\r\n__decorate([\r\n    Validate(OPT_STRING),\r\n    __metadata(\"design:type\", String)\r\n], BubbleSeries.prototype, \"xName\", void 0);\r\n__decorate([\r\n    Validate(OPT_STRING),\r\n    __metadata(\"design:type\", String)\r\n], BubbleSeries.prototype, \"yName\", void 0);\r\n__decorate([\r\n    Validate(OPT_STRING),\r\n    __metadata(\"design:type\", String)\r\n], BubbleSeries.prototype, \"sizeName\", void 0);\r\n__decorate([\r\n    Validate(OPT_STRING),\r\n    __metadata(\"design:type\", String)\r\n], BubbleSeries.prototype, \"labelName\", void 0);\r\n__decorate([\r\n    Validate(OPT_STRING),\r\n    __metadata(\"design:type\", String)\r\n], BubbleSeries.prototype, \"xKey\", void 0);\r\n__decorate([\r\n    Validate(OPT_STRING),\r\n    __metadata(\"design:type\", String)\r\n], BubbleSeries.prototype, \"yKey\", void 0);\r\n__decorate([\r\n    Validate(OPT_STRING),\r\n    __metadata(\"design:type\", String)\r\n], BubbleSeries.prototype, \"sizeKey\", void 0);\r\n__decorate([\r\n    Validate(OPT_STRING),\r\n    __metadata(\"design:type\", String)\r\n], BubbleSeries.prototype, \"colorKey\", void 0);\r\n__decorate([\r\n    Validate(OPT_STRING),\r\n    __metadata(\"design:type\", String)\r\n], BubbleSeries.prototype, \"colorName\", void 0);\r\n__decorate([\r\n    Validate(OPT_NUMBER_ARRAY),\r\n    __metadata(\"design:type\", Array)\r\n], BubbleSeries.prototype, \"colorDomain\", void 0);\r\n__decorate([\r\n    Validate(COLOR_STRING_ARRAY),\r\n    __metadata(\"design:type\", Array)\r\n], BubbleSeries.prototype, \"colorRange\", void 0);\n\nconst BubbleSeriesModule = {\r\n    type: 'series',\r\n    optionsKey: 'series[]',\r\n    packageType: 'community',\r\n    chartTypes: ['cartesian'],\r\n    identifier: 'bubble',\r\n    instanceConstructor: BubbleSeries,\r\n    seriesDefaults: {\r\n        axes: [\r\n            { type: CARTESIAN_AXIS_TYPES.NUMBER, position: CARTESIAN_AXIS_POSITIONS.BOTTOM },\r\n            { type: CARTESIAN_AXIS_TYPES.NUMBER, position: CARTESIAN_AXIS_POSITIONS.LEFT },\r\n        ],\r\n    },\r\n    themeTemplate: {\r\n        __extends__: EXTENDS_SERIES_DEFAULTS,\r\n        tooltip: {\r\n            position: {\r\n                type: 'node',\r\n            },\r\n        },\r\n        marker: {\r\n            __extends__: EXTENDS_CARTESIAN_MARKER_DEFAULTS,\r\n            maxSize: 30,\r\n            fillOpacity: 0.8,\r\n        },\r\n        label: {\r\n            enabled: false,\r\n            fontStyle: undefined,\r\n            fontWeight: undefined,\r\n            fontSize: 12,\r\n            fontFamily: DEFAULT_FONT_FAMILY,\r\n            color: DEFAULT_LABEL_COLOUR,\r\n        },\r\n    },\r\n    paletteFactory: markerPaletteFactory,\r\n};\n\nconst HISTOGRAM_AGGREGATIONS = ['count', 'sum', 'mean'];\r\nconst HISTOGRAM_AGGREGATION = predicateWithMessage((v) => HISTOGRAM_AGGREGATIONS.includes(v), `expecting a histogram aggregation keyword such as 'count', 'sum' or 'mean`);\r\nvar HistogramSeriesNodeTag;\r\n(function (HistogramSeriesNodeTag) {\r\n    HistogramSeriesNodeTag[HistogramSeriesNodeTag[\"Bin\"] = 0] = \"Bin\";\r\n    HistogramSeriesNodeTag[HistogramSeriesNodeTag[\"Label\"] = 1] = \"Label\";\r\n})(HistogramSeriesNodeTag || (HistogramSeriesNodeTag = {}));\r\nconst defaultBinCount = 10;\r\nclass HistogramSeries extends CartesianSeries {\r\n    constructor(moduleCtx) {\r\n        super({\r\n            moduleCtx,\r\n            pickModes: [SeriesNodePickMode.EXACT_SHAPE_MATCH],\r\n            datumSelectionGarbageCollection: false,\r\n            animationResetFns: {\r\n                datum: resetBarSelectionsFn,\r\n                label: resetLabelFn,\r\n            },\r\n        });\r\n        this.label = new Label();\r\n        this.tooltip = new SeriesTooltip();\r\n        this.fill = undefined;\r\n        this.stroke = undefined;\r\n        this.fillOpacity = 1;\r\n        this.strokeOpacity = 1;\r\n        this.lineDash = [0];\r\n        this.lineDashOffset = 0;\r\n        this.xKey = undefined;\r\n        this.areaPlot = false;\r\n        this.aggregation = 'sum';\r\n        this.binCount = undefined;\r\n        this.xName = undefined;\r\n        this.yKey = undefined;\r\n        this.yName = undefined;\r\n        this.strokeWidth = 1;\r\n        this.shadow = undefined;\r\n        this.calculatedBins = [];\r\n    }\r\n    // During processData phase, used to unify different ways of the user specifying\r\n    // the bins. Returns bins in format[[min1, max1], [min2, max2], ... ].\r\n    deriveBins(xDomain) {\r\n        if (this.binCount === undefined) {\r\n            const binStarts = ticks(xDomain[0], xDomain[1], defaultBinCount);\r\n            const binSize = tickStep(xDomain[0], xDomain[1], defaultBinCount);\r\n            const firstBinEnd = binStarts[0];\r\n            const expandStartToBin = (n) => [n, n + binSize];\r\n            return [[firstBinEnd - binSize, firstBinEnd], ...binStarts.map(expandStartToBin)];\r\n        }\r\n        else {\r\n            return this.calculateNiceBins(xDomain, this.binCount);\r\n        }\r\n    }\r\n    calculateNiceBins(domain, binCount) {\r\n        const startGuess = Math.floor(domain[0]);\r\n        const stop = domain[1];\r\n        const segments = binCount || 1;\r\n        const { start, binSize } = this.calculateNiceStart(startGuess, stop, segments);\r\n        return this.getBins(start, stop, binSize, segments);\r\n    }\r\n    getBins(start, stop, step, count) {\r\n        const bins = [];\r\n        for (let i = 0; i < count; i++) {\r\n            const a = Math.round((start + i * step) * 10) / 10;\r\n            let b = Math.round((start + (i + 1) * step) * 10) / 10;\r\n            if (i === count - 1) {\r\n                b = Math.max(b, stop);\r\n            }\r\n            bins[i] = [a, b];\r\n        }\r\n        return bins;\r\n    }\r\n    calculateNiceStart(a, b, segments) {\r\n        const binSize = Math.abs(b - a) / segments;\r\n        const order = Math.floor(Math.log10(binSize));\r\n        const magnitude = Math.pow(10, order);\r\n        const start = Math.floor(a / magnitude) * magnitude;\r\n        return {\r\n            start,\r\n            binSize,\r\n        };\r\n    }\r\n    processData(dataController) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const { xKey, yKey, data, areaPlot, aggregation } = this;\r\n            const props = [keyProperty(this, xKey, true), SORT_DOMAIN_GROUPS];\r\n            if (yKey) {\r\n                let aggProp = groupCount(this, 'groupCount');\r\n                if (aggregation === 'count') ;\r\n                else if (aggregation === 'sum') {\r\n                    aggProp = groupSum(this, 'groupAgg');\r\n                }\r\n                else if (aggregation === 'mean') {\r\n                    aggProp = groupAverage(this, 'groupAgg');\r\n                }\r\n                if (areaPlot) {\r\n                    aggProp = area(this, 'groupAgg', aggProp);\r\n                }\r\n                props.push(valueProperty(this, yKey, true, { invalidValue: undefined }), aggProp);\r\n            }\r\n            else {\r\n                let aggProp = groupCount(this, 'groupAgg');\r\n                if (areaPlot) {\r\n                    aggProp = area(this, 'groupAgg', aggProp);\r\n                }\r\n                props.push(aggProp);\r\n            }\r\n            const groupByFn = (dataSet) => {\r\n                var _a;\r\n                const xExtent = fixNumericExtent(dataSet.domain.keys[0]);\r\n                if (xExtent.length === 0) {\r\n                    // No buckets can be calculated.\r\n                    dataSet.domain.groups = [];\r\n                    return () => [];\r\n                }\r\n                const bins = (_a = this.bins) !== null && _a !== void 0 ? _a : this.deriveBins(xExtent);\r\n                const binCount = bins.length;\r\n                this.calculatedBins = [...bins];\r\n                return (item) => {\r\n                    const xValue = item.keys[0];\r\n                    for (let i = 0; i < binCount; i++) {\r\n                        const nextBin = bins[i];\r\n                        if (xValue >= nextBin[0] && xValue < nextBin[1]) {\r\n                            return nextBin;\r\n                        }\r\n                        if (i === binCount - 1 && xValue <= nextBin[1]) {\r\n                            // Handle edge case of a value being at the maximum extent, and the\r\n                            // final bin aligning with it.\r\n                            return nextBin;\r\n                        }\r\n                    }\r\n                    return [];\r\n                };\r\n            };\r\n            if (!this.ctx.animationManager.isSkipped() && this.processedData) {\r\n                props.push(diff(this.processedData, false));\r\n            }\r\n            yield this.requestDataModel(dataController, data !== null && data !== void 0 ? data : [], {\r\n                props,\r\n                dataVisible: this.visible,\r\n                groupByFn,\r\n            });\r\n            this.animationState.transition('updateData');\r\n        });\r\n    }\r\n    getSeriesDomain(direction) {\r\n        var _a, _b, _c, _d;\r\n        const { processedData, dataModel } = this;\r\n        if (!processedData || !dataModel || !this.calculatedBins.length)\r\n            return [];\r\n        const yDomain = dataModel.getDomain(this, `groupAgg`, 'aggregate', processedData);\r\n        const xDomainMin = (_a = this.calculatedBins) === null || _a === void 0 ? void 0 : _a[0][0];\r\n        const xDomainMax = (_b = this.calculatedBins) === null || _b === void 0 ? void 0 : _b[((_d = (_c = this.calculatedBins) === null || _c === void 0 ? void 0 : _c.length) !== null && _d !== void 0 ? _d : 0) - 1][1];\r\n        if (direction === ChartAxisDirection.X) {\r\n            return fixNumericExtent([xDomainMin, xDomainMax]);\r\n        }\r\n        return fixNumericExtent(yDomain);\r\n    }\r\n    createNodeData() {\r\n        const _super = Object.create(null, {\r\n            calculateScaling: { get: () => super.calculateScaling }\r\n        });\r\n        var _a;\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const { axes, processedData, ctx: { callbackCache }, } = this;\r\n            const xAxis = axes[ChartAxisDirection.X];\r\n            const yAxis = axes[ChartAxisDirection.Y];\r\n            if (!this.visible || !xAxis || !yAxis || !processedData || processedData.type !== 'grouped') {\r\n                return [];\r\n            }\r\n            const { scale: xScale } = xAxis;\r\n            const { scale: yScale } = yAxis;\r\n            const { fill, stroke, strokeWidth, id: seriesId, yKey = '', xKey = '' } = this;\r\n            const nodeData = [];\r\n            const { label: { formatter: labelFormatter = (params) => String(params.value), fontStyle: labelFontStyle, fontWeight: labelFontWeight, fontSize: labelFontSize, fontFamily: labelFontFamily, color: labelColor, }, } = this;\r\n            processedData.data.forEach((group) => {\r\n                var _a;\r\n                const { aggValues: [[negativeAgg, positiveAgg]] = [[0, 0]], datum, datum: { length: frequency }, keys: domain, keys: [xDomainMin, xDomainMax], } = group;\r\n                const xMinPx = xScale.convert(xDomainMin);\r\n                const xMaxPx = xScale.convert(xDomainMax);\r\n                const total = negativeAgg + positiveAgg;\r\n                const yZeroPx = yScale.convert(0);\r\n                const yMaxPx = yScale.convert(total);\r\n                const w = xMaxPx - xMinPx;\r\n                const h = Math.abs(yMaxPx - yZeroPx);\r\n                const selectionDatumLabel = total !== 0\r\n                    ? {\r\n                        text: (_a = callbackCache.call(labelFormatter, {\r\n                            value: total,\r\n                            datum,\r\n                            seriesId,\r\n                            xKey,\r\n                            yKey,\r\n                            xName: this.xName,\r\n                            yName: this.yName,\r\n                        })) !== null && _a !== void 0 ? _a : String(total),\r\n                        fontStyle: labelFontStyle,\r\n                        fontWeight: labelFontWeight,\r\n                        fontSize: labelFontSize,\r\n                        fontFamily: labelFontFamily,\r\n                        fill: labelColor,\r\n                        x: xMinPx + w / 2,\r\n                        y: yMaxPx + h / 2,\r\n                    }\r\n                    : undefined;\r\n                const nodeMidPoint = {\r\n                    x: xMinPx + w / 2,\r\n                    y: yMaxPx + h / 2,\r\n                };\r\n                nodeData.push({\r\n                    series: this,\r\n                    datum,\r\n                    // since each selection is an aggregation of multiple data.\r\n                    aggregatedValue: total,\r\n                    frequency,\r\n                    domain: domain,\r\n                    yKey,\r\n                    xKey,\r\n                    x: xMinPx,\r\n                    y: yMaxPx,\r\n                    xValue: xMinPx,\r\n                    yValue: yMaxPx,\r\n                    width: w,\r\n                    height: h,\r\n                    midPoint: nodeMidPoint,\r\n                    fill: fill,\r\n                    stroke: stroke,\r\n                    strokeWidth: strokeWidth,\r\n                    label: selectionDatumLabel,\r\n                });\r\n            });\r\n            return [\r\n                {\r\n                    itemId: (_a = this.yKey) !== null && _a !== void 0 ? _a : this.id,\r\n                    nodeData,\r\n                    labelData: nodeData,\r\n                    scales: _super.calculateScaling.call(this),\r\n                    animationValid: true,\r\n                    visible: this.visible,\r\n                },\r\n            ];\r\n        });\r\n    }\r\n    nodeFactory() {\r\n        return new Rect();\r\n    }\r\n    updateDatumSelection(opts) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const { nodeData, datumSelection } = opts;\r\n            return datumSelection.update(nodeData, (rect) => {\r\n                rect.tag = HistogramSeriesNodeTag.Bin;\r\n                rect.crisp = true;\r\n            }, (datum) => datum.domain.join('_'));\r\n        });\r\n    }\r\n    updateDatumNodes(opts) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const { datumSelection, isHighlight: isDatumHighlighted } = opts;\r\n            const { fillOpacity: seriesFillOpacity, strokeOpacity, shadow, highlightStyle: { item: { fill: highlightedFill, fillOpacity: highlightFillOpacity = seriesFillOpacity, stroke: highlightedStroke, strokeWidth: highlightedDatumStrokeWidth, }, }, } = this;\r\n            datumSelection.each((rect, datum, index) => {\r\n                var _a, _b;\r\n                const strokeWidth = isDatumHighlighted && highlightedDatumStrokeWidth !== undefined\r\n                    ? highlightedDatumStrokeWidth\r\n                    : datum.strokeWidth;\r\n                const fillOpacity = isDatumHighlighted ? highlightFillOpacity : seriesFillOpacity;\r\n                rect.fill = (_a = (isDatumHighlighted ? highlightedFill : undefined)) !== null && _a !== void 0 ? _a : datum.fill;\r\n                rect.stroke = (_b = (isDatumHighlighted ? highlightedStroke : undefined)) !== null && _b !== void 0 ? _b : datum.stroke;\r\n                rect.fillOpacity = fillOpacity;\r\n                rect.strokeOpacity = strokeOpacity;\r\n                rect.strokeWidth = strokeWidth;\r\n                rect.lineDash = this.lineDash;\r\n                rect.lineDashOffset = this.lineDashOffset;\r\n                rect.fillShadow = shadow;\r\n                rect.zIndex = isDatumHighlighted ? Series.highlightedZIndex : index;\r\n                rect.visible = datum.height > 0; // prevent stroke from rendering for zero height columns\r\n            });\r\n        });\r\n    }\r\n    updateLabelSelection(opts) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const { labelData, labelSelection } = opts;\r\n            return labelSelection.update(labelData, (text) => {\r\n                text.tag = HistogramSeriesNodeTag.Label;\r\n                text.pointerEvents = PointerEvents.None;\r\n                text.textAlign = 'center';\r\n                text.textBaseline = 'middle';\r\n            });\r\n        });\r\n    }\r\n    updateLabelNodes(opts) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const { labelSelection } = opts;\r\n            const labelEnabled = this.label.enabled;\r\n            labelSelection.each((text, datum) => {\r\n                const label = datum.label;\r\n                if (label && labelEnabled) {\r\n                    text.text = label.text;\r\n                    text.x = label.x;\r\n                    text.y = label.y;\r\n                    text.fontStyle = label.fontStyle;\r\n                    text.fontWeight = label.fontWeight;\r\n                    text.fontSize = label.fontSize;\r\n                    text.fontFamily = label.fontFamily;\r\n                    text.fill = label.fill;\r\n                    text.visible = true;\r\n                }\r\n                else {\r\n                    text.visible = false;\r\n                }\r\n            });\r\n        });\r\n    }\r\n    getTooltipHtml(nodeDatum) {\r\n        const { xKey, yKey = '', axes } = this;\r\n        const xAxis = axes[ChartAxisDirection.X];\r\n        const yAxis = axes[ChartAxisDirection.Y];\r\n        if (!xKey || !xAxis || !yAxis) {\r\n            return '';\r\n        }\r\n        const { xName, yName, fill: color, tooltip, aggregation, id: seriesId } = this;\r\n        const { aggregatedValue, frequency, domain: [rangeMin, rangeMax], } = nodeDatum;\r\n        const title = `${sanitizeHtml(xName !== null && xName !== void 0 ? xName : xKey)}: ${xAxis.formatDatum(rangeMin)} - ${xAxis.formatDatum(rangeMax)}`;\r\n        let content = yKey\r\n            ? `<b>${sanitizeHtml(yName !== null && yName !== void 0 ? yName : yKey)} (${aggregation})</b>: ${yAxis.formatDatum(aggregatedValue)}<br>`\r\n            : '';\r\n        content += `<b>Frequency</b>: ${frequency}`;\r\n        const defaults = {\r\n            title,\r\n            backgroundColor: color,\r\n            content,\r\n        };\r\n        return tooltip.toTooltipHtml(defaults, {\r\n            datum: {\r\n                data: nodeDatum.datum,\r\n                aggregatedValue: nodeDatum.aggregatedValue,\r\n                domain: nodeDatum.domain,\r\n                frequency: nodeDatum.frequency,\r\n            },\r\n            xKey,\r\n            xName,\r\n            yKey,\r\n            yName,\r\n            color,\r\n            title,\r\n            seriesId,\r\n        });\r\n    }\r\n    getLegendData(legendType) {\r\n        var _a;\r\n        const { id, data, xKey, yName, visible, fill, stroke, fillOpacity, strokeOpacity, strokeWidth } = this;\r\n        if (!data || data.length === 0 || legendType !== 'category') {\r\n            return [];\r\n        }\r\n        return [\r\n            {\r\n                legendType: 'category',\r\n                id,\r\n                itemId: xKey,\r\n                seriesId: id,\r\n                enabled: visible,\r\n                label: {\r\n                    text: (_a = yName !== null && yName !== void 0 ? yName : xKey) !== null && _a !== void 0 ? _a : 'Frequency',\r\n                },\r\n                marker: {\r\n                    fill: fill !== null && fill !== void 0 ? fill : 'rgba(0, 0, 0, 0)',\r\n                    stroke: stroke !== null && stroke !== void 0 ? stroke : 'rgba(0, 0, 0, 0)',\r\n                    fillOpacity: fillOpacity,\r\n                    strokeOpacity: strokeOpacity,\r\n                    strokeWidth,\r\n                },\r\n            },\r\n        ];\r\n    }\r\n    animateEmptyUpdateReady({ datumSelections, labelSelections }) {\r\n        const fns = prepareBarAnimationFunctions(collapsedStartingBarPosition(true, this.axes));\r\n        fromToMotion(this.id, 'datums', this.ctx.animationManager, datumSelections, fns);\r\n        seriesLabelFadeInAnimation(this, 'labels', this.ctx.animationManager, labelSelections);\r\n    }\r\n    animateWaitingUpdateReady(data) {\r\n        var _a, _b;\r\n        const diff = (_b = (_a = this.processedData) === null || _a === void 0 ? void 0 : _a.reduced) === null || _b === void 0 ? void 0 : _b.diff;\r\n        const fns = prepareBarAnimationFunctions(collapsedStartingBarPosition(true, this.axes));\r\n        fromToMotion(this.id, 'datums', this.ctx.animationManager, data.datumSelections, fns, (_, datum) => this.getDatumId(datum), diff);\r\n        seriesLabelFadeInAnimation(this, 'labels', this.ctx.animationManager, data.labelSelections);\r\n    }\r\n    getDatumId(datum) {\r\n        return createDatumId(datum.domain.map((d) => `${d}`));\r\n    }\r\n    isLabelEnabled() {\r\n        return this.label.enabled;\r\n    }\r\n}\r\nHistogramSeries.className = 'HistogramSeries';\r\nHistogramSeries.type = 'histogram';\r\n__decorate([\r\n    Validate(OPT_COLOR_STRING),\r\n    __metadata(\"design:type\", String)\r\n], HistogramSeries.prototype, \"fill\", void 0);\r\n__decorate([\r\n    Validate(OPT_COLOR_STRING),\r\n    __metadata(\"design:type\", String)\r\n], HistogramSeries.prototype, \"stroke\", void 0);\r\n__decorate([\r\n    Validate(NUMBER$1(0, 1)),\r\n    __metadata(\"design:type\", Object)\r\n], HistogramSeries.prototype, \"fillOpacity\", void 0);\r\n__decorate([\r\n    Validate(NUMBER$1(0, 1)),\r\n    __metadata(\"design:type\", Object)\r\n], HistogramSeries.prototype, \"strokeOpacity\", void 0);\r\n__decorate([\r\n    Validate(OPT_LINE_DASH),\r\n    __metadata(\"design:type\", Array)\r\n], HistogramSeries.prototype, \"lineDash\", void 0);\r\n__decorate([\r\n    Validate(NUMBER$1(0)),\r\n    __metadata(\"design:type\", Number)\r\n], HistogramSeries.prototype, \"lineDashOffset\", void 0);\r\n__decorate([\r\n    Validate(OPT_STRING),\r\n    __metadata(\"design:type\", String)\r\n], HistogramSeries.prototype, \"xKey\", void 0);\r\n__decorate([\r\n    Validate(BOOLEAN),\r\n    __metadata(\"design:type\", Boolean)\r\n], HistogramSeries.prototype, \"areaPlot\", void 0);\r\n__decorate([\r\n    Validate(OPT_ARRAY()),\r\n    __metadata(\"design:type\", Array)\r\n], HistogramSeries.prototype, \"bins\", void 0);\r\n__decorate([\r\n    Validate(HISTOGRAM_AGGREGATION),\r\n    __metadata(\"design:type\", String)\r\n], HistogramSeries.prototype, \"aggregation\", void 0);\r\n__decorate([\r\n    Validate(OPT_NUMBER(0)),\r\n    __metadata(\"design:type\", Number)\r\n], HistogramSeries.prototype, \"binCount\", void 0);\r\n__decorate([\r\n    Validate(OPT_STRING),\r\n    __metadata(\"design:type\", String)\r\n], HistogramSeries.prototype, \"xName\", void 0);\r\n__decorate([\r\n    Validate(OPT_STRING),\r\n    __metadata(\"design:type\", String)\r\n], HistogramSeries.prototype, \"yKey\", void 0);\r\n__decorate([\r\n    Validate(OPT_STRING),\r\n    __metadata(\"design:type\", String)\r\n], HistogramSeries.prototype, \"yName\", void 0);\r\n__decorate([\r\n    Validate(NUMBER$1(0)),\r\n    __metadata(\"design:type\", Number)\r\n], HistogramSeries.prototype, \"strokeWidth\", void 0);\n\nconst HistogramSeriesModule = {\r\n    type: 'series',\r\n    optionsKey: 'series[]',\r\n    packageType: 'community',\r\n    chartTypes: ['cartesian'],\r\n    identifier: 'histogram',\r\n    instanceConstructor: HistogramSeries,\r\n    seriesDefaults: {\r\n        axes: [\r\n            { type: CARTESIAN_AXIS_TYPES.NUMBER, position: CARTESIAN_AXIS_POSITIONS.BOTTOM },\r\n            { type: CARTESIAN_AXIS_TYPES.NUMBER, position: CARTESIAN_AXIS_POSITIONS.LEFT },\r\n        ],\r\n    },\r\n    themeTemplate: {\r\n        __extends__: EXTENDS_SERIES_DEFAULTS,\r\n        strokeWidth: 1,\r\n        fillOpacity: 1,\r\n        strokeOpacity: 1,\r\n        lineDash: [0],\r\n        lineDashOffset: 0,\r\n        label: {\r\n            enabled: false,\r\n            fontStyle: undefined,\r\n            fontWeight: undefined,\r\n            fontSize: 12,\r\n            fontFamily: DEFAULT_FONT_FAMILY,\r\n            color: DEFAULT_INSIDE_SERIES_LABEL_COLOUR,\r\n            formatter: undefined,\r\n        },\r\n        shadow: {\r\n            enabled: false,\r\n            color: DEFAULT_SHADOW_COLOUR,\r\n            xOffset: 3,\r\n            yOffset: 3,\r\n            blur: 5,\r\n        },\r\n    },\r\n    paletteFactory: ({ takeColors }) => {\r\n        const { fills: [fill], strokes: [stroke], } = takeColors(1);\r\n        return { fill, stroke };\r\n    },\r\n};\n\nclass LineSeries extends CartesianSeries {\r\n    constructor(moduleCtx) {\r\n        super({\r\n            moduleCtx,\r\n            hasMarkers: true,\r\n            pickModes: [\r\n                SeriesNodePickMode.NEAREST_BY_MAIN_CATEGORY_AXIS_FIRST,\r\n                SeriesNodePickMode.NEAREST_NODE,\r\n                SeriesNodePickMode.EXACT_SHAPE_MATCH,\r\n            ],\r\n            markerSelectionGarbageCollection: false,\r\n            animationResetFns: {\r\n                path: buildResetPathFn({ getOpacity: () => this.getOpacity() }),\r\n                label: resetLabelFn,\r\n                marker: (node, datum) => (Object.assign(Object.assign({}, resetMarkerFn()), resetMarkerPositionFn(node, datum))),\r\n            },\r\n        });\r\n        this.label = new Label();\r\n        this.marker = new SeriesMarker();\r\n        this.tooltip = new SeriesTooltip();\r\n        this.title = undefined;\r\n        this.stroke = '#874349';\r\n        this.lineDash = [0];\r\n        this.lineDashOffset = 0;\r\n        this.strokeWidth = 2;\r\n        this.strokeOpacity = 1;\r\n        this.xKey = undefined;\r\n        this.xName = undefined;\r\n        this.yKey = undefined;\r\n        this.yName = undefined;\r\n    }\r\n    processData(dataController) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const { xKey, yKey, data } = this;\r\n            if (xKey == null || yKey == null || data == null)\r\n                return;\r\n            const animationEnabled = !this.ctx.animationManager.isSkipped();\r\n            const { isContinuousX, isContinuousY } = this.isContinuous();\r\n            const props = [];\r\n            // If two or more datums share an x-value, i.e. lined up vertically, they will have the same datum id.\r\n            // They must be identified this way when animated to ensure they can be tracked when their y-value\r\n            // is updated. If this is a static chart, we can instead not bother with identifying datums and\r\n            // automatically garbage collect the marker selection.\r\n            if (!isContinuousX) {\r\n                props.push(keyProperty(this, xKey, isContinuousX, { id: 'xKey' }));\r\n                if (animationEnabled && this.processedData) {\r\n                    props.push(diff(this.processedData));\r\n                }\r\n            }\r\n            if (animationEnabled) {\r\n                props.push(animationValidation(this, isContinuousX ? ['xValue'] : []));\r\n            }\r\n            props.push(valueProperty(this, xKey, isContinuousX, { id: 'xValue' }), valueProperty(this, yKey, isContinuousY, { id: 'yValue', invalidValue: undefined }));\r\n            yield this.requestDataModel(dataController, data, { props });\r\n            this.animationState.transition('updateData');\r\n        });\r\n    }\r\n    getSeriesDomain(direction) {\r\n        const { axes, dataModel, processedData } = this;\r\n        if (!processedData || !dataModel)\r\n            return [];\r\n        const xAxis = axes[ChartAxisDirection.X];\r\n        const yAxis = axes[ChartAxisDirection.Y];\r\n        const xDef = dataModel.resolveProcessedDataDefById(this, `xValue`);\r\n        if (direction === ChartAxisDirection.X) {\r\n            const domain = dataModel.getDomain(this, `xValue`, 'value', processedData);\r\n            if ((xDef === null || xDef === void 0 ? void 0 : xDef.def.type) === 'value' && xDef.def.valueType === 'category') {\r\n                return domain;\r\n            }\r\n            return fixNumericExtent(extent(domain), xAxis);\r\n        }\r\n        else {\r\n            const domain = dataModel.getDomain(this, `yValue`, 'value', processedData);\r\n            return fixNumericExtent(domain, yAxis);\r\n        }\r\n    }\r\n    createNodeData() {\r\n        const _super = Object.create(null, {\r\n            calculateScaling: { get: () => super.calculateScaling }\r\n        });\r\n        var _a, _b, _c;\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const { processedData, dataModel, axes } = this;\r\n            const xAxis = axes[ChartAxisDirection.X];\r\n            const yAxis = axes[ChartAxisDirection.Y];\r\n            if (!processedData || !dataModel || !xAxis || !yAxis) {\r\n                return [];\r\n            }\r\n            const { label, yKey = '', xKey = '' } = this;\r\n            const xScale = xAxis.scale;\r\n            const yScale = yAxis.scale;\r\n            const xOffset = ((_a = xScale.bandwidth) !== null && _a !== void 0 ? _a : 0) / 2;\r\n            const yOffset = ((_b = yScale.bandwidth) !== null && _b !== void 0 ? _b : 0) / 2;\r\n            const nodeData = [];\r\n            const size = this.marker.enabled ? this.marker.size : 0;\r\n            const xIdx = dataModel.resolveProcessedDataIndexById(this, `xValue`).index;\r\n            const yIdx = dataModel.resolveProcessedDataIndexById(this, `yValue`).index;\r\n            let moveTo = true;\r\n            let nextPoint;\r\n            for (let i = 0; i < processedData.data.length; i++) {\r\n                const { datum, values } = nextPoint !== null && nextPoint !== void 0 ? nextPoint : processedData.data[i];\r\n                const xDatum = values[xIdx];\r\n                const yDatum = values[yIdx];\r\n                if (yDatum === undefined) {\r\n                    moveTo = true;\r\n                }\r\n                else {\r\n                    const x = xScale.convert(xDatum) + xOffset;\r\n                    if (isNaN(x)) {\r\n                        moveTo = true;\r\n                        nextPoint = undefined;\r\n                        continue;\r\n                    }\r\n                    nextPoint =\r\n                        ((_c = processedData.data[i + 1]) === null || _c === void 0 ? void 0 : _c.values[yIdx]) === undefined ? undefined : processedData.data[i + 1];\r\n                    const y = yScale.convert(yDatum) + yOffset;\r\n                    const labelText = this.getLabelText(label, {\r\n                        value: yDatum,\r\n                        datum,\r\n                        xKey,\r\n                        yKey,\r\n                        xName: this.xName,\r\n                        yName: this.yName,\r\n                    }, (value) => (isNumber(value) ? value.toFixed(2) : String(value)));\r\n                    nodeData.push({\r\n                        series: this,\r\n                        datum,\r\n                        yKey,\r\n                        xKey,\r\n                        point: { x, y, moveTo, size },\r\n                        midPoint: { x, y },\r\n                        yValue: yDatum,\r\n                        xValue: xDatum,\r\n                        capDefaults: { lengthRatioMultiplier: this.marker.getDiameter(), lengthMax: Infinity },\r\n                        label: labelText\r\n                            ? {\r\n                                text: labelText,\r\n                                fontStyle: label.fontStyle,\r\n                                fontWeight: label.fontWeight,\r\n                                fontSize: label.fontSize,\r\n                                fontFamily: label.fontFamily,\r\n                                textAlign: 'center',\r\n                                textBaseline: 'bottom',\r\n                                fill: label.color,\r\n                            }\r\n                            : undefined,\r\n                    });\r\n                    moveTo = false;\r\n                }\r\n            }\r\n            return [\r\n                {\r\n                    itemId: yKey,\r\n                    nodeData,\r\n                    labelData: nodeData,\r\n                    scales: _super.calculateScaling.call(this),\r\n                    visible: this.visible,\r\n                },\r\n            ];\r\n        });\r\n    }\r\n    isPathOrSelectionDirty() {\r\n        return this.marker.isDirty();\r\n    }\r\n    markerFactory() {\r\n        const { shape } = this.marker;\r\n        const MarkerShape = getMarker(shape);\r\n        return new MarkerShape();\r\n    }\r\n    updatePathNodes(opts) {\r\n        var _a, _b;\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const { paths: [lineNode], opacity, visible, animationEnabled, } = opts;\r\n            const { seriesRectHeight: height, seriesRectWidth: width } = this.nodeDataDependencies;\r\n            lineNode.setProperties({\r\n                fill: undefined,\r\n                lineJoin: 'round',\r\n                pointerEvents: PointerEvents.None,\r\n                opacity,\r\n                stroke: this.stroke,\r\n                strokeWidth: this.getStrokeWidth(this.strokeWidth),\r\n                strokeOpacity: this.strokeOpacity,\r\n                lineDash: this.lineDash,\r\n                lineDashOffset: this.lineDashOffset,\r\n            });\r\n            if (!animationEnabled) {\r\n                lineNode.visible = visible;\r\n            }\r\n            if (lineNode.clipPath == null) {\r\n                lineNode.clipPath = new Path2D();\r\n                lineNode.clipScalingX = 1;\r\n                lineNode.clipScalingY = 1;\r\n            }\r\n            (_a = lineNode.clipPath) === null || _a === void 0 ? void 0 : _a.clear({ trackChanges: true });\r\n            (_b = lineNode.clipPath) === null || _b === void 0 ? void 0 : _b.rect(-25, -25, (width !== null && width !== void 0 ? width : 0) + 50, (height !== null && height !== void 0 ? height : 0) + 50);\r\n        });\r\n    }\r\n    updateMarkerSelection(opts) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let { nodeData } = opts;\r\n            const { markerSelection } = opts;\r\n            const { shape, enabled } = this.marker;\r\n            nodeData = shape && enabled ? nodeData : [];\r\n            if (this.marker.isDirty()) {\r\n                markerSelection.clear();\r\n                markerSelection.cleanup();\r\n            }\r\n            return markerSelection.update(nodeData, undefined, (datum) => this.getDatumId(datum));\r\n        });\r\n    }\r\n    updateMarkerNodes(opts) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const { markerSelection, isHighlight: highlighted } = opts;\r\n            const { xKey = '', yKey = '', marker, stroke, strokeWidth, strokeOpacity } = this;\r\n            const baseStyle = mergeDefaults(highlighted && this.highlightStyle.item, marker.getStyle(), {\r\n                stroke,\r\n                strokeWidth,\r\n                strokeOpacity,\r\n            });\r\n            const applyTranslation = this.ctx.animationManager.isSkipped();\r\n            markerSelection.each((node, datum) => {\r\n                this.updateMarkerStyle(node, marker, { datum, highlighted, xKey, yKey }, baseStyle, { applyTranslation });\r\n            });\r\n            if (!highlighted) {\r\n                this.marker.markClean();\r\n            }\r\n        });\r\n    }\r\n    updateLabelSelection(opts) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let { labelData } = opts;\r\n            const { labelSelection } = opts;\r\n            const { shape, enabled } = this.marker;\r\n            labelData = shape && enabled ? labelData : [];\r\n            return labelSelection.update(labelData);\r\n        });\r\n    }\r\n    updateLabelNodes(opts) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const { labelSelection } = opts;\r\n            const { enabled: labelEnabled, fontStyle, fontWeight, fontSize, fontFamily, color } = this.label;\r\n            labelSelection.each((text, datum) => {\r\n                const { point, label } = datum;\r\n                if (datum && label && labelEnabled) {\r\n                    text.fontStyle = fontStyle;\r\n                    text.fontWeight = fontWeight;\r\n                    text.fontSize = fontSize;\r\n                    text.fontFamily = fontFamily;\r\n                    text.textAlign = label.textAlign;\r\n                    text.textBaseline = label.textBaseline;\r\n                    text.text = label.text;\r\n                    text.x = point.x;\r\n                    text.y = point.y - 10;\r\n                    text.fill = color;\r\n                    text.visible = true;\r\n                }\r\n                else {\r\n                    text.visible = false;\r\n                }\r\n            });\r\n        });\r\n    }\r\n    getTooltipHtml(nodeDatum) {\r\n        var _a;\r\n        const { xKey, yKey, axes } = this;\r\n        const xAxis = axes[ChartAxisDirection.X];\r\n        const yAxis = axes[ChartAxisDirection.Y];\r\n        if (!xKey || !yKey || !xAxis || !yAxis) {\r\n            return '';\r\n        }\r\n        const { xName, yName, tooltip, marker, id: seriesId } = this;\r\n        const { datum, xValue, yValue } = nodeDatum;\r\n        const xString = xAxis.formatDatum(xValue);\r\n        const yString = yAxis.formatDatum(yValue);\r\n        const title = sanitizeHtml((_a = this.title) !== null && _a !== void 0 ? _a : yName);\r\n        const content = sanitizeHtml(xString + ': ' + yString);\r\n        const baseStyle = mergeDefaults({ fill: marker.stroke }, marker.getStyle(), { strokeWidth: this.strokeWidth });\r\n        const { fill: color } = this.getMarkerStyle(marker, { datum: nodeDatum, xKey, yKey, highlighted: false }, baseStyle);\r\n        return tooltip.toTooltipHtml({ title, content, backgroundColor: color }, Object.assign({ datum,\r\n            xKey,\r\n            xName,\r\n            yKey,\r\n            yName,\r\n            title,\r\n            color,\r\n            seriesId }, this.getModuleTooltipParams(datum)));\r\n    }\r\n    getLegendData(legendType) {\r\n        var _a, _b, _c, _d, _e, _f, _g, _h;\r\n        const { id, data, xKey, yKey, yName, visible, title, marker, stroke, strokeOpacity } = this;\r\n        if (!((data === null || data === void 0 ? void 0 : data.length) && xKey && yKey && legendType === 'category')) {\r\n            return [];\r\n        }\r\n        return [\r\n            {\r\n                legendType: 'category',\r\n                id: id,\r\n                itemId: yKey,\r\n                seriesId: id,\r\n                enabled: visible,\r\n                label: {\r\n                    text: (_a = title !== null && title !== void 0 ? title : yName) !== null && _a !== void 0 ? _a : yKey,\r\n                },\r\n                marker: {\r\n                    shape: marker.shape,\r\n                    fill: (_b = marker.fill) !== null && _b !== void 0 ? _b : 'rgba(0, 0, 0, 0)',\r\n                    stroke: (_d = (_c = marker.stroke) !== null && _c !== void 0 ? _c : stroke) !== null && _d !== void 0 ? _d : 'rgba(0, 0, 0, 0)',\r\n                    fillOpacity: (_e = marker.fillOpacity) !== null && _e !== void 0 ? _e : 1,\r\n                    strokeOpacity: (_g = (_f = marker.strokeOpacity) !== null && _f !== void 0 ? _f : strokeOpacity) !== null && _g !== void 0 ? _g : 1,\r\n                    strokeWidth: (_h = marker.strokeWidth) !== null && _h !== void 0 ? _h : 0,\r\n                },\r\n            },\r\n        ];\r\n    }\r\n    updatePaths(opts) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            this.updateLinePaths([opts.paths], [opts.contextData]);\r\n        });\r\n    }\r\n    updateLinePaths(paths, contextData) {\r\n        contextData.forEach(({ nodeData }, contextDataIndex) => {\r\n            const [lineNode] = paths[contextDataIndex];\r\n            const { path: linePath } = lineNode;\r\n            linePath.clear({ trackChanges: true });\r\n            for (const data of nodeData) {\r\n                if (data.point.moveTo) {\r\n                    linePath.moveTo(data.point.x, data.point.y);\r\n                }\r\n                else {\r\n                    linePath.lineTo(data.point.x, data.point.y);\r\n                }\r\n            }\r\n            lineNode.checkPathDirty();\r\n        });\r\n    }\r\n    animateEmptyUpdateReady(animationData) {\r\n        const { markerSelections, labelSelections, annotationSelections, contextData, paths } = animationData;\r\n        const { animationManager } = this.ctx;\r\n        const { seriesRectWidth: width = 0 } = this.nodeDataDependencies;\r\n        this.updateLinePaths(paths, contextData);\r\n        pathSwipeInAnimation(this, animationManager, paths.flat());\r\n        resetMotion(markerSelections, resetMarkerPositionFn);\r\n        markerSwipeScaleInAnimation(this, animationManager, markerSelections, width);\r\n        seriesLabelFadeInAnimation(this, 'labels', animationManager, labelSelections);\r\n        seriesLabelFadeInAnimation(this, 'annotations', animationManager, annotationSelections);\r\n    }\r\n    animateReadyResize(animationData) {\r\n        const { contextData, paths } = animationData;\r\n        this.updateLinePaths(paths, contextData);\r\n        super.animateReadyResize(animationData);\r\n    }\r\n    animateWaitingUpdateReady(animationData) {\r\n        var _a, _b;\r\n        const { animationManager } = this.ctx;\r\n        const { markerSelections, labelSelections, annotationSelections, contextData, paths, previousContextData } = animationData;\r\n        super.resetAllAnimation(animationData);\r\n        if (contextData.length === 0 || !previousContextData || previousContextData.length === 0) {\r\n            animationManager.skipCurrentBatch();\r\n            this.updateLinePaths(paths, contextData);\r\n            return;\r\n        }\r\n        const [path] = paths;\r\n        const [newData] = contextData;\r\n        const [oldData] = previousContextData;\r\n        const fns = prepareLinePathAnimation(newData, oldData, (_b = (_a = this.processedData) === null || _a === void 0 ? void 0 : _a.reduced) === null || _b === void 0 ? void 0 : _b.diff);\r\n        if (fns === undefined) {\r\n            animationManager.skipCurrentBatch();\r\n            this.updateLinePaths(paths, contextData);\r\n            return;\r\n        }\r\n        fromToMotion(this.id, 'marker', animationManager, markerSelections, fns.marker);\r\n        fromToMotion(this.id, 'path_properties', animationManager, path, fns.pathProperties);\r\n        pathMotion(this.id, 'path_update', animationManager, path, fns.path);\r\n        seriesLabelFadeInAnimation(this, 'labels', animationManager, labelSelections);\r\n        seriesLabelFadeInAnimation(this, 'annotations', animationManager, annotationSelections);\r\n    }\r\n    getDatumId(datum) {\r\n        return createDatumId([`${datum.xValue}`]);\r\n    }\r\n    isLabelEnabled() {\r\n        return this.label.enabled;\r\n    }\r\n    getBandScalePadding() {\r\n        return { inner: 1, outer: 0.1 };\r\n    }\r\n    nodeFactory() {\r\n        return new Group();\r\n    }\r\n}\r\nLineSeries.className = 'LineSeries';\r\nLineSeries.type = 'line';\r\n__decorate([\r\n    Validate(OPT_STRING),\r\n    __metadata(\"design:type\", String)\r\n], LineSeries.prototype, \"title\", void 0);\r\n__decorate([\r\n    Validate(OPT_COLOR_STRING),\r\n    __metadata(\"design:type\", String)\r\n], LineSeries.prototype, \"stroke\", void 0);\r\n__decorate([\r\n    Validate(OPT_LINE_DASH),\r\n    __metadata(\"design:type\", Array)\r\n], LineSeries.prototype, \"lineDash\", void 0);\r\n__decorate([\r\n    Validate(NUMBER$1(0)),\r\n    __metadata(\"design:type\", Number)\r\n], LineSeries.prototype, \"lineDashOffset\", void 0);\r\n__decorate([\r\n    Validate(NUMBER$1(0)),\r\n    __metadata(\"design:type\", Number)\r\n], LineSeries.prototype, \"strokeWidth\", void 0);\r\n__decorate([\r\n    Validate(NUMBER$1(0, 1)),\r\n    __metadata(\"design:type\", Number)\r\n], LineSeries.prototype, \"strokeOpacity\", void 0);\r\n__decorate([\r\n    Validate(OPT_STRING),\r\n    __metadata(\"design:type\", String)\r\n], LineSeries.prototype, \"xKey\", void 0);\r\n__decorate([\r\n    Validate(OPT_STRING),\r\n    __metadata(\"design:type\", String)\r\n], LineSeries.prototype, \"xName\", void 0);\r\n__decorate([\r\n    Validate(OPT_STRING),\r\n    __metadata(\"design:type\", String)\r\n], LineSeries.prototype, \"yKey\", void 0);\r\n__decorate([\r\n    Validate(OPT_STRING),\r\n    __metadata(\"design:type\", String)\r\n], LineSeries.prototype, \"yName\", void 0);\n\nconst LineSeriesModule = {\r\n    type: 'series',\r\n    optionsKey: 'series[]',\r\n    packageType: 'community',\r\n    chartTypes: ['cartesian'],\r\n    identifier: 'line',\r\n    instanceConstructor: LineSeries,\r\n    seriesDefaults: DEFAULT_CARTESIAN_CHART_OVERRIDES,\r\n    themeTemplate: {\r\n        __extends__: EXTENDS_SERIES_DEFAULTS,\r\n        tooltip: {\r\n            position: {\r\n                type: 'node',\r\n            },\r\n        },\r\n        strokeWidth: 2,\r\n        strokeOpacity: 1,\r\n        lineDash: [0],\r\n        lineDashOffset: 0,\r\n        marker: {\r\n            __extends__: EXTENDS_CARTESIAN_MARKER_DEFAULTS,\r\n            fillOpacity: 1,\r\n            strokeOpacity: 1,\r\n            strokeWidth: 0,\r\n        },\r\n        label: {\r\n            enabled: false,\r\n            fontStyle: undefined,\r\n            fontWeight: undefined,\r\n            fontSize: 12,\r\n            fontFamily: DEFAULT_FONT_FAMILY,\r\n            color: DEFAULT_LABEL_COLOUR,\r\n            formatter: undefined,\r\n        },\r\n    },\r\n    enterpriseThemeTemplate: {\r\n        errorBar: {\r\n            cap: {\r\n                lengthRatio: 1,\r\n            },\r\n        },\r\n    },\r\n    paletteFactory: (params) => {\r\n        const { marker } = markerPaletteFactory(params);\r\n        return {\r\n            stroke: marker.fill,\r\n            marker,\r\n        };\r\n    },\r\n};\n\nclass ScatterSeries extends CartesianSeries {\r\n    constructor(moduleCtx) {\r\n        super({\r\n            moduleCtx,\r\n            pickModes: [\r\n                SeriesNodePickMode.NEAREST_BY_MAIN_CATEGORY_AXIS_FIRST,\r\n                SeriesNodePickMode.NEAREST_NODE,\r\n                SeriesNodePickMode.EXACT_SHAPE_MATCH,\r\n            ],\r\n            pathsPerSeries: 0,\r\n            hasMarkers: true,\r\n            markerSelectionGarbageCollection: false,\r\n            animationResetFns: {\r\n                marker: resetMarkerFn,\r\n                label: resetLabelFn,\r\n            },\r\n        });\r\n        this.marker = new SeriesMarker();\r\n        this.label = new Label();\r\n        this.title = undefined;\r\n        this.labelKey = undefined;\r\n        this.xName = undefined;\r\n        this.yName = undefined;\r\n        this.labelName = 'Label';\r\n        this.xKey = undefined;\r\n        this.yKey = undefined;\r\n        this.colorKey = undefined;\r\n        this.colorName = 'Color';\r\n        this.colorRange = ['#ffff00', '#00ff00', '#0000ff'];\r\n        this.colorScale = new ColorScale();\r\n        this.tooltip = new SeriesTooltip();\r\n    }\r\n    processData(dataController) {\r\n        var _a;\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const { xKey, yKey, labelKey, data } = this;\r\n            if (xKey == null || yKey == null || data == null)\r\n                return;\r\n            const { isContinuousX, isContinuousY } = this.isContinuous();\r\n            const { colorScale, colorDomain, colorRange, colorKey } = this;\r\n            const { dataModel, processedData } = yield this.requestDataModel(dataController, data, {\r\n                props: [\r\n                    keyProperty(this, xKey, isContinuousX, { id: 'xKey-raw' }),\r\n                    keyProperty(this, yKey, isContinuousY, { id: 'yKey-raw' }),\r\n                    ...(labelKey ? [keyProperty(this, labelKey, false, { id: `labelKey-raw` })] : []),\r\n                    valueProperty(this, xKey, isContinuousX, { id: `xValue` }),\r\n                    valueProperty(this, yKey, isContinuousY, { id: `yValue` }),\r\n                    ...(colorKey ? [valueProperty(this, colorKey, true, { id: `colorValue` })] : []),\r\n                    ...(labelKey ? [valueProperty(this, labelKey, false, { id: `labelValue` })] : []),\r\n                ],\r\n                dataVisible: this.visible,\r\n            });\r\n            if (colorKey) {\r\n                const colorKeyIdx = dataModel.resolveProcessedDataIndexById(this, `colorValue`).index;\r\n                colorScale.domain = (_a = colorDomain !== null && colorDomain !== void 0 ? colorDomain : processedData.domain.values[colorKeyIdx]) !== null && _a !== void 0 ? _a : [];\r\n                colorScale.range = colorRange;\r\n                colorScale.update();\r\n            }\r\n            this.animationState.transition('updateData');\r\n        });\r\n    }\r\n    getSeriesDomain(direction) {\r\n        const { dataModel, processedData } = this;\r\n        if (!processedData || !dataModel)\r\n            return [];\r\n        const id = direction === ChartAxisDirection.X ? `xValue` : `yValue`;\r\n        const dataDef = dataModel.resolveProcessedDataDefById(this, id);\r\n        const domain = dataModel.getDomain(this, id, 'value', processedData);\r\n        if ((dataDef === null || dataDef === void 0 ? void 0 : dataDef.def.type) === 'value' && (dataDef === null || dataDef === void 0 ? void 0 : dataDef.def.valueType) === 'category') {\r\n            return domain;\r\n        }\r\n        const axis = this.axes[direction];\r\n        return fixNumericExtent(extent(domain), axis);\r\n    }\r\n    createNodeData() {\r\n        const _super = Object.create(null, {\r\n            calculateScaling: { get: () => super.calculateScaling }\r\n        });\r\n        var _a, _b, _c, _d;\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const { visible, axes, yKey = '', xKey = '', label, labelKey, dataModel, processedData } = this;\r\n            const xAxis = axes[ChartAxisDirection.X];\r\n            const yAxis = axes[ChartAxisDirection.Y];\r\n            if (!(dataModel && processedData && visible && xAxis && yAxis))\r\n                return [];\r\n            const xDataIdx = dataModel.resolveProcessedDataIndexById(this, `xValue`).index;\r\n            const yDataIdx = dataModel.resolveProcessedDataIndexById(this, `yValue`).index;\r\n            const colorDataIdx = this.colorKey ? dataModel.resolveProcessedDataIndexById(this, `colorValue`).index : -1;\r\n            const labelDataIdx = this.labelKey ? dataModel.resolveProcessedDataIndexById(this, `labelValue`).index : -1;\r\n            const { colorScale, colorKey } = this;\r\n            const xScale = xAxis.scale;\r\n            const yScale = yAxis.scale;\r\n            const xOffset = ((_a = xScale.bandwidth) !== null && _a !== void 0 ? _a : 0) / 2;\r\n            const yOffset = ((_b = yScale.bandwidth) !== null && _b !== void 0 ? _b : 0) / 2;\r\n            const { marker } = this;\r\n            const nodeData = [];\r\n            const font = label.getFont();\r\n            for (const { values, datum } of (_c = processedData.data) !== null && _c !== void 0 ? _c : []) {\r\n                const xDatum = values[xDataIdx];\r\n                const yDatum = values[yDataIdx];\r\n                const x = xScale.convert(xDatum) + xOffset;\r\n                const y = yScale.convert(yDatum) + yOffset;\r\n                const labelText = this.getLabelText(this.label, {\r\n                    value: labelKey ? values[labelDataIdx] : yDatum,\r\n                    datum,\r\n                    xKey,\r\n                    yKey,\r\n                    labelKey,\r\n                    xName: this.xName,\r\n                    yName: this.yName,\r\n                    labelName: this.labelName,\r\n                });\r\n                const size = HdpiCanvas.getTextSize(labelText, font);\r\n                const fill = colorKey ? colorScale.convert(values[colorDataIdx]) : undefined;\r\n                nodeData.push({\r\n                    series: this,\r\n                    itemId: yKey,\r\n                    yKey,\r\n                    xKey,\r\n                    datum,\r\n                    xValue: xDatum,\r\n                    yValue: yDatum,\r\n                    capDefaults: { lengthRatioMultiplier: this.marker.getDiameter(), lengthMax: Infinity },\r\n                    point: { x, y, size: marker.size },\r\n                    midPoint: { x, y },\r\n                    fill,\r\n                    label: Object.assign({ text: labelText }, size),\r\n                });\r\n            }\r\n            return [\r\n                {\r\n                    itemId: (_d = this.yKey) !== null && _d !== void 0 ? _d : this.id,\r\n                    nodeData,\r\n                    labelData: nodeData,\r\n                    scales: _super.calculateScaling.call(this),\r\n                    visible: this.visible,\r\n                },\r\n            ];\r\n        });\r\n    }\r\n    isPathOrSelectionDirty() {\r\n        return this.marker.isDirty();\r\n    }\r\n    getLabelData() {\r\n        var _a;\r\n        return (_a = this.contextNodeData) === null || _a === void 0 ? void 0 : _a.reduce((r, n) => r.concat(n.labelData), []);\r\n    }\r\n    markerFactory() {\r\n        const { shape } = this.marker;\r\n        const MarkerShape = getMarker(shape);\r\n        return new MarkerShape();\r\n    }\r\n    updateMarkerSelection(opts) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const { nodeData, markerSelection } = opts;\r\n            const { marker: { enabled }, } = this;\r\n            if (this.marker.isDirty()) {\r\n                markerSelection.clear();\r\n                markerSelection.cleanup();\r\n            }\r\n            const data = enabled ? nodeData : [];\r\n            return markerSelection.update(data);\r\n        });\r\n    }\r\n    updateMarkerNodes(opts) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const { xKey = '', yKey = '', labelKey, marker } = this;\r\n            const { markerSelection, isHighlight: highlighted } = opts;\r\n            const baseStyle = mergeDefaults(highlighted && this.highlightStyle.item, marker.getStyle());\r\n            markerSelection.each((node, datum) => {\r\n                this.updateMarkerStyle(node, marker, { datum, highlighted, xKey, yKey, labelKey }, baseStyle);\r\n            });\r\n            if (!highlighted) {\r\n                this.marker.markClean();\r\n            }\r\n        });\r\n    }\r\n    updateLabelSelection(opts) {\r\n        var _a, _b;\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const { labelSelection } = opts;\r\n            const { label: { enabled }, } = this;\r\n            const placedLabels = enabled ? (_b = (_a = this.chart) === null || _a === void 0 ? void 0 : _a.placeLabels().get(this)) !== null && _b !== void 0 ? _b : [] : [];\r\n            const placedNodeDatum = placedLabels.map((v) => (Object.assign(Object.assign({}, v.datum), { point: {\r\n                    x: v.x,\r\n                    y: v.y,\r\n                    size: v.datum.point.size,\r\n                } })));\r\n            return labelSelection.update(placedNodeDatum);\r\n        });\r\n    }\r\n    updateLabelNodes(opts) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const { labelSelection } = opts;\r\n            const { label } = this;\r\n            labelSelection.each((text, datum) => {\r\n                var _a, _b, _c, _d;\r\n                text.text = datum.label.text;\r\n                text.fill = label.color;\r\n                text.x = (_b = (_a = datum.point) === null || _a === void 0 ? void 0 : _a.x) !== null && _b !== void 0 ? _b : 0;\r\n                text.y = (_d = (_c = datum.point) === null || _c === void 0 ? void 0 : _c.y) !== null && _d !== void 0 ? _d : 0;\r\n                text.fontStyle = label.fontStyle;\r\n                text.fontWeight = label.fontWeight;\r\n                text.fontSize = label.fontSize;\r\n                text.fontFamily = label.fontFamily;\r\n                text.textAlign = 'left';\r\n                text.textBaseline = 'top';\r\n            });\r\n        });\r\n    }\r\n    getTooltipHtml(nodeDatum) {\r\n        const { xKey, yKey, axes } = this;\r\n        const xAxis = axes[ChartAxisDirection.X];\r\n        const yAxis = axes[ChartAxisDirection.Y];\r\n        if (!xKey || !yKey || !xAxis || !yAxis) {\r\n            return '';\r\n        }\r\n        const { marker, tooltip, xName, yName, labelKey, labelName, id: seriesId, title = yName } = this;\r\n        const baseStyle = mergeDefaults({ fill: nodeDatum.fill, strokeWidth: this.getStrokeWidth(marker.strokeWidth) }, marker.getStyle());\r\n        const { fill: color = 'gray' } = this.getMarkerStyle(marker, { datum: nodeDatum, highlighted: false, xKey, yKey, labelKey }, baseStyle);\r\n        const { datum, xValue, yValue, label } = nodeDatum;\r\n        const xString = sanitizeHtml(xAxis.formatDatum(xValue));\r\n        const yString = sanitizeHtml(yAxis.formatDatum(yValue));\r\n        let content = `<b>${sanitizeHtml(xName !== null && xName !== void 0 ? xName : xKey)}</b>: ${xString}<br>` +\r\n            `<b>${sanitizeHtml(yName !== null && yName !== void 0 ? yName : yKey)}</b>: ${yString}`;\r\n        if (labelKey) {\r\n            content = `<b>${sanitizeHtml(labelName !== null && labelName !== void 0 ? labelName : labelKey)}</b>: ${sanitizeHtml(label.text)}<br>` + content;\r\n        }\r\n        return tooltip.toTooltipHtml({ title, content, backgroundColor: color }, Object.assign({ datum,\r\n            xKey,\r\n            xName,\r\n            yKey,\r\n            yName,\r\n            labelKey,\r\n            labelName,\r\n            title,\r\n            color,\r\n            seriesId }, this.getModuleTooltipParams(datum)));\r\n    }\r\n    getLegendData(legendType) {\r\n        var _a, _b, _c, _d, _e;\r\n        const { id, data, xKey, yKey, yName, title, visible, marker } = this;\r\n        const { fill, stroke, fillOpacity, strokeOpacity, strokeWidth } = marker;\r\n        if (!((data === null || data === void 0 ? void 0 : data.length) && xKey && yKey && legendType === 'category')) {\r\n            return [];\r\n        }\r\n        return [\r\n            {\r\n                legendType: 'category',\r\n                id,\r\n                itemId: yKey,\r\n                seriesId: id,\r\n                enabled: visible,\r\n                label: {\r\n                    text: (_a = title !== null && title !== void 0 ? title : yName) !== null && _a !== void 0 ? _a : yKey,\r\n                },\r\n                marker: {\r\n                    shape: marker.shape,\r\n                    fill: (_c = (_b = marker.fill) !== null && _b !== void 0 ? _b : fill) !== null && _c !== void 0 ? _c : 'rgba(0, 0, 0, 0)',\r\n                    stroke: (_e = (_d = marker.stroke) !== null && _d !== void 0 ? _d : stroke) !== null && _e !== void 0 ? _e : 'rgba(0, 0, 0, 0)',\r\n                    fillOpacity: fillOpacity !== null && fillOpacity !== void 0 ? fillOpacity : 1,\r\n                    strokeOpacity: strokeOpacity !== null && strokeOpacity !== void 0 ? strokeOpacity : 1,\r\n                    strokeWidth: strokeWidth !== null && strokeWidth !== void 0 ? strokeWidth : 0,\r\n                },\r\n            },\r\n        ];\r\n    }\r\n    animateEmptyUpdateReady(data) {\r\n        const { markerSelections, labelSelections, annotationSelections } = data;\r\n        markerScaleInAnimation(this, this.ctx.animationManager, markerSelections);\r\n        seriesLabelFadeInAnimation(this, 'labels', this.ctx.animationManager, labelSelections);\r\n        seriesLabelFadeInAnimation(this, 'annotations', this.ctx.animationManager, annotationSelections);\r\n    }\r\n    isLabelEnabled() {\r\n        return this.label.enabled;\r\n    }\r\n    nodeFactory() {\r\n        return new Group();\r\n    }\r\n}\r\nScatterSeries.className = 'ScatterSeries';\r\nScatterSeries.type = 'scatter';\r\n__decorate([\r\n    Validate(OPT_STRING),\r\n    __metadata(\"design:type\", String)\r\n], ScatterSeries.prototype, \"title\", void 0);\r\n__decorate([\r\n    Validate(OPT_STRING),\r\n    __metadata(\"design:type\", String)\r\n], ScatterSeries.prototype, \"labelKey\", void 0);\r\n__decorate([\r\n    Validate(OPT_STRING),\r\n    __metadata(\"design:type\", String)\r\n], ScatterSeries.prototype, \"xName\", void 0);\r\n__decorate([\r\n    Validate(OPT_STRING),\r\n    __metadata(\"design:type\", String)\r\n], ScatterSeries.prototype, \"yName\", void 0);\r\n__decorate([\r\n    Validate(OPT_STRING),\r\n    __metadata(\"design:type\", String)\r\n], ScatterSeries.prototype, \"labelName\", void 0);\r\n__decorate([\r\n    Validate(OPT_STRING),\r\n    __metadata(\"design:type\", String)\r\n], ScatterSeries.prototype, \"xKey\", void 0);\r\n__decorate([\r\n    Validate(OPT_STRING),\r\n    __metadata(\"design:type\", String)\r\n], ScatterSeries.prototype, \"yKey\", void 0);\r\n__decorate([\r\n    Validate(OPT_STRING),\r\n    __metadata(\"design:type\", String)\r\n], ScatterSeries.prototype, \"colorKey\", void 0);\r\n__decorate([\r\n    Validate(OPT_STRING),\r\n    __metadata(\"design:type\", String)\r\n], ScatterSeries.prototype, \"colorName\", void 0);\r\n__decorate([\r\n    Validate(OPT_NUMBER_ARRAY),\r\n    __metadata(\"design:type\", Array)\r\n], ScatterSeries.prototype, \"colorDomain\", void 0);\r\n__decorate([\r\n    Validate(COLOR_STRING_ARRAY),\r\n    __metadata(\"design:type\", Array)\r\n], ScatterSeries.prototype, \"colorRange\", void 0);\n\nconst ScatterSeriesModule = {\r\n    type: 'series',\r\n    optionsKey: 'series[]',\r\n    packageType: 'community',\r\n    chartTypes: ['cartesian'],\r\n    identifier: 'scatter',\r\n    instanceConstructor: ScatterSeries,\r\n    seriesDefaults: {\r\n        axes: [\r\n            { type: CARTESIAN_AXIS_TYPES.NUMBER, position: CARTESIAN_AXIS_POSITIONS.BOTTOM },\r\n            { type: CARTESIAN_AXIS_TYPES.NUMBER, position: CARTESIAN_AXIS_POSITIONS.LEFT },\r\n        ],\r\n    },\r\n    themeTemplate: {\r\n        __extends__: EXTENDS_SERIES_DEFAULTS,\r\n        tooltip: {\r\n            position: {\r\n                type: 'node',\r\n            },\r\n        },\r\n        marker: {\r\n            __extends__: EXTENDS_CARTESIAN_MARKER_DEFAULTS,\r\n            fillOpacity: 0.8,\r\n        },\r\n        label: {\r\n            enabled: false,\r\n            fontStyle: undefined,\r\n            fontWeight: undefined,\r\n            fontSize: 12,\r\n            fontFamily: DEFAULT_FONT_FAMILY,\r\n            color: DEFAULT_LABEL_COLOUR,\r\n        },\r\n    },\r\n    enterpriseThemeTemplate: {\r\n        errorBar: {\r\n            cap: {\r\n                lengthRatio: 1,\r\n            },\r\n        },\r\n    },\r\n    paletteFactory: markerPaletteFactory,\r\n};\n\nconst PieSeriesModule = {\r\n    type: 'series',\r\n    optionsKey: 'series[]',\r\n    packageType: 'community',\r\n    chartTypes: ['polar'],\r\n    identifier: 'pie',\r\n    instanceConstructor: PieSeries,\r\n    seriesDefaults: {},\r\n    themeTemplate: {\r\n        __extends__: EXTENDS_SERIES_DEFAULTS,\r\n        title: {\r\n            enabled: true,\r\n            fontStyle: undefined,\r\n            fontWeight: NORMAL,\r\n            fontSize: 14,\r\n            fontFamily: DEFAULT_FONT_FAMILY,\r\n            color: DEFAULT_MUTED_LABEL_COLOUR,\r\n            spacing: 5,\r\n        },\r\n        calloutLabel: {\r\n            enabled: true,\r\n            fontStyle: undefined,\r\n            fontWeight: undefined,\r\n            fontSize: 12,\r\n            fontFamily: DEFAULT_FONT_FAMILY,\r\n            color: DEFAULT_LABEL_COLOUR,\r\n            offset: 3,\r\n            minAngle: 0,\r\n        },\r\n        sectorLabel: {\r\n            enabled: true,\r\n            fontStyle: undefined,\r\n            fontWeight: NORMAL,\r\n            fontSize: 12,\r\n            fontFamily: DEFAULT_FONT_FAMILY,\r\n            color: DEFAULT_INSIDE_SERIES_LABEL_COLOUR,\r\n            positionOffset: 0,\r\n            positionRatio: 0.5,\r\n        },\r\n        calloutLine: {\r\n            length: 10,\r\n            strokeWidth: 2,\r\n        },\r\n        fillOpacity: 1,\r\n        strokeOpacity: 1,\r\n        strokeWidth: 1,\r\n        lineDash: [0],\r\n        lineDashOffset: 0,\r\n        rotation: 0,\r\n        outerRadiusOffset: 0,\r\n        innerRadiusOffset: 0,\r\n        shadow: {\r\n            enabled: false,\r\n            color: DEFAULT_SHADOW_COLOUR,\r\n            xOffset: 3,\r\n            yOffset: 3,\r\n            blur: 5,\r\n        },\r\n        innerLabels: {\r\n            fontStyle: undefined,\r\n            fontWeight: undefined,\r\n            fontSize: 12,\r\n            fontFamily: DEFAULT_FONT_FAMILY,\r\n            color: DEFAULT_LABEL_COLOUR,\r\n            margin: 2,\r\n        },\r\n    },\r\n    paletteFactory: ({ takeColors, colorsCount, userPalette }) => {\r\n        const { fills, strokes } = takeColors(colorsCount);\r\n        return {\r\n            fills,\r\n            strokes: userPalette ? strokes : [DEFAULT_POLAR_SERIES_STROKE],\r\n            calloutLine: {\r\n                colors: strokes,\r\n            },\r\n        };\r\n    },\r\n};\n\nfunction registerInbuiltModules() {\r\n    registerModule(BackgroundModule);\r\n    registerModule(NavigatorModule);\r\n    registerModule(AreaSeriesModule);\r\n    registerModule(BarSeriesModule);\r\n    registerModule(BubbleSeriesModule);\r\n    registerModule(LineSeriesModule);\r\n    registerModule(ScatterSeriesModule);\r\n    registerModule(PieSeriesModule);\r\n    registerModule(HistogramSeriesModule);\r\n}\n\nfunction invertShapeDirection(...supportedShapes) {\r\n    for (const shape of supportedShapes) {\r\n        if (shape instanceof Rect) {\r\n            const { x, y, width, height } = shape;\r\n            shape.setProperties({ x: y, y: x, width: height, height: width });\r\n        }\r\n        else if (shape instanceof Line) {\r\n            const { x1, y1, x2, y2 } = shape;\r\n            shape.setProperties({ x1: y1, y1: x1, x2: y2, y2: x2 });\r\n        }\r\n    }\r\n}\n\nclass HierarchyNode {\r\n    constructor(series, index, datum, size, colorValue, fill, stroke, sumSize, depth, parent, children) {\r\n        this.series = series;\r\n        this.index = index;\r\n        this.datum = datum;\r\n        this.size = size;\r\n        this.colorValue = colorValue;\r\n        this.fill = fill;\r\n        this.stroke = stroke;\r\n        this.sumSize = sumSize;\r\n        this.depth = depth;\r\n        this.parent = parent;\r\n        this.children = children;\r\n        this.midPoint = { x: 0, y: 0 };\r\n    }\r\n    contains(other) {\r\n        let current = other;\r\n        // Index check is a performance optimization - it does not affect correctness\r\n        while (current != null && current.index >= this.index) {\r\n            if (current === this) {\r\n                return true;\r\n            }\r\n            current = current.parent;\r\n        }\r\n        return false;\r\n    }\r\n    walk(callback, order = HierarchyNode.Walk.PreOrder) {\r\n        if (order === HierarchyNode.Walk.PreOrder) {\r\n            callback(this);\r\n        }\r\n        this.children.forEach((child) => {\r\n            child.walk(callback, order);\r\n        });\r\n        if (order === HierarchyNode.Walk.PostOrder) {\r\n            callback(this);\r\n        }\r\n    }\r\n    *[Symbol.iterator]() {\r\n        yield this;\r\n        for (const child of this.children) {\r\n            yield* child;\r\n        }\r\n    }\r\n}\r\nHierarchyNode.Walk = {\r\n    PreOrder: 0,\r\n    PostOrder: 1,\r\n};\r\nclass HierarchySeries extends Series {\r\n    constructor(moduleCtx) {\r\n        super({\r\n            moduleCtx,\r\n            pickModes: [SeriesNodePickMode.EXACT_SHAPE_MATCH],\r\n            contentGroupVirtual: false,\r\n        });\r\n        this.childrenKey = 'children';\r\n        this.sizeKey = undefined;\r\n        this.colorKey = undefined;\r\n        this.colorName = undefined;\r\n        this.fills = Object.values(DEFAULT_FILLS);\r\n        this.strokes = Object.values(DEFAULT_STROKES);\r\n        this.colorRange = undefined;\r\n        this.rootNode = new HierarchyNode(this, 0, undefined, 0, undefined, undefined, undefined, 0, undefined, undefined, []);\r\n        this.colorDomain = [0, 0];\r\n        this.maxDepth = 0;\r\n        this.animationState = new StateMachine('empty', {\r\n            empty: {\r\n                update: {\r\n                    target: 'ready',\r\n                    action: (data) => this.animateEmptyUpdateReady(data),\r\n                },\r\n            },\r\n            ready: {\r\n                updateData: 'waiting',\r\n                clear: 'clearing',\r\n                highlight: (data) => this.animateReadyHighlight(data),\r\n                resize: (data) => this.animateReadyResize(data),\r\n            },\r\n            waiting: {\r\n                update: {\r\n                    target: 'ready',\r\n                    action: (data) => this.animateWaitingUpdateReady(data),\r\n                },\r\n            },\r\n            clearing: {\r\n                update: {\r\n                    target: 'empty',\r\n                    action: (data) => this.animateClearingUpdateEmpty(data),\r\n                },\r\n            },\r\n        }, () => this.checkProcessedDataAnimatable());\r\n    }\r\n    hasData() {\r\n        return Array.isArray(this.data) && this.data.length > 0;\r\n    }\r\n    processData() {\r\n        var _a, _b;\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const { childrenKey, sizeKey, colorKey, fills, strokes, colorRange } = this;\r\n            let index = 0;\r\n            const getIndex = () => {\r\n                index += 1;\r\n                return index;\r\n            };\r\n            let maxDepth = 0;\r\n            let minColor = Infinity;\r\n            let maxColor = -Infinity;\r\n            const colors = new Array(((_b = (_a = this.data) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0) + 1).fill(undefined);\r\n            const createNode = (datum, parent) => {\r\n                const index = getIndex();\r\n                const depth = parent.depth != null ? parent.depth + 1 : 0;\r\n                const children = childrenKey != null ? datum[childrenKey] : undefined;\r\n                const isLeaf = children == null || children.length === 0;\r\n                let size = sizeKey != null ? datum[sizeKey] : undefined;\r\n                if (Number.isFinite(size)) {\r\n                    size = Math.max(size, 0);\r\n                }\r\n                else {\r\n                    size = isLeaf ? 1 : 0;\r\n                }\r\n                const sumSize = size;\r\n                maxDepth = Math.max(maxDepth, depth);\r\n                const color = colorKey != null ? datum[colorKey] : undefined;\r\n                if (typeof color === 'number') {\r\n                    colors[index] = color;\r\n                    minColor = Math.min(minColor, color);\r\n                    maxColor = Math.max(maxColor, color);\r\n                }\r\n                return appendChildren(new HierarchyNode(this, index, datum, size, color, undefined, undefined, sumSize, depth, parent, []), children);\r\n            };\r\n            const appendChildren = (node, data) => {\r\n                data === null || data === void 0 ? void 0 : data.forEach((datum) => {\r\n                    const child = createNode(datum, node);\r\n                    node.children.push(child);\r\n                    node.sumSize += child.sumSize;\r\n                });\r\n                return node;\r\n            };\r\n            const rootNode = appendChildren(new HierarchyNode(this, 0, undefined, 0, undefined, undefined, undefined, 0, undefined, undefined, []), this.data);\r\n            const colorDomain = [minColor, maxColor];\r\n            let colorScale;\r\n            if (colorRange != null && Number.isFinite(minColor) && Number.isFinite(maxColor)) {\r\n                colorScale = new ColorScale();\r\n                colorScale.domain = colorDomain;\r\n                colorScale.range = colorRange;\r\n                colorScale.update();\r\n            }\r\n            rootNode.children.forEach((child, index) => {\r\n                child.walk((node) => {\r\n                    let fill;\r\n                    const color = colors[node.index];\r\n                    if (color != null) {\r\n                        fill = colorScale === null || colorScale === void 0 ? void 0 : colorScale.convert(color);\r\n                    }\r\n                    fill !== null && fill !== void 0 ? fill : (fill = fills === null || fills === void 0 ? void 0 : fills[index % fills.length]);\r\n                    node.fill = fill;\r\n                    // FIXME: If there's a color scale, the strokes won't make sense. For now, just hard-code this default\r\n                    node.stroke = colorScale == null ? strokes === null || strokes === void 0 ? void 0 : strokes[index % strokes.length] : 'rgba(0, 0, 0, 0.2)';\r\n                });\r\n            });\r\n            this.rootNode = rootNode;\r\n            this.maxDepth = maxDepth;\r\n            this.colorDomain = colorDomain;\r\n        });\r\n    }\r\n    update({ seriesRect }) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            yield this.updateSelections();\r\n            yield this.updateNodes();\r\n            const animationData = this.getAnimationData();\r\n            const resize = this.checkResize(seriesRect);\r\n            if (resize) {\r\n                this.animationState.transition('resize', animationData);\r\n            }\r\n            this.animationState.transition('update', animationData);\r\n        });\r\n    }\r\n    resetAllAnimation(data) {\r\n        var _a;\r\n        const datum = (_a = this.animationResetFns) === null || _a === void 0 ? void 0 : _a.datum;\r\n        // Stop any running animations by prefix convention.\r\n        this.ctx.animationManager.stopByAnimationGroupId(this.id);\r\n        if (datum != null) {\r\n            resetMotion(data.datumSelections, datum);\r\n        }\r\n    }\r\n    animateEmptyUpdateReady(data) {\r\n        this.ctx.animationManager.skipCurrentBatch();\r\n        this.resetAllAnimation(data);\r\n    }\r\n    animateWaitingUpdateReady(data) {\r\n        this.ctx.animationManager.skipCurrentBatch();\r\n        this.resetAllAnimation(data);\r\n    }\r\n    animateReadyHighlight(data) {\r\n        var _a;\r\n        const datum = (_a = this.animationResetFns) === null || _a === void 0 ? void 0 : _a.datum;\r\n        if (datum != null) {\r\n            resetMotion([data], datum);\r\n        }\r\n    }\r\n    animateReadyResize(data) {\r\n        this.resetAllAnimation(data);\r\n    }\r\n    animateClearingUpdateEmpty(data) {\r\n        this.ctx.animationManager.skipCurrentBatch();\r\n        this.resetAllAnimation(data);\r\n    }\r\n    animationTransitionClear() {\r\n        this.animationState.transition('clear', this.getAnimationData());\r\n    }\r\n    getAnimationData() {\r\n        const animationData = {\r\n            datumSelections: [this.groupSelection],\r\n        };\r\n        return animationData;\r\n    }\r\n    isProcessedDataAnimatable() {\r\n        return true;\r\n    }\r\n    checkProcessedDataAnimatable() {\r\n        if (!this.isProcessedDataAnimatable()) {\r\n            this.ctx.animationManager.skipCurrentBatch();\r\n        }\r\n    }\r\n    getLabelData() {\r\n        return [];\r\n    }\r\n    getSeriesDomain() {\r\n        return [NaN, NaN];\r\n    }\r\n    getLegendData(legendType) {\r\n        return legendType === 'gradient' && this.colorKey != null && this.colorRange != null\r\n            ? [\r\n                {\r\n                    legendType: 'gradient',\r\n                    enabled: this.visible,\r\n                    seriesId: this.id,\r\n                    colorName: this.colorName,\r\n                    colorDomain: this.colorDomain,\r\n                    colorRange: this.colorRange,\r\n                },\r\n            ]\r\n            : [];\r\n    }\r\n    getDatumIdFromData(node) {\r\n        return `${node.index}`;\r\n    }\r\n    getDatumId(node) {\r\n        return this.getDatumIdFromData(node);\r\n    }\r\n}\r\n__decorate([\r\n    Validate(OPT_STRING),\r\n    __metadata(\"design:type\", String)\r\n], HierarchySeries.prototype, \"childrenKey\", void 0);\r\n__decorate([\r\n    Validate(OPT_STRING),\r\n    __metadata(\"design:type\", String)\r\n], HierarchySeries.prototype, \"sizeKey\", void 0);\r\n__decorate([\r\n    Validate(OPT_STRING),\r\n    __metadata(\"design:type\", String)\r\n], HierarchySeries.prototype, \"colorKey\", void 0);\r\n__decorate([\r\n    Validate(OPT_STRING),\r\n    __metadata(\"design:type\", String)\r\n], HierarchySeries.prototype, \"colorName\", void 0);\r\n__decorate([\r\n    Validate(OPT_COLOR_STRING_ARRAY),\r\n    __metadata(\"design:type\", Array)\r\n], HierarchySeries.prototype, \"fills\", void 0);\r\n__decorate([\r\n    Validate(OPT_COLOR_STRING_ARRAY),\r\n    __metadata(\"design:type\", Array)\r\n], HierarchySeries.prototype, \"strokes\", void 0);\r\n__decorate([\r\n    Validate(OPT_COLOR_STRING_ARRAY),\r\n    __metadata(\"design:type\", Array)\r\n], HierarchySeries.prototype, \"colorRange\", void 0);\n\nclass PolarAxis extends Axis {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.shape = 'polygon';\r\n        this.innerRadiusRatio = 0;\r\n        this.defaultTickMinSpacing = 20;\r\n    }\r\n    computeLabelsBBox(_options, _seriesRect) {\r\n        return null;\r\n    }\r\n}\r\n__decorate([\r\n    Validate(NUMBER$1(0, 1)),\r\n    __metadata(\"design:type\", Number)\r\n], PolarAxis.prototype, \"innerRadiusRatio\", void 0);\n\n/**\r\n * Internal Use Only: Used to ensure this file is treated as a module until we can use moduleDetection flag in Ts v4.7\r\n */\r\nconst __FORCE_MODULE_DETECTION = 0;\n\nvar moduleSupport = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    extractDecoratedProperties: extractDecoratedProperties,\n    isDecoratedObject: isDecoratedObject,\n    listDecoratedProperties: listDecoratedProperties,\n    assignJsonApplyConstructedArray: assignJsonApplyConstructedArray,\n    Motion: easing,\n    resetIds: resetIds,\n    get ChartUpdateType () { return ChartUpdateType; },\n    extent: extent,\n    normalisedExtent: normalisedExtent,\n    normalisedExtentWithMetadata: normalisedExtentWithMetadata,\n    arraysEqual: arraysEqual,\n    toArray: toArray,\n    Validate: Validate,\n    predicateWithMessage: predicateWithMessage,\n    OPTIONAL: OPTIONAL,\n    ARRAY: ARRAY,\n    OPT_ARRAY: OPT_ARRAY,\n    NON_EMPTY_ARRAY: NON_EMPTY_ARRAY,\n    OPT_NON_EMPTY_ARRAY: OPT_NON_EMPTY_ARRAY,\n    AND: AND,\n    OR: OR,\n    LESS_THAN: LESS_THAN,\n    GREATER_THAN: GREATER_THAN,\n    FUNCTION: FUNCTION,\n    OPT_FUNCTION: OPT_FUNCTION,\n    BOOLEAN: BOOLEAN,\n    OPT_BOOLEAN: OPT_BOOLEAN,\n    STRING: STRING,\n    OPT_STRING: OPT_STRING,\n    DATE: DATE,\n    OPT_DATE: OPT_DATE,\n    DATE_ARRAY: DATE_ARRAY,\n    DATETIME_MS: DATETIME_MS,\n    OPT_DATETIME_MS: OPT_DATETIME_MS,\n    OPT_DATE_OR_DATETIME_MS: OPT_DATE_OR_DATETIME_MS,\n    COLOR_STRING: COLOR_STRING,\n    OPT_COLOR_STRING: OPT_COLOR_STRING,\n    COLOR_STRING_ARRAY: COLOR_STRING_ARRAY,\n    OPT_COLOR_STRING_ARRAY: OPT_COLOR_STRING_ARRAY,\n    NUMBER: NUMBER$1,\n    OPT_NUMBER: OPT_NUMBER,\n    NUMBER_OR_NAN: NUMBER_OR_NAN,\n    NUMBER_ARRAY: NUMBER_ARRAY,\n    OPT_NUMBER_ARRAY: OPT_NUMBER_ARRAY,\n    STRING_ARRAY: STRING_ARRAY,\n    OPT_STRING_ARRAY: OPT_STRING_ARRAY,\n    STRING_UNION: STRING_UNION,\n    BOOLEAN_ARRAY: BOOLEAN_ARRAY,\n    OPT_BOOLEAN_ARRAY: OPT_BOOLEAN_ARRAY,\n    FONT_STYLE: FONT_STYLE,\n    OPT_FONT_STYLE: OPT_FONT_STYLE,\n    FONT_WEIGHT: FONT_WEIGHT,\n    OPT_FONT_WEIGHT: OPT_FONT_WEIGHT,\n    LINE_DASH: LINE_DASH,\n    OPT_LINE_DASH: OPT_LINE_DASH,\n    LINE_CAP: LINE_CAP,\n    OPT_LINE_CAP: OPT_LINE_CAP,\n    LINE_JOIN: LINE_JOIN,\n    OPT_LINE_JOIN: OPT_LINE_JOIN,\n    POSITION: POSITION,\n    INTERACTION_RANGE: INTERACTION_RANGE,\n    TEXT_WRAP: TEXT_WRAP,\n    OVERFLOW_STRATEGY: OVERFLOW_STRATEGY,\n    TEXT_ALIGN: TEXT_ALIGN,\n    VERTICAL_ALIGN: VERTICAL_ALIGN,\n    DIRECTION: DIRECTION,\n    OPT_DIRECTION: OPT_DIRECTION,\n    Default: Default,\n    injectStyle: injectStyle,\n    clamp: clamp,\n    isEqual: isEqual,\n    isNegative: isNegative,\n    round: round$1,\n    toFixed: toFixed,\n    mod: mod,\n    deepMerge: deepMerge,\n    mergeDefaults: mergeDefaults,\n    partialAssign: partialAssign,\n    ProxyOnWrite: ProxyOnWrite,\n    ProxyPropertyOnWrite: ProxyPropertyOnWrite,\n    ActionOnSet: ActionOnSet,\n    invertShapeDirection: invertShapeDirection,\n    singleSeriesPaletteFactory: singleSeriesPaletteFactory,\n    markerPaletteFactory: markerPaletteFactory,\n    BaseModuleInstance: BaseModuleInstance,\n    REGISTERED_MODULES: REGISTERED_MODULES,\n    registerModule: registerModule,\n    hasRegisteredEnterpriseModules: hasRegisteredEnterpriseModules,\n    MODULE_CONFLICTS: MODULE_CONFLICTS,\n    registerModuleConflicts: registerModuleConflicts,\n    enterpriseModule: enterpriseModule,\n    Background: Background,\n    BackgroundModule: BackgroundModule,\n    get ChartAxisDirection () { return ChartAxisDirection; },\n    prepareAxisAnimationContext: prepareAxisAnimationContext,\n    prepareAxisAnimationFunctions: prepareAxisAnimationFunctions,\n    resetAxisGroupFn: resetAxisGroupFn,\n    resetAxisSelectionFn: resetAxisSelectionFn,\n    resetAxisLabelSelectionFn: resetAxisLabelSelectionFn,\n    resetAxisLineSelectionFn: resetAxisLineSelectionFn,\n    fixNumericExtent: fixNumericExtent,\n    DataModel: DataModel,\n    DataController: DataController,\n    SMALLEST_KEY_INTERVAL: SMALLEST_KEY_INTERVAL,\n    AGG_VALUES_EXTENT: AGG_VALUES_EXTENT,\n    SORT_DOMAIN_GROUPS: SORT_DOMAIN_GROUPS,\n    normaliseGroupTo: normaliseGroupTo,\n    normalisePropertyTo: normalisePropertyTo,\n    animationValidation: animationValidation,\n    accumulateGroup: accumulateGroup,\n    diff: diff,\n    createDatumId: createDatumId,\n    sum: sum,\n    groupSum: groupSum,\n    range: range,\n    count: count,\n    groupCount: groupCount,\n    average: average,\n    groupAverage: groupAverage,\n    area: area,\n    accumulatedValue: accumulatedValue,\n    trailingAccumulatedValue: trailingAccumulatedValue,\n    UpdateService: UpdateService,\n    LayoutService: LayoutService,\n    AnimationManager: AnimationManager,\n    ChartEventManager: ChartEventManager,\n    CursorManager: CursorManager,\n    HighlightManager: HighlightManager,\n    InteractionManager: InteractionManager,\n    TooltipManager: TooltipManager,\n    ZoomManager: ZoomManager,\n    get Layers () { return Layers; },\n    get SeriesNodePickMode () { return SeriesNodePickMode; },\n    keyProperty: keyProperty,\n    valueProperty: valueProperty,\n    rangedValueProperty: rangedValueProperty,\n    trailingValueProperty: trailingValueProperty,\n    trailingValue: trailingValue,\n    accumulativeValueProperty: accumulativeValueProperty,\n    trailingAccumulatedValueProperty: trailingAccumulatedValueProperty,\n    groupAccumulativeValueProperty: groupAccumulativeValueProperty,\n    SeriesNodeClickEvent: SeriesNodeClickEvent,\n    SeriesItemHighlightStyle: SeriesItemHighlightStyle,\n    HighlightStyle: HighlightStyle,\n    Series: Series,\n    seriesLabelFadeInAnimation: seriesLabelFadeInAnimation,\n    seriesLabelFadeOutAnimation: seriesLabelFadeOutAnimation,\n    resetLabelFn: resetLabelFn,\n    SeriesMarker: SeriesMarker,\n    SeriesTooltip: SeriesTooltip,\n    AbstractBarSeries: AbstractBarSeries,\n    CartesianSeriesNodeClickEvent: CartesianSeriesNodeClickEvent,\n    CartesianSeries: CartesianSeries,\n    pairContinuousData: pairContinuousData,\n    pairCategoryData: pairCategoryData,\n    determinePathStatus: determinePathStatus,\n    prepareLinePathAnimationFns: prepareLinePathAnimationFns,\n    prepareLinePathAnimation: prepareLinePathAnimation,\n    updateRect: updateRect,\n    getRectConfig: getRectConfig,\n    checkCrisp: checkCrisp,\n    collapsedStartingBarPosition: collapsedStartingBarPosition,\n    midpointStartingBarPosition: midpointStartingBarPosition,\n    prepareBarAnimationFunctions: prepareBarAnimationFunctions,\n    resetBarSelectionsFn: resetBarSelectionsFn,\n    get AreaSeriesTag () { return AreaSeriesTag; },\n    prepareAreaPathAnimation: prepareAreaPathAnimation,\n    markerFadeInAnimation: markerFadeInAnimation,\n    markerScaleInAnimation: markerScaleInAnimation,\n    markerSwipeScaleInAnimation: markerSwipeScaleInAnimation,\n    resetMarkerFn: resetMarkerFn,\n    resetMarkerPositionFn: resetMarkerPositionFn,\n    prepareMarkerAnimation: prepareMarkerAnimation,\n    updateLabelNode: updateLabelNode,\n    adjustLabelPlacement: adjustLabelPlacement,\n    minMax: minMax,\n    backfillPathPointData: backfillPathPointData,\n    renderPartialPath: renderPartialPath,\n    pathSwipeInAnimation: pathSwipeInAnimation,\n    pathFadeInAnimation: pathFadeInAnimation,\n    pathFadeOutAnimation: pathFadeOutAnimation,\n    buildResetPathFn: buildResetPathFn,\n    PolarSeries: PolarSeries,\n    HierarchyNode: HierarchyNode,\n    HierarchySeries: HierarchySeries,\n    get Tags () { return Tags; },\n    Axis: Axis,\n    AxisLabel: AxisLabel,\n    AxisTick: AxisTick,\n    PolarAxis: PolarAxis,\n    CategoryAxis: CategoryAxis,\n    __FORCE_MODULE_DETECTION: __FORCE_MODULE_DETECTION,\n    QUICK_TRANSITION: QUICK_TRANSITION,\n    INITIAL_LOAD: INITIAL_LOAD,\n    REMOVE_PHASE: REMOVE_PHASE,\n    UPDATE_PHASE: UPDATE_PHASE,\n    ADD_PHASE: ADD_PHASE,\n    LABEL_PHASE: LABEL_PHASE,\n    get RepeatType () { return RepeatType; },\n    isNodeArray: isNodeArray,\n    Animation: Animation,\n    StateMachine: StateMachine,\n    resetMotion: resetMotion,\n    NODE_UPDATE_PHASES: NODE_UPDATE_PHASES,\n    FROM_TO_MIXINS: FROM_TO_MIXINS,\n    fromToMotion: fromToMotion,\n    staticFromToMotion: staticFromToMotion\n});\n\nconst SERIES_FACTORIES = {};\r\nconst SERIES_DEFAULTS = {};\r\nconst SERIES_THEME_TEMPLATES = {};\r\nconst ENTERPRISE_SERIES_THEME_TEMPLATES = {};\r\nconst SERIES_PALETTE_FACTORIES = {};\r\nconst SOLO_SERIES_TYPES = new Set();\r\nconst STACKABLE_SERIES_TYPES = new Set();\r\nconst GROUPABLE_SERIES_TYPES = new Set();\r\nconst STACKED_BY_DEFAULT_SERIES_TYPES = new Set();\r\nconst SWAP_DEFAULT_AXES_CONDITIONS = {};\r\nconst CUSTOM_DEFAULTS_FUNCTIONS = {};\r\nfunction registerSeries(seriesType, chartType, cstr, defaults, theme, enterpriseTheme, paletteFactory, solo, stackable, groupable, stackedByDefault, swapDefaultAxesCondition, customDefaultsFunction) {\r\n    SERIES_FACTORIES[seriesType] = cstr;\r\n    SERIES_DEFAULTS[seriesType] = defaults;\r\n    registerSeriesThemeTemplate(seriesType, theme, enterpriseTheme);\r\n    if (paletteFactory) {\r\n        addSeriesPaletteFactory(seriesType, paletteFactory);\r\n    }\r\n    if (solo) {\r\n        addSoloSeriesType(seriesType);\r\n    }\r\n    if (stackable) {\r\n        addStackableSeriesType(seriesType);\r\n    }\r\n    if (groupable) {\r\n        addGroupableSeriesType(seriesType);\r\n    }\r\n    if (stackedByDefault) {\r\n        addStackedByDefaultSeriesType(seriesType);\r\n    }\r\n    if (swapDefaultAxesCondition) {\r\n        addSwapDefaultAxesCondition(seriesType, swapDefaultAxesCondition);\r\n    }\r\n    if (customDefaultsFunction) {\r\n        addCustomDefaultsFunctions(seriesType, customDefaultsFunction);\r\n    }\r\n    registerChartSeriesType(seriesType, chartType);\r\n}\r\nfunction registerSeriesThemeTemplate(seriesType, themeTemplate, enterpriseThemeTemplate = {}) {\r\n    const existingTemplate = SERIES_THEME_TEMPLATES[seriesType];\r\n    SERIES_THEME_TEMPLATES[seriesType] = jsonMerge([existingTemplate, themeTemplate]);\r\n    ENTERPRISE_SERIES_THEME_TEMPLATES[seriesType] = jsonMerge([\r\n        existingTemplate,\r\n        themeTemplate,\r\n        enterpriseThemeTemplate,\r\n    ]);\r\n}\r\nfunction getSeries(chartType, moduleCtx) {\r\n    const seriesConstructor = SERIES_FACTORIES[chartType];\r\n    if (seriesConstructor) {\r\n        return new seriesConstructor(moduleCtx);\r\n    }\r\n    throw new Error(`AG Charts - unknown series type: ${chartType}`);\r\n}\r\nfunction getSeriesDefaults(chartType) {\r\n    return SERIES_DEFAULTS[chartType];\r\n}\r\nfunction getSeriesThemeTemplate(chartType) {\r\n    if (hasRegisteredEnterpriseModules()) {\r\n        return ENTERPRISE_SERIES_THEME_TEMPLATES[chartType];\r\n    }\r\n    return SERIES_THEME_TEMPLATES[chartType];\r\n}\r\nfunction addSeriesPaletteFactory(seriesType, factory) {\r\n    SERIES_PALETTE_FACTORIES[seriesType] = factory;\r\n}\r\nfunction getSeriesPaletteFactory(seriesType) {\r\n    return SERIES_PALETTE_FACTORIES[seriesType];\r\n}\r\nfunction isSoloSeries(seriesType) {\r\n    return SOLO_SERIES_TYPES.has(seriesType);\r\n}\r\nfunction isStackableSeries(seriesType) {\r\n    return STACKABLE_SERIES_TYPES.has(seriesType);\r\n}\r\nfunction isGroupableSeries(seriesType) {\r\n    return GROUPABLE_SERIES_TYPES.has(seriesType);\r\n}\r\nfunction isSeriesStackedByDefault(seriesType) {\r\n    return STACKED_BY_DEFAULT_SERIES_TYPES.has(seriesType);\r\n}\r\nfunction addGroupableSeriesType(seriesType) {\r\n    GROUPABLE_SERIES_TYPES.add(seriesType);\r\n}\r\nfunction addSoloSeriesType(seriesType) {\r\n    SOLO_SERIES_TYPES.add(seriesType);\r\n}\r\nfunction addStackableSeriesType(seriesType) {\r\n    STACKABLE_SERIES_TYPES.add(seriesType);\r\n}\r\nfunction addStackedByDefaultSeriesType(seriesType) {\r\n    STACKED_BY_DEFAULT_SERIES_TYPES.add(seriesType);\r\n}\r\nfunction addSwapDefaultAxesCondition(seriesType, predicate) {\r\n    SWAP_DEFAULT_AXES_CONDITIONS[seriesType] = predicate;\r\n}\r\nfunction addCustomDefaultsFunctions(seriesType, predicate) {\r\n    CUSTOM_DEFAULTS_FUNCTIONS[seriesType] = predicate;\r\n}\r\nfunction isDefaultAxisSwapNeeded(opts) {\r\n    var _a, _b;\r\n    let result;\r\n    for (const series of (_a = opts.series) !== null && _a !== void 0 ? _a : []) {\r\n        const { type = 'line' } = series;\r\n        const isDefaultAxisSwapped = (_b = SWAP_DEFAULT_AXES_CONDITIONS[type]) === null || _b === void 0 ? void 0 : _b.call(SWAP_DEFAULT_AXES_CONDITIONS, series);\r\n        if (isDefaultAxisSwapped != null) {\r\n            if (result != null && result != isDefaultAxisSwapped) {\r\n                throw new Error('AG Charts - The provided series have incompatible directions');\r\n            }\r\n            result = isDefaultAxisSwapped;\r\n        }\r\n    }\r\n    return result;\r\n}\r\nfunction executeCustomDefaultsFunctions(opts, initialDefaults) {\r\n    var _a;\r\n    let result = initialDefaults;\r\n    for (const series of (_a = opts.series) !== null && _a !== void 0 ? _a : []) {\r\n        const { type } = series;\r\n        const fn = type != null ? CUSTOM_DEFAULTS_FUNCTIONS[type] : undefined;\r\n        if (fn !== undefined) {\r\n            result = Object.assign(Object.assign({}, result), fn(series));\r\n        }\r\n    }\r\n    return result;\r\n}\n\nfunction setupModules() {\r\n    var _a;\r\n    for (const m of REGISTERED_MODULES) {\r\n        if (m.packageType === 'enterprise' && !verifyIfModuleExpected(m)) {\r\n            Logger.errorOnce('Unexpected enterprise module registered: ' + m.identifier);\r\n        }\r\n        if (JSON_APPLY_PLUGINS.constructors != null && m.optionConstructors != null) {\r\n            Object.assign(JSON_APPLY_PLUGINS.constructors, m.optionConstructors);\r\n        }\r\n        if (m.type === 'root' && m.themeTemplate) {\r\n            for (const chartType of m.chartTypes) {\r\n                registerChartDefaults(chartType, m.themeTemplate);\r\n            }\r\n        }\r\n        if (m.type === 'root' && ((_a = m.conflicts) === null || _a === void 0 ? void 0 : _a.length)) {\r\n            registerModuleConflicts(m.optionsKey, m.conflicts);\r\n        }\r\n        if (m.type === 'series') {\r\n            if (m.chartTypes.length > 1)\r\n                throw new Error('AG Charts - Module definition error: ' + m.identifier);\r\n            registerSeries(m.identifier, m.chartTypes[0], m.instanceConstructor, m.seriesDefaults, m.themeTemplate, m.enterpriseThemeTemplate, m.paletteFactory, m.solo, m.stackable, m.groupable, m.stackedByDefault, m.swapDefaultAxesCondition, m.customDefaultsFunction);\r\n        }\r\n        if (m.type === 'series-option' && m.themeTemplate) {\r\n            for (const seriesType of m.seriesTypes) {\r\n                registerSeriesThemeTemplate(seriesType, m.themeTemplate);\r\n            }\r\n        }\r\n        if (m.type === 'axis-option' && m.themeTemplate) {\r\n            for (const axisType of m.axisTypes) {\r\n                const axisTypeTheme = m.themeTemplate[axisType];\r\n                const theme = Object.assign(Object.assign({}, m.themeTemplate), (typeof axisTypeTheme === 'object' ? axisTypeTheme : {}));\r\n                for (const axisType of m.axisTypes) {\r\n                    delete theme[axisType];\r\n                }\r\n                registerAxisThemeTemplate(axisType, theme);\r\n            }\r\n        }\r\n        if (m.type === 'axis') {\r\n            registerAxis(m.identifier, m.instanceConstructor);\r\n            if (m.themeTemplate) {\r\n                registerAxisThemeTemplate(m.identifier, m.themeTemplate);\r\n            }\r\n        }\r\n        if (m.type === 'legend') {\r\n            registerLegend(m.identifier, m.optionsKey, m.instanceConstructor, m.themeTemplate);\r\n        }\r\n    }\r\n    if (hasRegisteredEnterpriseModules()) {\r\n        const expectedButUnused = getUnusedExpectedModules();\r\n        if (expectedButUnused.length > 0) {\r\n            Logger.errorOnce('Enterprise modules expected but not registered: ', expectedButUnused);\r\n        }\r\n    }\r\n}\n\nclass HierarchyChart extends Chart {\r\n    constructor(specialOverrides, resources) {\r\n        super(specialOverrides, resources);\r\n        this._data = {};\r\n    }\r\n    performLayout() {\r\n        const _super = Object.create(null, {\r\n            performLayout: { get: () => super.performLayout }\r\n        });\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const shrinkRect = yield _super.performLayout.call(this);\r\n            const { seriesArea: { padding }, seriesRoot, } = this;\r\n            const fullSeriesRect = shrinkRect.clone();\r\n            shrinkRect.shrink(padding.left, 'left');\r\n            shrinkRect.shrink(padding.top, 'top');\r\n            shrinkRect.shrink(padding.right, 'right');\r\n            shrinkRect.shrink(padding.bottom, 'bottom');\r\n            this.seriesRect = shrinkRect;\r\n            this.animationRect = shrinkRect;\r\n            this.hoverRect = shrinkRect;\r\n            seriesRoot.translationX = Math.floor(shrinkRect.x);\r\n            seriesRoot.translationY = Math.floor(shrinkRect.y);\r\n            yield Promise.all(this.series.map((series) => __awaiter(this, void 0, void 0, function* () {\r\n                yield series.update({ seriesRect: shrinkRect }); // this has to happen after the `updateAxes` call\r\n            })));\r\n            seriesRoot.visible = this.series[0].visible;\r\n            seriesRoot.setClipRectInGroupCoordinateSpace(new BBox(shrinkRect.x, shrinkRect.y, shrinkRect.width, shrinkRect.height));\r\n            this.layoutService.dispatchLayoutComplete({\r\n                type: 'layout-complete',\r\n                chart: { width: this.scene.width, height: this.scene.height },\r\n                clipSeries: false,\r\n                series: { rect: fullSeriesRect, paddedRect: shrinkRect, visible: true },\r\n                axes: [],\r\n            });\r\n            return shrinkRect;\r\n        });\r\n    }\r\n}\r\nHierarchyChart.className = 'HierarchyChart';\r\nHierarchyChart.type = 'hierarchy';\n\nfunction removeUsedEnterpriseOptions(options) {\r\n    var _a, _b, _c, _d;\r\n    const usedOptions = [];\r\n    const optionsChartType = getChartType(optionsType(options));\r\n    for (const { type, chartTypes, optionsKey, optionsInnerKey, identifier } of EXPECTED_ENTERPRISE_MODULES) {\r\n        if (optionsChartType !== 'unknown' && !chartTypes.includes(optionsChartType))\r\n            continue;\r\n        if (type === 'root' || type === 'legend') {\r\n            const optionValue = options[optionsKey];\r\n            if (optionValue == null)\r\n                continue;\r\n            if (!optionsInnerKey) {\r\n                usedOptions.push(optionsKey);\r\n                delete options[optionsKey];\r\n            }\r\n            else if (optionValue[optionsInnerKey]) {\r\n                usedOptions.push(`${optionsKey}.${optionsInnerKey}`);\r\n                delete optionValue[optionsInnerKey];\r\n            }\r\n        }\r\n        else if (type === 'axis') {\r\n            if (!('axes' in options) || !((_a = options.axes) === null || _a === void 0 ? void 0 : _a.some((axis) => axis.type === identifier)))\r\n                continue;\r\n            usedOptions.push(`axis[type=${identifier}]`);\r\n            options.axes = options.axes.filter((axis) => axis.type !== identifier);\r\n        }\r\n        else if (type === 'axis-option') {\r\n            if (!('axes' in options) || !((_b = options.axes) === null || _b === void 0 ? void 0 : _b.some((axis) => axis[optionsKey])))\r\n                continue;\r\n            usedOptions.push(`axis.${optionsKey}`);\r\n            options.axes.forEach((axis) => {\r\n                if (axis[optionsKey]) {\r\n                    delete axis[optionsKey];\r\n                }\r\n            });\r\n        }\r\n        else if (type === 'series') {\r\n            if (!((_c = options.series) === null || _c === void 0 ? void 0 : _c.some((series) => series.type === identifier)))\r\n                continue;\r\n            usedOptions.push(`series[type=${identifier}]`);\r\n            options.series = options.series.filter((series) => series.type !== identifier);\r\n        }\r\n        else if (type === 'series-option') {\r\n            if (!((_d = options.series) === null || _d === void 0 ? void 0 : _d.some((series) => series[optionsKey])))\r\n                continue;\r\n            usedOptions.push(`series.${optionsKey}`);\r\n            options.series.forEach((series) => {\r\n                if (series[optionsKey]) {\r\n                    delete series[optionsKey];\r\n                }\r\n            });\r\n        }\r\n    }\r\n    if (usedOptions.length > 0) {\r\n        Logger.warnOnce([\r\n            `unable to use these enterprise features as 'ag-charts-enterprise' has not been loaded:`,\r\n            ``,\r\n            ...usedOptions,\r\n            ``,\r\n            'See: https://charts.ag-grid.com/javascript/installation/',\r\n        ].join('\\n'));\r\n    }\r\n}\n\n/**\r\n * Groups the series options objects if they are of type `column` or `bar` and places them in an array at the index where the first instance of this series type was found.\r\n * Returns an array of arrays containing the ordered and grouped series options objects.\r\n */\r\nfunction groupSeriesByType(seriesOptions) {\r\n    var _a, _b, _c, _d;\r\n    const groupMap = {};\r\n    const stackMap = {};\r\n    const anyStacked = {};\r\n    const defaultUnstackedGroup = 'default-ag-charts-group';\r\n    const result = [];\r\n    for (const s of seriesOptions) {\r\n        const type = (_a = s.type) !== null && _a !== void 0 ? _a : 'line';\r\n        const stackable = isStackableSeries(type);\r\n        const groupable = isGroupableSeries(type);\r\n        if (!stackable && !groupable) {\r\n            // No need to use index for these cases.\r\n            result.push({ type: 'ungrouped', opts: [s] });\r\n            continue;\r\n        }\r\n        const { stacked: sStacked, stackGroup: sStackGroup, grouped: sGrouped = undefined, xKey } = s;\r\n        const stacked = sStackGroup != null || sStacked === true;\r\n        (_b = anyStacked[type]) !== null && _b !== void 0 ? _b : (anyStacked[type] = false);\r\n        anyStacked[type] || (anyStacked[type] = stacked && stackable);\r\n        const grouped = sGrouped === true;\r\n        let groupingKey = [sStackGroup !== null && sStackGroup !== void 0 ? sStackGroup : (sStacked === true ? 'stacked' : undefined), grouped ? 'grouped' : undefined]\r\n            .filter((v) => v != null)\r\n            .join('-');\r\n        if (!groupingKey) {\r\n            groupingKey = defaultUnstackedGroup;\r\n        }\r\n        const indexKey = `${type}-${xKey}-${groupingKey}`;\r\n        if (stacked && stackable) {\r\n            const updated = ((_c = stackMap[indexKey]) !== null && _c !== void 0 ? _c : (stackMap[indexKey] = { type: 'stack', opts: [] }));\r\n            if (updated.opts.length === 0)\r\n                result.push(updated);\r\n            updated.opts.push(s);\r\n        }\r\n        else if (grouped && groupable) {\r\n            const updated = ((_d = groupMap[indexKey]) !== null && _d !== void 0 ? _d : (groupMap[indexKey] = { type: 'group', opts: [] }));\r\n            if (updated.opts.length === 0)\r\n                result.push(updated);\r\n            updated.opts.push(s);\r\n        }\r\n        else {\r\n            result.push({ type: 'ungrouped', opts: [s] });\r\n        }\r\n    }\r\n    if (!Object.values(anyStacked).some((v) => v)) {\r\n        return result;\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * Transforms provided series options array into an array containing series options which are compatible with standalone charts series options.\r\n */\r\nfunction processSeriesOptions(_opts, seriesOptions) {\r\n    var _a;\r\n    const result = [];\r\n    const preprocessed = seriesOptions.map((series) => {\r\n        var _a;\r\n        // Change the default for bar/columns when yKey is used to be grouped rather than stacked.\r\n        const sType = (_a = series.type) !== null && _a !== void 0 ? _a : 'line';\r\n        const groupable = isGroupableSeries(sType);\r\n        const stackable = isStackableSeries(sType);\r\n        const stackedByDefault = isSeriesStackedByDefault(sType);\r\n        if (series.grouped && !groupable) {\r\n            Logger.warnOnce(`unsupported grouping of series type: ${sType}`);\r\n        }\r\n        if (series.stacked && !stackable) {\r\n            Logger.warnOnce(`unsupported stacking of series type: ${sType}`);\r\n        }\r\n        if (!groupable && !stackable) {\r\n            return series;\r\n        }\r\n        let stacked = false;\r\n        let grouped = false;\r\n        if (series.stacked === undefined && series.grouped === undefined) {\r\n            stacked = stackable && stackedByDefault;\r\n            grouped = groupable && !stacked;\r\n        }\r\n        else if (series.stacked === undefined) {\r\n            stacked = stackable && stackedByDefault && !(series.grouped && groupable);\r\n            grouped = groupable && !stacked && !!series.grouped;\r\n        }\r\n        else if (series.grouped === undefined) {\r\n            stacked = stackable && series.stacked;\r\n            grouped = groupable && !stacked;\r\n        }\r\n        else {\r\n            stacked = stackable && series.stacked;\r\n            grouped = groupable && !stacked && series.grouped;\r\n        }\r\n        return Object.assign(Object.assign({}, series), { stacked, grouped });\r\n    });\r\n    const grouped = groupSeriesByType(preprocessed);\r\n    const groupCount = grouped.reduce((result, next) => {\r\n        var _a, _b;\r\n        if (next.type === 'ungrouped')\r\n            return result;\r\n        const seriesType = (_a = next.opts[0].type) !== null && _a !== void 0 ? _a : 'line';\r\n        (_b = result[seriesType]) !== null && _b !== void 0 ? _b : (result[seriesType] = 0);\r\n        result[seriesType] += next.type === 'stack' ? 1 : next.opts.length;\r\n        return result;\r\n    }, {});\r\n    const groupIdx = {};\r\n    const addSeriesGroupingMeta = (group) => {\r\n        var _a, _b;\r\n        let stackIdx = 0;\r\n        const seriesType = (_a = group.opts[0].type) !== null && _a !== void 0 ? _a : 'line';\r\n        (_b = groupIdx[seriesType]) !== null && _b !== void 0 ? _b : (groupIdx[seriesType] = 0);\r\n        if (group.type === 'stack') {\r\n            for (const opts of group.opts) {\r\n                opts.seriesGrouping = {\r\n                    groupIndex: groupIdx[seriesType],\r\n                    groupCount: groupCount[seriesType],\r\n                    stackIndex: stackIdx++,\r\n                    stackCount: group.opts.length,\r\n                };\r\n            }\r\n            groupIdx[seriesType]++;\r\n        }\r\n        else if (group.type === 'group') {\r\n            for (const opts of group.opts) {\r\n                opts.seriesGrouping = {\r\n                    groupIndex: groupIdx[seriesType],\r\n                    groupCount: groupCount[seriesType],\r\n                    stackIndex: 0,\r\n                    stackCount: 0,\r\n                };\r\n                groupIdx[seriesType]++;\r\n            }\r\n        }\r\n        else {\r\n            for (const opts of group.opts) {\r\n                opts.seriesGrouping = undefined;\r\n            }\r\n        }\r\n        return group.opts;\r\n    };\r\n    Debug.create(true, 'opts')('processSeriesOptions() - series grouping: ', grouped);\r\n    for (const group of grouped) {\r\n        const seriesType = (_a = group.opts[0].type) !== null && _a !== void 0 ? _a : 'line';\r\n        if (isGroupableSeries(seriesType) || isStackableSeries(seriesType)) {\r\n            result.push(...addSeriesGroupingMeta(group));\r\n        }\r\n        else {\r\n            result.push(...group.opts);\r\n        }\r\n    }\r\n    return result;\r\n}\n\nconst DEFAULT_BACKGROUND_FILL = 'white';\r\nconst palette$9 = {\r\n    fills: Array.from(Object.values(DEFAULT_FILLS)),\r\n    strokes: Array.from(Object.values(DEFAULT_STROKES)),\r\n};\r\nconst CHART_TYPE_CONFIG = {\r\n    get cartesian() {\r\n        return { seriesTypes: CHART_TYPES.cartesianTypes, commonOptions: ['zoom', 'navigator'] };\r\n    },\r\n    get polar() {\r\n        return { seriesTypes: CHART_TYPES.polarTypes, commonOptions: [] };\r\n    },\r\n    get hierarchy() {\r\n        return { seriesTypes: CHART_TYPES.hierarchyTypes, commonOptions: [] };\r\n    },\r\n};\r\nconst CHART_TYPE_SPECIFIC_COMMON_OPTIONS = Object.values(CHART_TYPE_CONFIG).reduce((r, { commonOptions }) => [...r, ...commonOptions], []);\r\nclass ChartTheme {\r\n    getPalette() {\r\n        return palette$9;\r\n    }\r\n    static getAxisDefaults() {\r\n        return {\r\n            top: {},\r\n            right: {},\r\n            bottom: {},\r\n            left: {},\r\n            title: {\r\n                enabled: false,\r\n                text: 'Axis Title',\r\n                spacing: 25,\r\n                fontStyle: undefined,\r\n                fontWeight: NORMAL,\r\n                fontSize: FONT_SIZE.MEDIUM,\r\n                fontFamily: DEFAULT_FONT_FAMILY,\r\n                color: DEFAULT_LABEL_COLOUR,\r\n            },\r\n            label: {\r\n                fontStyle: undefined,\r\n                fontWeight: undefined,\r\n                fontSize: FONT_SIZE.SMALL,\r\n                fontFamily: DEFAULT_FONT_FAMILY,\r\n                padding: 5,\r\n                rotation: undefined,\r\n                color: DEFAULT_LABEL_COLOUR,\r\n                formatter: undefined,\r\n                avoidCollisions: true,\r\n            },\r\n            line: {\r\n                enabled: true,\r\n                width: 1,\r\n                color: DEFAULT_AXIS_LINE_COLOUR,\r\n            },\r\n            tick: {\r\n                enabled: false,\r\n                width: 1,\r\n                color: DEFAULT_AXIS_LINE_COLOUR,\r\n            },\r\n            gridLine: {\r\n                enabled: true,\r\n                style: [\r\n                    {\r\n                        stroke: DEFAULT_AXIS_GRID_COLOUR,\r\n                        lineDash: [],\r\n                    },\r\n                ],\r\n            },\r\n            crossLines: {\r\n                enabled: false,\r\n                fill: DEFAULT_CROSS_LINES_COLOUR,\r\n                stroke: DEFAULT_CROSS_LINES_COLOUR,\r\n                fillOpacity: 0.1,\r\n                strokeWidth: 1,\r\n                label: {\r\n                    enabled: false,\r\n                    fontStyle: undefined,\r\n                    fontWeight: undefined,\r\n                    fontSize: FONT_SIZE.SMALL,\r\n                    fontFamily: DEFAULT_FONT_FAMILY,\r\n                    padding: 5,\r\n                    color: DEFAULT_LABEL_COLOUR,\r\n                },\r\n            },\r\n        };\r\n    }\r\n    static getSeriesDefaults() {\r\n        return {\r\n            tooltip: {\r\n                enabled: true,\r\n                renderer: undefined,\r\n            },\r\n            visible: true,\r\n            showInLegend: true,\r\n            highlightStyle: {\r\n                item: {\r\n                    fill: 'rgba(255,255,255, 0.33)',\r\n                    stroke: `rgba(0, 0, 0, 0.4)`,\r\n                    strokeWidth: 2,\r\n                },\r\n                series: {\r\n                    dimOpacity: 1,\r\n                },\r\n                text: {\r\n                    color: 'black',\r\n                },\r\n            },\r\n            nodeClickRange: 'exact',\r\n        };\r\n    }\r\n    static getCartesianSeriesMarkerDefaults() {\r\n        return {\r\n            enabled: true,\r\n            shape: 'circle',\r\n            size: 7,\r\n            strokeWidth: 1,\r\n            formatter: undefined,\r\n        };\r\n    }\r\n    static getLegendItemMarkerDefaults() {\r\n        return {\r\n            shape: undefined,\r\n            size: 15,\r\n            padding: 8,\r\n        };\r\n    }\r\n    static getCaptionWrappingDefaults() {\r\n        return 'hyphenate';\r\n    }\r\n    static getChartDefaults() {\r\n        return {\r\n            background: {\r\n                visible: true,\r\n                fill: DEFAULT_BACKGROUND_COLOUR,\r\n            },\r\n            padding: {\r\n                top: 20,\r\n                right: 20,\r\n                bottom: 20,\r\n                left: 20,\r\n            },\r\n            title: {\r\n                enabled: false,\r\n                text: 'Title',\r\n                fontStyle: undefined,\r\n                fontWeight: NORMAL,\r\n                fontSize: FONT_SIZE.LARGE,\r\n                fontFamily: DEFAULT_FONT_FAMILY,\r\n                color: DEFAULT_LABEL_COLOUR,\r\n                wrapping: ChartTheme.getCaptionWrappingDefaults(),\r\n            },\r\n            subtitle: {\r\n                enabled: false,\r\n                text: 'Subtitle',\r\n                spacing: 20,\r\n                fontStyle: undefined,\r\n                fontWeight: undefined,\r\n                fontSize: FONT_SIZE.MEDIUM,\r\n                fontFamily: DEFAULT_FONT_FAMILY,\r\n                color: DEFAULT_MUTED_LABEL_COLOUR,\r\n                wrapping: ChartTheme.getCaptionWrappingDefaults(),\r\n            },\r\n            footnote: {\r\n                enabled: false,\r\n                text: 'Footnote',\r\n                spacing: 20,\r\n                fontStyle: undefined,\r\n                fontWeight: undefined,\r\n                fontSize: FONT_SIZE.MEDIUM,\r\n                fontFamily: DEFAULT_FONT_FAMILY,\r\n                color: 'rgb(140, 140, 140)',\r\n                wrapping: ChartTheme.getCaptionWrappingDefaults(),\r\n            },\r\n            legend: {\r\n                position: BOTTOM,\r\n                spacing: 30,\r\n                listeners: {},\r\n                item: {\r\n                    paddingX: 16,\r\n                    paddingY: 8,\r\n                    marker: ChartTheme.getLegendItemMarkerDefaults(),\r\n                    label: {\r\n                        color: DEFAULT_LABEL_COLOUR,\r\n                        fontStyle: undefined,\r\n                        fontWeight: undefined,\r\n                        fontSize: FONT_SIZE.SMALL,\r\n                        fontFamily: DEFAULT_FONT_FAMILY,\r\n                        formatter: undefined,\r\n                    },\r\n                },\r\n                reverseOrder: false,\r\n                pagination: {\r\n                    marker: {\r\n                        size: 12,\r\n                    },\r\n                    activeStyle: {\r\n                        fill: DEFAULT_LABEL_COLOUR,\r\n                    },\r\n                    inactiveStyle: {\r\n                        fill: DEFAULT_MUTED_LABEL_COLOUR,\r\n                    },\r\n                    highlightStyle: {\r\n                        fill: DEFAULT_LABEL_COLOUR,\r\n                    },\r\n                    label: {\r\n                        color: DEFAULT_LABEL_COLOUR,\r\n                    },\r\n                },\r\n            },\r\n            tooltip: {\r\n                enabled: true,\r\n                range: 'nearest',\r\n                delay: 0,\r\n            },\r\n            listeners: {},\r\n        };\r\n    }\r\n    constructor(options) {\r\n        options = deepMerge({}, options !== null && options !== void 0 ? options : {});\r\n        const { overrides = null, palette = null } = options;\r\n        const defaults = this.createChartConfigPerChartType(this.getDefaults());\r\n        if (overrides) {\r\n            const { common } = overrides;\r\n            const applyOverrides = (seriesTypes, overrideOpts) => {\r\n                if (!overrideOpts)\r\n                    return;\r\n                for (const s of seriesTypes) {\r\n                    const seriesType = s;\r\n                    defaults[seriesType] = deepMerge(defaults[seriesType], overrideOpts);\r\n                }\r\n            };\r\n            for (const [, { seriesTypes, commonOptions }] of Object.entries(CHART_TYPE_CONFIG)) {\r\n                const cleanedCommon = Object.assign({}, common);\r\n                for (const commonKey of CHART_TYPE_SPECIFIC_COMMON_OPTIONS) {\r\n                    if (!commonOptions.includes(commonKey)) {\r\n                        delete cleanedCommon[commonKey];\r\n                    }\r\n                }\r\n                applyOverrides(seriesTypes, cleanedCommon);\r\n            }\r\n            CHART_TYPES.seriesTypes.forEach((s) => {\r\n                const seriesType = s;\r\n                if (overrides[seriesType]) {\r\n                    defaults[seriesType] = deepMerge(defaults[seriesType], overrides[seriesType]);\r\n                }\r\n            });\r\n        }\r\n        this.palette = palette !== null && palette !== void 0 ? palette : this.getPalette();\r\n        this.config = Object.freeze(this.templateTheme(defaults));\r\n    }\r\n    createChartConfigPerChartType(config) {\r\n        Object.entries(CHART_TYPE_CONFIG).forEach(([nextType, { seriesTypes }]) => {\r\n            const typeDefaults = getChartDefaults(nextType);\r\n            seriesTypes.forEach((next) => {\r\n                const alias = next;\r\n                if (!config[alias]) {\r\n                    config[alias] = {};\r\n                    deepMerge(config[alias], typeDefaults);\r\n                }\r\n            });\r\n        });\r\n        return config;\r\n    }\r\n    getDefaults() {\r\n        let defaults = {};\r\n        const getChartTypeDefaults = (chartType) => {\r\n            return Object.assign(Object.assign(Object.assign({}, getLegendThemeTemplates()), ChartTheme.getChartDefaults()), getChartDefaults(chartType));\r\n        };\r\n        const getOverridesByType = (chartType, seriesTypes) => {\r\n            var _a, _b, _c;\r\n            var _d;\r\n            const chartDefaults = getChartTypeDefaults(chartType);\r\n            const result = {};\r\n            for (const seriesType of seriesTypes) {\r\n                (_a = result[seriesType]) !== null && _a !== void 0 ? _a : (result[seriesType] = deepMerge({}, chartDefaults));\r\n                const axes = ((_b = (_d = result[seriesType]).axes) !== null && _b !== void 0 ? _b : (_d.axes = {}));\r\n                const template = getSeriesThemeTemplate(seriesType);\r\n                if (template) {\r\n                    result[seriesType].series = deepMerge(result[seriesType].series, template);\r\n                }\r\n                for (const axisType of AXIS_TYPES.axesTypes) {\r\n                    const template = getAxisThemeTemplate(axisType);\r\n                    if (chartType === 'cartesian') {\r\n                        axes[axisType] = deepMerge(axes[axisType], (_c = ChartTheme.cartesianAxisDefault[axisType]) !== null && _c !== void 0 ? _c : {});\r\n                    }\r\n                    if (template) {\r\n                        axes[axisType] = deepMerge(axes[axisType], template);\r\n                    }\r\n                }\r\n            }\r\n            return result;\r\n        };\r\n        defaults = deepMerge(defaults, getOverridesByType('cartesian', CHART_TYPES.cartesianTypes));\r\n        defaults = deepMerge(defaults, getOverridesByType('polar', CHART_TYPES.polarTypes));\r\n        defaults = deepMerge(defaults, getOverridesByType('hierarchy', CHART_TYPES.hierarchyTypes));\r\n        return defaults;\r\n    }\r\n    templateTheme(themeTemplate) {\r\n        const themeInstance = jsonMerge([themeTemplate]);\r\n        const { extensions, properties } = this.getTemplateParameters();\r\n        jsonWalk(themeInstance, (_, node) => {\r\n            if (node['__extends__']) {\r\n                const key = node['__extends__'];\r\n                const source = extensions.get(key);\r\n                if (source == null) {\r\n                    throw new Error('AG Charts - no template variable provided for: ' + key);\r\n                }\r\n                Object.keys(source).forEach((key) => {\r\n                    if (!(key in node)) {\r\n                        node[key] = source[key];\r\n                    }\r\n                });\r\n                delete node['__extends__'];\r\n            }\r\n            if (node['__overrides__']) {\r\n                const key = node['__overrides__'];\r\n                const source = extensions.get(key);\r\n                if (source == null) {\r\n                    throw new Error('AG Charts - no template variable provided for: ' + key);\r\n                }\r\n                Object.assign(node, source);\r\n                delete node['__overrides__'];\r\n            }\r\n            if (Array.isArray(node)) {\r\n                for (let i = 0; i < node.length; i++) {\r\n                    const symbol = node[i];\r\n                    if (properties.has(symbol)) {\r\n                        node[i] = properties.get(symbol);\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                for (const [name, value] of Object.entries(node)) {\r\n                    if (properties.has(value)) {\r\n                        node[name] = properties.get(value);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        return themeInstance;\r\n    }\r\n    static getWaterfallSeriesDefaultPositiveColors() {\r\n        return {\r\n            fill: DEFAULT_FILLS.BLUE,\r\n            stroke: DEFAULT_STROKES.BLUE,\r\n        };\r\n    }\r\n    static getWaterfallSeriesDefaultNegativeColors() {\r\n        return {\r\n            fill: DEFAULT_FILLS.ORANGE,\r\n            stroke: DEFAULT_STROKES.ORANGE,\r\n        };\r\n    }\r\n    static getWaterfallSeriesDefaultTotalColors() {\r\n        return {\r\n            fill: DEFAULT_FILLS.GRAY,\r\n            stroke: DEFAULT_STROKES.GRAY,\r\n        };\r\n    }\r\n    getTemplateParameters() {\r\n        const extensions = new Map();\r\n        extensions.set(EXTENDS_CHART_DEFAULTS, ChartTheme.getChartDefaults());\r\n        extensions.set(EXTENDS_AXES_DEFAULTS, ChartTheme.getAxisDefaults());\r\n        extensions.set(EXTENDS_LEGEND_DEFAULTS, ChartTheme.getChartDefaults().legend);\r\n        extensions.set(EXTENDS_LEGEND_ITEM_DEFAULTS, ChartTheme.getChartDefaults().legend.item);\r\n        extensions.set(EXTENDS_LEGEND_ITEM_MARKER_DEFAULTS, ChartTheme.getLegendItemMarkerDefaults());\r\n        extensions.set(EXTENDS_AXES_LABEL_DEFAULTS, ChartTheme.getAxisDefaults().label);\r\n        extensions.set(EXTENDS_AXES_LINE_DEFAULTS, ChartTheme.getAxisDefaults().line);\r\n        extensions.set(EXTENDS_AXES_TICK_DEFAULTS, ChartTheme.getAxisDefaults().tick);\r\n        extensions.set(EXTENDS_AXES_GRID_LINE_DEFAULTS, ChartTheme.getAxisDefaults().gridLine);\r\n        extensions.set(EXTENDS_SERIES_DEFAULTS, ChartTheme.getSeriesDefaults());\r\n        extensions.set(OVERRIDE_SERIES_LABEL_DEFAULTS, {});\r\n        extensions.set(EXTENDS_CARTESIAN_MARKER_DEFAULTS, ChartTheme.getCartesianSeriesMarkerDefaults());\r\n        const properties = new Map();\r\n        properties.set(DEFAULT_FONT_FAMILY, 'Verdana, sans-serif');\r\n        properties.set(DEFAULT_LABEL_COLOUR, 'rgb(70, 70, 70)');\r\n        properties.set(DEFAULT_INVERTED_LABEL_COLOUR, 'white');\r\n        properties.set(DEFAULT_MUTED_LABEL_COLOUR, 'rgb(140, 140, 140)');\r\n        properties.set(DEFAULT_AXIS_GRID_COLOUR, 'rgb(224,234,241)');\r\n        properties.set(DEFAULT_AXIS_LINE_COLOUR, 'rgb(195, 195, 195)');\r\n        properties.set(DEFAULT_CROSS_LINES_COLOUR, 'rgb(70, 70, 70)');\r\n        properties.set(DEFAULT_INSIDE_SERIES_LABEL_COLOUR, DEFAULT_BACKGROUND_FILL);\r\n        properties.set(DEFAULT_BACKGROUND_COLOUR, DEFAULT_BACKGROUND_FILL);\r\n        properties.set(DEFAULT_SHADOW_COLOUR, 'rgba(0, 0, 0, 0.5)');\r\n        properties.set(DEFAULT_DIVERGING_SERIES_COLOUR_RANGE, [\r\n            DEFAULT_FILLS.ORANGE,\r\n            DEFAULT_FILLS.YELLOW,\r\n            DEFAULT_FILLS.GREEN,\r\n        ]);\r\n        properties.set(DEFAULT_HIERARCHY_FILLS, ['#ffffff', '#e0e5ea', '#c1ccd5', '#a3b4c1', '#859cad']);\r\n        properties.set(DEFAULT_HIERARCHY_STROKES, ['#ffffff', '#c5cbd1', '#a4b1bd', '#8498a9', '#648096']);\r\n        properties.set(DEFAULT_POLAR_SERIES_STROKE, DEFAULT_BACKGROUND_FILL);\r\n        properties.set(DEFAULT_WATERFALL_SERIES_POSITIVE_COLOURS, ChartTheme.getWaterfallSeriesDefaultPositiveColors());\r\n        properties.set(DEFAULT_WATERFALL_SERIES_NEGATIVE_COLOURS, ChartTheme.getWaterfallSeriesDefaultNegativeColors());\r\n        properties.set(DEFAULT_WATERFALL_SERIES_TOTAL_COLOURS, ChartTheme.getWaterfallSeriesDefaultTotalColors());\r\n        properties.set(DEFAULT_WATERFALL_SERIES_CONNECTOR_LINE_STROKE, ChartTheme.getWaterfallSeriesDefaultTotalColors().stroke);\r\n        return {\r\n            extensions,\r\n            properties,\r\n        };\r\n    }\r\n}\r\nChartTheme.cartesianAxisDefault = {\r\n    number: Object.assign(Object.assign({}, ChartTheme.getAxisDefaults()), { line: Object.assign(Object.assign({}, ChartTheme.getAxisDefaults().line), { enabled: false }) }),\r\n    log: Object.assign(Object.assign({}, ChartTheme.getAxisDefaults()), { base: 10, line: Object.assign(Object.assign({}, ChartTheme.getAxisDefaults().line), { enabled: false }) }),\r\n    category: Object.assign(Object.assign({}, ChartTheme.getAxisDefaults()), { groupPaddingInner: 0.1, label: Object.assign(Object.assign({}, ChartTheme.getAxisDefaults().label), { autoRotate: true }), gridLine: Object.assign(Object.assign({}, ChartTheme.getAxisDefaults().gridLine), { enabled: false }) }),\r\n    'grouped-category': Object.assign({}, ChartTheme.getAxisDefaults()),\r\n    time: Object.assign(Object.assign({}, ChartTheme.getAxisDefaults()), { gridLine: Object.assign(Object.assign({}, ChartTheme.getAxisDefaults().gridLine), { enabled: false }) }),\r\n};\n\nconst DEFAULT_DARK_BACKGROUND_FILL = '#182732';\r\nconst DEFAULT_DARK_FILLS = {\r\n    BLUE: '#5090dc',\r\n    ORANGE: '#ffa03a',\r\n    GREEN: '#459d55',\r\n    CYAN: '#34bfe1',\r\n    YELLOW: '#e1cc00',\r\n    VIOLET: '#9669cb',\r\n    GRAY: '#b5b5b5',\r\n    MAGENTA: '#bd5aa7',\r\n    BROWN: '#8a6224',\r\n    RED: '#ef5452',\r\n};\r\nconst DEFAULT_DARK_STROKES = {\r\n    BLUE: '#74a8e6',\r\n    ORANGE: '#ffbe70',\r\n    GREEN: '#6cb176',\r\n    CYAN: '#75d4ef',\r\n    YELLOW: '#f6e559',\r\n    VIOLET: '#aa86d8',\r\n    GRAY: '#a1a1a1',\r\n    MAGENTA: '#ce7ab9',\r\n    BROWN: '#997b52',\r\n    RED: '#ff7872',\r\n};\r\nconst palette$8 = {\r\n    fills: Array.from(Object.values(DEFAULT_DARK_FILLS)),\r\n    strokes: Array.from(Object.values(DEFAULT_DARK_STROKES)),\r\n};\r\nclass DarkTheme extends ChartTheme {\r\n    static getWaterfallSeriesDefaultPositiveColors() {\r\n        return {\r\n            fill: DEFAULT_DARK_FILLS.BLUE,\r\n            stroke: DEFAULT_DARK_STROKES.BLUE,\r\n        };\r\n    }\r\n    static getWaterfallSeriesDefaultNegativeColors() {\r\n        return {\r\n            fill: DEFAULT_DARK_FILLS.ORANGE,\r\n            stroke: DEFAULT_DARK_STROKES.ORANGE,\r\n        };\r\n    }\r\n    static getWaterfallSeriesDefaultTotalColors() {\r\n        return {\r\n            fill: DEFAULT_DARK_FILLS.GRAY,\r\n            stroke: DEFAULT_DARK_STROKES.GRAY,\r\n        };\r\n    }\r\n    getTemplateParameters() {\r\n        const result = super.getTemplateParameters();\r\n        result.properties.set(DEFAULT_WATERFALL_SERIES_POSITIVE_COLOURS, DarkTheme.getWaterfallSeriesDefaultPositiveColors());\r\n        result.properties.set(DEFAULT_WATERFALL_SERIES_NEGATIVE_COLOURS, DarkTheme.getWaterfallSeriesDefaultNegativeColors());\r\n        result.properties.set(DEFAULT_WATERFALL_SERIES_TOTAL_COLOURS, DarkTheme.getWaterfallSeriesDefaultTotalColors());\r\n        result.properties.set(DEFAULT_WATERFALL_SERIES_CONNECTOR_LINE_STROKE, DarkTheme.getWaterfallSeriesDefaultTotalColors().stroke);\r\n        result.properties.set(DEFAULT_POLAR_SERIES_STROKE, DEFAULT_DARK_BACKGROUND_FILL);\r\n        result.properties.set(DEFAULT_LABEL_COLOUR, 'white');\r\n        result.properties.set(DEFAULT_MUTED_LABEL_COLOUR, '#7D91A0');\r\n        result.properties.set(DEFAULT_AXIS_GRID_COLOUR, '#545A6E');\r\n        result.properties.set(DEFAULT_CROSS_LINES_COLOUR, 'white');\r\n        result.properties.set(DEFAULT_DIVERGING_SERIES_COLOUR_RANGE, [\r\n            DEFAULT_DARK_FILLS.ORANGE,\r\n            DEFAULT_DARK_FILLS.YELLOW,\r\n            DEFAULT_DARK_FILLS.GREEN,\r\n        ]);\r\n        result.properties.set(DEFAULT_HIERARCHY_FILLS, ['#192834', '#253746', '#324859', '#3f596c', '#4d6a80']);\r\n        result.properties.set(DEFAULT_HIERARCHY_STROKES, ['#192834', '#3b5164', '#496275', '#577287', '#668399']);\r\n        result.properties.set(DEFAULT_BACKGROUND_COLOUR, DEFAULT_DARK_BACKGROUND_FILL);\r\n        result.properties.set(DEFAULT_INSIDE_SERIES_LABEL_COLOUR, DEFAULT_DARK_BACKGROUND_FILL);\r\n        return result;\r\n    }\r\n    getPalette() {\r\n        return palette$8;\r\n    }\r\n    constructor(options) {\r\n        super(options);\r\n    }\r\n}\n\nconst MATERIAL_DARK_FILLS = {\r\n    BLUE: '#2196F3',\r\n    ORANGE: '#FF9800',\r\n    GREEN: '#4CAF50',\r\n    CYAN: '#00BCD4',\r\n    YELLOW: '#FFEB3B',\r\n    VIOLET: '#7E57C2',\r\n    GRAY: '#9E9E9E',\r\n    MAGENTA: '#F06292',\r\n    BROWN: '#795548',\r\n    RED: '#F44336',\r\n};\r\nconst MATERIAL_DARK_STROKES = {\r\n    BLUE: '#90CAF9',\r\n    ORANGE: '#FFCC80',\r\n    GREEN: '#A5D6A7',\r\n    CYAN: '#80DEEA',\r\n    YELLOW: '#FFF9C4',\r\n    VIOLET: '#B39DDB',\r\n    GRAY: '#E0E0E0',\r\n    MAGENTA: '#F48FB1',\r\n    BROWN: '#A1887F',\r\n    RED: '#EF9A9A',\r\n};\r\nconst palette$7 = {\r\n    fills: Array.from(Object.values(MATERIAL_DARK_FILLS)),\r\n    strokes: Array.from(Object.values(MATERIAL_DARK_STROKES)),\r\n};\r\nclass MaterialDark extends DarkTheme {\r\n    static getWaterfallSeriesDefaultPositiveColors() {\r\n        return {\r\n            fill: MATERIAL_DARK_FILLS.BLUE,\r\n            stroke: MATERIAL_DARK_STROKES.BLUE,\r\n        };\r\n    }\r\n    static getWaterfallSeriesDefaultNegativeColors() {\r\n        return {\r\n            fill: MATERIAL_DARK_FILLS.RED,\r\n            stroke: MATERIAL_DARK_STROKES.RED,\r\n        };\r\n    }\r\n    static getWaterfallSeriesDefaultTotalColors() {\r\n        return {\r\n            fill: MATERIAL_DARK_FILLS.GRAY,\r\n            stroke: MATERIAL_DARK_STROKES.GRAY,\r\n        };\r\n    }\r\n    getTemplateParameters() {\r\n        const result = super.getTemplateParameters();\r\n        result.properties.set(DEFAULT_WATERFALL_SERIES_POSITIVE_COLOURS, MaterialDark.getWaterfallSeriesDefaultPositiveColors());\r\n        result.properties.set(DEFAULT_WATERFALL_SERIES_NEGATIVE_COLOURS, MaterialDark.getWaterfallSeriesDefaultNegativeColors());\r\n        result.properties.set(DEFAULT_WATERFALL_SERIES_TOTAL_COLOURS, MaterialDark.getWaterfallSeriesDefaultTotalColors());\r\n        result.properties.set(DEFAULT_DIVERGING_SERIES_COLOUR_RANGE, [\r\n            MATERIAL_DARK_FILLS.ORANGE,\r\n            MATERIAL_DARK_FILLS.YELLOW,\r\n            MATERIAL_DARK_FILLS.GREEN,\r\n        ]);\r\n        result.properties.set(DEFAULT_WATERFALL_SERIES_CONNECTOR_LINE_STROKE, MaterialDark.getWaterfallSeriesDefaultTotalColors().stroke);\r\n        return result;\r\n    }\r\n    getPalette() {\r\n        return palette$7;\r\n    }\r\n}\n\nconst MATERIAL_LIGHT_FILLS = {\r\n    BLUE: '#2196F3',\r\n    ORANGE: '#FF9800',\r\n    GREEN: '#4CAF50',\r\n    CYAN: '#00BCD4',\r\n    YELLOW: '#FFEB3B',\r\n    VIOLET: '#7E57C2',\r\n    GRAY: '#9E9E9E',\r\n    MAGENTA: '#F06292',\r\n    BROWN: '#795548',\r\n    RED: '#F44336',\r\n};\r\nconst MATERIAL_LIGHT_STROKES = {\r\n    BLUE: '#1565C0',\r\n    ORANGE: '#E65100',\r\n    GREEN: '#2E7D32',\r\n    CYAN: '#00838F',\r\n    YELLOW: '#F9A825',\r\n    VIOLET: '#4527A0',\r\n    GRAY: '#616161',\r\n    MAGENTA: '#C2185B',\r\n    BROWN: '#4E342E',\r\n    RED: '#B71C1C',\r\n};\r\nconst palette$6 = {\r\n    fills: Array.from(Object.values(MATERIAL_LIGHT_FILLS)),\r\n    strokes: Array.from(Object.values(MATERIAL_LIGHT_STROKES)),\r\n};\r\nclass MaterialLight extends ChartTheme {\r\n    static getWaterfallSeriesDefaultPositiveColors() {\r\n        return {\r\n            fill: MATERIAL_LIGHT_FILLS.BLUE,\r\n            stroke: MATERIAL_LIGHT_STROKES.BLUE,\r\n        };\r\n    }\r\n    static getWaterfallSeriesDefaultNegativeColors() {\r\n        return {\r\n            fill: MATERIAL_LIGHT_FILLS.RED,\r\n            stroke: MATERIAL_LIGHT_STROKES.RED,\r\n        };\r\n    }\r\n    static getWaterfallSeriesDefaultTotalColors() {\r\n        return {\r\n            fill: MATERIAL_LIGHT_FILLS.GRAY,\r\n            stroke: MATERIAL_LIGHT_STROKES.GRAY,\r\n        };\r\n    }\r\n    getTemplateParameters() {\r\n        const result = super.getTemplateParameters();\r\n        result.properties.set(DEFAULT_WATERFALL_SERIES_POSITIVE_COLOURS, MaterialLight.getWaterfallSeriesDefaultPositiveColors());\r\n        result.properties.set(DEFAULT_WATERFALL_SERIES_NEGATIVE_COLOURS, MaterialLight.getWaterfallSeriesDefaultNegativeColors());\r\n        result.properties.set(DEFAULT_WATERFALL_SERIES_TOTAL_COLOURS, MaterialLight.getWaterfallSeriesDefaultTotalColors());\r\n        result.properties.set(DEFAULT_DIVERGING_SERIES_COLOUR_RANGE, [\r\n            MATERIAL_LIGHT_FILLS.ORANGE,\r\n            MATERIAL_LIGHT_FILLS.YELLOW,\r\n            MATERIAL_LIGHT_FILLS.GREEN,\r\n        ]);\r\n        result.properties.set(DEFAULT_WATERFALL_SERIES_CONNECTOR_LINE_STROKE, MaterialLight.getWaterfallSeriesDefaultTotalColors().stroke);\r\n        return result;\r\n    }\r\n    getPalette() {\r\n        return palette$6;\r\n    }\r\n}\n\nconst POLYCHROMA_DARK_FILLS = {\r\n    BLUE: '#436ff4',\r\n    PURPLE: '#9a7bff',\r\n    MAGENTA: '#d165d2',\r\n    PINK: '#f0598b',\r\n    RED: '#f47348',\r\n    ORANGE: '#f2a602',\r\n    YELLOW: '#e9e201',\r\n    GREEN: '#21b448',\r\n    CYAN: '#00b9a2',\r\n    MODERATE_BLUE: '#00aee4',\r\n};\r\nconst POLYCHROMA_DARK_STROKES = {\r\n    BLUE: '#6698ff',\r\n    PURPLE: '#c0a3ff',\r\n    MAGENTA: '#fc8dfc',\r\n    PINK: '#ff82b1',\r\n    RED: '#ff9b70',\r\n    ORANGE: '#ffcf4e',\r\n    YELLOW: '#ffff58',\r\n    GREEN: '#58dd70',\r\n    CYAN: '#51e2c9',\r\n    MODERATE_BLUE: '#4fd7ff',\r\n};\r\nconst POLYCHROMA_DARK_FILL_GRAY = '#bbbbbb';\r\nconst POLYCHROMA_DARK_STROKE_GRAY = '#eeeeee';\r\nconst palette$5 = {\r\n    fills: Array.from(Object.values(POLYCHROMA_DARK_FILLS)),\r\n    strokes: Array.from(Object.values(POLYCHROMA_DARK_STROKES)),\r\n};\r\nclass PolychromaDark extends DarkTheme {\r\n    static getWaterfallSeriesDefaultPositiveColors() {\r\n        return {\r\n            fill: POLYCHROMA_DARK_FILLS.BLUE,\r\n            stroke: POLYCHROMA_DARK_STROKES.BLUE,\r\n        };\r\n    }\r\n    static getWaterfallSeriesDefaultNegativeColors() {\r\n        return {\r\n            fill: POLYCHROMA_DARK_FILLS.RED,\r\n            stroke: POLYCHROMA_DARK_STROKES.RED,\r\n        };\r\n    }\r\n    static getWaterfallSeriesDefaultTotalColors() {\r\n        return {\r\n            fill: POLYCHROMA_DARK_FILL_GRAY,\r\n            stroke: POLYCHROMA_DARK_STROKE_GRAY,\r\n        };\r\n    }\r\n    getTemplateParameters() {\r\n        const result = super.getTemplateParameters();\r\n        result.properties.set(DEFAULT_WATERFALL_SERIES_POSITIVE_COLOURS, PolychromaDark.getWaterfallSeriesDefaultPositiveColors());\r\n        result.properties.set(DEFAULT_WATERFALL_SERIES_NEGATIVE_COLOURS, PolychromaDark.getWaterfallSeriesDefaultNegativeColors());\r\n        result.properties.set(DEFAULT_WATERFALL_SERIES_TOTAL_COLOURS, PolychromaDark.getWaterfallSeriesDefaultTotalColors());\r\n        result.properties.set(DEFAULT_DIVERGING_SERIES_COLOUR_RANGE, [\r\n            POLYCHROMA_DARK_FILLS.BLUE,\r\n            POLYCHROMA_DARK_FILLS.RED,\r\n        ]);\r\n        result.properties.set(DEFAULT_WATERFALL_SERIES_CONNECTOR_LINE_STROKE, PolychromaDark.getWaterfallSeriesDefaultTotalColors().stroke);\r\n        return result;\r\n    }\r\n    getPalette() {\r\n        return palette$5;\r\n    }\r\n}\n\nconst POLYCHROMA_LIGHT_FILLS = {\r\n    BLUE: '#436ff4',\r\n    PURPLE: '#9a7bff',\r\n    MAGENTA: '#d165d2',\r\n    PINK: '#f0598b',\r\n    RED: '#f47348',\r\n    ORANGE: '#f2a602',\r\n    YELLOW: '#e9e201',\r\n    GREEN: '#21b448',\r\n    CYAN: '#00b9a2',\r\n    MODERATE_BLUE: '#00aee4',\r\n};\r\nconst POLYCHROMA_LIGHT_STROKES = {\r\n    BLUE: '#2346c9',\r\n    PURPLE: '#7653d4',\r\n    MAGENTA: '#a73da9',\r\n    PINK: '#c32d66',\r\n    RED: '#c84b1c',\r\n    ORANGE: '#c87f00',\r\n    YELLOW: '#c1b900',\r\n    GREEN: '#008c1c',\r\n    CYAN: '#00927c',\r\n    MODERATE_BLUE: '#0087bb',\r\n};\r\nconst POLYCHROMA_LIGHT_FILL_GRAY = '#bbbbbb';\r\nconst POLYCHROMA_LIGHT_STROKE_GRAY = '#888888';\r\nconst palette$4 = {\r\n    fills: Array.from(Object.values(POLYCHROMA_LIGHT_FILLS)),\r\n    strokes: Array.from(Object.values(POLYCHROMA_LIGHT_STROKES)),\r\n};\r\nclass PolychromaLight extends ChartTheme {\r\n    static getWaterfallSeriesDefaultPositiveColors() {\r\n        return {\r\n            fill: POLYCHROMA_LIGHT_FILLS.BLUE,\r\n            stroke: POLYCHROMA_LIGHT_STROKES.BLUE,\r\n        };\r\n    }\r\n    static getWaterfallSeriesDefaultNegativeColors() {\r\n        return {\r\n            fill: POLYCHROMA_LIGHT_FILLS.RED,\r\n            stroke: POLYCHROMA_LIGHT_STROKES.RED,\r\n        };\r\n    }\r\n    static getWaterfallSeriesDefaultTotalColors() {\r\n        return {\r\n            fill: POLYCHROMA_LIGHT_FILL_GRAY,\r\n            stroke: POLYCHROMA_LIGHT_STROKE_GRAY,\r\n        };\r\n    }\r\n    getTemplateParameters() {\r\n        const result = super.getTemplateParameters();\r\n        result.properties.set(DEFAULT_WATERFALL_SERIES_POSITIVE_COLOURS, PolychromaLight.getWaterfallSeriesDefaultPositiveColors());\r\n        result.properties.set(DEFAULT_WATERFALL_SERIES_NEGATIVE_COLOURS, PolychromaLight.getWaterfallSeriesDefaultNegativeColors());\r\n        result.properties.set(DEFAULT_WATERFALL_SERIES_TOTAL_COLOURS, PolychromaLight.getWaterfallSeriesDefaultTotalColors());\r\n        result.properties.set(DEFAULT_DIVERGING_SERIES_COLOUR_RANGE, [\r\n            POLYCHROMA_LIGHT_FILLS.BLUE,\r\n            POLYCHROMA_LIGHT_FILLS.RED,\r\n        ]);\r\n        result.properties.set(DEFAULT_WATERFALL_SERIES_CONNECTOR_LINE_STROKE, PolychromaLight.getWaterfallSeriesDefaultTotalColors().stroke);\r\n        return result;\r\n    }\r\n    getPalette() {\r\n        return palette$4;\r\n    }\r\n}\n\nconst SHEETS_DARK_FILLS = {\r\n    BLUE: '#4472C4',\r\n    ORANGE: '#ED7D31',\r\n    GRAY: '#A5A5A5',\r\n    YELLOW: '#FFC000',\r\n    MODERATE_BLUE: '#5B9BD5',\r\n    GREEN: '#70AD47',\r\n    DARK_GRAY: '#7B7B7B',\r\n    DARK_BLUE: '#264478',\r\n    VERY_DARK_GRAY: '#636363',\r\n    DARK_YELLOW: '#997300',\r\n};\r\nconst SHEETS_DARK_STROKES = {\r\n    BLUE: '#6899ee',\r\n    ORANGE: '#ffa55d',\r\n    GRAY: '#cdcdcd',\r\n    YELLOW: '#ffea53',\r\n    MODERATE_BLUE: '#82c3ff',\r\n    GREEN: '#96d56f',\r\n    DARK_GRAY: '#a1a1a1',\r\n    DARK_BLUE: '#47689f',\r\n    VERY_DARK_GRAY: '#878787',\r\n    DARK_YELLOW: '#c0993d',\r\n};\r\nconst palette$3 = {\r\n    fills: Array.from(Object.values(SHEETS_DARK_FILLS)),\r\n    strokes: Array.from(Object.values(SHEETS_DARK_STROKES)),\r\n};\r\nclass SheetsDark extends DarkTheme {\r\n    static getWaterfallSeriesDefaultPositiveColors() {\r\n        return {\r\n            fill: SHEETS_DARK_FILLS.BLUE,\r\n            stroke: SHEETS_DARK_STROKES.BLUE,\r\n        };\r\n    }\r\n    static getWaterfallSeriesDefaultNegativeColors() {\r\n        return {\r\n            fill: SHEETS_DARK_FILLS.ORANGE,\r\n            stroke: SHEETS_DARK_STROKES.ORANGE,\r\n        };\r\n    }\r\n    static getWaterfallSeriesDefaultTotalColors() {\r\n        return {\r\n            fill: SHEETS_DARK_FILLS.GRAY,\r\n            stroke: SHEETS_DARK_STROKES.GRAY,\r\n        };\r\n    }\r\n    getTemplateParameters() {\r\n        const result = super.getTemplateParameters();\r\n        result.properties.set(DEFAULT_WATERFALL_SERIES_POSITIVE_COLOURS, SheetsDark.getWaterfallSeriesDefaultPositiveColors());\r\n        result.properties.set(DEFAULT_WATERFALL_SERIES_NEGATIVE_COLOURS, SheetsDark.getWaterfallSeriesDefaultNegativeColors());\r\n        result.properties.set(DEFAULT_WATERFALL_SERIES_TOTAL_COLOURS, SheetsDark.getWaterfallSeriesDefaultTotalColors());\r\n        result.properties.set(DEFAULT_DIVERGING_SERIES_COLOUR_RANGE, [\r\n            SHEETS_DARK_FILLS.ORANGE,\r\n            SHEETS_DARK_FILLS.YELLOW,\r\n            SHEETS_DARK_FILLS.GREEN,\r\n        ]);\r\n        result.properties.set(DEFAULT_WATERFALL_SERIES_CONNECTOR_LINE_STROKE, SheetsDark.getWaterfallSeriesDefaultTotalColors().stroke);\r\n        return result;\r\n    }\r\n    getPalette() {\r\n        return palette$3;\r\n    }\r\n}\n\nconst SHEETS_LIGHT_FILLS = {\r\n    BLUE: '#5281d5',\r\n    ORANGE: '#ff8d44',\r\n    GRAY: '#b5b5b5',\r\n    YELLOW: '#ffd02f',\r\n    MODERATE_BLUE: '#6aabe6',\r\n    GREEN: '#7fbd57',\r\n    DARK_GRAY: '#8a8a8a',\r\n    DARK_BLUE: '#335287',\r\n    VERY_DARK_GRAY: '#717171',\r\n    DARK_YELLOW: '#a98220',\r\n};\r\nconst SHEETS_LIGHT_STROKES = {\r\n    BLUE: '#214d9b',\r\n    ORANGE: '#c25600',\r\n    GRAY: '#7f7f7f',\r\n    YELLOW: '#d59800',\r\n    MODERATE_BLUE: '#3575ac',\r\n    GREEN: '#4b861a',\r\n    DARK_GRAY: '#575757',\r\n    DARK_BLUE: '#062253',\r\n    VERY_DARK_GRAY: '#414141',\r\n    DARK_YELLOW: '#734f00',\r\n};\r\nconst palette$2 = {\r\n    fills: Array.from(Object.values(SHEETS_LIGHT_FILLS)),\r\n    strokes: Array.from(Object.values(SHEETS_LIGHT_STROKES)),\r\n};\r\nclass SheetsLight extends ChartTheme {\r\n    static getWaterfallSeriesDefaultPositiveColors() {\r\n        return {\r\n            fill: SHEETS_LIGHT_FILLS.BLUE,\r\n            stroke: SHEETS_LIGHT_STROKES.BLUE,\r\n        };\r\n    }\r\n    static getWaterfallSeriesDefaultNegativeColors() {\r\n        return {\r\n            fill: SHEETS_LIGHT_FILLS.ORANGE,\r\n            stroke: SHEETS_LIGHT_STROKES.ORANGE,\r\n        };\r\n    }\r\n    static getWaterfallSeriesDefaultTotalColors() {\r\n        return {\r\n            fill: SHEETS_LIGHT_FILLS.GRAY,\r\n            stroke: SHEETS_LIGHT_STROKES.GRAY,\r\n        };\r\n    }\r\n    getTemplateParameters() {\r\n        const result = super.getTemplateParameters();\r\n        result.properties.set(DEFAULT_WATERFALL_SERIES_POSITIVE_COLOURS, SheetsLight.getWaterfallSeriesDefaultPositiveColors());\r\n        result.properties.set(DEFAULT_WATERFALL_SERIES_NEGATIVE_COLOURS, SheetsLight.getWaterfallSeriesDefaultNegativeColors());\r\n        result.properties.set(DEFAULT_WATERFALL_SERIES_TOTAL_COLOURS, SheetsLight.getWaterfallSeriesDefaultTotalColors());\r\n        result.properties.set(DEFAULT_DIVERGING_SERIES_COLOUR_RANGE, [\r\n            SHEETS_LIGHT_FILLS.ORANGE,\r\n            SHEETS_LIGHT_FILLS.YELLOW,\r\n            SHEETS_LIGHT_FILLS.GREEN,\r\n        ]);\r\n        result.properties.set(DEFAULT_WATERFALL_SERIES_CONNECTOR_LINE_STROKE, SheetsLight.getWaterfallSeriesDefaultTotalColors().stroke);\r\n        return result;\r\n    }\r\n    getPalette() {\r\n        return palette$2;\r\n    }\r\n}\n\nconst VIVID_DARK_FILLS = {\r\n    BLUE: '#0083ff',\r\n    ORANGE: '#ff6600',\r\n    GREEN: '#00af00',\r\n    CYAN: '#00ccff',\r\n    YELLOW: '#f7c700',\r\n    VIOLET: '#ac26ff',\r\n    GRAY: '#a7a7b7',\r\n    MAGENTA: '#e800c5',\r\n    BROWN: '#b54300',\r\n    RED: '#ff0000',\r\n};\r\nconst VIVID_DARK_STROKES = {\r\n    BLUE: '#67b7ff',\r\n    ORANGE: '#ffc24d',\r\n    GREEN: '#5cc86f',\r\n    CYAN: '#54ebff',\r\n    VIOLET: '#c18aff',\r\n    YELLOW: '#fff653',\r\n    GRAY: '#aeaeae',\r\n    MAGENTA: '#f078d4',\r\n    BROWN: '#ba8438',\r\n    RED: '#ff726e',\r\n};\r\nconst palette$1 = {\r\n    fills: Array.from(Object.values(VIVID_DARK_FILLS)),\r\n    strokes: Array.from(Object.values(VIVID_DARK_STROKES)),\r\n};\r\nclass VividDark extends DarkTheme {\r\n    static getWaterfallSeriesDefaultPositiveColors() {\r\n        return {\r\n            fill: VIVID_DARK_FILLS.BLUE,\r\n            stroke: VIVID_DARK_STROKES.BLUE,\r\n        };\r\n    }\r\n    static getWaterfallSeriesDefaultNegativeColors() {\r\n        return {\r\n            fill: VIVID_DARK_FILLS.ORANGE,\r\n            stroke: VIVID_DARK_STROKES.ORANGE,\r\n        };\r\n    }\r\n    static getWaterfallSeriesDefaultTotalColors() {\r\n        return {\r\n            fill: VIVID_DARK_FILLS.GRAY,\r\n            stroke: VIVID_DARK_STROKES.GRAY,\r\n        };\r\n    }\r\n    getTemplateParameters() {\r\n        const result = super.getTemplateParameters();\r\n        result.properties.set(DEFAULT_WATERFALL_SERIES_POSITIVE_COLOURS, VividDark.getWaterfallSeriesDefaultPositiveColors());\r\n        result.properties.set(DEFAULT_WATERFALL_SERIES_NEGATIVE_COLOURS, VividDark.getWaterfallSeriesDefaultNegativeColors());\r\n        result.properties.set(DEFAULT_WATERFALL_SERIES_TOTAL_COLOURS, VividDark.getWaterfallSeriesDefaultTotalColors());\r\n        result.properties.set(DEFAULT_DIVERGING_SERIES_COLOUR_RANGE, [\r\n            VIVID_DARK_FILLS.ORANGE,\r\n            VIVID_DARK_FILLS.YELLOW,\r\n            VIVID_DARK_FILLS.GREEN,\r\n        ]);\r\n        result.properties.set(DEFAULT_WATERFALL_SERIES_CONNECTOR_LINE_STROKE, VividDark.getWaterfallSeriesDefaultTotalColors().stroke);\r\n        return result;\r\n    }\r\n    getPalette() {\r\n        return palette$1;\r\n    }\r\n}\n\nconst VIVID_FILLS = {\r\n    BLUE: '#0083ff',\r\n    ORANGE: '#ff6600',\r\n    GREEN: '#00af00',\r\n    CYAN: '#00ccff',\r\n    YELLOW: '#f7c700',\r\n    VIOLET: '#ac26ff',\r\n    GRAY: '#a7a7b7',\r\n    MAGENTA: '#e800c5',\r\n    BROWN: '#b54300',\r\n    RED: '#ff0000',\r\n};\r\nconst VIVID_STROKES = {\r\n    BLUE: '#0f68c0',\r\n    ORANGE: '#d47100',\r\n    GREEN: '#007922',\r\n    CYAN: '#009ac2',\r\n    VIOLET: '#bca400',\r\n    YELLOW: '#753cac',\r\n    GRAY: '#646464',\r\n    MAGENTA: '#9b2685',\r\n    BROWN: '#6c3b00',\r\n    RED: '#cb0021',\r\n};\r\nconst palette = {\r\n    fills: Array.from(Object.values(VIVID_FILLS)),\r\n    strokes: Array.from(Object.values(VIVID_STROKES)),\r\n};\r\nclass VividLight extends ChartTheme {\r\n    static getWaterfallSeriesDefaultPositiveColors() {\r\n        return {\r\n            fill: VIVID_FILLS.BLUE,\r\n            stroke: VIVID_STROKES.BLUE,\r\n        };\r\n    }\r\n    static getWaterfallSeriesDefaultNegativeColors() {\r\n        return {\r\n            fill: VIVID_FILLS.ORANGE,\r\n            stroke: VIVID_STROKES.ORANGE,\r\n        };\r\n    }\r\n    static getWaterfallSeriesDefaultTotalColors() {\r\n        return {\r\n            fill: VIVID_FILLS.GRAY,\r\n            stroke: VIVID_STROKES.GRAY,\r\n        };\r\n    }\r\n    getTemplateParameters() {\r\n        const result = super.getTemplateParameters();\r\n        result.properties.set(DEFAULT_WATERFALL_SERIES_POSITIVE_COLOURS, VividLight.getWaterfallSeriesDefaultPositiveColors());\r\n        result.properties.set(DEFAULT_WATERFALL_SERIES_NEGATIVE_COLOURS, VividLight.getWaterfallSeriesDefaultNegativeColors());\r\n        result.properties.set(DEFAULT_WATERFALL_SERIES_TOTAL_COLOURS, VividLight.getWaterfallSeriesDefaultTotalColors());\r\n        result.properties.set(DEFAULT_DIVERGING_SERIES_COLOUR_RANGE, [\r\n            VIVID_FILLS.ORANGE,\r\n            VIVID_FILLS.YELLOW,\r\n            VIVID_FILLS.GREEN,\r\n        ]);\r\n        result.properties.set(DEFAULT_WATERFALL_SERIES_CONNECTOR_LINE_STROKE, VividLight.getWaterfallSeriesDefaultTotalColors().stroke);\r\n        return result;\r\n    }\r\n    getPalette() {\r\n        return palette;\r\n    }\r\n}\n\nconst lightTheme = () => new ChartTheme();\r\nconst darkTheme = () => new DarkTheme();\r\nconst lightThemes = {\r\n    undefined: lightTheme,\r\n    null: lightTheme,\r\n    'ag-default': lightTheme,\r\n    'ag-sheets': () => new SheetsLight(),\r\n    'ag-polychroma': () => new PolychromaLight(),\r\n    'ag-vivid': () => new VividLight(),\r\n    'ag-material': () => new MaterialLight(),\r\n};\r\nconst darkThemes = {\r\n    undefined: darkTheme,\r\n    null: darkTheme,\r\n    'ag-default-dark': darkTheme,\r\n    'ag-sheets-dark': () => new SheetsDark(),\r\n    'ag-polychroma-dark': () => new PolychromaDark(),\r\n    'ag-vivid-dark': () => new VividDark(),\r\n    'ag-material-dark': () => new MaterialDark(),\r\n};\r\nconst themes$1 = Object.assign(Object.assign({}, darkThemes), lightThemes);\r\nfunction validateChartThemeObject(unknownObject) {\r\n    if (unknownObject === null) {\r\n        return undefined;\r\n    }\r\n    let valid = true;\r\n    const { baseTheme, palette, overrides } = unknownObject;\r\n    if (baseTheme !== undefined && typeof baseTheme !== 'string' && typeof baseTheme !== 'object') {\r\n        Logger.warn(`invalid theme.baseTheme type ${typeof baseTheme}, expected (string | object).`);\r\n        valid = false;\r\n    }\r\n    if (overrides !== undefined && typeof overrides !== 'object') {\r\n        Logger.warn(`invalid theme.overrides type ${typeof overrides}, expected object.`);\r\n        valid = false;\r\n    }\r\n    if (typeof palette === 'object') {\r\n        if (palette !== null) {\r\n            const { fills, strokes } = palette;\r\n            if (!Array.isArray(fills)) {\r\n                Logger.warn(`theme.overrides.fills must be a defined array`);\r\n                valid = false;\r\n            }\r\n            if (!Array.isArray(strokes)) {\r\n                Logger.warn(`theme.overrides.strokes must be a defined array`);\r\n                valid = false;\r\n            }\r\n        }\r\n    }\r\n    else if (palette !== undefined) {\r\n        Logger.warn(`invalid theme.palette type ${typeof palette}, expected object.`);\r\n        valid = false;\r\n    }\r\n    if (valid) {\r\n        return unknownObject;\r\n    }\r\n    return undefined;\r\n}\r\nfunction validateChartTheme(value) {\r\n    if (value === undefined || typeof value === 'string' || value instanceof ChartTheme) {\r\n        return value;\r\n    }\r\n    if (typeof value === 'object') {\r\n        return validateChartThemeObject(value);\r\n    }\r\n    Logger.warn(`invalid theme value type ${typeof value}, expected object.`);\r\n    return undefined;\r\n}\r\nfunction getChartTheme(unvalidatedValue) {\r\n    var _a;\r\n    // unvalidatedValue is either a built-in theme (`string | ChartTheme`) or a user defined\r\n    // theme (`AgChartTheme`). In the latter case, we can't make any assumption about the\r\n    // property types, hence why the input parameter is `unknown`. This abnormal validation\r\n    // is tech debt; the ideal solution would be to integrate user themes with the @Validate\r\n    // decorator like other chart options.\r\n    let value = validateChartTheme(unvalidatedValue);\r\n    if (value instanceof ChartTheme) {\r\n        return value;\r\n    }\r\n    if (value === undefined || typeof value === 'string') {\r\n        const stockTheme = themes$1[value];\r\n        if (stockTheme) {\r\n            return stockTheme();\r\n        }\r\n        Logger.warnOnce(`the theme [${value}] is invalid, using [ag-default] instead.`);\r\n        return lightTheme();\r\n    }\r\n    // Flatten recursive themes.\r\n    const overrides = [];\r\n    let palette;\r\n    while (typeof value === 'object') {\r\n        overrides.push((_a = value.overrides) !== null && _a !== void 0 ? _a : {});\r\n        // Use first palette found, they can't be merged.\r\n        if (value.palette && palette == null) {\r\n            palette = value.palette;\r\n        }\r\n        value = value.baseTheme;\r\n    }\r\n    overrides.reverse();\r\n    const flattenedTheme = Object.assign({ baseTheme: value, overrides: jsonMerge(overrides) }, (palette ? { palette } : {}));\r\n    const baseTheme = flattenedTheme.baseTheme ? getChartTheme(flattenedTheme.baseTheme) : lightTheme();\r\n    return new baseTheme.constructor(flattenedTheme);\r\n}\n\nfunction takeColours(context, colours, maxCount) {\r\n    const result = [];\r\n    for (let count = 0; count < maxCount; count++) {\r\n        result.push(colours[(count + context.colourIndex) % colours.length]);\r\n    }\r\n    return result;\r\n}\r\nconst noDataCloneMergeOptions = {\r\n    avoidDeepClone: ['data'],\r\n};\r\nfunction getGlobalTooltipPositionOptions(position) {\r\n    // Note: we do not need to show a warning message if the validation fails. These global tooltip options\r\n    // are already processed at the root of the chart options. Logging a message here would trigger duplicate\r\n    // validation warnings.\r\n    if (position === undefined || typeof position !== 'object' || position === null) {\r\n        return {};\r\n    }\r\n    const { type, xOffset, yOffset } = position;\r\n    const result = {};\r\n    const AgTooltipPositionTypeMap = { pointer: true, node: true };\r\n    const isTooltipPositionType = (value) => Object.keys(AgTooltipPositionTypeMap).includes(value);\r\n    if (typeof type === 'string' && isTooltipPositionType(type)) {\r\n        result.type = type;\r\n    }\r\n    if (typeof xOffset === 'number' && !isNaN(xOffset) && isFinite(xOffset)) {\r\n        result.xOffset = xOffset;\r\n    }\r\n    if (typeof yOffset === 'number' && !isNaN(yOffset) && isFinite(yOffset)) {\r\n        result.yOffset = yOffset;\r\n    }\r\n    return result;\r\n}\r\nfunction prepareOptions(options) {\r\n    var _a, _b, _c, _d;\r\n    sanityCheckOptions(options);\r\n    // Determine type and ensure it's explicit in the options config.\r\n    const type = optionsType(options);\r\n    const globalTooltipPositionOptions = getGlobalTooltipPositionOptions((_a = options.tooltip) === null || _a === void 0 ? void 0 : _a.position);\r\n    const checkSeriesType = (type) => {\r\n        if (type != null && !(isSeriesOptionType(type) || isEnterpriseSeriesType(type) || getSeriesDefaults(type))) {\r\n            throw new Error(`AG Charts - unknown series type: ${type}; expected one of: ${CHART_TYPES.seriesTypes}`);\r\n        }\r\n    };\r\n    checkSeriesType(type);\r\n    for (const { type: seriesType } of (_b = options.series) !== null && _b !== void 0 ? _b : []) {\r\n        if (seriesType == null)\r\n            continue;\r\n        checkSeriesType(seriesType);\r\n    }\r\n    options = validateSoloSeries(Object.assign(Object.assign({}, options), { type }));\r\n    let defaultSeriesType = 'line';\r\n    if (isAgCartesianChartOptions(options)) {\r\n        defaultSeriesType = 'line';\r\n    }\r\n    else if (isAgHierarchyChartOptions(options)) {\r\n        defaultSeriesType = 'treemap';\r\n    }\r\n    else if (isAgPolarChartOptions(options)) {\r\n        defaultSeriesType = 'pie';\r\n    }\r\n    let defaultOverrides = getSeriesDefaults(type);\r\n    if (isDefaultAxisSwapNeeded(options)) {\r\n        defaultOverrides = swapAxes(defaultOverrides);\r\n    }\r\n    defaultOverrides = executeCustomDefaultsFunctions(options, defaultOverrides);\r\n    const conflictOverrides = resolveModuleConflicts(options);\r\n    removeDisabledOptions(options);\r\n    const { context, mergedOptions, axesThemes, seriesThemes, theme } = prepareMainOptions(defaultOverrides, options, conflictOverrides);\r\n    // Special cases where we have arrays of elements which need their own defaults.\r\n    // Apply series themes before calling processSeriesOptions() as it reduces and renames some\r\n    // properties, and in that case then cannot correctly have themes applied.\r\n    mergedOptions.series = processSeriesOptions(mergedOptions, ((_c = mergedOptions.series) !== null && _c !== void 0 ? _c : []).map((s) => {\r\n        var _a;\r\n        const type = (_a = s.type) !== null && _a !== void 0 ? _a : defaultSeriesType;\r\n        const mergedSeries = mergeSeriesOptions(s, type, seriesThemes, globalTooltipPositionOptions);\r\n        if (type === 'pie') {\r\n            preparePieOptions(seriesThemes.pie, s, mergedSeries);\r\n        }\r\n        return mergedSeries;\r\n    }))\r\n        .map((s) => prepareSeries(context, s))\r\n        .map((s) => theme.templateTheme(s));\r\n    const checkAxisType = (type) => {\r\n        const isAxisType = isAxisOptionType(type);\r\n        if (!isAxisType) {\r\n            Logger.warnOnce(`unknown axis type: ${type}; expected one of: ${AXIS_TYPES.axesTypes}, ignoring.`);\r\n        }\r\n        return isAxisType;\r\n    };\r\n    if ('axes' in mergedOptions) {\r\n        let validAxesTypes = true;\r\n        for (const { type: axisType } of (_d = mergedOptions.axes) !== null && _d !== void 0 ? _d : []) {\r\n            validAxesTypes && (validAxesTypes = checkAxisType(axisType));\r\n        }\r\n        const axisSource = validAxesTypes ? mergedOptions.axes : defaultOverrides.axes;\r\n        mergedOptions.axes = axisSource === null || axisSource === void 0 ? void 0 : axisSource.map((axis) => {\r\n            var _a, _b, _c, _d, _e;\r\n            const axisType = axis.type;\r\n            let axisDefaults;\r\n            if (validAxesTypes) {\r\n                axisDefaults = (_a = defaultOverrides.axes) === null || _a === void 0 ? void 0 : _a.find(({ type }) => type === axisType);\r\n            }\r\n            const axesTheme = jsonMerge([\r\n                (_b = axesThemes[axisType]) !== null && _b !== void 0 ? _b : {},\r\n                (_e = (_c = axesThemes[axisType]) === null || _c === void 0 ? void 0 : _c[(_d = axis.position) !== null && _d !== void 0 ? _d : 'unknown']) !== null && _e !== void 0 ? _e : {},\r\n                axisDefaults,\r\n            ]);\r\n            return prepareAxis(axis, axesTheme);\r\n        });\r\n        prepareLegendEnabledOption(options, mergedOptions);\r\n    }\r\n    prepareEnabledOptions(options, mergedOptions);\r\n    return mergedOptions;\r\n}\r\nfunction sanityCheckOptions(options) {\r\n    const deprecatedArrayProps = {\r\n        yKeys: 'yKey',\r\n        yNames: 'yName',\r\n    };\r\n    Object.entries(deprecatedArrayProps).forEach(([oldProp, newProp]) => {\r\n        var _a;\r\n        if ((_a = options.series) === null || _a === void 0 ? void 0 : _a.some((s) => s[oldProp] != null)) {\r\n            Logger.warnOnce(`Property [series.${oldProp}] is deprecated, please use [series.${newProp}] and multiple series instead.`);\r\n        }\r\n    });\r\n}\r\nfunction hasSoloSeries(options) {\r\n    for (const series of options) {\r\n        if (isSoloSeries(series.type))\r\n            return true;\r\n    }\r\n    return false;\r\n}\r\nfunction validateSoloSeries(options) {\r\n    if (options.series === undefined || options.series.length <= 1 || !hasSoloSeries(options.series)) {\r\n        return options;\r\n    }\r\n    // If the first series is a solo-series, remove all trailing series.\r\n    // If the frist series is not a solo-series, remove all solo-series.\r\n    let series = [...options.series];\r\n    if (isSoloSeries(series[0].type)) {\r\n        Logger.warn(`series[0] of type '${series[0].type}' is incompatible with other series types. Only processing series[0]`);\r\n        series = series.slice(0, 1);\r\n    }\r\n    else {\r\n        const rejects = Array.from(new Set(series.filter((s) => isSoloSeries(s.type)).map((s) => s.type)));\r\n        Logger.warnOnce(`Unable to mix these series types with the lead series type: ${rejects}`);\r\n        series = series.filter((s) => !isSoloSeries(s.type));\r\n    }\r\n    return Object.assign(Object.assign({}, options), { series });\r\n}\r\nfunction mergeSeriesOptions(series, type, seriesThemes, globalTooltipPositionOptions) {\r\n    var _a, _b;\r\n    const mergedTooltipPosition = jsonMerge([Object.assign({}, globalTooltipPositionOptions), (_a = series.tooltip) === null || _a === void 0 ? void 0 : _a.position], noDataCloneMergeOptions);\r\n    return jsonMerge([\r\n        (_b = seriesThemes[type]) !== null && _b !== void 0 ? _b : {},\r\n        Object.assign(Object.assign({}, series), { type, tooltip: Object.assign(Object.assign({}, series.tooltip), { position: mergedTooltipPosition }) }),\r\n    ], noDataCloneMergeOptions);\r\n}\r\nfunction prepareMainOptions(defaultOverrides, options, conflictOverrides) {\r\n    const { theme, cleanedTheme, axesThemes, seriesThemes, userPalette } = prepareTheme(options);\r\n    const context = { colourIndex: 0, palette: theme.palette, userPalette, theme };\r\n    defaultOverrides = theme.templateTheme(defaultOverrides);\r\n    const mergedOptions = jsonMerge([defaultOverrides, cleanedTheme, options, conflictOverrides], noDataCloneMergeOptions);\r\n    if (!enterpriseModule.isEnterprise) {\r\n        removeUsedEnterpriseOptions(mergedOptions);\r\n    }\r\n    return { context, mergedOptions, axesThemes, seriesThemes, theme };\r\n}\r\nfunction prepareTheme(options) {\r\n    var _a;\r\n    const theme = getChartTheme(options.theme);\r\n    const themeConfig = theme.config[optionsType(options)];\r\n    const seriesThemes = Object.entries(theme.config).reduce((result, [seriesType, { series }]) => {\r\n        result[seriesType] = series;\r\n        return result;\r\n    }, {});\r\n    const userTheme = options.theme;\r\n    const userPalette = typeof userTheme === 'object' && userTheme.palette ? userTheme.palette : null;\r\n    return {\r\n        theme,\r\n        axesThemes: (_a = themeConfig === null || themeConfig === void 0 ? void 0 : themeConfig['axes']) !== null && _a !== void 0 ? _a : {},\r\n        seriesThemes: seriesThemes,\r\n        cleanedTheme: jsonMerge([themeConfig !== null && themeConfig !== void 0 ? themeConfig : {}, { axes: DELETE, series: DELETE }]),\r\n        userPalette,\r\n    };\r\n}\r\nfunction prepareSeries(context, input, ...defaults) {\r\n    const paletteOptions = calculateSeriesPalette(context, input);\r\n    // Part of the options interface, but not directly consumed by the series implementations.\r\n    const removeOptions = { stacked: DELETE, grouped: DELETE };\r\n    return jsonMerge([...defaults, paletteOptions, input, removeOptions], noDataCloneMergeOptions);\r\n}\r\nfunction calculateSeriesPalette(context, input) {\r\n    const paletteFactory = getSeriesPaletteFactory(input.type);\r\n    if (!paletteFactory) {\r\n        return {};\r\n    }\r\n    const { palette: { fills, strokes }, userPalette, theme, } = context;\r\n    const colorsCount = Math.max(fills.length, strokes.length);\r\n    return paletteFactory({\r\n        userPalette,\r\n        themeTemplateParameters: theme.getTemplateParameters(),\r\n        colorsCount,\r\n        takeColors: (count) => {\r\n            const colors = {\r\n                fills: takeColours(context, fills, count),\r\n                strokes: takeColours(context, strokes, count),\r\n            };\r\n            context.colourIndex += count;\r\n            return colors;\r\n        },\r\n    });\r\n}\r\nfunction prepareAxis(axis, axisTheme) {\r\n    // Remove redundant theme overload keys.\r\n    const removeOptions = { top: DELETE, bottom: DELETE, left: DELETE, right: DELETE };\r\n    // Special cross lines case where we have an array of cross line elements which need their own defaults.\r\n    if (axis.crossLines) {\r\n        if (!Array.isArray(axis.crossLines)) {\r\n            Logger.warn('axis[].crossLines should be an array.');\r\n            axis.crossLines = [];\r\n        }\r\n        const { crossLines: crossLinesTheme } = axisTheme;\r\n        axis.crossLines = axis.crossLines.map((crossLine) => jsonMerge([crossLinesTheme, crossLine]));\r\n    }\r\n    const cleanTheme = { crossLines: DELETE };\r\n    return jsonMerge([axisTheme, cleanTheme, axis, removeOptions], noDataCloneMergeOptions);\r\n}\r\nfunction removeDisabledOptions(options) {\r\n    // Remove configurations from all option objects with a `false` value for the `enabled` property.\r\n    jsonWalk(options, (_, visitingUserOpts) => {\r\n        if (visitingUserOpts.enabled === false) {\r\n            Object.keys(visitingUserOpts).forEach((key) => {\r\n                if (key === 'enabled')\r\n                    return;\r\n                delete visitingUserOpts[key];\r\n            });\r\n        }\r\n    }, { skip: ['data', 'theme'] });\r\n}\r\nfunction prepareLegendEnabledOption(options, mergedOptions) {\r\n    var _a, _b, _c, _d;\r\n    // Disable legend by default for single series cartesian charts\r\n    if (((_a = options.legend) === null || _a === void 0 ? void 0 : _a.enabled) !== undefined || ((_b = mergedOptions.legend) === null || _b === void 0 ? void 0 : _b.enabled) !== undefined) {\r\n        return;\r\n    }\r\n    (_c = mergedOptions.legend) !== null && _c !== void 0 ? _c : (mergedOptions.legend = {});\r\n    if (((_d = options.series) !== null && _d !== void 0 ? _d : []).length > 1) {\r\n        mergedOptions.legend.enabled = true;\r\n        return;\r\n    }\r\n    mergedOptions.legend.enabled = false;\r\n}\r\nfunction prepareEnabledOptions(options, mergedOptions) {\r\n    // Set `enabled: true` for all option objects where the user has provided values.\r\n    jsonWalk(options, (_, visitingUserOpts, visitingMergedOpts) => {\r\n        if (!visitingMergedOpts)\r\n            return;\r\n        const { _enabledFromTheme } = visitingMergedOpts;\r\n        if (_enabledFromTheme != null) {\r\n            // Do not apply special handling, base enablement on theme.\r\n            delete visitingMergedOpts._enabledFromTheme;\r\n        }\r\n        if (!('enabled' in visitingMergedOpts))\r\n            return;\r\n        if (_enabledFromTheme)\r\n            return;\r\n        if (visitingUserOpts.enabled == null) {\r\n            visitingMergedOpts.enabled = true;\r\n        }\r\n    }, { skip: ['data', 'theme'] }, mergedOptions);\r\n    // Cleanup any special properties.\r\n    jsonWalk(mergedOptions, (_, visitingMergedOpts) => {\r\n        if (visitingMergedOpts._enabledFromTheme != null) {\r\n            // Do not apply special handling, base enablement on theme.\r\n            delete visitingMergedOpts._enabledFromTheme;\r\n        }\r\n    }, { skip: ['data', 'theme'] });\r\n}\r\nfunction preparePieOptions(pieSeriesTheme, seriesOptions, mergedSeries) {\r\n    if (Array.isArray(seriesOptions.innerLabels)) {\r\n        mergedSeries.innerLabels = seriesOptions.innerLabels.map((ln) => {\r\n            return jsonMerge([pieSeriesTheme.innerLabels, ln]);\r\n        });\r\n    }\r\n    else {\r\n        mergedSeries.innerLabels = DELETE;\r\n    }\r\n}\n\nclass PolarChart extends Chart {\r\n    constructor(specialOverrides, resources) {\r\n        super(specialOverrides, resources);\r\n        this.padding = new Padding(40);\r\n        this.axisGroup.zIndex = Layers.AXIS_FOREGROUND_ZINDEX;\r\n    }\r\n    performLayout() {\r\n        const _super = Object.create(null, {\r\n            performLayout: { get: () => super.performLayout }\r\n        });\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const shrinkRect = yield _super.performLayout.call(this);\r\n            const fullSeriesRect = shrinkRect.clone();\r\n            this.computeSeriesRect(shrinkRect);\r\n            yield this.computeCircle(shrinkRect);\r\n            this.axes.forEach((axis) => axis.update());\r\n            this.hoverRect = shrinkRect;\r\n            this.layoutService.dispatchLayoutComplete({\r\n                type: 'layout-complete',\r\n                chart: { width: this.scene.width, height: this.scene.height },\r\n                clipSeries: false,\r\n                series: { rect: fullSeriesRect, paddedRect: shrinkRect, visible: true },\r\n                axes: [],\r\n            });\r\n            return shrinkRect;\r\n        });\r\n    }\r\n    updateAxes(cx, cy, radius) {\r\n        var _a, _b;\r\n        const angleAxis = this.axes.find((axis) => axis.direction === ChartAxisDirection.X);\r\n        const radiusAxis = this.axes.find((axis) => axis.direction === ChartAxisDirection.Y);\r\n        if (!(angleAxis instanceof PolarAxis) || !(radiusAxis instanceof PolarAxis)) {\r\n            return;\r\n        }\r\n        const angleScale = angleAxis.scale;\r\n        const angles = (_a = angleScale.ticks) === null || _a === void 0 ? void 0 : _a.call(angleScale).map((value) => angleScale.convert(value));\r\n        const innerRadiusRatio = radiusAxis.innerRadiusRatio;\r\n        angleAxis.innerRadiusRatio = innerRadiusRatio;\r\n        (_b = angleAxis.computeRange) === null || _b === void 0 ? void 0 : _b.call(angleAxis);\r\n        angleAxis.gridLength = radius;\r\n        radiusAxis.gridAngles = angles;\r\n        radiusAxis.gridRange = angleAxis.range;\r\n        radiusAxis.range = [radius, radius * innerRadiusRatio];\r\n        [angleAxis, radiusAxis].forEach((axis) => {\r\n            axis.translation.x = cx;\r\n            axis.translation.y = cy;\r\n            axis.calculateLayout();\r\n        });\r\n    }\r\n    computeSeriesRect(shrinkRect) {\r\n        const { seriesArea: { padding }, } = this;\r\n        shrinkRect.shrink(padding.left, 'left');\r\n        shrinkRect.shrink(padding.top, 'top');\r\n        shrinkRect.shrink(padding.right, 'right');\r\n        shrinkRect.shrink(padding.bottom, 'bottom');\r\n        this.seriesRect = shrinkRect;\r\n        this.animationRect = shrinkRect;\r\n    }\r\n    computeCircle(seriesBox) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const polarSeries = this.series.filter((series) => {\r\n                return series instanceof PolarSeries;\r\n            });\r\n            const polarAxes = this.axes.filter((axis) => {\r\n                return axis instanceof PolarAxis;\r\n            });\r\n            const setSeriesCircle = (cx, cy, r) => {\r\n                this.updateAxes(cx, cy, r);\r\n                polarSeries.forEach((series) => {\r\n                    series.centerX = cx;\r\n                    series.centerY = cy;\r\n                    series.radius = r;\r\n                });\r\n                const pieSeries = polarSeries.filter((s) => s instanceof PieSeries);\r\n                if (pieSeries.length > 1) {\r\n                    const innerRadii = pieSeries\r\n                        .map((series) => {\r\n                        const innerRadius = series.getInnerRadius();\r\n                        return { series, innerRadius };\r\n                    })\r\n                        .sort((a, b) => a.innerRadius - b.innerRadius);\r\n                    innerRadii[innerRadii.length - 1].series.surroundingRadius = undefined;\r\n                    for (let i = 0; i < innerRadii.length - 1; i++) {\r\n                        innerRadii[i].series.surroundingRadius = innerRadii[i + 1].innerRadius;\r\n                    }\r\n                }\r\n            };\r\n            const centerX = seriesBox.x + seriesBox.width / 2;\r\n            const centerY = seriesBox.y + seriesBox.height / 2;\r\n            const initialRadius = Math.max(0, Math.min(seriesBox.width, seriesBox.height) / 2);\r\n            let radius = initialRadius;\r\n            setSeriesCircle(centerX, centerY, radius);\r\n            const shake = ({ hideWhenNecessary = false } = {}) => __awaiter(this, void 0, void 0, function* () {\r\n                const labelBoxes = [];\r\n                for (const series of [...polarAxes, ...polarSeries]) {\r\n                    const box = yield series.computeLabelsBBox({ hideWhenNecessary }, seriesBox);\r\n                    if (box) {\r\n                        labelBoxes.push(box);\r\n                    }\r\n                }\r\n                if (labelBoxes.length === 0) {\r\n                    setSeriesCircle(centerX, centerY, initialRadius);\r\n                    return;\r\n                }\r\n                const labelBox = BBox.merge(labelBoxes);\r\n                const refined = this.refineCircle(labelBox, radius, seriesBox);\r\n                setSeriesCircle(refined.centerX, refined.centerY, refined.radius);\r\n                if (refined.radius === radius) {\r\n                    return;\r\n                }\r\n                radius = refined.radius;\r\n            });\r\n            yield shake(); // Initial attempt\r\n            yield shake(); // Precise attempt\r\n            yield shake(); // Just in case\r\n            yield shake({ hideWhenNecessary: true }); // Hide unnecessary labels\r\n            yield shake({ hideWhenNecessary: true }); // Final result\r\n            return { radius, centerX, centerY };\r\n        });\r\n    }\r\n    refineCircle(labelsBox, radius, seriesBox) {\r\n        const minCircleRatio = 0.5; // Prevents reduced circle to be too small\r\n        const circleLeft = -radius;\r\n        const circleTop = -radius;\r\n        const circleRight = radius;\r\n        const circleBottom = radius;\r\n        // Label padding around the circle\r\n        let padLeft = Math.max(0, circleLeft - labelsBox.x);\r\n        let padTop = Math.max(0, circleTop - labelsBox.y);\r\n        let padRight = Math.max(0, labelsBox.x + labelsBox.width - circleRight);\r\n        let padBottom = Math.max(0, labelsBox.y + labelsBox.height - circleBottom);\r\n        padLeft = padRight = Math.max(padLeft, padRight);\r\n        padTop = padBottom = Math.max(padTop, padBottom);\r\n        // Available area for the circle (after the padding will be applied)\r\n        const availCircleWidth = seriesBox.width - padLeft - padRight;\r\n        const availCircleHeight = seriesBox.height - padTop - padBottom;\r\n        let newRadius = Math.min(availCircleWidth, availCircleHeight) / 2;\r\n        const minHorizontalRadius = (minCircleRatio * seriesBox.width) / 2;\r\n        const minVerticalRadius = (minCircleRatio * seriesBox.height) / 2;\r\n        const minRadius = Math.min(minHorizontalRadius, minVerticalRadius);\r\n        if (newRadius < minRadius) {\r\n            // If the radius is too small, reduce the label padding\r\n            newRadius = minRadius;\r\n            const horizontalPadding = padLeft + padRight;\r\n            const verticalPadding = padTop + padBottom;\r\n            if (2 * newRadius + verticalPadding > seriesBox.height) {\r\n                const padHeight = seriesBox.height - 2 * newRadius;\r\n                if (Math.min(padTop, padBottom) * 2 > padHeight) {\r\n                    padTop = padHeight / 2;\r\n                    padBottom = padHeight / 2;\r\n                }\r\n                else if (padTop > padBottom) {\r\n                    padTop = padHeight - padBottom;\r\n                }\r\n                else {\r\n                    padBottom = padHeight - padTop;\r\n                }\r\n            }\r\n            if (2 * newRadius + horizontalPadding > seriesBox.width) {\r\n                const padWidth = seriesBox.width - 2 * newRadius;\r\n                if (Math.min(padLeft, padRight) * 2 > padWidth) {\r\n                    padLeft = padWidth / 2;\r\n                    padRight = padWidth / 2;\r\n                }\r\n                else if (padLeft > padRight) {\r\n                    padLeft = padWidth - padRight;\r\n                }\r\n                else {\r\n                    padRight = padWidth - padLeft;\r\n                }\r\n            }\r\n        }\r\n        const newWidth = padLeft + 2 * newRadius + padRight;\r\n        const newHeight = padTop + 2 * newRadius + padBottom;\r\n        return {\r\n            centerX: seriesBox.x + (seriesBox.width - newWidth) / 2 + padLeft + newRadius,\r\n            centerY: seriesBox.y + (seriesBox.height - newHeight) / 2 + padTop + newRadius,\r\n            radius: newRadius,\r\n        };\r\n    }\r\n}\r\nPolarChart.className = 'PolarChart';\r\nPolarChart.type = 'polar';\n\nconst debug = Debug.create(true, 'opts');\r\nfunction chartType(options) {\r\n    if (isAgCartesianChartOptions(options)) {\r\n        return 'cartesian';\r\n    }\r\n    else if (isAgPolarChartOptions(options)) {\r\n        return 'polar';\r\n    }\r\n    else if (isAgHierarchyChartOptions(options)) {\r\n        return 'hierarchy';\r\n    }\r\n    throw new Error(`AG Chart - unknown type of chart for options with type: ${options.type}`);\r\n}\r\n/**\r\n * Factory for creating and updating instances of AgChartInstance.\r\n *\r\n * @docsInterface\r\n */\r\nclass AgCharts {\r\n    static licenseCheck(options) {\r\n        var _a, _b, _c;\r\n        if (this.licenseChecked)\r\n            return;\r\n        this.licenseManager = (_a = enterpriseModule.licenseManager) === null || _a === void 0 ? void 0 : _a.call(enterpriseModule, options);\r\n        (_b = this.licenseManager) === null || _b === void 0 ? void 0 : _b.setLicenseKey(this.licenseKey);\r\n        (_c = this.licenseManager) === null || _c === void 0 ? void 0 : _c.validateLicense();\r\n        this.licenseChecked = true;\r\n    }\r\n    static setLicenseKey(licenseKey) {\r\n        this.licenseKey = licenseKey;\r\n    }\r\n    /**\r\n     * Create a new `AgChartInstance` based upon the given configuration options.\r\n     */\r\n    static create(options) {\r\n        var _a, _b, _c;\r\n        this.licenseCheck(options);\r\n        const chart = AgChartsInternal.createOrUpdate(options);\r\n        if ((_a = this.licenseManager) === null || _a === void 0 ? void 0 : _a.isDisplayWatermark()) {\r\n            (_b = enterpriseModule.injectWatermark) === null || _b === void 0 ? void 0 : _b.call(enterpriseModule, (_c = options.document) !== null && _c !== void 0 ? _c : document, chart.chart.element, this.licenseManager.getWatermarkMessage());\r\n        }\r\n        return chart;\r\n    }\r\n    /**\r\n     * Update an existing `AgChartInstance`. Options provided should be complete and not\r\n     * partial.\r\n     *\r\n     * __NOTE__: As each call could trigger a chart redraw, multiple calls to update options in\r\n     * quick succession could result in undesirable flickering, so callers should batch up and/or\r\n     * debounce changes to avoid unintended partial update renderings.\r\n     */\r\n    static update(chart, options) {\r\n        if (!AgChartInstanceProxy.isInstance(chart)) {\r\n            throw new Error(AgCharts.INVALID_CHART_REF_MESSAGE);\r\n        }\r\n        AgChartsInternal.createOrUpdate(options, chart);\r\n    }\r\n    /**\r\n     * Update an existing `AgChartInstance` by applying a partial set of option changes.\r\n     *\r\n     * __NOTE__: As each call could trigger a chart redraw, each individual delta options update\r\n     * should leave the chart in a valid options state. Also, multiple calls to update options in\r\n     * quick succession could result in undesirable flickering, so callers should batch up and/or\r\n     * debounce changes to avoid unintended partial update renderings.\r\n     */\r\n    static updateDelta(chart, deltaOptions) {\r\n        if (!AgChartInstanceProxy.isInstance(chart)) {\r\n            throw new Error(AgCharts.INVALID_CHART_REF_MESSAGE);\r\n        }\r\n        AgChartsInternal.updateUserDelta(chart, deltaOptions);\r\n    }\r\n    /**\r\n     * Starts a browser-based image download for the given `AgChartInstance`.\r\n     */\r\n    static download(chart, options) {\r\n        if (!(chart instanceof AgChartInstanceProxy)) {\r\n            throw new Error(AgCharts.INVALID_CHART_REF_MESSAGE);\r\n        }\r\n        AgChartsInternal.download(chart, options);\r\n    }\r\n    /**\r\n     * Returns a base64-encoded image data URL for the given `AgChartInstance`.\r\n     */\r\n    static getImageDataURL(chart, options) {\r\n        if (!(chart instanceof AgChartInstanceProxy)) {\r\n            throw new Error(AgCharts.INVALID_CHART_REF_MESSAGE);\r\n        }\r\n        return AgChartsInternal.getImageDataURL(chart, options);\r\n    }\r\n}\r\nAgCharts.INVALID_CHART_REF_MESSAGE = 'AG Charts - invalid chart reference passed';\r\nAgCharts.licenseChecked = false;\r\n/** @deprecated use AgCharts instead */\r\nclass AgChart {\r\n    static warnDeprecated(memberName) {\r\n        const warnDeprecated = createDeprecationWarning();\r\n        warnDeprecated(`AgChart.${memberName}`, `Use AgCharts.${memberName} instead`);\r\n    }\r\n    static create(options) {\r\n        AgChart.warnDeprecated('create');\r\n        return AgCharts.create(options);\r\n    }\r\n    static update(chart, options) {\r\n        AgChart.warnDeprecated('update');\r\n        return AgCharts.update(chart, options);\r\n    }\r\n    static updateDelta(chart, deltaOptions) {\r\n        AgChart.warnDeprecated('updateDelta');\r\n        return AgCharts.updateDelta(chart, deltaOptions);\r\n    }\r\n    static download(chart, options) {\r\n        AgChart.warnDeprecated('download');\r\n        return AgCharts.download(chart, options);\r\n    }\r\n    static getImageDataURL(chart, options) {\r\n        AgChart.warnDeprecated('getImageDataURL');\r\n        return AgCharts.getImageDataURL(chart, options);\r\n    }\r\n}\r\nclass AgChartsInternal {\r\n    static initialiseModules() {\r\n        if (AgChartsInternal.initialised)\r\n            return;\r\n        registerInbuiltModules();\r\n        setupModules();\r\n        AgChartsInternal.initialised = true;\r\n    }\r\n    static createOrUpdate(userOptions, proxy) {\r\n        var _a;\r\n        var _b;\r\n        AgChartsInternal.initialiseModules();\r\n        debug('>>> AgChartV2.createOrUpdate() user options', userOptions);\r\n        const { overrideDevicePixelRatio, document, window: userWindow } = userOptions, chartOptions = __rest(userOptions, [\"overrideDevicePixelRatio\", \"document\", \"window\"]);\r\n        const specialOverrides = { overrideDevicePixelRatio, document, window: userWindow };\r\n        const processedOptions = prepareOptions(chartOptions);\r\n        let chart = proxy === null || proxy === void 0 ? void 0 : proxy.chart;\r\n        if (chart == null || chartType(chartOptions) !== chartType(chart.processedOptions)) {\r\n            chart = AgChartsInternal.createChartInstance(processedOptions, specialOverrides, chart);\r\n        }\r\n        if (proxy == null) {\r\n            proxy = new AgChartInstanceProxy(chart);\r\n        }\r\n        else {\r\n            proxy.chart = chart;\r\n        }\r\n        if (Debug.check() && typeof window !== 'undefined') {\r\n            (_a = (_b = window).agChartInstances) !== null && _a !== void 0 ? _a : (_b.agChartInstances = {});\r\n            window.agChartInstances[chart.id] = chart;\r\n        }\r\n        const chartToUpdate = chart;\r\n        chartToUpdate.queuedUserOptions.push(chartOptions);\r\n        const dequeue = () => {\r\n            // If there are a lot of update calls, `requestFactoryUpdate()` may skip callbacks,\r\n            // so we need to remove all queue items up to the last successfully applied item.\r\n            const queuedOptionsIdx = chartToUpdate.queuedUserOptions.indexOf(chartOptions);\r\n            chartToUpdate.queuedUserOptions.splice(0, queuedOptionsIdx);\r\n        };\r\n        chartToUpdate.requestFactoryUpdate(() => __awaiter(this, void 0, void 0, function* () {\r\n            // Chart destroyed, skip processing.\r\n            if (chartToUpdate.destroyed)\r\n                return;\r\n            const deltaOptions = jsonDiff(chartToUpdate.processedOptions, processedOptions);\r\n            if (deltaOptions == null) {\r\n                dequeue();\r\n                return;\r\n            }\r\n            yield AgChartsInternal.updateDelta(chartToUpdate, deltaOptions, chartOptions);\r\n            dequeue();\r\n        }));\r\n        return proxy;\r\n    }\r\n    static updateUserDelta(proxy, deltaOptions) {\r\n        var _a;\r\n        const { chart, chart: { queuedUserOptions }, } = proxy;\r\n        const lastUpdateOptions = (_a = queuedUserOptions[queuedUserOptions.length - 1]) !== null && _a !== void 0 ? _a : chart.userOptions;\r\n        const userOptions = jsonMerge([lastUpdateOptions, deltaOptions]);\r\n        debug('>>> AgChartV2.updateUserDelta() user delta', deltaOptions);\r\n        debug('AgChartV2.updateUserDelta() - base options', lastUpdateOptions);\r\n        AgChartsInternal.createOrUpdate(userOptions, proxy);\r\n    }\r\n    /**\r\n     * Returns the content of the current canvas as an image.\r\n     * @param opts The download options including `width` and `height` of the image as well as `fileName` and `fileFormat`.\r\n     */\r\n    static download(proxy, opts) {\r\n        const asyncDownload = () => __awaiter(this, void 0, void 0, function* () {\r\n            const maybeClone = yield AgChartsInternal.prepareResizedChart(proxy, opts);\r\n            const { chart } = maybeClone;\r\n            chart.scene.download(opts === null || opts === void 0 ? void 0 : opts.fileName, opts === null || opts === void 0 ? void 0 : opts.fileFormat);\r\n            if (maybeClone !== proxy) {\r\n                maybeClone.destroy();\r\n            }\r\n        });\r\n        asyncDownload().catch((e) => Logger.errorOnce(e));\r\n    }\r\n    static getImageDataURL(proxy, opts) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const maybeClone = yield AgChartsInternal.prepareResizedChart(proxy, opts);\r\n            const { chart } = maybeClone;\r\n            const result = chart.scene.canvas.getDataURL(opts === null || opts === void 0 ? void 0 : opts.fileFormat);\r\n            if (maybeClone !== proxy) {\r\n                maybeClone.destroy();\r\n            }\r\n            return result;\r\n        });\r\n    }\r\n    static prepareResizedChart(proxy, opts) {\r\n        var _a;\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const { chart } = proxy;\r\n            let { width, height } = opts !== null && opts !== void 0 ? opts : {};\r\n            const currentWidth = chart.width;\r\n            const currentHeight = chart.height;\r\n            const unchanged = (width === undefined && height === undefined) ||\r\n                (chart.scene.canvas.pixelRatio === 1 && currentWidth === width && currentHeight === height);\r\n            if (unchanged) {\r\n                return proxy;\r\n            }\r\n            width !== null && width !== void 0 ? width : (width = currentWidth);\r\n            height !== null && height !== void 0 ? height : (height = currentHeight);\r\n            const options = Object.assign(Object.assign({}, chart.userOptions), { container: document.createElement('div'), width,\r\n                height, autoSize: false, overrideDevicePixelRatio: 1 });\r\n            if (hasRegisteredEnterpriseModules()) {\r\n                // Disable enterprise features that may interfere with image generation.\r\n                (_a = options.animation) !== null && _a !== void 0 ? _a : (options.animation = {});\r\n                options.animation.enabled = false;\r\n            }\r\n            const clonedChart = AgChartsInternal.createOrUpdate(options);\r\n            yield clonedChart.chart.waitForUpdate();\r\n            return clonedChart;\r\n        });\r\n    }\r\n    static createChartInstance(options, specialOverrides, oldChart) {\r\n        const transferableResource = oldChart === null || oldChart === void 0 ? void 0 : oldChart.destroy({ keepTransferableResources: true });\r\n        if (isAgCartesianChartOptions(options)) {\r\n            return new CartesianChart(specialOverrides, transferableResource);\r\n        }\r\n        else if (isAgHierarchyChartOptions(options)) {\r\n            return new HierarchyChart(specialOverrides, transferableResource);\r\n        }\r\n        else if (isAgPolarChartOptions(options)) {\r\n            return new PolarChart(specialOverrides, transferableResource);\r\n        }\r\n        throw new Error(`AG Charts - couldn't apply configuration, check options are correctly structured and series types are specified`);\r\n    }\r\n    static updateDelta(chart, processedOptions, userOptions) {\r\n        var _a;\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (processedOptions.type == null) {\r\n                processedOptions = Object.assign(Object.assign({}, processedOptions), { type: (_a = chart.processedOptions.type) !== null && _a !== void 0 ? _a : optionsType(processedOptions) });\r\n            }\r\n            if (chart.destroyed)\r\n                return;\r\n            debug('AgChartV2.updateDelta() - applying delta', processedOptions);\r\n            applyChartOptions(chart, processedOptions, userOptions);\r\n        });\r\n    }\r\n}\r\nAgChartsInternal.initialised = false;\r\nfunction applyChartOptions(chart, processedOptions, userOptions) {\r\n    var _a, _b, _c, _d;\r\n    const completeOptions = jsonMerge([(_a = chart.processedOptions) !== null && _a !== void 0 ? _a : {}, processedOptions], noDataCloneMergeOptions);\r\n    const modulesChanged = applyModules(chart, completeOptions);\r\n    const skip = ['type', 'data', 'series', 'listeners', 'theme', 'legend.listeners'];\r\n    if (isAgCartesianChartOptions(processedOptions) || isAgPolarChartOptions(processedOptions)) {\r\n        // Append axes to defaults.\r\n        skip.push('axes');\r\n    }\r\n    else if (isAgHierarchyChartOptions(processedOptions)) ;\r\n    else {\r\n        throw new Error(`AG Charts - couldn't apply configuration, check type of options and chart: ${processedOptions['type']}`);\r\n    }\r\n    // Needs to be done before applying the series to detect if a seriesNode[Double]Click listener has been added\r\n    if (processedOptions.listeners) {\r\n        registerListeners(chart, processedOptions.listeners);\r\n    }\r\n    applyOptionValues(chart, processedOptions, { skip });\r\n    let forceNodeDataRefresh = false;\r\n    let seriesRecreated = false;\r\n    if (processedOptions.series && processedOptions.series.length > 0) {\r\n        seriesRecreated = applySeries(chart, processedOptions);\r\n        forceNodeDataRefresh = true;\r\n    }\r\n    if ('axes' in completeOptions && Array.isArray(completeOptions.axes)) {\r\n        const axesPresent = applyAxes(chart, completeOptions, seriesRecreated);\r\n        if (axesPresent) {\r\n            forceNodeDataRefresh = true;\r\n        }\r\n    }\r\n    const seriesOpts = processedOptions.series;\r\n    const seriesDataUpdate = !!processedOptions.data || (seriesOpts === null || seriesOpts === void 0 ? void 0 : seriesOpts.some((s) => s.data != null));\r\n    const legendKeys = getLegendKeys();\r\n    const optionsHaveLegend = Object.values(legendKeys).some((legendKey) => processedOptions[legendKey] != null);\r\n    const otherRefreshUpdate = processedOptions.title != null && processedOptions.subtitle != null;\r\n    forceNodeDataRefresh = forceNodeDataRefresh || seriesDataUpdate || optionsHaveLegend || otherRefreshUpdate;\r\n    if (processedOptions.data) {\r\n        chart.data = processedOptions.data;\r\n    }\r\n    if ((_b = processedOptions.legend) === null || _b === void 0 ? void 0 : _b.listeners) {\r\n        Object.assign(chart.legend.listeners, (_c = processedOptions.legend.listeners) !== null && _c !== void 0 ? _c : {});\r\n    }\r\n    if (processedOptions.listeners) {\r\n        chart.updateAllSeriesListeners();\r\n    }\r\n    chart.processedOptions = completeOptions;\r\n    chart.userOptions = jsonMerge([(_d = chart.userOptions) !== null && _d !== void 0 ? _d : {}, userOptions], noDataCloneMergeOptions);\r\n    const majorChange = forceNodeDataRefresh || modulesChanged;\r\n    const updateType = majorChange ? ChartUpdateType.PROCESS_DATA : ChartUpdateType.PERFORM_LAYOUT;\r\n    debug('AgChartV2.applyChartOptions() - update type', ChartUpdateType[updateType]);\r\n    chart.update(updateType, { forceNodeDataRefresh, newAnimationBatch: true });\r\n}\r\nfunction applyModules(chart, options) {\r\n    const matchingChartType = (module) => {\r\n        return ((chart instanceof CartesianChart && module.chartTypes.includes('cartesian')) ||\r\n            (chart instanceof PolarChart && module.chartTypes.includes('polar')) ||\r\n            (chart instanceof HierarchyChart && module.chartTypes.includes('hierarchy')));\r\n    };\r\n    let modulesChanged = false;\r\n    const processModules = (moduleType, add, remove) => {\r\n        const modules = REGISTERED_MODULES.filter((m) => m.type === moduleType);\r\n        for (const next of modules) {\r\n            const shouldBeEnabled = matchingChartType(next) && options[next.optionsKey] != null;\r\n            const isEnabled = chart.isModuleEnabled(next);\r\n            if (shouldBeEnabled === isEnabled)\r\n                continue;\r\n            modulesChanged = true;\r\n            if (shouldBeEnabled) {\r\n                add(next);\r\n            }\r\n            else {\r\n                remove(next);\r\n            }\r\n        }\r\n    };\r\n    processModules('root', (next) => chart.addModule(next), (next) => chart.removeModule(next));\r\n    processModules('legend', (next) => chart.addLegendModule(next), (next) => chart.removeLegendModule(next));\r\n    return modulesChanged;\r\n}\r\nfunction applySeries(chart, options) {\r\n    const optSeries = options.series;\r\n    if (!optSeries) {\r\n        return false;\r\n    }\r\n    const keysToConsider = ['type', 'direction', 'xKey', 'yKey', 'sizeKey', 'angleKey', 'stacked', 'stackGroup'];\r\n    let matchingTypes = chart.series.length === optSeries.length;\r\n    for (let i = 0; i < chart.series.length && matchingTypes; i++) {\r\n        for (const key of keysToConsider) {\r\n            matchingTypes && (matchingTypes = chart.series[i][key] === optSeries[i][key]);\r\n        }\r\n    }\r\n    // Try to optimise series updates if series count and types didn't change.\r\n    if (matchingTypes) {\r\n        chart.series.forEach((s, i) => {\r\n            var _a, _b, _c, _d;\r\n            const previousOpts = (_c = (_b = (_a = chart.processedOptions) === null || _a === void 0 ? void 0 : _a.series) === null || _b === void 0 ? void 0 : _b[i]) !== null && _c !== void 0 ? _c : {};\r\n            const seriesDiff = jsonDiff(previousOpts, (_d = optSeries[i]) !== null && _d !== void 0 ? _d : {});\r\n            if (!seriesDiff) {\r\n                return;\r\n            }\r\n            debug(`AgChartV2.applySeries() - applying series diff idx ${i}`, seriesDiff);\r\n            applySeriesValues(s, seriesDiff, { path: `series[${i}]`, index: i });\r\n            s.markNodeDataDirty();\r\n        });\r\n        return false;\r\n    }\r\n    debug(`AgChartV2.applySeries() - creating new series instances`);\r\n    chart.series = createSeries(chart, optSeries);\r\n    return true;\r\n}\r\nfunction applyAxes(chart, options, forceRecreate) {\r\n    const optAxes = options.axes;\r\n    if (!optAxes) {\r\n        return false;\r\n    }\r\n    const matchingTypes = !forceRecreate &&\r\n        chart.axes.length === optAxes.length &&\r\n        chart.axes.every((a, i) => a.type === optAxes[i].type);\r\n    // Try to optimise series updates if series count and types didn't change.\r\n    if (matchingTypes) {\r\n        const oldOpts = chart.processedOptions;\r\n        if (isAgCartesianChartOptions(oldOpts)) {\r\n            chart.axes.forEach((a, i) => {\r\n                var _a, _b;\r\n                const previousOpts = (_b = (_a = oldOpts.axes) === null || _a === void 0 ? void 0 : _a[i]) !== null && _b !== void 0 ? _b : {};\r\n                const axisDiff = jsonDiff(previousOpts, optAxes[i]);\r\n                debug(`AgChartV2.applyAxes() - applying axis diff idx ${i}`, axisDiff);\r\n                const path = `axes[${i}]`;\r\n                const skip = ['axes[].type'];\r\n                applyOptionValues(a, axisDiff, { path, skip });\r\n            });\r\n            return true;\r\n        }\r\n    }\r\n    chart.axes = createAxis(chart, optAxes);\r\n    return true;\r\n}\r\nfunction createSeries(chart, options) {\r\n    var _a;\r\n    const series = [];\r\n    const moduleContext = chart.getModuleContext();\r\n    let index = 0;\r\n    for (const seriesOptions of options !== null && options !== void 0 ? options : []) {\r\n        const path = `series[${index++}]`;\r\n        const type = (_a = seriesOptions.type) !== null && _a !== void 0 ? _a : 'unknown';\r\n        if (isEnterpriseSeriesType(type) && !isEnterpriseSeriesTypeLoaded(type)) {\r\n            continue;\r\n        }\r\n        const seriesInstance = getSeries(type, moduleContext);\r\n        applySeriesOptionModules(seriesInstance, seriesOptions);\r\n        applySeriesValues(seriesInstance, seriesOptions, { path, index });\r\n        series.push(seriesInstance);\r\n    }\r\n    return series;\r\n}\r\nfunction applySeriesOptionModules(series, options) {\r\n    const seriesOptionModules = REGISTERED_MODULES.filter((m) => m.type === 'series-option');\r\n    for (const mod of seriesOptionModules) {\r\n        const supportedSeriesTypes = mod.seriesTypes;\r\n        if (mod.optionsKey in options && supportedSeriesTypes.includes(series.type)) {\r\n            series.getModuleMap().addModule(mod);\r\n        }\r\n    }\r\n}\r\nfunction createAxis(chart, options) {\r\n    const axes = [];\r\n    const skip = ['axes[].type'];\r\n    const moduleContext = chart.getModuleContext();\r\n    let index = 0;\r\n    for (const axisOptions of options !== null && options !== void 0 ? options : []) {\r\n        const axis = getAxis(axisOptions.type, moduleContext);\r\n        const path = `axes[${index++}]`;\r\n        applyAxisModules(axis, axisOptions);\r\n        applyOptionValues(axis, axisOptions, { path, skip });\r\n        axes.push(axis);\r\n    }\r\n    return axes;\r\n}\r\nfunction applyAxisModules(axis, options) {\r\n    let modulesChanged = false;\r\n    const rootModules = REGISTERED_MODULES.filter((m) => m.type === 'axis-option');\r\n    for (const next of rootModules) {\r\n        const shouldBeEnabled = options[next.optionsKey] != null;\r\n        const moduleMap = axis.getModuleMap();\r\n        const isEnabled = moduleMap.isModuleEnabled(next);\r\n        if (shouldBeEnabled === isEnabled)\r\n            continue;\r\n        modulesChanged = true;\r\n        if (shouldBeEnabled) {\r\n            moduleMap.addModule(next);\r\n        }\r\n        else {\r\n            moduleMap.removeModule(next);\r\n        }\r\n    }\r\n    return modulesChanged;\r\n}\r\nfunction registerListeners(source, listeners) {\r\n    source.clearEventListeners();\r\n    const entries = Object.entries(listeners !== null && listeners !== void 0 ? listeners : {});\r\n    for (const [property, listener] of entries) {\r\n        if (typeof listener !== 'function')\r\n            continue;\r\n        source.addEventListener(property, listener);\r\n    }\r\n}\r\nfunction applyOptionValues(target, options, { skip, path } = {}) {\r\n    const applyOpts = Object.assign(Object.assign(Object.assign({}, getJsonApplyOptions()), { skip }), (path ? { path } : {}));\r\n    return jsonApply(target, options, applyOpts);\r\n}\r\nfunction applySeriesValues(target, options, { path, index } = {}) {\r\n    var _a, _b;\r\n    const skip = ['series[].listeners', 'series[].seriesGrouping'];\r\n    const jsonApplyOptions = getJsonApplyOptions();\r\n    const ctrs = (_a = jsonApplyOptions.constructors) !== null && _a !== void 0 ? _a : {};\r\n    const seriesTypeOverrides = {\r\n        constructors: Object.assign(Object.assign({}, ctrs), { title: target.type === 'pie' ? PieTitle : ctrs['title'] }),\r\n    };\r\n    const applyOpts = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, jsonApplyOptions), seriesTypeOverrides), { skip: ['series[].type', ...(skip !== null && skip !== void 0 ? skip : [])] }), (path ? { path } : {})), { idx: index !== null && index !== void 0 ? index : -1 });\r\n    const result = jsonApply(target, options, applyOpts);\r\n    if ((options === null || options === void 0 ? void 0 : options.listeners) != null) {\r\n        registerListeners(target, options.listeners);\r\n    }\r\n    const { seriesGrouping } = options;\r\n    if ('seriesGrouping' in (options !== null && options !== void 0 ? options : {})) {\r\n        if (seriesGrouping) {\r\n            target.seriesGrouping = Object.freeze(Object.assign(Object.assign({}, ((_b = target.seriesGrouping) !== null && _b !== void 0 ? _b : {})), seriesGrouping));\r\n        }\r\n        else {\r\n            target.seriesGrouping = seriesGrouping;\r\n        }\r\n    }\r\n    return result;\r\n}\n\n// DO NOT UPDATE MANUALLY: Generated from script during build time\r\nconst VERSION = '9.0.1';\n\nconst themes = Object.entries(themes$1).reduce((obj, [name, factory]) => {\r\n    obj[name] = factory();\r\n    return obj;\r\n}, {});\n\nvar integratedChartsTheme = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    themes: themes,\n    getChartTheme: getChartTheme,\n    ChartTheme: ChartTheme,\n    EXTENDS_CHART_DEFAULTS: EXTENDS_CHART_DEFAULTS,\n    EXTENDS_LEGEND_DEFAULTS: EXTENDS_LEGEND_DEFAULTS,\n    EXTENDS_LEGEND_ITEM_DEFAULTS: EXTENDS_LEGEND_ITEM_DEFAULTS,\n    EXTENDS_LEGEND_ITEM_MARKER_DEFAULTS: EXTENDS_LEGEND_ITEM_MARKER_DEFAULTS,\n    EXTENDS_AXES_DEFAULTS: EXTENDS_AXES_DEFAULTS,\n    EXTENDS_AXES_LABEL_DEFAULTS: EXTENDS_AXES_LABEL_DEFAULTS,\n    EXTENDS_AXES_LINE_DEFAULTS: EXTENDS_AXES_LINE_DEFAULTS,\n    EXTENDS_AXES_TICK_DEFAULTS: EXTENDS_AXES_TICK_DEFAULTS,\n    EXTENDS_AXES_GRID_LINE_DEFAULTS: EXTENDS_AXES_GRID_LINE_DEFAULTS,\n    EXTENDS_SERIES_DEFAULTS: EXTENDS_SERIES_DEFAULTS,\n    EXTENDS_CARTESIAN_MARKER_DEFAULTS: EXTENDS_CARTESIAN_MARKER_DEFAULTS,\n    OVERRIDE_SERIES_LABEL_DEFAULTS: OVERRIDE_SERIES_LABEL_DEFAULTS,\n    DEFAULT_FONT_FAMILY: DEFAULT_FONT_FAMILY,\n    DEFAULT_LABEL_COLOUR: DEFAULT_LABEL_COLOUR,\n    DEFAULT_INVERTED_LABEL_COLOUR: DEFAULT_INVERTED_LABEL_COLOUR,\n    DEFAULT_INSIDE_SERIES_LABEL_COLOUR: DEFAULT_INSIDE_SERIES_LABEL_COLOUR,\n    DEFAULT_MUTED_LABEL_COLOUR: DEFAULT_MUTED_LABEL_COLOUR,\n    DEFAULT_AXIS_GRID_COLOUR: DEFAULT_AXIS_GRID_COLOUR,\n    DEFAULT_AXIS_LINE_COLOUR: DEFAULT_AXIS_LINE_COLOUR,\n    DEFAULT_CROSS_LINES_COLOUR: DEFAULT_CROSS_LINES_COLOUR,\n    DEFAULT_BACKGROUND_COLOUR: DEFAULT_BACKGROUND_COLOUR,\n    DEFAULT_SHADOW_COLOUR: DEFAULT_SHADOW_COLOUR,\n    DEFAULT_WATERFALL_SERIES_POSITIVE_COLOURS: DEFAULT_WATERFALL_SERIES_POSITIVE_COLOURS,\n    DEFAULT_WATERFALL_SERIES_NEGATIVE_COLOURS: DEFAULT_WATERFALL_SERIES_NEGATIVE_COLOURS,\n    DEFAULT_WATERFALL_SERIES_TOTAL_COLOURS: DEFAULT_WATERFALL_SERIES_TOTAL_COLOURS,\n    DEFAULT_WATERFALL_SERIES_CONNECTOR_LINE_STROKE: DEFAULT_WATERFALL_SERIES_CONNECTOR_LINE_STROKE,\n    DEFAULT_POLAR_SERIES_STROKE: DEFAULT_POLAR_SERIES_STROKE,\n    DEFAULT_DIVERGING_SERIES_COLOUR_RANGE: DEFAULT_DIVERGING_SERIES_COLOUR_RANGE,\n    DEFAULT_HIERARCHY_FILLS: DEFAULT_HIERARCHY_FILLS,\n    DEFAULT_HIERARCHY_STROKES: DEFAULT_HIERARCHY_STROKES,\n    FONT_SIZE: FONT_SIZE,\n    BOLD: BOLD,\n    NORMAL: NORMAL,\n    BOTTOM: BOTTOM,\n    CARTESIAN_AXIS_POSITIONS: CARTESIAN_AXIS_POSITIONS,\n    CARTESIAN_AXIS_TYPES: CARTESIAN_AXIS_TYPES,\n    POLAR_AXIS_TYPES: POLAR_AXIS_TYPES,\n    CIRCLE: CIRCLE\n});\n\nvar sparklinesScale = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    TimeScale: TimeScale,\n    BandScale: BandScale,\n    ContinuousScale: ContinuousScale,\n    ColorScale: ColorScale,\n    LinearScale: LinearScale\n});\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/ag-charts-community/dist/package/main.esm.js\n"));

/***/ }),

/***/ "./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?absolutePagePath=C%3A%5CUsers%5CShaye%5COneDrive%5CDesktop%5Ccpoy%5Cevent%5Cpages%5Cdashboard.tsx&page=%2Fdashboard!":
/*!*******************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?absolutePagePath=C%3A%5CUsers%5CShaye%5COneDrive%5CDesktop%5Ccpoy%5Cevent%5Cpages%5Cdashboard.tsx&page=%2Fdashboard! ***!
  \*******************************************************************************************************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/dashboard\",\n      function () {\n        return __webpack_require__(/*! ./pages/dashboard.tsx */ \"./pages/dashboard.tsx\");\n      }\n    ]);\n    if(true) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/dashboard\"])\n      });\n    }\n  //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWNsaWVudC1wYWdlcy1sb2FkZXIuanM/YWJzb2x1dGVQYWdlUGF0aD1DJTNBJTVDVXNlcnMlNUNTaGF5ZSU1Q09uZURyaXZlJTVDRGVza3RvcCU1Q2Nwb3klNUNldmVudCU1Q3BhZ2VzJTVDZGFzaGJvYXJkLnRzeCZwYWdlPSUyRmRhc2hib2FyZCEiLCJtYXBwaW5ncyI6IjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsbUJBQU8sQ0FBQyxvREFBdUI7QUFDOUM7QUFDQTtBQUNBLE9BQU8sSUFBVTtBQUNqQixNQUFNLFVBQVU7QUFDaEI7QUFDQSxPQUFPO0FBQ1A7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvPzVjNzIiXSwic291cmNlc0NvbnRlbnQiOlsiXG4gICAgKHdpbmRvdy5fX05FWFRfUCA9IHdpbmRvdy5fX05FWFRfUCB8fCBbXSkucHVzaChbXG4gICAgICBcIi9kYXNoYm9hcmRcIixcbiAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHJlcXVpcmUoXCIuL3BhZ2VzL2Rhc2hib2FyZC50c3hcIik7XG4gICAgICB9XG4gICAgXSk7XG4gICAgaWYobW9kdWxlLmhvdCkge1xuICAgICAgbW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgd2luZG93Ll9fTkVYVF9QLnB1c2goW1wiL2Rhc2hib2FyZFwiXSlcbiAgICAgIH0pO1xuICAgIH1cbiAgIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?absolutePagePath=C%3A%5CUsers%5CShaye%5COneDrive%5CDesktop%5Ccpoy%5Cevent%5Cpages%5Cdashboard.tsx&page=%2Fdashboard!\n"));

/***/ }),

/***/ "./pages/dashboard.tsx":
/*!*****************************!*\
  !*** ./pages/dashboard.tsx ***!
  \*****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var firebase_firestore__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! firebase/firestore */ \"./node_modules/firebase/firestore/dist/esm/index.esm.js\");\n/* harmony import */ var ag_charts_react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ag-charts-react */ \"./node_modules/ag-charts-react/dist/index.mjs\");\n/* harmony import */ var _sidebar__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./sidebar */ \"./pages/sidebar.tsx\");\n\nvar _s = $RefreshSig$();\n\n\n\n\nconst Dashboard = ()=>{\n    _s();\n    const [userCount, setUserCount] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0);\n    const [eventCount, setEventCount] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0);\n    const [eventData, setEventData] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [eventTypeCounts, setEventTypeCounts] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        Decoration: 0,\n        Catering: 0,\n        Transportation: 0,\n        SpecialGuests: 0,\n        PartyHall: 0,\n        MarriageHall: 0,\n        Entertainment: 0\n    });\n    const [monthlyEventCounts, setMonthlyEventCounts] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({});\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const fetchData = async ()=>{\n            const db = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.getFirestore)();\n            // Fetch user data\n            const usersCollection = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.collection)(db, \"users\");\n            try {\n                const usersSnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.getDocs)(usersCollection);\n                setUserCount(usersSnapshot.size);\n                const typeCounts = {\n                    Decoration: 0,\n                    Catering: 0,\n                    Transportation: 0,\n                    SpecialGuests: 0,\n                    PartyHall: 0,\n                    MarriageHall: 0,\n                    Entertainment: 0\n                };\n                usersSnapshot.forEach((userDoc)=>{\n                    const userData = userDoc.data();\n                    if (userData.eventType) {\n                        typeCounts[userData.eventType]++;\n                    }\n                });\n                setEventTypeCounts(typeCounts);\n            } catch (error) {\n                console.error(\"Error fetching user count:\", error);\n            }\n            // Fetch event data\n            const eventsCollection = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.collection)(db, \"eventuser\");\n            try {\n                const eventsSnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.getDocs)(eventsCollection);\n                const eventsData = eventsSnapshot.docs.map((doc)=>doc.data());\n                setEventCount(eventsSnapshot.size);\n                setEventData(eventsData);\n                // Count events for each month\n                const monthlyCounts = {};\n                eventsData.forEach((event)=>{\n                    const eventDate = new Date(event.date);\n                    const monthKey = \"\".concat(eventDate.getFullYear(), \"-\").concat(eventDate.getMonth() + 1);\n                    if (monthlyCounts[monthKey]) {\n                        monthlyCounts[monthKey]++;\n                    } else {\n                        monthlyCounts[monthKey] = 1;\n                    }\n                });\n                setMonthlyEventCounts(monthlyCounts);\n            } catch (error) {\n                console.error(\"Error fetching event data:\", error);\n            }\n        };\n        fetchData();\n    }, []);\n    const userChartOptions = {\n        width: 500,\n        height: 600,\n        data: [\n            {\n                typeCount: eventTypeCounts.Entertainment,\n                typeName: \"Entertainment\"\n            },\n            {\n                typeCount: eventTypeCounts.Decoration,\n                typeName: \"Decoration\"\n            },\n            {\n                typeCount: eventTypeCounts.Catering,\n                typeName: \"Catering\"\n            },\n            {\n                typeCount: eventTypeCounts.SpecialGuests,\n                typeName: \"SpecialGuests\"\n            },\n            {\n                typeCount: eventTypeCounts.Transportation,\n                typeName: \"Transportation\"\n            },\n            {\n                typeCount: eventTypeCounts.PartyHall,\n                typeName: \"Party hall\"\n            },\n            {\n                typeCount: eventTypeCounts.MarriageHall,\n                typeName: \"MarriageHall\"\n            }\n        ],\n        title: {\n            text: \"Users Composition\"\n        },\n        series: [\n            {\n                type: \"pie\",\n                angleKey: \"typeCount\",\n                labelKey: \"typeName\",\n                calloutLabelKey: \"typeName\",\n                sectorLabelKey: \"typeCount\",\n                sectorLabel: {\n                    color: \"white\",\n                    fontWeight: \"bold\"\n                }\n            }\n        ]\n    };\n    const monthlyEventChartOptions = {\n        title: {\n            text: \"Number of Events by Month\"\n        },\n        data: Object.keys(monthlyEventCounts).map((month)=>({\n                month,\n                count: monthlyEventCounts[month]\n            })),\n        series: [\n            {\n                type: \"bar\",\n                xKey: \"month\",\n                yKey: \"count\"\n            }\n        ]\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"flex\",\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_sidebar__WEBPACK_IMPORTED_MODULE_4__[\"default\"], {}, void 0, false, {\n                fileName: \"C:\\\\Users\\\\Shaye\\\\OneDrive\\\\Desktop\\\\cpoy\\\\event\\\\pages\\\\dashboard.tsx\",\n                lineNumber: 133,\n                columnNumber: 7\n            }, undefined),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"flex flex-col items-center justify-center\",\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"flex\",\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"bg-gray-300 p-10 rounded-md mx-24 mt-6 h-24\",\n                                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                    className: \"text-black text-lg\",\n                                    children: [\n                                        \"Number of Users: \",\n                                        userCount\n                                    ]\n                                }, void 0, true, {\n                                    fileName: \"C:\\\\Users\\\\Shaye\\\\OneDrive\\\\Desktop\\\\cpoy\\\\event\\\\pages\\\\dashboard.tsx\",\n                                    lineNumber: 139,\n                                    columnNumber: 13\n                                }, undefined)\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\Shaye\\\\OneDrive\\\\Desktop\\\\cpoy\\\\event\\\\pages\\\\dashboard.tsx\",\n                                lineNumber: 138,\n                                columnNumber: 11\n                            }, undefined),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"bg-gray-300 p-10 rounded-md  mx-16  mt-6 h-24\",\n                                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                    className: \"text-black text-lg\",\n                                    children: [\n                                        \"Number of Events: \",\n                                        eventCount\n                                    ]\n                                }, void 0, true, {\n                                    fileName: \"C:\\\\Users\\\\Shaye\\\\OneDrive\\\\Desktop\\\\cpoy\\\\event\\\\pages\\\\dashboard.tsx\",\n                                    lineNumber: 142,\n                                    columnNumber: 13\n                                }, undefined)\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\Shaye\\\\OneDrive\\\\Desktop\\\\cpoy\\\\event\\\\pages\\\\dashboard.tsx\",\n                                lineNumber: 141,\n                                columnNumber: 11\n                            }, undefined)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"C:\\\\Users\\\\Shaye\\\\OneDrive\\\\Desktop\\\\cpoy\\\\event\\\\pages\\\\dashboard.tsx\",\n                        lineNumber: 137,\n                        columnNumber: 9\n                    }, undefined),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"mt-6 flex justify-center items-center\",\n                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"text-center\",\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h2\", {\n                                    className: \"text-lg font-bold mb-2\",\n                                    children: \"Users Composition\"\n                                }, void 0, false, {\n                                    fileName: \"C:\\\\Users\\\\Shaye\\\\OneDrive\\\\Desktop\\\\cpoy\\\\event\\\\pages\\\\dashboard.tsx\",\n                                    lineNumber: 148,\n                                    columnNumber: 13\n                                }, undefined),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(ag_charts_react__WEBPACK_IMPORTED_MODULE_3__.AgChartsReact, {\n                                    options: userChartOptions\n                                }, void 0, false, {\n                                    fileName: \"C:\\\\Users\\\\Shaye\\\\OneDrive\\\\Desktop\\\\cpoy\\\\event\\\\pages\\\\dashboard.tsx\",\n                                    lineNumber: 149,\n                                    columnNumber: 13\n                                }, undefined)\n                            ]\n                        }, void 0, true, {\n                            fileName: \"C:\\\\Users\\\\Shaye\\\\OneDrive\\\\Desktop\\\\cpoy\\\\event\\\\pages\\\\dashboard.tsx\",\n                            lineNumber: 147,\n                            columnNumber: 11\n                        }, undefined)\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\Shaye\\\\OneDrive\\\\Desktop\\\\cpoy\\\\event\\\\pages\\\\dashboard.tsx\",\n                        lineNumber: 146,\n                        columnNumber: 9\n                    }, undefined),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"mt-6 flex justify-center items-center\",\n                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"text-center\",\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h2\", {\n                                    className: \"text-lg font-bold mb-2\",\n                                    children: \"Monthly Event Counts\"\n                                }, void 0, false, {\n                                    fileName: \"C:\\\\Users\\\\Shaye\\\\OneDrive\\\\Desktop\\\\cpoy\\\\event\\\\pages\\\\dashboard.tsx\",\n                                    lineNumber: 155,\n                                    columnNumber: 13\n                                }, undefined),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(ag_charts_react__WEBPACK_IMPORTED_MODULE_3__.AgChartsReact, {\n                                    options: monthlyEventChartOptions\n                                }, void 0, false, {\n                                    fileName: \"C:\\\\Users\\\\Shaye\\\\OneDrive\\\\Desktop\\\\cpoy\\\\event\\\\pages\\\\dashboard.tsx\",\n                                    lineNumber: 156,\n                                    columnNumber: 13\n                                }, undefined)\n                            ]\n                        }, void 0, true, {\n                            fileName: \"C:\\\\Users\\\\Shaye\\\\OneDrive\\\\Desktop\\\\cpoy\\\\event\\\\pages\\\\dashboard.tsx\",\n                            lineNumber: 154,\n                            columnNumber: 11\n                        }, undefined)\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\Shaye\\\\OneDrive\\\\Desktop\\\\cpoy\\\\event\\\\pages\\\\dashboard.tsx\",\n                        lineNumber: 153,\n                        columnNumber: 9\n                    }, undefined)\n                ]\n            }, void 0, true, {\n                fileName: \"C:\\\\Users\\\\Shaye\\\\OneDrive\\\\Desktop\\\\cpoy\\\\event\\\\pages\\\\dashboard.tsx\",\n                lineNumber: 136,\n                columnNumber: 7\n            }, undefined)\n        ]\n    }, void 0, true, {\n        fileName: \"C:\\\\Users\\\\Shaye\\\\OneDrive\\\\Desktop\\\\cpoy\\\\event\\\\pages\\\\dashboard.tsx\",\n        lineNumber: 132,\n        columnNumber: 5\n    }, undefined);\n};\n_s(Dashboard, \"yEgRiY4A4ynk/CcJ/j0+/1uBBYQ=\");\n_c = Dashboard;\n/* harmony default export */ __webpack_exports__[\"default\"] = (Dashboard);\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./pages/dashboard.tsx\n"));

/***/ }),

/***/ "./pages/sidebar.tsx":
/*!***************************!*\
  !*** ./pages/sidebar.tsx ***!
  \***************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/link */ \"./node_modules/next/link.js\");\n/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_link__WEBPACK_IMPORTED_MODULE_2__);\n\n\n\nconst Sidebar = ()=>{\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"flex\",\n        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n            className: \"bg-gradient-to-b from-blue-700 via-blue-800 to-gray-900  p-3 md:flex md:justify-between min-h-screen relative\",\n            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"ul\", {\n                className: \"md:items-center space-x-2\",\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"li\", {\n                        className: \"mx-2 mb-4\",\n                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)((next_link__WEBPACK_IMPORTED_MODULE_2___default()), {\n                            href: \"/userstable\",\n                            className: \"text-lg text-white hover:text-cyan-100 duration-500\",\n                            children: \"Users\"\n                        }, void 0, false, {\n                            fileName: \"C:\\\\Users\\\\Shaye\\\\OneDrive\\\\Desktop\\\\cpoy\\\\event\\\\pages\\\\sidebar.tsx\",\n                            lineNumber: 9,\n                            columnNumber: 9\n                        }, undefined)\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\Shaye\\\\OneDrive\\\\Desktop\\\\cpoy\\\\event\\\\pages\\\\sidebar.tsx\",\n                        lineNumber: 8,\n                        columnNumber: 7\n                    }, undefined),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"li\", {\n                        className: \"mx-4 mb-4\",\n                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)((next_link__WEBPACK_IMPORTED_MODULE_2___default()), {\n                            href: \"/eventable\",\n                            className: \"text-lg text-white hover:text-cyan-100 duration-500\",\n                            children: \"Events\"\n                        }, void 0, false, {\n                            fileName: \"C:\\\\Users\\\\Shaye\\\\OneDrive\\\\Desktop\\\\cpoy\\\\event\\\\pages\\\\sidebar.tsx\",\n                            lineNumber: 14,\n                            columnNumber: 9\n                        }, undefined)\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\Shaye\\\\OneDrive\\\\Desktop\\\\cpoy\\\\event\\\\pages\\\\sidebar.tsx\",\n                        lineNumber: 13,\n                        columnNumber: 7\n                    }, undefined)\n                ]\n            }, void 0, true, {\n                fileName: \"C:\\\\Users\\\\Shaye\\\\OneDrive\\\\Desktop\\\\cpoy\\\\event\\\\pages\\\\sidebar.tsx\",\n                lineNumber: 7,\n                columnNumber: 5\n            }, undefined)\n        }, void 0, false, {\n            fileName: \"C:\\\\Users\\\\Shaye\\\\OneDrive\\\\Desktop\\\\cpoy\\\\event\\\\pages\\\\sidebar.tsx\",\n            lineNumber: 6,\n            columnNumber: 5\n        }, undefined)\n    }, void 0, false, {\n        fileName: \"C:\\\\Users\\\\Shaye\\\\OneDrive\\\\Desktop\\\\cpoy\\\\event\\\\pages\\\\sidebar.tsx\",\n        lineNumber: 5,\n        columnNumber: 5\n    }, undefined);\n};\n_c = Sidebar;\n/* harmony default export */ __webpack_exports__[\"default\"] = (Sidebar);\nvar _c;\n$RefreshReg$(_c, \"Sidebar\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9wYWdlcy9zaWRlYmFyLnRzeCIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUF5QjtBQUNJO0FBQzdCLE1BQU1FLFVBQVU7SUFDZCxxQkFDRSw4REFBQ0M7UUFBSUMsV0FBVTtrQkFDZiw0RUFBQ0Q7WUFBSUMsV0FBVTtzQkFDZiw0RUFBQ0M7Z0JBQUdELFdBQVU7O2tDQUNaLDhEQUFDRTt3QkFBR0YsV0FBVTtrQ0FDWiw0RUFBQ0gsa0RBQUlBOzRCQUFDTSxNQUFLOzRCQUFjSCxXQUFVO3NDQUFzRDs7Ozs7Ozs7Ozs7a0NBSTNGLDhEQUFDRTt3QkFBR0YsV0FBVTtrQ0FDWiw0RUFBQ0gsa0RBQUlBOzRCQUFDTSxNQUFLOzRCQUFhSCxXQUFVO3NDQUF1RDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBUWpHO0tBbkJNRjtBQXFCTiwrREFBZUEsT0FBT0EsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9wYWdlcy9zaWRlYmFyLnRzeD85NDAwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcclxuaW1wb3J0IExpbmsgZnJvbSAnbmV4dC9saW5rJztcclxuY29uc3QgU2lkZWJhciA9ICgpID0+IHtcclxuICByZXR1cm4gKFxyXG4gICAgPGRpdiBjbGFzc05hbWU9J2ZsZXgnPlxyXG4gICAgPGRpdiBjbGFzc05hbWU9XCJiZy1ncmFkaWVudC10by1iIGZyb20tYmx1ZS03MDAgdmlhLWJsdWUtODAwIHRvLWdyYXktOTAwICBwLTMgbWQ6ZmxleCBtZDpqdXN0aWZ5LWJldHdlZW4gbWluLWgtc2NyZWVuIHJlbGF0aXZlXCI+XHJcbiAgICA8dWwgY2xhc3NOYW1lPVwibWQ6aXRlbXMtY2VudGVyIHNwYWNlLXgtMlwiPlxyXG4gICAgICA8bGkgY2xhc3NOYW1lPVwibXgtMiBtYi00XCI+XHJcbiAgICAgICAgPExpbmsgaHJlZj1cIi91c2Vyc3RhYmxlXCIgY2xhc3NOYW1lPVwidGV4dC1sZyB0ZXh0LXdoaXRlIGhvdmVyOnRleHQtY3lhbi0xMDAgZHVyYXRpb24tNTAwXCI+XHJcbiAgICAgICAgICBVc2Vyc1xyXG4gICAgICAgIDwvTGluaz5cclxuICAgICAgPC9saT5cclxuICAgICAgPGxpIGNsYXNzTmFtZT1cIm14LTQgbWItNFwiPlxyXG4gICAgICAgIDxMaW5rIGhyZWY9XCIvZXZlbnRhYmxlXCIgY2xhc3NOYW1lPVwidGV4dC1sZyB0ZXh0LXdoaXRlIGhvdmVyOnRleHQtY3lhbi0xMDAgZHVyYXRpb24tNTAwXCIgPlxyXG4gICAgICAgICAgRXZlbnRzXHJcbiAgICAgICAgPC9MaW5rPlxyXG4gICAgICA8L2xpPlxyXG4gICAgPC91bD5cclxuICA8L2Rpdj5cclxuICA8L2Rpdj5cclxuICApXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IFNpZGViYXI7Il0sIm5hbWVzIjpbIlJlYWN0IiwiTGluayIsIlNpZGViYXIiLCJkaXYiLCJjbGFzc05hbWUiLCJ1bCIsImxpIiwiaHJlZiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./pages/sidebar.tsx\n"));

/***/ }),

/***/ "./node_modules/ag-charts-react/dist/index.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/ag-charts-react/dist/index.mjs ***!
  \*****************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AgChartsReact: function() { return /* binding */ AgChartsReact; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var ag_charts_community__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ag-charts-community */ \"./node_modules/ag-charts-community/dist/package/main.esm.js\");\n\n\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _createSuper(Derived) {\n  return function () {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (_isNativeReflectConstruct()) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nvar AgChartsReact = /*#__PURE__*/function (_Component) {\n  _inherits(AgChartsReact, _Component);\n  var _super = _createSuper(AgChartsReact);\n  function AgChartsReact(props) {\n    var _this;\n    _classCallCheck(this, AgChartsReact);\n    _this = _super.call(this, props);\n    _this.props = props;\n    _this.chart = void 0;\n    _this.chartRef = void 0;\n    _this.chartRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.createRef)();\n    return _this;\n  }\n  _createClass(AgChartsReact, [{\n    key: \"render\",\n    value: function render() {\n      return (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', {\n        style: this.createStyleForDiv(),\n        ref: this.chartRef\n      });\n    }\n  }, {\n    key: \"createStyleForDiv\",\n    value: function createStyleForDiv() {\n      var _this$props$container;\n      return _objectSpread2({\n        height: '100%'\n      }, (_this$props$container = this.props.containerStyle) !== null && _this$props$container !== void 0 ? _this$props$container : {});\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n      var options = this.applyContainerIfNotSet(this.props.options);\n      var chart = ag_charts_community__WEBPACK_IMPORTED_MODULE_1__.AgCharts.create(options);\n      this.chart = chart;\n      chart.chart.waitForUpdate().then(function () {\n        var _this2$props$onChartR, _this2$props;\n        return (_this2$props$onChartR = (_this2$props = _this2.props).onChartReady) === null || _this2$props$onChartR === void 0 ? void 0 : _this2$props$onChartR.call(_this2$props, chart);\n      });\n    }\n  }, {\n    key: \"applyContainerIfNotSet\",\n    value: function applyContainerIfNotSet(propsOptions) {\n      if (propsOptions.container) {\n        return propsOptions;\n      }\n      return _objectSpread2(_objectSpread2({}, propsOptions), {}, {\n        container: this.chartRef.current\n      });\n    }\n  }, {\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps) {\n      this.processPropsChanges(this.props, nextProps);\n\n      // we want full control of the dom, as AG Charts doesn't use React internally,\n      // so for performance reasons we tell React we don't need render called after\n      // property changes.\n      return false;\n    }\n  }, {\n    key: \"processPropsChanges\",\n    value: function processPropsChanges(prevProps, nextProps) {\n      if (this.chart) {\n        ag_charts_community__WEBPACK_IMPORTED_MODULE_1__.AgCharts.update(this.chart, this.applyContainerIfNotSet(nextProps.options));\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.chart) {\n        this.chart.destroy();\n        this.chart = undefined;\n      }\n    }\n  }]);\n  return AgChartsReact;\n}(react__WEBPACK_IMPORTED_MODULE_0__.Component);\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/ag-charts-react/dist/index.mjs\n"));

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ var __webpack_exec__ = function(moduleId) { return __webpack_require__(__webpack_require__.s = moduleId); }
/******/ __webpack_require__.O(0, ["pages/_app","main"], function() { return __webpack_exec__("./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?absolutePagePath=C%3A%5CUsers%5CShaye%5COneDrive%5CDesktop%5Ccpoy%5Cevent%5Cpages%5Cdashboard.tsx&page=%2Fdashboard!"); });
/******/ var __webpack_exports__ = __webpack_require__.O();
/******/ _N_E = __webpack_exports__;
/******/ }
]);